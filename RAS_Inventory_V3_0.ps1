#Requires -Version 3.0
#This File is in Unicode format.  Do not edit in an ASCII editor. Notepad++ UTF-8-BOM

<#
.SYNOPSIS
	Creates a complete inventory of a V19.x or later Parallels Remote Application Server.
.DESCRIPTION
	Creates a complete inventory of a V19.x or later Parallels Remote Application Server 
	(RAS) using Microsoft PowerShell, Word, plain text, or HTML.
	
	The script requires at least PowerShell version 3 but runs best in version 5.

	Word is NOT needed to run the script. This script outputs in Text and HTML.
	The default output format is HTML.
	
	Creates an output file named Parallels_RAS.<fileextension>.
	
	You do NOT have to run this script on a server running RAS. This script was developed 
	and run from a Windows 10 VM.

	Word and PDF documents include a Cover Page, Table of Contents, and Footer.
	Includes support for the following language versions of Microsoft Word:
		Catalan
		Chinese
		Danish
		Dutch
		English
		Finnish
		French
		German
		Norwegian
		Portuguese
		Spanish
		Swedish

.PARAMETER ServerName
	Specifies which RAS server to use to run the script against.
	
	ServerName can be entered as the NetBIOS name, FQDN, localhost, or IP Address.
	
	If entered as localhost, the actual computer name is determined and used.
	
	If entered as an IP address, an attempt is made to determine and use the actual 
	computer name.
	
	Default value is LocalHost
.PARAMETER User
	Username to use for the connection to the RAS server.

	Default value is contained in $env:username
.PARAMETER RASSite
	Limit report to one RAS Site.
	
	Default value is all RAS Sites in the RAS Farm.
.PARAMETER HTML
	Creates an HTML file with an .html extension.
	
	HTML is now the default report format.
	
	This parameter is set True if no other output format is selected.
.PARAMETER Text
	Creates a formatted text file with a .txt extension.
	
	This parameter is disabled by default.
.PARAMETER Folder
	Specifies the optional output folder to save the output report. 
.PARAMETER AddDateTime
	Adds a date timestamp to the end of the file name.
	
	The timestamp is in the format of yyyy-MM-dd_HHmm.
	June 1, 2023 at 6PM is 2023-06-01_1800.
	
	Output filename will be ReportName_2023-06-01_1800.<ext>.
	
	This parameter is disabled by default.
	This parameter has an alias of ADT.
.PARAMETER Dev
	Clears errors at the beginning of the script.
	Outputs all errors to a text file at the end of the script.
	
	This is used when the script developer requests more troubleshooting data.
	The text file is placed in the same folder from where the script is run.
	
	This parameter is disabled by default.
.PARAMETER Log
	Generates a log file for troubleshooting.
.PARAMETER ScriptInfo
	Outputs information about the script to a text file.
	The text file is placed in the same folder from where the script is run.
	
	This parameter is disabled by default.
	This parameter has an alias of SI.
.PARAMETER ReportFooter
	Outputs a footer section at the end of the report.

	This parameter has an alias of RF.
	
	Report Footer
		Report information:
			Created with: <Script Name> - Release Date: <Script Release Date>
			Script version: <Script Version>
			Started on <Date Time in Local Format>
			Elapsed time: nn days, nn hours, nn minutes, nn.nn seconds
			Ran from domain <Domain Name> by user <Username>
			Ran from the folder <Folder Name>

	Script Name and Script Release date are script-specific variables.
	Start Date Time in Local Format is a script variable.
	Elapsed time is a calculated value.
	Domain Name is $env:USERDNSDOMAIN.
	Username is $env:USERNAME.
	Folder Name is a script variable.
.PARAMETER MSWord
	SaveAs DOCX file
	
	Microsoft Word is no longer the default report format.
	This parameter is disabled by default.
.PARAMETER PDF
	SaveAs PDF file instead of DOCX file.
	
	The PDF file is roughly 5X to 10X larger than the DOCX file.
	
	This parameter requires Microsoft Word to be installed.
	This parameter uses Word's SaveAs PDF capability.

	This parameter is disabled by default.
.PARAMETER CompanyAddress
	Company Address to use for the Cover Page if the Cover Page has the Address field.
	
	The following Cover Pages have an Address field:
		Banded (Word 2013/2016)
		Contrast (Word 2010)
		Exposure (Word 2010)
		Filigree (Word 2013/2016)
		Ion (Dark) (Word 2013/2016)
		Retrospect (Word 2013/2016)
		Semaphore (Word 2013/2016)
		Tiles (Word 2010)
		ViewMaster (Word 2013/2016)
		
	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CA.
.PARAMETER CompanyEmail
	Company Email to use for the Cover Page if the Cover Page has the Email field. 
	
	The following Cover Pages have an Email field:
		Facet (Word 2013/2016)
	
	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CE.
.PARAMETER CompanyFax
	Company Fax to use for the Cover Page if the Cover Page has the Fax field. 
	
	The following Cover Pages have a Fax field:
		Contrast (Word 2010)
		Exposure (Word 2010)
	
	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CF.
.PARAMETER CompanyName
	Company Name to use for the Cover Page. 
	The default value is contained in 
	HKCU:\Software\Microsoft\Office\Common\UserInfo\CompanyName or
	HKCU:\Software\Microsoft\Office\Common\UserInfo\Company, whichever is populated 
	on the computer running the script.

	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CN.
.PARAMETER CompanyPhone
	Company Phone to use for the Cover Page if the Cover Page has the Phone field. 
	
	The following Cover Pages have a Phone field:
		Contrast (Word 2010)
		Exposure (Word 2010)
	
	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CPh.
.PARAMETER CoverPage
	What Microsoft Word Cover Page to use.
	Only Word 2010, 2013, and 2016 are supported.
	(default cover pages in Word en-US)

	Valid input is:
		Alphabet (Word 2010. Works)
		Annual (Word 2010. Doesn't work well for this report)
		Austere (Word 2010. Works)
		Austin (Word 2010/2013/2016. Doesn't work in 2013 or 2016, mostly 
		works in 2010, but Subtitle/Subject & Author fields need moving
		after the title box is moved up)
		Banded (Word 2013/2016. Works)
		Conservative (Word 2010. Works)
		Contrast (Word 2010. Works)
		Cubicles (Word 2010. Works)
		Exposure (Word 2010. Works if you like looking sideways)
		Facet (Word 2013/2016. Works)
		Filigree (Word 2013/2016. Works)
		Grid (Word 2010/2013/2016. Works in 2010)
		Integral (Word 2013/2016. Works)
		Ion (Dark) (Word 2013/2016. Top date doesn't fit; box needs to be 
		manually resized or font changed to 8 point)
		Ion (Light) (Word 2013/2016. Top date doesn't fit; box needs to be 
		manually resized or font changed to 8 point)
		Mod (Word 2010. Works)
		Motion (Word 2010/2013/2016. Works if the top date is manually changed to 
		36 point)
		Newsprint (Word 2010. Works but the date is not populated)
		Perspective (Word 2010. Works)
		Pinstripes (Word 2010. Works)
		Puzzle (Word 2010. Top date doesn't fit; box needs to be manually 
		resized or font changed to 14 point)
		Retrospect (Word 2013/2016. Works)
		Semaphore (Word 2013/2016. Works)
		Sideline (Word 2010/2013/2016. Doesn't work in 2013 or 2016. Works in 
		2010)
		Slice (Dark) (Word 2013/2016. Doesn't work)
		Slice (Light) (Word 2013/2016. Doesn't work)
		Stacks (Word 2010. Works)
		Tiles (Word 2010. Date doesn't fit unless changed to 26 point)
		Transcend (Word 2010. Works)
		ViewMaster (Word 2013/2016. Works)
		Whisp (Word 2013/2016. Works)

	The default value is Sideline.
	This parameter has an alias of CP.
	This parameter is only valid with the MSWORD and PDF output parameters.
.PARAMETER UserName
	Username to use for the Cover Page and Footer.
	The default value is contained in $env:username
	This parameter has an alias of UN.
	This parameter is only valid with the MSWORD and PDF output parameters.
.PARAMETER SmtpPort
	Specifies the SMTP port for the SmtpServer. 
	The default is 25.
.PARAMETER SmtpServer
	Specifies the optional email server to send the output report(s). 
	
	If From or To are used, this is a required parameter.
.PARAMETER From
	Specifies the username for the From email address.
	
	If SmtpServer or To are used, this is a required parameter.
.PARAMETER To
	Specifies the username for the To email address.
	
	If SmtpServer or From are used, this is a required parameter.
.PARAMETER UseSSL
	Specifies whether to use SSL for the SmtpServer.
	The default is False.
.EXAMPLE
	PS C:\PSScript > .\RAS_Inventory_V3.0.ps1
	
	Outputs, by default to HTML.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript > .\RAS_Inventory_V3.0.ps1 -RASSite EMEASite
	
	Includes only data for the EMEASite.
	Outputs, by default to HTML.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript .\RAS_Inventory_V3.0.ps1 -MSWord -CompanyName "Carl Webster 
	Consulting" -CoverPage "Mod" -UserName "Carl Webster" -ComputerName RAS01

	Will use:
		Carl Webster Consulting for the Company Name.
		Mod for the Cover Page format.
		Carl Webster for the User Name.
		RAS server named RAS01 for the ComputerName.

	Outputs to Microsoft Word.
	Prompts for credentials for the RAS Server RAS01.
.EXAMPLE
	PS C:\PSScript .\RAS_Inventory_V3.0.ps1 -PDF -CN "Carl Webster Consulting" -CP 
	"Mod" -UN "Carl Webster"

	Will use:
		Carl Webster Consulting for the Company Name (alias CN).
		Mod for the Cover Page format (alias CP).
		Carl Webster for the User Name (alias UN).

	Outputs to PDF.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript .\RAS_Inventory_V3.0.ps1 -CompanyName "Sherlock Holmes 
	Consulting" -CoverPage Exposure -UserName "Dr. Watson" -CompanyAddress "221B Baker 
	Street, London, England" -CompanyFax "+44 1753 276600" -CompanyPhone "+44 1753 276200" 
	-MSWord
	
	Will use:
		Sherlock Holmes Consulting for the Company Name.
		Exposure for the Cover Page format.
		Dr. Watson for the User Name.
		221B Baker Street, London, England for the Company Address.
		+44 1753 276600 for the Company Fax.
		+44 1753 276200 for the Company Phone.

	Outputs to Microsoft Word.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript .\RAS_Inventory_V3.0.ps1 -CompanyName "Sherlock Holmes 
	Consulting" -CoverPage Facet -UserName "Dr. Watson" -CompanyEmail 
	SuperSleuth@SherlockHolmes.com
	-PDF

	Will use:
		Sherlock Holmes Consulting for the Company Name.
		Facet for the Cover Page format.
		Dr. Watson for the User Name.
		SuperSleuth@SherlockHolmes.com for the Company Email.

	Outputs to PDF.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript >.\RAS_Inventory_V3.0.ps1 -Dev -ScriptInfo -Log
	
	Creates an HTML report.
	
	Creates a text file named RASInventoryScriptErrors_yyyyMMddTHHmmssffff.txt that 
	contains up to the last 250 errors reported by the script.
	
	Creates a text file named RASInventoryScriptInfo_yyyy-MM-dd_HHmm.txt that 
	contains all the script parameters and other basic information.
	
	Creates a text file for transcript logging named 
	RASDocScriptTranscript_yyyyMMddTHHmmssffff.txt.
.EXAMPLE
	PS C:\PSScript > .\RAS_Inventory_V3.0.ps1 -SmtpServer mail.domain.tld -From 
	RASAdmin@domain.tld -To ITGroup@domain.tld -Text

	The script uses the email server mail.domain.tld, sending from RASAdmin@domain.tld 
	and sending to ITGroup@domain.tld.

	The script uses the default SMTP port 25 and does not use SSL.

	If the current user's credentials are not valid to send an email, the script prompts 
	the user to enter valid credentials.

	Outputs to a text file.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript > .\RAS_Inventory_V3.0.ps1 -SmtpServer mailrelay.domain.tld -From 
	Anonymous@domain.tld -To ITGroup@domain.tld	

	***SENDING UNAUTHENTICATED EMAIL***

	The script uses the email server mailrelay.domain.tld, sending from 
	anonymous@domain.tld and sending to ITGroup@domain.tld.

	To send an unauthenticated email using an email relay server requires the From email 
	account to use the name Anonymous.

	The script uses the default SMTP port 25 and does not use SSL.
	
	***GMAIL/G SUITE SMTP RELAY***
	https://support.google.com/a/answer/2956491?hl=en
	https://support.google.com/a/answer/176600?hl=en

	To send an email using a Gmail or g-suite account, you may have to turn ON the "Less 
	secure app access" option on your account.
	***GMAIL/G SUITE SMTP RELAY***

	The script generates an anonymous, secure password for the anonymous@domain.tld 
	account.

	Outputs, by default, to HTML.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript > .\RAS_Inventory_V3.0.ps1 -SmtpServer 
	labaddomain-com.mail.protection.outlook.com -UseSSL -From 
	SomeEmailAddress@labaddomain.com -To ITGroupDL@labaddomain.com	

	***OFFICE 365 Example***

	https://docs.microsoft.com/en-us/exchange/mail-flow-best-practices/how-to-set-up-a-multifunction-device-or-application-to-send-email-using-office-3
	
	This uses Option 2 from the above link.
	
	***OFFICE 365 Example***

	The script uses the email server labaddomain-com.mail.protection.outlook.com, sending 
	from SomeEmailAddress@labaddomain.com and sending to ITGroupDL@labaddomain.com.

	The script uses the default SMTP port 25 and SSL.

	Outputs, by default, to HTML.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript > .\RAS_Inventory_V3.0.ps1 -SmtpServer smtp.office365.com -SmtpPort 587
	-UseSSL -From Webster@CarlWebster.com -To ITGroup@CarlWebster.com	

	The script uses the email server smtp.office365.com on port 587 using SSL, sending from 
	webster@carlwebster.com and sending to ITGroup@carlwebster.com.

	If the current user's credentials are not valid to send an email, the script prompts 
	the user to enter valid credentials.

	Outputs, by default, to HTML.
	Prompts for credentials for the LocalHost RAS Server.
.EXAMPLE
	PS C:\PSScript > .\RAS_Inventory_V3.0.ps1 -SmtpServer smtp.gmail.com -SmtpPort 587
	-UseSSL -From Webster@CarlWebster.com -To ITGroup@CarlWebster.com	

	*** NOTE ***
	To send an email using a Gmail or g-suite account, you may have to turn ON the "Less 
	secure app access" option on your account.
	*** NOTE ***
	
	The script uses the email server smtp.gmail.com on port 587 using SSL, sending from 
	webster@gmail.com and sending to ITGroup@carlwebster.com.

	If the current user's credentials are not valid to send an email, the script prompts 
	the user to enter valid credentials.

	Outputs, by default, to HTML.
	Prompts for credentials for the LocalHost RAS Server.
.INPUTS
	None.  You cannot pipe objects to this script.
.OUTPUTS
	No objects are output from this script. This script creates a Word, PDF, HTML, or plain 
	text document.
.NOTES
	NAME: RAS_Inventory_V3.0.ps1
	VERSION: 3.01
	AUTHOR: Carl Webster
	LASTEDIT: April 7, 2023
#>


#thanks to @jeffwouters and Michael B. Smith for helping me with these parameters
[CmdletBinding(SupportsShouldProcess = $False, ConfirmImpact = "None", DefaultParameterSetName = "") ]

Param(
	[parameter(Mandatory=$False)] 
	[string]$ServerName="LocalHost",
	
	[parameter(Mandatory=$False)] 
	[string]$User=$env:username,
	
	[parameter(Mandatory=$False)] 
	[string]$RASSite="All",
	
	[parameter(Mandatory=$False)] 
	[Switch]$HTML=$False,

	[parameter(Mandatory=$False)] 
	[Switch]$Text=$False,

	[parameter(Mandatory=$False)] 
	[string]$Folder="",
	
	[parameter(Mandatory=$False)] 
	[Alias("ADT")]
	[Switch]$AddDateTime=$False,
	
	[parameter(Mandatory=$False)] 
	[Switch]$Dev=$False,
	
	[parameter(Mandatory=$False)] 
	[Switch]$Log=$False,
	
	[parameter(Mandatory=$False)] 
	[Alias("SI")]
	[Switch]$ScriptInfo=$False,
	
	[parameter(Mandatory=$False)] 
	[Alias("RF")]
	[Switch]$ReportFooter=$False,

	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Switch]$MSWord=$False,

	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Switch]$PDF=$False,

	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Alias("CA")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyAddress="",
    
	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Alias("CE")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyEmail="",
    
	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Alias("CF")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyFax="",
    
	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Alias("CN")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyName="",
    
	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Alias("CPh")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyPhone="",
    
	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Alias("CP")]
	[ValidateNotNullOrEmpty()]
	[string]$CoverPage="Sideline", 

	[parameter(ParameterSetName="WordPDF",Mandatory=$False)] 
	[Alias("UN")]
	[ValidateNotNullOrEmpty()]
	[string]$UserName=$env:username,

	[parameter(Mandatory=$False)] 
	[int]$SmtpPort=25,

	[parameter(Mandatory=$False)] 
	[string]$SmtpServer="",

	[parameter(Mandatory=$False)] 
	[string]$From="",

	[parameter(Mandatory=$False)] 
	[string]$To="",

	[parameter(Mandatory=$False)] 
	[switch]$UseSSL=$False
	
	)

	
#webster@carlwebster.com
#@carlwebster on Twitter
#http://www.CarlWebster.com
#Created on February 9, 2018

#Version 1.0 released to the community on 5-August-2020
#Work on 2.0 started on 20-Sep-2020
#Work on 3.0 started on 15-Nov-2022

#Version 3.01
#	In Function OutputPublishingSettings, add AVDApp and AVDDesktop to WVDApp and WVDDesktop
#	In Function OutputRASMailboxSettings, added the missing enum fixed in 19.2
#		YesTLS12IfAvailable	- Use TLS 1.2 if available
#	In Function OutputSite, add code to handle the different types of Registry Optimizations
#		REG_DWORD
#		REG_EXPAND_SZ
#		REG_MULTI_SZ
#		REG_QWORD
#		REG_SZ
#
#Version 3.00 25-Mar-2023
#
#	Added Connection Brokers/Auto-promotion
#	Added to Secure Gateway/Network "Only allow Let's Encrypt verification"
#	Added Video Capture Devices policy settings
#	Changed "Keep existing VRRP/keepalive settings" to "Keep existing VRRP/keepalived settings" for HALB Properties/Advanced
#	Comment out FSLogix replicate settings as I don't see them in the console now
#	Removed policy properties that no longer exist
#	
#	There are over 1500 differences between the last 2.5 script update and this new 3.00.
#		The HTML diff file is over 25MB in size. 
#		If you really want to see all the changes between 2.5 and 3.0, look at the diff file in GitHub.
#

Function AbortScript
{
	If($MSWord -or $PDF)
	{
		Write-Verbose "$(Get-Date -Format G): System Cleanup"
		If(Test-Path variable:global:word)
		{
			$Script:Word.quit()
			[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Script:Word) | Out-Null
			Remove-Variable -Name word -Scope Global 4>$Null
		}
	}
	[gc]::collect() 
	[gc]::WaitForPendingFinalizers()

	If($MSWord -or $PDF)
	{
		#is the winword Process still running? kill it

		#find out our session (usually "1" except on TS/RDC or Citrix)
		$SessionID = (Get-Process -PID $PID).SessionId

		#Find out if winword running in our session
		$wordprocess = ((Get-Process 'WinWord' -ea 0) | Where-Object {$_.SessionId -eq $SessionID}) | Select-Object -Property Id 
		If( $wordprocess -and $wordprocess.Id -gt 0)
		{
			Write-Verbose "$(Get-Date -Format G): WinWord Process is still running. Attempting to stop WinWord Process # $($wordprocess.Id)"
			Stop-Process $wordprocess.Id -EA 0
		}
	}
	
	Write-Verbose "$(Get-Date -Format G): Script has been aborted"
	#stop transcript logging
	If($Log -eq $True) 
	{
		If($Script:StartLog -eq $True) 
		{
			try 
			{
				Stop-Transcript | Out-Null
				Write-Verbose "$(Get-Date -Format G): $Script:LogPath is ready for use"
			} 
			catch 
			{
				Write-Verbose "$(Get-Date -Format G): Transcript/log stop failed"
			}
		}
	}
	$ErrorActionPreference = $SaveEAPreference
	Exit
}

Set-StrictMode -Version Latest

#force  on
$PSDefaultParameterValues = @{"*:Verbose"=$True}
$SaveEAPreference         = $ErrorActionPreference
$ErrorActionPreference    = 'SilentlyContinue'
$Error.Clear()

$Script:emailCredentials  = $Null
$script:MyVersion         = '3.01'
$Script:ScriptName        = "RAS_Inventory_V3.0.ps1"
$tmpdate                  = [datetime] "04/07/2023"
$Script:ReleaseDate       = $tmpdate.ToUniversalTime().ToShortDateString()

If($MSWord -eq $False -and $PDF -eq $False -and $Text -eq $False -and $HTML -eq $False)
{
	$HTML = $True
}

If($MSWord)
{
	Write-Verbose "$(Get-Date): MSWord is set"
}
If($PDF)
{
	Write-Verbose "$(Get-Date -Format G): PDF is set"
}
If($Text)
{
	Write-Verbose "$(Get-Date -Format G): Text is set"
}
If($HTML)
{
	Write-Verbose "$(Get-Date -Format G): HTML is set"
}

If($Folder -ne "")
{
	Write-Verbose "$(Get-Date -Format G): Testing folder path"
	#does it exist
	If(Test-Path $Folder -EA 0)
	{
		#it exists, now check to see if it is a folder and not a file
		If(Test-Path $Folder -pathType Container -EA 0)
		{
			#it exists and it is a folder
			Write-Verbose "$(Get-Date -Format G): Folder path $Folder exists and is a folder"
		}
		Else
		{
			#it exists but it is a file not a folder
#Do not indent the following write-error lines. Doing so will mess up the console formatting of the error message.
			Write-Error "
			`n`n
	Folder $Folder is a file, not a folder.
			`n`n
	Script cannot continue.
			`n`n"
			Exit
		}
	}
	Else
	{
		#does not exist
		Write-Error "
		`n`n
	Folder $Folder does not exist.
		`n`n
	Script cannot continue.
		`n`n
		"
		Exit
	}
}

If($Folder -eq "")
{
	$Script:pwdpath = $pwd.Path
}
Else
{
	$Script:pwdpath = $Folder
}

If($Script:pwdpath.EndsWith("\"))
{
	#remove the trailing \
	$Script:pwdpath = $Script:pwdpath.SubString(0, ($Script:pwdpath.Length - 1))
}

If($Log) 
{
	#start transcript logging
	$Script:LogPath = "$Script:pwdpath\RASDocScriptTranscript_$(Get-Date -f FileDateTime).txt"
	
	try 
	{
		Start-Transcript -Path $Script:LogPath -Force -Verbose:$false | Out-Null
		Write-Verbose "$(Get-Date -Format G): Transcript/log started at $Script:LogPath"
		$Script:StartLog = $true
	} 
	catch 
	{
		Write-Verbose "$(Get-Date -Format G): Transcript/log failed at $Script:LogPath"
		$Script:StartLog = $false
	}
}

If($Dev)
{
	$Error.Clear()
	$Script:DevErrorFile = "$Script:pwdpath\RASInventoryScriptErrors_$(Get-Date -f FileDateTime).txt"
}

If(![String]::IsNullOrEmpty($SmtpServer) -and [String]::IsNullOrEmpty($From) -and [String]::IsNullOrEmpty($To))
{
	Write-Error "
	`n`n
	`t`t
	You specified an SmtpServer but did not include a From or To email address.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	Exit
}
If(![String]::IsNullOrEmpty($SmtpServer) -and [String]::IsNullOrEmpty($From) -and ![String]::IsNullOrEmpty($To))
{
	Write-Error "
	`n`n
	`t`t
	You specified an SmtpServer and a To email address but did not include a From email address.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	Exit
}
If(![String]::IsNullOrEmpty($SmtpServer) -and [String]::IsNullOrEmpty($To) -and ![String]::IsNullOrEmpty($From))
{
	Write-Error "
	`n`n
	`t`t
	You specified an SmtpServer and a From email address but did not include a To email address.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	Exit
}
If(![String]::IsNullOrEmpty($From) -and ![String]::IsNullOrEmpty($To) -and [String]::IsNullOrEmpty($SmtpServer))
{
	Write-Error "
	`n`n
	`t`t
	You specified From and To email addresses but did not include the SmtpServer.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	Exit
}
If(![String]::IsNullOrEmpty($From) -and [String]::IsNullOrEmpty($SmtpServer))
{
	Write-Error "
	`n`n
	`t`t
	You specified a From email address but did not include the SmtpServer.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	Exit
}
If(![String]::IsNullOrEmpty($To) -and [String]::IsNullOrEmpty($SmtpServer))
{
	Write-Error "
	`n`n
	`t`t
	You specified a To email address but did not include the SmtpServer.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	Exit
}
#endregion

#region initialize variables for Word, HTML, and text
[string]$Script:RunningOS = (Get-WmiObject -class Win32_OperatingSystem -EA 0).Caption

If($MSWord -or $PDF)
{
	#the following values were attained from 
	#http://groovy.codehaus.org/modules/scriptom/1.6.0/scriptom-office-2K3-tlb/apidocs/
	#http://msdn.microsoft.com/en-us/library/office/aa211923(v=office.11).aspx
	[int]$wdAlignPageNumberRight  = 2
	[int]$wdMove                  = 0
	[int]$wdSeekMainDocument      = 0
	[int]$wdSeekPrimaryFooter     = 4
	[int]$wdStory                 = 6
	#[int]$wdColorBlack            = 0
	#[int]$wdColorGray05           = 15987699 
	[int]$wdColorGray15           = 14277081
	#[int]$wdColorRed              = 255
	[int]$wdColorWhite            = 16777215
	#[int]$wdColorYellow           = 65535
	[int]$wdWord2007              = 12
	[int]$wdWord2010              = 14
	[int]$wdWord2013              = 15
	[int]$wdWord2016              = 16
	[int]$wdFormatDocumentDefault = 16
	[int]$wdFormatPDF             = 17
	#http://blogs.technet.com/b/heyscriptingguy/archive/2006/03/01/how-can-i-right-align-a-single-column-in-a-word-table.aspx
	#http://msdn.microsoft.com/en-us/library/office/ff835817%28v=office.15%29.aspx
	#[int]$wdAlignParagraphLeft = 0
	#[int]$wdAlignParagraphCenter = 1
	#[int]$wdAlignParagraphRight = 2
	#http://msdn.microsoft.com/en-us/library/office/ff193345%28v=office.15%29.aspx
	#[int]$wdCellAlignVerticalTop = 0
	#[int]$wdCellAlignVerticalCenter = 1
	#[int]$wdCellAlignVerticalBottom = 2
	#http://msdn.microsoft.com/en-us/library/office/ff844856%28v=office.15%29.aspx
	[int]$wdAutoFitFixed = 0
	[int]$wdAutoFitContent = 1
	#[int]$wdAutoFitWindow = 2
	#http://msdn.microsoft.com/en-us/library/office/ff821928%28v=office.15%29.aspx
	#[int]$wdAdjustNone = 0
	[int]$wdAdjustProportional = 1
	#[int]$wdAdjustFirstColumn = 2
	#[int]$wdAdjustSameWidth = 3

	[int]$PointsPerTabStop = 36
	[int]$Indent0TabStops = 0 * $PointsPerTabStop
	#[int]$Indent1TabStops = 1 * $PointsPerTabStop
	#[int]$Indent2TabStops = 2 * $PointsPerTabStop
	#[int]$Indent3TabStops = 3 * $PointsPerTabStop
	#[int]$Indent4TabStops = 4 * $PointsPerTabStop

	# http://www.thedoctools.com/index.php?show=wt_style_names_english_danish_german_french
	[int]$wdStyleHeading1 = -2
	[int]$wdStyleHeading2 = -3
	[int]$wdStyleHeading3 = -4
	[int]$wdStyleHeading4 = -5
	[int]$wdStyleHeading5 = -6
	[int]$wdStyleNoSpacing = -158
	[int]$wdTableGrid = -155
	#[int]$wdTableLightListAccent3 = -206

	#http://groovy.codehaus.org/modules/scriptom/1.6.0/scriptom-office-2K3-tlb/apidocs/org/codehaus/groovy/scriptom/tlb/office/word/WdLineStyle.html
	[int]$wdLineStyleNone = 0
	[int]$wdLineStyleSingle = 1

	[int]$wdHeadingFormatTrue = -1
	#[int]$wdHeadingFormatFalse = 0 
}

If($HTML)
{
    $Script:htmlredmask       = "#FF0000" 4>$Null
    $Script:htmlcyanmask      = "#00FFFF" 4>$Null
    $Script:htmlbluemask      = "#0000FF" 4>$Null
    $Script:htmldarkbluemask  = "#0000A0" 4>$Null
    $Script:htmllightbluemask = "#ADD8E6" 4>$Null
    $Script:htmlpurplemask    = "#800080" 4>$Null
    $Script:htmlyellowmask    = "#FFFF00" 4>$Null
    $Script:htmllimemask      = "#00FF00" 4>$Null
    $Script:htmlmagentamask   = "#FF00FF" 4>$Null
    $Script:htmlwhitemask     = "#FFFFFF" 4>$Null
    $Script:htmlsilvermask    = "#C0C0C0" 4>$Null
    $Script:htmlgraymask      = "#808080" 4>$Null
    $Script:htmlblackmask     = "#000000" 4>$Null
    $Script:htmlorangemask    = "#FFA500" 4>$Null
    $Script:htmlmaroonmask    = "#800000" 4>$Null
    $Script:htmlgreenmask     = "#008000" 4>$Null
    $Script:htmlolivemask     = "#808000" 4>$Null

    $Script:htmlbold        = 1 4>$Null
    $Script:htmlitalics     = 2 4>$Null
    $Script:htmlred         = 4 4>$Null
    $Script:htmlcyan        = 8 4>$Null
    $Script:htmlblue        = 16 4>$Null
    $Script:htmldarkblue    = 32 4>$Null
    $Script:htmllightblue   = 64 4>$Null
    $Script:htmlpurple      = 128 4>$Null
    $Script:htmlyellow      = 256 4>$Null
    $Script:htmllime        = 512 4>$Null
    $Script:htmlmagenta     = 1024 4>$Null
    $Script:htmlwhite       = 2048 4>$Null
    $Script:htmlsilver      = 4096 4>$Null
    $Script:htmlgray        = 8192 4>$Null
    $Script:htmlolive       = 16384 4>$Null
    $Script:htmlorange      = 32768 4>$Null
    $Script:htmlmaroon      = 65536 4>$Null
    $Script:htmlgreen       = 131072 4>$Null
	$Script:htmlblack       = 262144 4>$Null

	$Script:htmlsb          = ( $htmlsilver -bor $htmlBold ) ## point optimization

	$Script:htmlColor = 
	@{
		$htmlred       = $htmlredmask
		$htmlcyan      = $htmlcyanmask
		$htmlblue      = $htmlbluemask
		$htmldarkblue  = $htmldarkbluemask
		$htmllightblue = $htmllightbluemask
		$htmlpurple    = $htmlpurplemask
		$htmlyellow    = $htmlyellowmask
		$htmllime      = $htmllimemask
		$htmlmagenta   = $htmlmagentamask
		$htmlwhite     = $htmlwhitemask
		$htmlsilver    = $htmlsilvermask
		$htmlgray      = $htmlgraymask
		$htmlolive     = $htmlolivemask
		$htmlorange    = $htmlorangemask
		$htmlmaroon    = $htmlmaroonmask
		$htmlgreen     = $htmlgreenmask
		$htmlblack     = $htmlblackmask
	}
}
#endregion

#region word specific functions
Function SetWordHashTable
{
	Param([string]$CultureCode)

	#optimized by Michael B. Smith
	
	# DE and FR translations for Word 2010 by Vladimir Radojevic
	# Vladimir.Radojevic@Commerzreal.com

	# DA translations for Word 2010 by Thomas Daugaard
	# Citrix Infrastructure Specialist at edgemo A/S

	# CA translations by Javier Sanchez 
	# CEO & Founder 101 Consulting

	#ca - Catalan
	#da - Danish
	#de - German
	#en - English
	#es - Spanish
	#fi - Finnish
	#fr - French
	#nb - Norwegian
	#nl - Dutch
	#pt - Portuguese
	#sv - Swedish
	#zh - Chinese
	
	[string]$toc = $(
		Switch ($CultureCode)
		{
			'ca-'	{ 'Taula automática 2'; Break }
			'da-'	{ 'Automatisk tabel 2'; Break }
			#'de-'	{ 'Automatische Tabelle 2'; Break }
			'de-'	{ 'Automatisches Verzeichnis 2'; Break } #changed 6-feb-2022 rene bigler
			'en-'	{ 'Automatic Table 2'; Break }
			'es-'	{ 'Tabla automática 2'; Break }
			'fi-'	{ 'Automaattinen taulukko 2'; Break }
			'fr-'	{ 'Table automatique 2'; Break }
			'nb-'	{ 'Automatisk tabell 2'; Break }
			'nl-'	{ 'Automatische inhoudsopgave 2'; Break }
			'pt-'	{ 'Sumário Automático 2'; Break }
			'sv-'	{ 'Automatisk innehållsförteckn2'; Break }
			'zh-'	{ '自动目录 2'; Break }
		}
	)

	$Script:myHash                      = @{}
	$Script:myHash.Word_TableOfContents = $toc
	$Script:myHash.Word_NoSpacing       = $wdStyleNoSpacing
	$Script:myHash.Word_Heading1        = $wdStyleheading1
	$Script:myHash.Word_Heading2        = $wdStyleheading2
	$Script:myHash.Word_Heading3        = $wdStyleheading3
	$Script:myHash.Word_Heading4        = $wdStyleheading4
	$Script:myHash.Word_Heading5        = $wdStyleheading5
	$Script:myHash.Word_TableGrid       = $wdTableGrid
}

Function GetCulture
{
	Param([int]$WordValue)
	
	#codes obtained from http://support.microsoft.com/kb/221435
	#http://msdn.microsoft.com/en-us/library/bb213877(v=office.12).aspx
	$CatalanArray = 1027
	$ChineseArray = 2052,3076,5124,4100
	$DanishArray = 1030
	$DutchArray = 2067, 1043
	$EnglishArray = 3081, 10249, 4105, 9225, 6153, 8201, 5129, 13321, 7177, 11273, 2057, 1033, 12297
	$FinnishArray = 1035
	$FrenchArray = 2060, 1036, 11276, 3084, 12300, 5132, 13324, 6156, 8204, 10252, 7180, 9228, 4108
	$GermanArray = 1031, 3079, 5127, 4103, 2055
	$NorwegianArray = 1044, 2068
	$PortugueseArray = 1046, 2070
	$SpanishArray = 1034, 11274, 16394, 13322, 9226, 5130, 7178, 12298, 17418, 4106, 18442, 19466, 6154, 15370, 10250, 20490, 3082, 14346, 8202
	$SwedishArray = 1053, 2077

	#ca - Catalan
	#da - Danish
	#de - German
	#en - English
	#es - Spanish
	#fi - Finnish
	#fr - French
	#nb - Norwegian
	#nl - Dutch
	#pt - Portuguese
	#sv - Swedish
	#zh - Chinese

	Switch ($WordValue)
	{
		{$CatalanArray -contains $_}	{$CultureCode = "ca-"}
		{$ChineseArray -contains $_}	{$CultureCode = "zh-"}
		{$DanishArray -contains $_}		{$CultureCode = "da-"}
		{$DutchArray -contains $_}		{$CultureCode = "nl-"}
		{$EnglishArray -contains $_}	{$CultureCode = "en-"}
		{$FinnishArray -contains $_}	{$CultureCode = "fi-"}
		{$FrenchArray -contains $_}		{$CultureCode = "fr-"}
		{$GermanArray -contains $_}		{$CultureCode = "de-"}
		{$NorwegianArray -contains $_}	{$CultureCode = "nb-"}
		{$PortugueseArray -contains $_}	{$CultureCode = "pt-"}
		{$SpanishArray -contains $_}	{$CultureCode = "es-"}
		{$SwedishArray -contains $_}	{$CultureCode = "sv-"}
		Default {$CultureCode = "en-"}
	}
	
	Return $CultureCode
}

Function ValidateCoverPage
{
	Param([int]$xWordVersion, [string]$xCP, [string]$CultureCode)
	
	$xArray = ""
	
	Switch ($CultureCode)
	{
		'ca-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "En bandes", "Faceta", "Filigrana",
					"Integral", "Ió (clar)", "Ió (fosc)", "Línia lateral",
					"Moviment", "Quadrícula", "Retrospectiu", "Sector (clar)",
					"Sector (fosc)", "Semàfor", "Visualització principal", "Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("Austin", "En bandes", "Faceta", "Filigrana",
					"Integral", "Ió (clar)", "Ió (fosc)", "Línia lateral",
					"Moviment", "Quadrícula", "Retrospectiu", "Sector (clar)",
					"Sector (fosc)", "Semàfor", "Visualització", "Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabet", "Anual", "Austin", "Conservador",
					"Contrast", "Cubicles", "Diplomàtic", "Exposició",
					"Línia lateral", "Mod", "Mosiac", "Moviment", "Paper de diari",
					"Perspectiva", "Piles", "Quadrícula", "Sobri",
					"Transcendir", "Trencaclosques")
				}
			}

		'da-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "BevægElse", "Brusen", "Facet", "Filigran", 
					"Gitter", "Integral", "Ion (lys)", "Ion (mørk)", 
					"Retro", "Semafor", "Sidelinje", "Stribet", 
					"Udsnit (lys)", "Udsnit (mørk)", "Visningsmaster")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("BevægElse", "Brusen", "Ion (lys)", "Filigran",
					"Retro", "Semafor", "Visningsmaster", "Integral",
					"Facet", "Gitter", "Stribet", "Sidelinje", "Udsnit (lys)",
					"Udsnit (mørk)", "Ion (mørk)", "Austin")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("BevægElse", "Moderat", "Perspektiv", "Firkanter",
					"Overskrid", "Alfabet", "Kontrast", "Stakke", "Fliser", "Gåde",
					"Gitter", "Austin", "Eksponering", "Sidelinje", "Enkel",
					"Nålestribet", "Årlig", "Avispapir", "Tradionel")
				}
			}

		'de-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Bewegung", "Facette", "Filigran", 
					"Gebändert", "Integral", "Ion (dunkel)", "Ion (hell)", 
					"Pfiff", "Randlinie", "Raster", "Rückblick", 
					"Segment (dunkel)", "Segment (hell)", "Semaphor", 
					"ViewMaster")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("Semaphor", "Segment (hell)", "Ion (hell)",
					"Raster", "Ion (dunkel)", "Filigran", "Rückblick", "Pfiff",
					"ViewMaster", "Segment (dunkel)", "Verbunden", "Bewegung",
					"Randlinie", "Austin", "Integral", "Facette")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alphabet", "Austin", "Bewegung", "Durchscheinend",
					"Herausgestellt", "Jährlich", "Kacheln", "Kontrast", "Kubistisch",
					"Modern", "Nadelstreifen", "Perspektive", "Puzzle", "Randlinie",
					"Raster", "Schlicht", "Stapel", "Traditionell", "Zeitungspapier")
				}
			}

		'en-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Banded", "Facet", "Filigree", "Grid",
					"Integral", "Ion (Dark)", "Ion (Light)", "Motion", "Retrospect",
					"Semaphore", "Sideline", "Slice (Dark)", "Slice (Light)", "ViewMaster",
					"Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alphabet", "Annual", "Austere", "Austin", "Conservative",
					"Contrast", "Cubicles", "Exposure", "Grid", "Mod", "Motion", "Newsprint",
					"Perspective", "Pinstripes", "Puzzle", "Sideline", "Stacks", "Tiles", "Transcend")
				}
			}

		'es-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Con bandas", "Cortar (oscuro)", "Cuadrícula", 
					"Whisp", "Faceta", "Filigrana", "Integral", "Ion (claro)", 
					"Ion (oscuro)", "Línea lateral", "Movimiento", "Retrospectiva", 
					"Semáforo", "Slice (luz)", "Vista principal", "Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("Whisp", "Vista principal", "Filigrana", "Austin",
					"Slice (luz)", "Faceta", "Semáforo", "Retrospectiva", "Cuadrícula",
					"Movimiento", "Cortar (oscuro)", "Línea lateral", "Ion (oscuro)",
					"Ion (claro)", "Integral", "Con bandas")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabeto", "Anual", "Austero", "Austin", "Conservador",
					"Contraste", "Cuadrícula", "Cubículos", "Exposición", "Línea lateral",
					"Moderno", "Mosaicos", "Movimiento", "Papel periódico",
					"Perspectiva", "Pilas", "Puzzle", "Rayas", "Sobrepasar")
				}
			}

		'fi-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Filigraani", "Integraali", "Ioni (tumma)",
					"Ioni (vaalea)", "Opastin", "Pinta", "Retro", "Sektori (tumma)",
					"Sektori (vaalea)", "Vaihtuvavärinen", "ViewMaster", "Austin",
					"Kuiskaus", "Liike", "Ruudukko", "Sivussa")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("Filigraani", "Integraali", "Ioni (tumma)",
					"Ioni (vaalea)", "Opastin", "Pinta", "Retro", "Sektori (tumma)",
					"Sektori (vaalea)", "Vaihtuvavärinen", "ViewMaster", "Austin",
					"Kiehkura", "Liike", "Ruudukko", "Sivussa")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Aakkoset", "Askeettinen", "Austin", "Kontrasti",
					"Laatikot", "Liike", "Liituraita", "Mod", "Osittain peitossa",
					"Palapeli", "Perinteinen", "Perspektiivi", "Pinot", "Ruudukko",
					"Ruudut", "Sanomalehtipaperi", "Sivussa", "Vuotuinen", "Ylitys")
				}
			}

		'fr-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("À bandes", "Austin", "Facette", "Filigrane", 
					"Guide", "Intégrale", "Ion (clair)", "Ion (foncé)", 
					"Lignes latérales", "Quadrillage", "Rétrospective", "Secteur (clair)", 
					"Secteur (foncé)", "Sémaphore", "ViewMaster", "Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alphabet", "Annuel", "Austère", "Austin", 
					"Blocs empilés", "Classique", "Contraste", "Emplacements de bureau", 
					"Exposition", "Guide", "Ligne latérale", "Moderne", 
					"Mosaïques", "Mots croisés", "Papier journal", "Perspective",
					"Quadrillage", "Rayures fines", "Transcendant")
				}
			}

		'nb-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "BevegElse", "Dempet", "Fasett", "Filigran",
					"Integral", "Ion (lys)", "Ion (mørk)", "Retrospekt", "Rutenett",
					"Sektor (lys)", "Sektor (mørk)", "Semafor", "Sidelinje", "Stripet",
					"ViewMaster")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabet", "Årlig", "Avistrykk", "Austin", "Avlukker",
					"BevegElse", "Engasjement", "Enkel", "Fliser", "Konservativ",
					"Kontrast", "Mod", "Perspektiv", "Puslespill", "Rutenett", "Sidelinje",
					"Smale striper", "Stabler", "Transcenderende")
				}
			}

		'nl-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Beweging", "Facet", "Filigraan", "Gestreept",
					"Integraal", "Ion (donker)", "Ion (licht)", "Raster",
					"Segment (Light)", "Semafoor", "Slice (donker)", "Spriet",
					"Terugblik", "Terzijde", "ViewMaster")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Aantrekkelijk", "Alfabet", "Austin", "Bescheiden",
					"Beweging", "Blikvanger", "Contrast", "Eenvoudig", "Jaarlijks",
					"Krantenpapier", "Krijtstreep", "Kubussen", "Mod", "Perspectief",
					"Puzzel", "Raster", "Stapels",
					"Tegels", "Terzijde")
				}
			}

		'pt-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Animação", "Austin", "Em Tiras", "Exibição Mestra",
					"Faceta", "Fatia (Clara)", "Fatia (Escura)", "Filete", "Filigrana", 
					"Grade", "Integral", "Íon (Claro)", "Íon (Escuro)", "Linha Lateral",
					"Retrospectiva", "Semáforo")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabeto", "Animação", "Anual", "Austero", "Austin", "Baias",
					"Conservador", "Contraste", "Exposição", "Grade", "Ladrilhos",
					"Linha Lateral", "Listras", "Mod", "Papel Jornal", "Perspectiva", "Pilhas",
					"Quebra-cabeça", "Transcend")
				}
			}

		'sv-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Band", "Fasett", "Filigran", "Integrerad", "Jon (ljust)",
					"Jon (mörkt)", "Knippe", "Rutnät", "RörElse", "Sektor (ljus)", "Sektor (mörk)",
					"Semafor", "Sidlinje", "VisaHuvudsida", "Återblick")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabetmönster", "Austin", "Enkelt", "Exponering", "Konservativt",
					"Kontrast", "Kritstreck", "Kuber", "Perspektiv", "Plattor", "Pussel", "Rutnät",
					"RörElse", "Sidlinje", "Sobert", "Staplat", "Tidningspapper", "Årligt",
					"Övergående")
				}
			}

		'zh-'	{
				If($xWordVersion -eq $wdWord2010 -or $xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ('奥斯汀', '边线型', '花丝', '怀旧', '积分',
					'离子(浅色)', '离子(深色)', '母版型', '平面', '切片(浅色)',
					'切片(深色)', '丝状', '网格', '镶边', '信号灯',
					'运动型')
				}
			}

		Default	{
					If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
					{
						$xArray = ("Austin", "Banded", "Facet", "Filigree", "Grid",
						"Integral", "Ion (Dark)", "Ion (Light)", "Motion", "Retrospect",
						"Semaphore", "Sideline", "Slice (Dark)", "Slice (Light)", "ViewMaster",
						"Whisp")
					}
					ElseIf($xWordVersion -eq $wdWord2010)
					{
						$xArray = ("Alphabet", "Annual", "Austere", "Austin", "Conservative",
						"Contrast", "Cubicles", "Exposure", "Grid", "Mod", "Motion", "Newsprint",
						"Perspective", "Pinstripes", "Puzzle", "Sideline", "Stacks", "Tiles", "Transcend")
					}
				}
	}
	
	If($xArray -contains $xCP)
	{
		$xArray = $Null
		Return $True
	}
	Else
	{
		$xArray = $Null
		Return $False
	}
}

Function CheckWordPrereq
{
	If((Test-Path  REGISTRY::HKEY_CLASSES_ROOT\Word.Application) -eq $False)
	{
		Write-Host "
		`n
		This script directly outputs to Microsoft Word, please install Microsoft Word
		`n"
		AbortScript
	}

	#find out our session (usually "1" except on TS/RDC or Citrix)
	$SessionID = (Get-Process -PID $PID).SessionId
	
	#Find out if winword is running in our session
	#fixed by MBS
	[bool]$wordrunning = $null –ne ((Get-Process 'WinWord' -ea 0) | Where-Object {$_.SessionId -eq $SessionID})
	If($wordrunning)
	{
		Write-Host "
		`n
		Please close all instances of Microsoft Word before running this report.
		`n"
		AbortScript
	}
}

Function ValidateCompanyName
{
	[bool]$xResult = Test-RegistryValue "HKCU:\Software\Microsoft\Office\Common\UserInfo" "CompanyName"
	If($xResult)
	{
		Return Get-RegistryValue "HKCU:\Software\Microsoft\Office\Common\UserInfo" "CompanyName"
	}
	Else
	{
		$xResult = Test-RegistryValue "HKCU:\Software\Microsoft\Office\Common\UserInfo" "Company"
		If($xResult)
		{
			Return Get-RegistryValue "HKCU:\Software\Microsoft\Office\Common\UserInfo" "Company"
		}
		Else
		{
			Return ""
		}
	}
}

Function Check-LoadedModule
#Function created by Jeff Wouters
#@JeffWouters on Twitter
#modified by Michael B. Smith to handle when the module doesn't exist on server
#modified by @andyjmorgan
#bug fixed by @schose
#bug fixed by Peter Bosen
#This Function handles all three scenarios:
#
# 1. Module is already imported into current session
# 2. Module is not already imported into current session, it does exists on the server and is imported
# 3. Module does not exist on the server

{
	Param([parameter(Mandatory = $True)][alias("Module")][string]$ModuleName)
	#$LoadedModules = Get-Module | Select Name
	#following line changed at the recommendation of @andyjmorgan
	$LoadedModules = Get-Module | ForEach-Object { $_.Name.ToString() }
	#bug reported on 21-JAN-2013 by @schose 
	#the following line did not work if the citrix.grouppolicy.commands.psm1 module
	#was manually loaded from a non Default folder
	#$ModuleFound = (!$LoadedModules -like "*$ModuleName*")
	
	[string]$ModuleFound = ($LoadedModules -like "*$ModuleName*")
	If($ModuleFound -ne $ModuleName) 
	{
		$module = Import-Module -Name $ModuleName -PassThru -EA 0 4>$Null
		If($module -and $?)
		{
			# module imported properly
			Return $True
		}
		Else
		{
			# module import failed
			Return $False
		}
	}
	Else
	{
		#module already imported into current session
		Return $True
	}
}

Function Set-DocumentProperty {
    <#
	.SYNOPSIS
	Function to set the Title Page document properties in MS Word
	.DESCRIPTION
	Long description
	.PARAMETER Document
	Current Document Object
	.PARAMETER DocProperty
	Parameter description
	.PARAMETER Value
	Parameter description
	.EXAMPLE
	Set-DocumentProperty -Document $Script:Doc -DocProperty Title -Value 'MyTitle'
	.EXAMPLE
	Set-DocumentProperty -Document $Script:Doc -DocProperty Company -Value 'MyCompany'
	.EXAMPLE
	Set-DocumentProperty -Document $Script:Doc -DocProperty Author -Value 'Jim Moyle'
	.EXAMPLE
	Set-DocumentProperty -Document $Script:Doc -DocProperty Subject -Value 'MySubjectTitle'
	.NOTES
	Function Created by Jim Moyle June 2017
	Twitter : @JimMoyle
	#>
    param (
        [object]$Document,
        [String]$DocProperty,
        [string]$Value
    )
    try {
        $binding = "System.Reflection.BindingFlags" -as [type]
        $builtInProperties = $Document.BuiltInDocumentProperties
        $property = [System.__ComObject].invokemember("item", $binding::GetProperty, $null, $BuiltinProperties, $DocProperty)
        [System.__ComObject].invokemember("value", $binding::SetProperty, $null, $property, $Value)
    }
    catch {
        Write-Warning "Failed to set $DocProperty to $Value"
    }
}

Function FindWordDocumentEnd
{
	#Return focus to main document    
	$Script:Doc.ActiveWindow.ActivePane.view.SeekView = $wdSeekMainDocument
	#move to the end of the current document
	$Script:Selection.EndKey($wdStory,$wdMove) | Out-Null
}

Function validStateProp( [object] $object, [string] $topLevel, [string] $secondLevel )
{
	#function created 8-jan-2014 by Michael B. Smith
	If( $object )
	{
		If((Get-Member -Name $topLevel -InputObject $object))
		{
			If((Get-Member -Name $secondLevel -InputObject $object.$topLevel))
			{
				Return $True
			}
		}
	}
	Return $False
}

Function validObject( [object] $object, [string] $topLevel )
{
	#function created 8-jan-2014 by Michael B. Smith
	If( $object )
	{
		If((Get-Member -Name $topLevel -InputObject $object))
		{
			Return $True
		}
	}
	Return $False
}

Function SetupWord
{
	Write-Verbose "$(Get-Date -Format G): Setting up Word"
    
	If(!$AddDateTime)
	{
		[string]$Script:WordFileName = "$($Script:pwdpath)\$($OutputFileName).docx"
		If($PDF)
		{
			[string]$Script:PDFFileName = "$($Script:pwdpath)\$($OutputFileName).pdf"
		}
	}
	ElseIf($AddDateTime)
	{
		[string]$Script:WordFileName = "$($Script:pwdpath)\$($OutputFileName)_$(Get-Date -f yyyy-MM-dd_HHmm).docx"
		If($PDF)
		{
			[string]$Script:PDFFileName = "$($Script:pwdpath)\$($OutputFileName)_$(Get-Date -f yyyy-MM-dd_HHmm).pdf"
		}
	}

	# Setup word for output
	Write-Verbose "$(Get-Date -Format G): Create Word comObject."
	$Script:Word = New-Object -comobject "Word.Application" -EA 0 4>$Null

#Do not indent the following write-error lines. Doing so will mess up the console formatting of the error message.
	If(!$? -or $Null -eq $Script:Word)
	{
		Write-Warning "The Word object could not be created. You may need to repair your Word installation."
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	The Word object could not be created. You may need to repair your Word installation.
		`n`n
	Script cannot Continue.
		`n`n"
		AbortScript
	}

	Write-Verbose "$(Get-Date -Format G): Determine Word language value"
	If( ( validStateProp $Script:Word Language Value__ ) )
	{
		[int]$Script:WordLanguageValue = [int]$Script:Word.Language.Value__
	}
	Else
	{
		[int]$Script:WordLanguageValue = [int]$Script:Word.Language
	}

	If(!($Script:WordLanguageValue -gt -1))
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	Unable to determine the Word language value. You may need to repair your Word installation.
		`n`n
	Script cannot Continue.
		`n`n
		"
		AbortScript
	}
	Write-Verbose "$(Get-Date -Format G): Word language value is $($Script:WordLanguageValue)"
	
	$Script:WordCultureCode = GetCulture $Script:WordLanguageValue
	
	SetWordHashTable $Script:WordCultureCode
	
	[int]$Script:WordVersion = [int]$Script:Word.Version
	If($Script:WordVersion -eq $wdWord2016)
	{
		$Script:WordProduct = "Word 2016"
	}
	ElseIf($Script:WordVersion -eq $wdWord2013)
	{
		$Script:WordProduct = "Word 2013"
	}
	ElseIf($Script:WordVersion -eq $wdWord2010)
	{
		$Script:WordProduct = "Word 2010"
	}
	ElseIf($Script:WordVersion -eq $wdWord2007)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	Microsoft Word 2007 is no longer supported.`n`n`t`tScript will end.
		`n`n
		"
		AbortScript
	}
	ElseIf($Script:WordVersion -eq 0)
	{
		Write-Error "
		`n`n
	The Word Version is 0. You should run a full online repair of your Office installation.
		`n`n
	Script cannot Continue.
		`n`n
		"
		AbortScript
	}
	Else
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	You are running an untested or unsupported version of Microsoft Word.
		`n`n
	Script will end.
		`n`n
	Please send info on your version of Word to webster@carlwebster.com
		`n`n
		"
		AbortScript
	}

	#only validate CompanyName if the field is blank
	If([String]::IsNullOrEmpty($CompanyName))
	{
		Write-Verbose "$(Get-Date -Format G): Company name is blank. Retrieve company name from registry."
		$TmpName = ValidateCompanyName
		
		If([String]::IsNullOrEmpty($TmpName))
		{
			Write-Host "
		Company Name is blank so Cover Page will not show a Company Name.
		Check HKCU:\Software\Microsoft\Office\Common\UserInfo for Company or CompanyName value.
		You may want to use the -CompanyName parameter if you need a Company Name on the cover page.
			" -ForegroundColor White
			$Script:CoName = $TmpName
		}
		Else
		{
			$Script:CoName = $TmpName
			Write-Verbose "$(Get-Date -Format G): Updated company name to $($Script:CoName)"
		}
	}
	Else
	{
		$Script:CoName = $CompanyName
	}

	If($Script:WordCultureCode -ne "en-")
	{
		Write-Verbose "$(Get-Date -Format G): Check Default Cover Page for $($WordCultureCode)"
		[bool]$CPChanged = $False
		Switch ($Script:WordCultureCode)
		{
			'ca-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Línia lateral"
						$CPChanged = $True
					}
				}

			'da-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Sidelinje"
						$CPChanged = $True
					}
				}

			'de-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Randlinie"
						$CPChanged = $True
					}
				}

			'es-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Línea lateral"
						$CPChanged = $True
					}
				}

			'fi-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Sivussa"
						$CPChanged = $True
					}
				}

			'fr-'	{
					If($CoverPage -eq "Sideline")
					{
						If($Script:WordVersion -eq $wdWord2013 -or $Script:WordVersion -eq $wdWord2016)
						{
							$CoverPage = "Lignes latérales"
							$CPChanged = $True
						}
						Else
						{
							$CoverPage = "Ligne latérale"
							$CPChanged = $True
						}
					}
				}

			'nb-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Sidelinje"
						$CPChanged = $True
					}
				}

			'nl-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Terzijde"
						$CPChanged = $True
					}
				}

			'pt-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Linha Lateral"
						$CPChanged = $True
					}
				}

			'sv-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Sidlinje"
						$CPChanged = $True
					}
				}

			'zh-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "边线型"
						$CPChanged = $True
					}
				}
		}

		If($CPChanged)
		{
			Write-Verbose "$(Get-Date -Format G): Changed Default Cover Page from Sideline to $($CoverPage)"
		}
	}

	Write-Verbose "$(Get-Date -Format G): Validate cover page $($CoverPage) for culture code $($Script:WordCultureCode)"
	[bool]$ValidCP = $False
	
	$ValidCP = ValidateCoverPage $Script:WordVersion $CoverPage $Script:WordCultureCode
	
	If(!$ValidCP)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Verbose "$(Get-Date -Format G): Word language value $($Script:WordLanguageValue)"
		Write-Verbose "$(Get-Date -Format G): Culture code $($Script:WordCultureCode)"
		Write-Error "
		`n`n
	For $($Script:WordProduct), $($CoverPage) is not a valid Cover Page option.
		`n`n
	Script cannot Continue.
		`n`n
		"
		AbortScript
	}

	$Script:Word.Visible = $False

	#http://jdhitsolutions.com/blog/2012/05/san-diego-2012-powershell-deep-dive-slides-and-demos/
	#using Jeff's Demo-WordReport.ps1 file for examples
	Write-Verbose "$(Get-Date -Format G): Load Word Templates"

	[bool]$Script:CoverPagesExist = $False
	[bool]$BuildingBlocksExist = $False

	$Script:Word.Templates.LoadBuildingBlocks()
	#word 2010/2013/2016
	$BuildingBlocksCollection = $Script:Word.Templates | Where-Object{$_.name -eq "Built-In Building Blocks.dotx"}

	Write-Verbose "$(Get-Date -Format G): Attempt to load cover page $($CoverPage)"
	$part = $Null

	$BuildingBlocksCollection | 
	ForEach-Object {
		If($_.BuildingBlockEntries.Item($CoverPage).Name -eq $CoverPage) 
		{
			$BuildingBlocks = $_
		}
	}        

	If($Null -ne $BuildingBlocks)
	{
		$BuildingBlocksExist = $True

		Try 
		{
			$part = $BuildingBlocks.BuildingBlockEntries.Item($CoverPage)
		}

		Catch
		{
			$part = $Null
		}

		If($Null -ne $part)
		{
			$Script:CoverPagesExist = $True
		}
	}

	If(!$Script:CoverPagesExist)
	{
		Write-Verbose "$(Get-Date -Format G): Cover Pages are not installed or the Cover Page $($CoverPage) does not exist."
		Write-Host "Cover Pages are not installed or the Cover Page $($CoverPage) does not exist." -ForegroundColor White
		Write-Host "This report will not have a Cover Page." -ForegroundColor White
	}

	Write-Verbose "$(Get-Date -Format G): Create empty word doc"
	$Script:Doc = $Script:Word.Documents.Add()
	If($Null -eq $Script:Doc)
	{
		Write-Verbose "$(Get-Date -Format G): "
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	An empty Word document could not be created. You may need to repair your Word installation.
		`n`n
	Script cannot Continue.
		`n`n"
		AbortScript
	}

	$Script:Selection = $Script:Word.Selection
	If($Null -eq $Script:Selection)
	{
		Write-Verbose "$(Get-Date -Format G): "
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	An unknown error happened selecting the entire Word document for default formatting options.
		`n`n
	Script cannot Continue.
		`n`n"
		AbortScript
	}

	#set Default tab stops to 1/2 inch (this line is not from Jeff Hicks)
	#36 =.50"
	$Script:Word.ActiveDocument.DefaultTabStop = 36

	#Disable Spell and Grammar Check to resolve issue and improve performance (from Pat Coughlin)
	Write-Verbose "$(Get-Date -Format G): Disable grammar and spell checking"
	#bug reported 1-Apr-2014 by Tim Mangan
	#save current options first before turning them off
	$Script:CurrentGrammarOption = $Script:Word.Options.CheckGrammarAsYouType
	$Script:CurrentSpellingOption = $Script:Word.Options.CheckSpellingAsYouType
	$Script:Word.Options.CheckGrammarAsYouType = $False
	$Script:Word.Options.CheckSpellingAsYouType = $False

	If($BuildingBlocksExist)
	{
		#insert new page, getting ready for table of contents
		Write-Verbose "$(Get-Date -Format G): Insert new page, getting ready for table of contents"
		$part.Insert($Script:Selection.Range,$True) | Out-Null
		$Script:Selection.InsertNewPage()

		#table of contents
		Write-Verbose "$(Get-Date -Format G): Table of Contents - $($Script:MyHash.Word_TableOfContents)"
		$toc = $BuildingBlocks.BuildingBlockEntries.Item($Script:MyHash.Word_TableOfContents)
		If($Null -eq $toc)
		{
			Write-Verbose "$(Get-Date -Format G): "
			Write-Host "Table of Content - $($Script:MyHash.Word_TableOfContents) could not be retrieved." -ForegroundColor White
			Write-Host "This report will not have a Table of Contents." -ForegroundColor White
		}
		Else
		{
			$toc.insert($Script:Selection.Range,$True) | Out-Null
		}
	}
	Else
	{
		Write-Host "Table of Contents are not installed." -ForegroundColor White
		Write-Host "Table of Contents are not installed so this report will not have a Table of Contents." -ForegroundColor White
	}

	#set the footer
	Write-Verbose "$(Get-Date -Format G): Set the footer"
	[string]$footertext = "Report created by $username"

	#get the footer
	Write-Verbose "$(Get-Date -Format G): Get the footer and format font"
	$Script:Doc.ActiveWindow.ActivePane.view.SeekView = $wdSeekPrimaryFooter
	#get the footer and format font
	$footers = $Script:Doc.Sections.Last.Footers
	ForEach($footer in $footers) 
	{
		If($footer.exists) 
		{
			$footer.range.Font.name = "Calibri"
			$footer.range.Font.size = 8
			$footer.range.Font.Italic = $True
			$footer.range.Font.Bold = $True
		}
	} #end ForEach
	Write-Verbose "$(Get-Date -Format G): Footer text"
	$Script:Selection.HeaderFooter.Range.Text = $footerText

	#add page numbering
	Write-Verbose "$(Get-Date -Format G): Add page numbering"
	$Script:Selection.HeaderFooter.PageNumbers.Add($wdAlignPageNumberRight) | Out-Null

	FindWordDocumentEnd
	#end of Jeff Hicks 
}

Function UpdateDocumentProperties
{
	Param([string]$AbstractTitle, [string]$SubjectTitle)
	#updated 8-Jun-2017 with additional cover page fields
	#Update document properties
	If($MSWORD -or $PDF)
	{
		If($Script:CoverPagesExist)
		{
			Write-Verbose "$(Get-Date -Format G): Set Cover Page Properties"
			#8-Jun-2017 put these 4 items in alpha order
            Set-DocumentProperty -Document $Script:Doc -DocProperty Author -Value $UserName
            Set-DocumentProperty -Document $Script:Doc -DocProperty Company -Value $Script:CoName
            Set-DocumentProperty -Document $Script:Doc -DocProperty Subject -Value $SubjectTitle
            Set-DocumentProperty -Document $Script:Doc -DocProperty Title -Value $Script:title

			#Get the Coverpage XML part
			$cp = $Script:Doc.CustomXMLParts | Where-Object{$_.NamespaceURI -match "coverPageProps$"}

			#get the abstract XML part
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "Abstract"}
			#set the text
			If([String]::IsNullOrEmpty($Script:CoName))
			{
				[string]$abstract = $AbstractTitle
			}
			Else
			{
				[string]$abstract = "$($AbstractTitle) for $($Script:CoName)"
			}
			$ab.Text = $abstract

			#added 8-Jun-2017
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "CompanyAddress"}
			#set the text
			[string]$abstract = $CompanyAddress
			$ab.Text = $abstract

			#added 8-Jun-2017
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "CompanyEmail"}
			#set the text
			[string]$abstract = $CompanyEmail
			$ab.Text = $abstract

			#added 8-Jun-2017
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "CompanyFax"}
			#set the text
			[string]$abstract = $CompanyFax
			$ab.Text = $abstract

			#added 8-Jun-2017
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "CompanyPhone"}
			#set the text
			[string]$abstract = $CompanyPhone
			$ab.Text = $abstract

			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "PublishDate"}
			#set the text
			[string]$abstract = (Get-Date -Format d).ToString()
			$ab.Text = $abstract

			Write-Verbose "$(Get-Date -Format G): Update the Table of Contents"
			#update the Table of Contents
			$Script:Doc.TablesOfContents.item(1).Update()
			$cp = $Null
			$ab = $Null
			$abstract = $Null
		}
	}
}
#endregion

#region registry functions
#http://stackoverflow.com/questions/5648931/test-if-registry-value-exists
# This Function just gets $True or $False
Function Test-RegistryValue($path, $name)
{
	$key = Get-Item -LiteralPath $path -EA 0
	$key -and $Null -ne $key.GetValue($name, $Null)
}

# Gets the specified registry value or $Null if it is missing
Function Get-RegistryValue($path, $name)
{
	$key = Get-Item -LiteralPath $path -EA 0
	If($key)
	{
		$key.GetValue($name, $Null)
	}
	Else
	{
		$Null
	}
}

# Gets the specified registry value or $Null if it is missing
Function Get-RegistryValue2
{
	[CmdletBinding()]
	Param([string]$path, [string]$name, [string]$ComputerName)
	If($ComputerName -eq $env:computername)
	{
		$key = Get-Item -LiteralPath $path -EA 0
		If($key)
		{
			Return $key.GetValue($name, $Null)
		}
		Else
		{
			Return $Null
		}
	}
	Else
	{
		#path needed here is different for remote registry access
		$path = $path.SubString(6)
		$path2 = $path.Replace('\','\\')
		$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $ComputerName)
		$RegKey = $Reg.OpenSubKey($path2)
		If ($RegKey)
		{
			$Results = $RegKey.GetValue($name)

			If($Null -ne $Results)
			{
				Return $Results
			}
			Else
			{
				Return $Null
			}
		}
		Else
		{
			Return $Null
		}
	}
}
#endregion

#region word, text and html line output functions
Function line
#function created by Michael B. Smith, Exchange MVP
#@essentialexch on Twitter
#https://essential.exchange/blog
#for creating the formatted text report
#created March 2011
#updated March 2014
# updated March 2019 to use StringBuilder (about 100 times more efficient than simple strings)
{
	Param
	(
		[Int]    $tabs = 0, 
		[String] $name = '', 
		[String] $value = '', 
		[String] $newline = [System.Environment]::NewLine, 
		[Switch] $nonewline
	)

	while( $tabs -gt 0 )
	{
		$Null = $script:Output.Append( "`t" )
		$tabs--
	}

	If( $nonewline )
	{
		$Null = $script:Output.Append( $name + $value )
	}
	Else
	{
		$Null = $script:Output.AppendLine( $name + $value )
	}
}

Function WriteWordLine
#Function created by Ryan Revord
#@rsrevord on Twitter
#Function created to make output to Word easy in this script
#updated 27-Mar-2014 to include font name, font size, italics and bold options
{
	Param([int]$style=0, 
	[int]$tabs = 0, 
	[string]$name = '', 
	[string]$value = '', 
	[string]$fontName=$Null,
	[int]$fontSize=0,
	[bool]$italics=$False,
	[bool]$boldface=$False,
	[Switch]$nonewline)
	
	#Build output style
	[string]$output = ""
	Switch ($style)
	{
		0 {$Script:Selection.Style = $Script:MyHash.Word_NoSpacing; Break}
		1 {$Script:Selection.Style = $Script:MyHash.Word_Heading1; Break}
		2 {$Script:Selection.Style = $Script:MyHash.Word_Heading2; Break}
		3 {$Script:Selection.Style = $Script:MyHash.Word_Heading3; Break}
		4 {$Script:Selection.Style = $Script:MyHash.Word_Heading4; Break}
		5 {$Script:Selection.Style = $Script:MyHash.Word_Heading5; Break}
		Default {$Script:Selection.Style = $Script:MyHash.Word_NoSpacing; Break}
	}
	
	#build # of tabs
	While($tabs -gt 0)
	{ 
		$output += "`t"; $tabs--; 
	}
 
	If(![String]::IsNullOrEmpty($fontName)) 
	{
		$Script:Selection.Font.name = $fontName
	} 

	If($fontSize -ne 0) 
	{
		$Script:Selection.Font.size = $fontSize
	} 
 
	If($italics -eq $True) 
	{
		$Script:Selection.Font.Italic = $True
	} 
 
	If($boldface -eq $True) 
	{
		$Script:Selection.Font.Bold = $True
	} 

	#output the rest of the parameters.
	$output += $name + $value
	$Script:Selection.TypeText($output)
 
	#test for new WriteWordLine 0.
	If($nonewline)
	{
		# Do nothing.
	} 
	Else 
	{
		$Script:Selection.TypeParagraph()
	}

	#put these two back
	If($italics -eq $True) 
	{
		$Script:Selection.Font.Italic = $False
	} 
 
	If($boldface -eq $True) 
	{
		$Script:Selection.Font.Bold = $False
	} 
}

#***********************************************************************************************************
# WriteHTMLLine
#***********************************************************************************************************

<#
.Synopsis
	Writes a line of output for HTML output
.DESCRIPTION
	This function formats an HTML line
.USAGE
	WriteHTMLLine <Style> <Tabs> <Name> <Value> <Font Name> <Font Size> <Options>

	0 for Font Size denotes using the default font size of 2 or 10 point

.EXAMPLE
	WriteHTMLLine 0 0 " "

	Writes a blank line with no style or tab stops, obviously none needed.

.EXAMPLE
	WriteHTMLLine 0 1 "This is a regular line of text indented 1 tab stops"

	Writes a line with 1 tab stop.

.EXAMPLE
	WriteHTMLLine 0 0 "This is a regular line of text in the default font in italics" "" $Null 0 $htmlitalics

	Writes a line omitting font and font size and setting the italics attribute

.EXAMPLE
	WriteHTMLLine 0 0 "This is a regular line of text in the default font in bold" "" $Null 0 $htmlBold

	Writes a line omitting font and font size and setting the bold attribute

.EXAMPLE
	WriteHTMLLine 0 0 "This is a regular line of text in the default font in bold italics" "" $Null 0 ($htmlBold -bor $htmlitalics)

	Writes a line omitting font and font size and setting both italics and bold options

.EXAMPLE	
	WriteHTMLLine 0 0 "This is a regular line of text in the default font in 10 point" "" $Null 2  # 10 point font

	Writes a line using 10 point font

.EXAMPLE
	WriteHTMLLine 0 0 "This is a regular line of text in Courier New font" "" "Courier New" 0 

	Writes a line using Courier New Font and 0 font point size (default = 2 if set to 0)

.EXAMPLE	
	WriteHTMLLine 0 0 "This is a regular line of RED text indented 0 tab stops with the computer name as data in 10 point Courier New bold italics: " $env:computername "Courier New" 2 ($htmlBold -bor $htmlred -bor $htmlitalics)

	Writes a line using Courier New Font with first and second string values to be used, also uses 10 point font with bold, italics and red color options set.

.NOTES

	Font Size - Unlike word, there is a limited set of font sizes that can be used in HTML. They are:
		0 - default which actually gives it a 2 or 10 point.
		1 - 7.5 point font size
		2 - 10 point
		3 - 13.5 point
		4 - 15 point
		5 - 18 point
		6 - 24 point
		7 - 36 point
	Any number larger than 7 defaults to 7

	Style - Refers to the headers that are used with output and resemble the headers in word, 
	HTML supports headers h1-h6 and h1-h4 are more commonly used. Unlike word, H1 will not 
	give you a blue colored font, you will have to set that yourself.

	Colors and Bold/Italics Flags are:

		htmlbold       
		htmlitalics    
		htmlred        
		htmlcyan        
		htmlblue       
		htmldarkblue   
		htmllightblue   
		htmlpurple      
		htmlyellow      
		htmllime       
		htmlmagenta     
		htmlwhite       
		htmlsilver      
		htmlgray       
		htmlolive       
		htmlorange      
		htmlmaroon      
		htmlgreen       
		htmlblack       
#>

# to suppress $crlf in HTML documents, replace this with '' (empty string)
# but this was added to make the HTML readable
$crlf = [System.Environment]::NewLine

Function WriteHTMLLine
#Function created by Ken Avram
#Function created to make output to HTML easy in this script
#headings fixed 12-Oct-2016 by Webster
#errors with $HTMLStyle fixed 7-Dec-2017 by Webster
# re-implemented/re-based by Michael B. Smith
{
	Param
	(
		[Int]    $style    = 0, 
		[Int]    $tabs     = 0, 
		[String] $name     = '', 
		[String] $value    = '', 
		[String] $fontName = $null,
		[Int]    $fontSize = 1,
		[Int]    $options  = $htmlblack
	)

	#FIXME - long story short, this function was wrong and had been wrong for a long time. 
	## The function generated invalid HTML, and ignored fontname and fontsize parameters. I fixed
	## those items, but that made the report unreadable, because all of the formatting had been based
	## on this function not working properly.

	## here is a typical H1 previously generated:
	## <h1>///&nbsp;&nbsp;Forest Information&nbsp;&nbsp;\\\<font face='Calibri' color='#000000' size='1'></h1></font>

	## fixing the function generated this (unreadably small):
	## <h1><font face='Calibri' color='#000000' size='1'>///&nbsp;&nbsp;Forest Information&nbsp;&nbsp;\\\</font></h1>

	## So I took all the fixes out. This routine now generates valid HTML, but the fontName, fontSize,
	## and options parameters are ignored; so the routine generates equivalent output as before. I took
	## the fixes out instead of fixing all the call sites, because there are 225 call sites! If you are
	## willing to update all the call sites, you can easily re-instate the fixes. They have only been
	## commented out with '##' below.

	[System.Text.StringBuilder] $sb = New-Object System.Text.StringBuilder( 1024 )

	If( [String]::IsNullOrEmpty( $name ) )	
	{
		## $HTMLBody = '<p></p>'
		$null = $sb.Append( '<p></p>' )
	}
	Else
	{
		[Bool] $ital = $options -band $htmlitalics
		[Bool] $bold = $options -band $htmlBold
		if( $ital ) { $null = $sb.Append( '<i>' ) }
		if( $bold ) { $null = $sb.Append( '<b>' ) } 

		switch( $style )
		{
			1 { $HTMLOpen = '<h1>'; $HTMLClose = '</h1>'; Break }
			2 { $HTMLOpen = '<h2>'; $HTMLClose = '</h2>'; Break }
			3 { $HTMLOpen = '<h3>'; $HTMLClose = '</h3>'; Break }
			4 { $HTMLOpen = '<h4>'; $HTMLClose = '</h4>'; Break }
			Default { $HTMLOpen = ''; $HTMLClose = ''; Break }
		}

		$null = $sb.Append( $HTMLOpen )

		$null = $sb.Append( ( '&nbsp;&nbsp;&nbsp;&nbsp;' * $tabs ) + $name + $value )

		if( $HTMLClose -eq '' ) { $null = $sb.Append( '<br>' )     }
		else                    { $null = $sb.Append( $HTMLClose ) }

		if( $ital ) { $null = $sb.Append( '</i>' ) }
		if( $bold ) { $null = $sb.Append( '</b>' ) } 

		if( $HTMLClose -eq '' ) { $null = $sb.Append( '<br />' ) }
	}
	$null = $sb.AppendLine( '' )

	Out-File -FilePath $Script:HtmlFileName -Append -InputObject $sb.ToString() 4>$Null
}
#endregion

#region HTML table functions
#***********************************************************************************************************
# AddHTMLTable - Called from FormatHTMLTable function
# Created by Ken Avram
# modified by Jake Rutski
# re-implemented by Michael B. Smith. Also made the documentation match reality.
#***********************************************************************************************************
Function AddHTMLTable
{
	Param
	(
		[String]   $fontName  = 'Calibri',
		[Int]      $fontSize  = 2,
		[Int]      $colCount  = 0,
		[Int]      $rowCount  = 0,
		[Object[]] $rowInfo   = $null,
		[Object[]] $fixedInfo = $null
	)

	[System.Text.StringBuilder] $sb = New-Object System.Text.StringBuilder( 8192 )

	if( $rowInfo -and $rowInfo.Length -lt $rowCount )
	{
		$rowCount = $rowInfo.Length
	}

	for( $rowCountIndex = 0; $rowCountIndex -lt $rowCount; $rowCountIndex++ )
	{
		$null = $sb.AppendLine( '<tr>' )
		## $htmlbody += '<tr>'
		## $htmlbody += $crlf make the HTML readable

		## each row of rowInfo is an array
		## each row consists of tuples: an item of text followed by an item of formatting data

		## reset
		$row = $rowInfo[ $rowCountIndex ]

		$subRow = $row
		if( $subRow -is [Array] -and $subRow[ 0 ] -is [Array] )
		{
			$subRow = $subRow[ 0 ]
		}

		$subRowLength = $subRow.Length
		for( $columnIndex = 0; $columnIndex -lt $colCount; $columnIndex += 2 )
		{
			$item = if( $columnIndex -lt $subRowLength ) { $subRow[ $columnIndex ] } else { 0 }

			$text   = if( $item ) { $item.ToString() } else { '' }
			$format = if( ( $columnIndex + 1 ) -lt $subRowLength ) { $subRow[ $columnIndex + 1 ] } else { 0 }
			## item, text, and format ALWAYS have values, even if empty values
			$color  = $Script:htmlColor[ $format -band 0xffffc ]
			[Bool] $bold = $format -band $htmlBold
			[Bool] $ital = $format -band $htmlitalics

			if( $null -eq $fixedInfo -or $fixedInfo.Length -eq 0 )
			{
				$null = $sb.Append( "<td style=""background-color:$( $color )""><font face='$( $fontName )' size='$( $fontSize )'>" )
			}
			else
			{
				$null = $sb.Append( "<td style=""width:$( $fixedInfo[ $columnIndex / 2 ] ); background-color:$( $color )""><font face='$( $fontName )' size='$( $fontSize )'>" )
			}

			if( $bold ) { $null = $sb.Append( '<b>' ) }
			if( $ital ) { $null = $sb.Append( '<i>' ) }

			if( $text -eq ' ' -or $text.length -eq 0)
			{
				$null = $sb.Append( '&nbsp;&nbsp;&nbsp;' )
			}
			else
			{
				for ($inx = 0; $inx -lt $text.length; $inx++ )
				{
					if( $text[ $inx ] -eq ' ' )
					{
						$null = $sb.Append( '&nbsp;' )
					}
					else
					{
						break
					}
				}
				$null = $sb.Append( $text )
			}

			if( $bold ) { $null = $sb.Append( '</b>' ) }
			if( $ital ) { $null = $sb.Append( '</i>' ) }

			$null = $sb.AppendLine( '</font></td>' )
		}

		$null = $sb.AppendLine( '</tr>' )
	}

	Out-File -FilePath $Script:HtmlFileName -Append -InputObject $sb.ToString() 4>$Null 
}

#***********************************************************************************************************
# FormatHTMLTable 
# Created by Ken Avram
# modified by Jake Rutski
# reworked by Michael B. Smith
#***********************************************************************************************************

<#
.Synopsis
	Format table for a HTML output document.
.DESCRIPTION
	This function formats a table for HTML from multiple arrays of strings.
.PARAMETER noBorder
	If set to $true, a table will be generated without a border (border = '0'). Otherwise the table will be generated
	with a border (border = '1').
.PARAMETER noHeadCols
	This parameter should be used when generating tables which do not have a separate array containing column headers
	(columnArray is not specified). Set this parameter equal to the number of columns in the table.
.PARAMETER rowArray
	This parameter contains the row data array for the table.
.PARAMETER columnArray
	This parameter contains column header data for the table.
.PARAMETER fixedWidth
	This parameter contains widths for columns in pixel format ("100px") to override auto column widths
	The variable should contain a width for each column you wish to override the auto-size setting
	For example: $fixedWidth = @("100px","110px","120px","130px","140px")
.PARAMETER tableHeader
	A string containing the header for the table (printed at the top of the table, left justified). The
	default is a blank string.
.PARAMETER tableWidth
	The width of the table in pixels, or 'auto'. The default is 'auto'.
.PARAMETER fontName
	The name of the font to use in the table. The default is 'Calibri'.
.PARAMETER fontSize
	The size of the font to use in the table. The default is 2. Note that this is the HTML size, not the pixel size.

.USAGE
	FormatHTMLTable <Table Header> <Table Width> <Font Name> <Font Size>

.EXAMPLE
	FormatHTMLTable "Table Heading" "auto" "Calibri" 3

	This example formats a table and writes it out into an html file. All of the parameters are optional
	defaults are used if not supplied.

	for <Table format>, the default is auto which will autofit the text into the columns and adjust to the longest text in that column. You can also use percentage i.e. 25%
	which will take only 25% of the line and will auto word wrap the text to the next line in the column. Also, instead of using a percentage, you can use pixels i.e. 400px.

	FormatHTMLTable "Table Heading" "auto" -rowArray $rowData -columnArray $columnData

	This example creates an HTML table with a heading of 'Table Heading', auto column spacing, column header data from $columnData and row data from $rowData

	FormatHTMLTable "Table Heading" -rowArray $rowData -noHeadCols 3

	This example creates an HTML table with a heading of 'Table Heading', auto column spacing, no header, and row data from $rowData

	FormatHTMLTable "Table Heading" -rowArray $rowData -fixedWidth $fixedColumns

	This example creates an HTML table with a heading of 'Table Heading, no header, row data from $rowData, and fixed columns defined by $fixedColumns

.NOTES
	In order to use the formatted table it first has to be loaded with data. Examples below will show how to load the table:

	First, initialize the table array

	$rowdata = @()

	Then Load the array. If you are using column headers then load those into the column headers array, otherwise the first line of the table goes into the column headers array
	and the second and subsequent lines go into the $rowdata table as shown below:

	$columnHeaders = @('Display Name',$htmlsb,'Status',$htmlsb,'Startup Type',$htmlsb)

	The first column is the actual name to display, the second are the attributes of the column i.e. color anded with bold or italics. For the anding, parens are required or it will
	not format correctly.

	This is following by adding rowdata as shown below. As more columns are added the columns will auto adjust to fit the size of the page.

	$rowdata = @()
	$columnHeaders = @("User Name",$htmlsb,$UserName,$htmlwhite)
	$rowdata += @(,("Save as PDF',$htmlsb,$PDF.ToString(),$htmlwhite))
	$rowdata += @(,("Save as TEXT',$htmlsb,$TEXT.ToString(),$htmlwhite))
	$rowdata += @(,("Save as WORD',$htmlsb,$MSWORD.ToString(),$htmlwhite))
	$rowdata += @(,("Save as HTML',$htmlsb,$HTML.ToString(),$htmlwhite))
	$rowdata += @(,("Add DateTime',$htmlsb,$AddDateTime.ToString(),$htmlwhite))
	$rowdata += @(,("Hardware Inventory',$htmlsb,$Hardware.ToString(),$htmlwhite))
	$rowdata += @(,("Computer Name',$htmlsb,$ComputerName,$htmlwhite))
	$rowdata += @(,("FileName',$htmlsb,$Script:FileName,$htmlwhite))
	$rowdata += @(,("OS Detected',$htmlsb,$Script:RunningOS,$htmlwhite))
	$rowdata += @(,("PSUICulture',$htmlsb,$PSCulture,$htmlwhite))
	$rowdata += @(,("PoSH version',$htmlsb,$Host.Version.ToString(),$htmlwhite))
	FormatHTMLTable "Example of Horizontal AutoFitContents HTML Table" -rowArray $rowdata

	The 'rowArray' paramater is mandatory to build the table, but it is not set as such in the function - if nothing is passed, the table will be empty.

	Colors and Bold/Italics Flags are shown below:

		htmlbold       
		htmlitalics    
		htmlred        
		htmlcyan        
		htmlblue       
		htmldarkblue   
		htmllightblue   
		htmlpurple      
		htmlyellow      
		htmllime       
		htmlmagenta     
		htmlwhite       
		htmlsilver      
		htmlgray       
		htmlolive       
		htmlorange      
		htmlmaroon      
		htmlgreen       
		htmlblack     

#>

Function FormatHTMLTable
{
	Param
	(
		[String]   $tableheader = '',
		[String]   $tablewidth  = 'auto',
		[String]   $fontName    = 'Calibri',
		[Int]      $fontSize    = 2,
		[Switch]   $noBorder    = $false,
		[Int]      $noHeadCols  = 1,
		[Object[]] $rowArray    = $null,
		[Object[]] $fixedWidth  = $null,
		[Object[]] $columnArray = $null
	)

	## FIXME - the help text for this function is wacky wrong - MBS
	## FIXME - Use StringBuilder - MBS - this only builds the table header - benefit relatively small

	$HTMLBody = "<b><font face='" + $fontname + "' size='" + ($fontsize + 1) + "'>" + $tableheader + "</font></b>" + $crlf

	If( $null -eq $columnArray -or $columnArray.Length -eq 0)
	{
		$NumCols = $noHeadCols + 1
	}  # means we have no column headers, just a table
	Else
	{
		$NumCols = $columnArray.Length
	}  # need to add one for the color attrib

	If( $null -ne $rowArray )
	{
		$NumRows = $rowArray.length + 1
	}
	Else
	{
		$NumRows = 1
	}

	If( $noBorder )
	{
		$HTMLBody += "<table border='0' width='" + $tablewidth + "'>"
	}
	Else
	{
		$HTMLBody += "<table border='1' width='" + $tablewidth + "'>"
	}
	$HTMLBody += $crlf

	if( $columnArray -and $columnArray.Length -gt 0 )
	{
		$HTMLBody += '<tr>' + $crlf

		for( $columnIndex = 0; $columnIndex -lt $NumCols; $columnindex += 2 )
		{
			$val = $columnArray[ $columnIndex + 1 ]
			$tmp = $Script:htmlColor[ $val -band 0xffffc ]
			[Bool] $bold = $val -band $htmlBold
			[Bool] $ital = $val -band $htmlitalics

			if( $null -eq $fixedWidth -or $fixedWidth.Length -eq 0 )
			{
				$HTMLBody += "<td style=""background-color:$($tmp)""><font face='$($fontName)' size='$($fontSize)'>"
			}
			else
			{
				$HTMLBody += "<td style=""width:$($fixedWidth[$columnIndex/2]); background-color:$($tmp)""><font face='$($fontName)' size='$($fontSize)'>"
			}

			if( $bold ) { $HTMLBody += '<b>' }
			if( $ital ) { $HTMLBody += '<i>' }

			$array = $columnArray[ $columnIndex ]
			if( $array )
			{
				if( $array -eq ' ' -or $array.Length -eq 0 )
				{
					$HTMLBody += '&nbsp;&nbsp;&nbsp;'
				}
				else
				{
					for( $i = 0; $i -lt $array.Length; $i += 2 )
					{
						if( $array[ $i ] -eq ' ' )
						{
							$HTMLBody += '&nbsp;'
						}
						else
						{
							break
						}
					}
					$HTMLBody += $array
				}
			}
			else
			{
				$HTMLBody += '&nbsp;&nbsp;&nbsp;'
			}
			
			if( $bold ) { $HTMLBody += '</b>' }
			if( $ital ) { $HTMLBody += '</i>' }
		}

		$HTMLBody += '</font></td>'
		$HTMLBody += $crlf
	}

	$HTMLBody += '</tr>' + $crlf

	Out-File -FilePath $Script:HtmlFileName -Append -InputObject $HTMLBody 4>$Null 
	$HTMLBody = ''

	If( $rowArray )
	{

		AddHTMLTable -fontName $fontName -fontSize $fontSize `
			-colCount $numCols -rowCount $NumRows `
			-rowInfo $rowArray -fixedInfo $fixedWidth
		$rowArray = $null
		$HTMLBody = '</table>'
	}
	Else
	{
		$HTMLBody += '</table>'
	}

	Out-File -FilePath $Script:HtmlFileName -Append -InputObject $HTMLBody 4>$Null 
}
#endregion

#region other HTML functions
Function SetupHTML
{
	Write-Verbose "$(Get-Date -Format G): Setting up HTML"
	If(!$AddDateTime)
	{
		[string]$Script:HtmlFileName = "$($Script:pwdpath)\$($OutputFileName).html"
	}
	ElseIf($AddDateTime)
	{
		[string]$Script:HtmlFileName = "$($Script:pwdpath)\$($OutputFileName)_$(Get-Date -f yyyy-MM-dd_HHmm).html"
	}

	$htmlhead = "<html><head><meta http-equiv='Content-Language' content='da'><title>" + $Script:Title + "</title></head><body>"
	out-file -FilePath $Script:HtmlFileName -Force -InputObject $HTMLHead 4>$Null
}#endregion

#region Iain's Word table functions

<#
.Synopsis
	Add a table to a Microsoft Word document
.DESCRIPTION
	This function adds a table to a Microsoft Word document from either an array of
	Hashtables or an array of PSCustomObjects.

	Using this function is quicker than setting each table cell individually but can
	only utilise the built-in MS Word table autoformats. Individual tables cells can
	be altered after the table has been appended to the document (a table reference
	is Returned).
.EXAMPLE
	AddWordTable -Hashtable $HashtableArray

	This example adds table to the MS Word document, utilising all key/value pairs in
	the array of hashtables. Column headers will display the key names as defined.
	Note: the columns might not be displayed in the order that they were defined. To
	ensure columns are displayed in the required order utilise the -Columns parameter.
.EXAMPLE
	AddWordTable -Hashtable $HashtableArray -List

	This example adds table to the MS Word document, utilising all key/value pairs in
	the array of hashtables. No column headers will be added, in a ListView format.
	Note: the columns might not be displayed in the order that they were defined. To
	ensure columns are displayed in the required order utilise the -Columns parameter.
.EXAMPLE
	AddWordTable -CustomObject $PSCustomObjectArray

	This example adds table to the MS Word document, utilising all note property names
	the array of PSCustomObjects. Column headers will display the note property names.
	Note: the columns might not be displayed in the order that they were defined. To
	ensure columns are displayed in the required order utilise the -Columns parameter.
.EXAMPLE
	AddWordTable -Hashtable $HashtableArray -Columns FirstName,LastName,EmailAddress

	This example adds a table to the MS Word document, but only using the specified
	key names: FirstName, LastName and EmailAddress. If other keys are present in the
	array of Hashtables they will be ignored.
.EXAMPLE
	AddWordTable -CustomObject $PSCustomObjectArray -Columns FirstName,LastName,EmailAddress -Headers "First Name","Last Name","Email Address"

	This example adds a table to the MS Word document, but only using the specified
	PSCustomObject note properties: FirstName, LastName and EmailAddress. If other note
	properties are present in the array of PSCustomObjects they will be ignored. The
	display names for each specified column header has been overridden to display a
	custom header. Note: the order of the header names must match the specified columns.
#>

Function AddWordTable
{
	[CmdletBinding()]
	Param
	(
		# Array of Hashtable (including table headers)
		[Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True, ParameterSetName='Hashtable', Position=0)]
		[ValidateNotNullOrEmpty()] [System.Collections.Hashtable[]] $Hashtable,
		# Array of PSCustomObjects
		[Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True, ParameterSetName='CustomObject', Position=0)]
		[ValidateNotNullOrEmpty()] [PSCustomObject[]] $CustomObject,
		# Array of Hashtable key names or PSCustomObject property names to include, in display order.
		# If not supplied then all Hashtable keys or all PSCustomObject properties will be displayed.
		[Parameter(ValueFromPipelineByPropertyName=$True)] [AllowNull()] [string[]] $Columns = $Null,
		# Array of custom table header strings in display order.
		[Parameter(ValueFromPipelineByPropertyName=$True)] [AllowNull()] [string[]] $Headers = $Null,
		# AutoFit table behavior.
		[Parameter(ValueFromPipelineByPropertyName=$True)] [AllowNull()] [int] $AutoFit = -1,
		# List view (no headers)
		[Switch] $List,
		# Grid lines
		[Switch] $NoGridLines,
		[Switch] $NoInternalGridLines,
		# Built-in Word table formatting style constant
		# Would recommend only $wdTableFormatContempory for normal usage (possibly $wdTableFormatList5 for List view)
		[Parameter(ValueFromPipelineByPropertyName=$True)] [int] $Format = 0
	)

	Begin 
	{
		Write-Debug ("Using parameter set '{0}'" -f $PSCmdlet.ParameterSetName);
		## Check if -Columns wasn't specified but -Headers were (saves some additional parameter sets!)
		If(($Null -eq $Columns) -and ($Null -eq $Headers)) 
		{
			Write-Warning "No columns specified and therefore, specified headers will be ignored.";
			$Columns = $Null;
		}
		ElseIf(($Null -ne $Columns) -and ($Null -ne $Headers)) 
		{
			## Check if number of specified -Columns matches number of specified -Headers
			If($Columns.Length -ne $Headers.Length) 
			{
				Write-Error "The specified number of columns does not match the specified number of headers.";
			}
		} ## end elseif
	} ## end Begin

	Process
	{
		## Build the Word table data string to be converted to a range and then a table later.
		[System.Text.StringBuilder] $WordRangeString = New-Object System.Text.StringBuilder;

		Switch ($PSCmdlet.ParameterSetName) 
		{
			'CustomObject' 
			{
				If($Null -eq $Columns) 
				{
					## Build the available columns from all availble PSCustomObject note properties
					[string[]] $Columns = @();
					## Add each NoteProperty name to the array
					ForEach($Property in ($CustomObject | Get-Member -MemberType NoteProperty)) 
					{ 
						$Columns += $Property.Name; 
					}
				}

				## Add the table headers from -Headers or -Columns (except when in -List(view)
				If(-not $List) 
				{
					Write-Debug ("$(Get-Date -Format G): `t`tBuilding table headers");
					If($Null -ne $Headers) 
					{
                        [ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $Headers));
					}
					Else 
					{ 
                        [ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $Columns));
					}
				}

				## Iterate through each PSCustomObject
				Write-Debug ("$(Get-Date -Format G): `t`tBuilding table rows");
				ForEach($Object in $CustomObject) 
				{
					$OrderedValues = @();
					## Add each row item in the specified order
					ForEach($Column in $Columns) 
					{ 
						$OrderedValues += $Object.$Column; 
					}
					## Use the ordered list to add each column in specified order
					[ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $OrderedValues));
				} ## end ForEach
				Write-Debug ("$(Get-Date -Format G): `t`t`tAdded '{0}' table rows" -f ($CustomObject.Count));
			} ## end CustomObject

			Default 
			{   ## Hashtable
				If($Null -eq $Columns) 
				{
					## Build the available columns from all available hashtable keys. Hopefully
					## all Hashtables have the same keys (they should for a table).
					$Columns = $Hashtable[0].Keys;
				}

				## Add the table headers from -Headers or -Columns (except when in -List(view)
				If(-not $List) 
				{
					Write-Debug ("$(Get-Date -Format G): `t`tBuilding table headers");
					If($Null -ne $Headers) 
					{ 
						[ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $Headers));
					}
					Else 
					{
						[ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $Columns));
					}
				}
                
				## Iterate through each Hashtable
				Write-Debug ("$(Get-Date -Format G): `t`tBuilding table rows");
				ForEach($Hash in $Hashtable) 
				{
					$OrderedValues = @();
					## Add each row item in the specified order
					ForEach($Column in $Columns) 
					{ 
						$OrderedValues += $Hash.$Column; 
					}
					## Use the ordered list to add each column in specified order
					[ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $OrderedValues));
				} ## end ForEach

				Write-Debug ("$(Get-Date -Format G): `t`t`tAdded '{0}' table rows" -f $Hashtable.Count);
			} ## end default
		} ## end switch

		## Create a MS Word range and set its text to our tab-delimited, concatenated string
		Write-Debug ("$(Get-Date -Format G): `t`tBuilding table range");
		$WordRange = $Script:Doc.Application.Selection.Range;
		$WordRange.Text = $WordRangeString.ToString();

		## Create hash table of named arguments to pass to the ConvertToTable method
		$ConvertToTableArguments = @{ Separator = [Microsoft.Office.Interop.Word.WdTableFieldSeparator]::wdSeparateByTabs; }

		## Negative built-in styles are not supported by the ConvertToTable method
		If($Format -ge 0) 
		{
			$ConvertToTableArguments.Add("Format", $Format);
			$ConvertToTableArguments.Add("ApplyBorders", $True);
			$ConvertToTableArguments.Add("ApplyShading", $True);
			$ConvertToTableArguments.Add("ApplyFont", $True);
			$ConvertToTableArguments.Add("ApplyColor", $True);
			If(!$List) 
			{ 
				$ConvertToTableArguments.Add("ApplyHeadingRows", $True); 
			}
			$ConvertToTableArguments.Add("ApplyLastRow", $True);
			$ConvertToTableArguments.Add("ApplyFirstColumn", $True);
			$ConvertToTableArguments.Add("ApplyLastColumn", $True);
		}

		## Invoke ConvertToTable method - with named arguments - to convert Word range to a table
		## See http://msdn.microsoft.com/en-us/library/office/aa171893(v=office.11).aspx
		Write-Debug ("$(Get-Date -Format G): `t`tConverting range to table");
		## Store the table reference just in case we need to set alternate row coloring
		$WordTable = $WordRange.GetType().InvokeMember(
			"ConvertToTable",                               # Method name
			[System.Reflection.BindingFlags]::InvokeMethod, # Flags
			$Null,                                          # Binder
			$WordRange,                                     # Target (self!)
			([Object[]]($ConvertToTableArguments.Values)),  ## Named argument values
			$Null,                                          # Modifiers
			$Null,                                          # Culture
			([String[]]($ConvertToTableArguments.Keys))     ## Named argument names
		);

		## Implement grid lines (will wipe out any existing formatting
		If($Format -lt 0) 
		{
			Write-Debug ("$(Get-Date -Format G): `t`tSetting table format");
			$WordTable.Style = $Format;
		}

		## Set the table autofit behavior
		If($AutoFit -ne -1) 
		{ 
			$WordTable.AutoFitBehavior($AutoFit); 
		}

		If(!$List)
		{
			#the next line causes the heading row to flow across page breaks
			$WordTable.Rows.First.Headingformat = $wdHeadingFormatTrue;
		}

		If(!$NoGridLines) 
		{
			$WordTable.Borders.InsideLineStyle = $wdLineStyleSingle;
			$WordTable.Borders.OutsideLineStyle = $wdLineStyleSingle;
		}
		If($NoGridLines) 
		{
			$WordTable.Borders.InsideLineStyle = $wdLineStyleNone;
			$WordTable.Borders.OutsideLineStyle = $wdLineStyleNone;
		}
		If($NoInternalGridLines) 
		{
			$WordTable.Borders.InsideLineStyle = $wdLineStyleNone;
			$WordTable.Borders.OutsideLineStyle = $wdLineStyleSingle;
		}

		Return $WordTable;

	} ## end Process
}

<#
.Synopsis
	Sets the format of one or more Word table cells
.DESCRIPTION
	This function sets the format of one or more table cells, either from a collection
	of Word COM object cell references, an individual Word COM object cell reference or
	a hashtable containing Row and Column information.

	The font name, font size, bold, italic , underline and shading values can be used.
.EXAMPLE
	SetWordCellFormat -Hashtable $Coordinates -Table $TableReference -Bold

	This example sets all text to bold that is contained within the $TableReference
	Word table, using an array of hashtables. Each hashtable contain a pair of co-
	ordinates that is used to select the required cells. Note: the hashtable must
	contain the .Row and .Column key names. For example:
	@ { Row = 7; Column = 3 } to set the cell at row 7 and column 3 to bold.
.EXAMPLE
	$RowCollection = $Table.Rows.First.Cells
	SetWordCellFormat -Collection $RowCollection -Bold -Size 10

	This example sets all text to size 8 and bold for all cells that are contained
	within the first row of the table.
	Note: the $Table.Rows.First.Cells Returns a collection of Word COM cells objects
	that are in the first table row.
.EXAMPLE
	$ColumnCollection = $Table.Columns.Item(2).Cells
	SetWordCellFormat -Collection $ColumnCollection -BackgroundColor 255

	This example sets the background (shading) of all cells in the table's second
	column to red.
	Note: the $Table.Columns.Item(2).Cells Returns a collection of Word COM cells objects
	that are in the table's second column.
.EXAMPLE
	SetWordCellFormat -Cell $Table.Cell(17,3) -Font "Tahoma" -Color 16711680

	This example sets the font to Tahoma and the text color to blue for the cell located
	in the table's 17th row and 3rd column.
	Note: the $Table.Cell(17,3) Returns a single Word COM cells object.
#>

Function SetWordCellFormat 
{
	[CmdletBinding(DefaultParameterSetName='Collection')]
	Param (
		# Word COM object cell collection reference
		[Parameter(Mandatory=$True, ValueFromPipeline=$True, ParameterSetName='Collection', Position=0)] [ValidateNotNullOrEmpty()] $Collection,
		# Word COM object individual cell reference
		[Parameter(Mandatory=$True, ParameterSetName='Cell', Position=0)] [ValidateNotNullOrEmpty()] $Cell,
		# Hashtable of cell co-ordinates
		[Parameter(Mandatory=$True, ParameterSetName='Hashtable', Position=0)] [ValidateNotNullOrEmpty()] [System.Collections.Hashtable[]] $Coordinates,
		# Word COM object table reference
		[Parameter(Mandatory=$True, ParameterSetName='Hashtable', Position=1)] [ValidateNotNullOrEmpty()] $Table,
		# Font name
		[Parameter()] [AllowNull()] [string] $Font = $Null,
		# Font color
		[Parameter()] [AllowNull()] $Color = $Null,
		# Font size
		[Parameter()] [ValidateNotNullOrEmpty()] [int] $Size = 0,
		# Cell background color
		[Parameter()] [AllowNull()] [int]$BackgroundColor = $Null,
		# Force solid background color
		[Switch] $Solid,
		[Switch] $Bold,
		[Switch] $Italic,
		[Switch] $Underline
	)

	Begin 
	{
		Write-Debug ("Using parameter set '{0}'." -f $PSCmdlet.ParameterSetName);
	}

	Process 
	{
		Switch ($PSCmdlet.ParameterSetName) 
		{
			'Collection' {
				ForEach($Cell in $Collection) 
				{
					If($Null -ne $BackgroundColor) { $Cell.Shading.BackgroundPatternColor = $BackgroundColor; }
					If($Bold) { $Cell.Range.Font.Bold = $True; }
					If($Italic) { $Cell.Range.Font.Italic = $True; }
					If($Underline) { $Cell.Range.Font.Underline = 1; }
					If($Null -ne $Font) { $Cell.Range.Font.Name = $Font; }
					If($Null -ne $Color) { $Cell.Range.Font.Color = $Color; }
					If($Size -ne 0) { $Cell.Range.Font.Size = $Size; }
					If($Solid) { $Cell.Shading.Texture = 0; } ## wdTextureNone
				} # end ForEach
			} # end Collection
			'Cell' 
			{
				If($Bold) { $Cell.Range.Font.Bold = $True; }
				If($Italic) { $Cell.Range.Font.Italic = $True; }
				If($Underline) { $Cell.Range.Font.Underline = 1; }
				If($Null -ne $Font) { $Cell.Range.Font.Name = $Font; }
				If($Null -ne $Color) { $Cell.Range.Font.Color = $Color; }
				If($Size -ne 0) { $Cell.Range.Font.Size = $Size; }
				If($Null -ne $BackgroundColor) { $Cell.Shading.BackgroundPatternColor = $BackgroundColor; }
				If($Solid) { $Cell.Shading.Texture = 0; } ## wdTextureNone
			} # end Cell
			'Hashtable' 
			{
				ForEach($Coordinate in $Coordinates) 
				{
					$Cell = $Table.Cell($Coordinate.Row, $Coordinate.Column);
					If($Bold) { $Cell.Range.Font.Bold = $True; }
					If($Italic) { $Cell.Range.Font.Italic = $True; }
					If($Underline) { $Cell.Range.Font.Underline = 1; }
					If($Null -ne $Font) { $Cell.Range.Font.Name = $Font; }
					If($Null -ne $Color) { $Cell.Range.Font.Color = $Color; }
					If($Size -ne 0) { $Cell.Range.Font.Size = $Size; }
					If($Null -ne $BackgroundColor) { $Cell.Shading.BackgroundPatternColor = $BackgroundColor; }
					If($Solid) { $Cell.Shading.Texture = 0; } ## wdTextureNone
				}
			} # end Hashtable
		} # end switch
	} # end process
}

<#
.Synopsis
	Sets alternate row colors in a Word table
.DESCRIPTION
	This function sets the format of alternate rows within a Word table using the
	specified $BackgroundColor. This function is expensive (in performance terms) as
	it recursively sets the format on alternate rows. It would be better to pick one
	of the predefined table formats (if one exists)? Obviously the more rows, the
	longer it takes :'(

	Note: this function is called by the AddWordTable function if an alternate row
	format is specified.
.EXAMPLE
	SetWordTableAlternateRowColor -Table $TableReference -BackgroundColor 255

	This example sets every-other table (starting with the first) row and sets the
	background color to red (wdColorRed).
.EXAMPLE
	SetWordTableAlternateRowColor -Table $TableReference -BackgroundColor 39423 -Seed Second

	This example sets every other table (starting with the second) row and sets the
	background color to light orange (weColorLightOrange).
#>

Function SetWordTableAlternateRowColor 
{
	[CmdletBinding()]
	Param (
		# Word COM object table reference
		[Parameter(Mandatory=$True, ValueFromPipeline=$True, Position=0)] [ValidateNotNullOrEmpty()] $Table,
		# Alternate row background color
		[Parameter(Mandatory=$True, Position=1)] [ValidateNotNull()] [int] $BackgroundColor,
		# Alternate row starting seed
		[Parameter(ValueFromPipelineByPropertyName=$True, Position=2)] [ValidateSet('First','Second')] [string] $Seed = 'First'
	)

	Process 
	{
		$StartDateTime = Get-Date;
		Write-Debug ("{0}: `t`tSetting alternate table row colors.." -f $StartDateTime);

		## Determine the row seed (only really need to check for 'Second' and default to 'First' otherwise
		If($Seed.ToLower() -eq 'second') 
		{ 
			$StartRowIndex = 2; 
		}
		Else 
		{ 
			$StartRowIndex = 1; 
		}

		For($AlternateRowIndex = $StartRowIndex; $AlternateRowIndex -lt $Table.Rows.Count; $AlternateRowIndex += 2) 
		{ 
			$Table.Rows.Item($AlternateRowIndex).Shading.BackgroundPatternColor = $BackgroundColor;
		}

		## I've put verbose calls in here we can see how expensive this functionality actually is.
		$EndDateTime = Get-Date;
		$ExecutionTime = New-TimeSpan -Start $StartDateTime -End $EndDateTime;
		Write-Debug ("{0}: `t`tDone setting alternate row style color in '{1}' seconds" -f $EndDateTime, $ExecutionTime.TotalSeconds);
	}
}
#endregion

#region general script functions
Function SaveandCloseDocumentandShutdownWord
{
	#bug fix 1-Apr-2014
	#reset Grammar and Spelling options back to their original settings
	$Script:Word.Options.CheckGrammarAsYouType = $Script:CurrentGrammarOption
	$Script:Word.Options.CheckSpellingAsYouType = $Script:CurrentSpellingOption

	Write-Verbose "$(Get-Date -Format G): Save and Close document and Shutdown Word"
	If($Script:WordVersion -eq $wdWord2010)
	{
		#the $saveFormat below passes StrictMode 2
		#I found this at the following two links
		#http://msdn.microsoft.com/en-us/library/microsoft.office.interop.word.wdsaveformat(v=office.14).aspx
		If($PDF)
		{
			Write-Verbose "$(Get-Date -Format G): Saving as DOCX file first before saving to PDF"
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): Saving DOCX file"
		}
		Write-Verbose "$(Get-Date -Format G): Running $($Script:WordProduct) and detected operating system $($Script:RunningOS)"
		$saveFormat = [Enum]::Parse([Microsoft.Office.Interop.Word.WdSaveFormat], "wdFormatDocumentDefault")
		$Script:Doc.SaveAs([REF]$Script:WordFileName, [ref]$SaveFormat)
		If($PDF)
		{
			Write-Verbose "$(Get-Date -Format G): Now saving as PDF"
			$saveFormat = [Enum]::Parse([Microsoft.Office.Interop.Word.WdSaveFormat], "wdFormatPDF")
			$Script:Doc.SaveAs([REF]$Script:PDFFileName, [ref]$saveFormat)
		}
	}
	ElseIf($Script:WordVersion -eq $wdWord2013 -or $Script:WordVersion -eq $wdWord2016)
	{
		If($PDF)
		{
			Write-Verbose "$(Get-Date -Format G): Saving as DOCX file first before saving to PDF"
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): Saving DOCX file"
		}
		Write-Verbose "$(Get-Date -Format G): Running $($Script:WordProduct) and detected operating system $($Script:RunningOS)"
		$Script:Doc.SaveAs2([REF]$Script:WordFileName, [ref]$wdFormatDocumentDefault)
		If($PDF)
		{
			Write-Verbose "$(Get-Date -Format G): Now saving as PDF"
			$Script:Doc.SaveAs([REF]$Script:PDFFileName, [ref]$wdFormatPDF)
		}
	}

	Write-Verbose "$(Get-Date -Format G): Closing Word"
	$Script:Doc.Close()
	$Script:Word.Quit()
	Write-Verbose "$(Get-Date -Format G): System Cleanup"
	[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Script:Word) | Out-Null
	If(Test-Path variable:global:word)
	{
		Remove-Variable -Name word -Scope Global 4>$Null
	}
	$SaveFormat = $Null
	[gc]::collect() 
	[gc]::WaitForPendingFinalizers()
	
	#is the winword Process still running? kill it

	#find out our session (usually "1" except on TS/RDC or Citrix)
	$SessionID = (Get-Process -PID $PID).SessionId

	#Find out if winword running in our session
	$wordprocess = ((Get-Process 'WinWord' -ea 0) | Where-Object {$_.SessionId -eq $SessionID}) | Select-Object -Property Id 
	If( $wordprocess -and $wordprocess.Id -gt 0)
	{
		Write-Verbose "$(Get-Date -Format G): WinWord Process is still running. Attempting to stop WinWord Process # $($wordprocess.Id)"
		Stop-Process $wordprocess.Id -EA 0
	}
}

Function SetupText
{
	Write-Verbose "$(Get-Date -Format G): Setting up Text"
	[System.Text.StringBuilder] $Script:Output = New-Object System.Text.StringBuilder( 16384 )

	If(!$AddDateTime)
	{
		[string]$Script:TextFileName = "$($Script:pwdpath)\$($OutputFileName).txt"
	}
	ElseIf($AddDateTime)
	{
		[string]$Script:TextFileName = "$($Script:pwdpath)\$($OutputFileName)_$(Get-Date -f yyyy-MM-dd_HHmm).txt"
	}
}

Function SaveandCloseTextDocument
{
	Write-Verbose "$(Get-Date -Format G): Saving Text file"
	Line 0 ""
	Line 0 "Report Complete"
	Write-Output $script:Output.ToString() | Out-File $Script:TextFileName 4>$Null
	[System.Text.StringBuilder] $Script:Output = New-Object System.Text.StringBuilder( 16384 )
}

Function SaveandCloseHTMLDocument
{
	Write-Verbose "$(Get-Date -Format G): Saving HTML file"
	WriteHTMLLine 0 0 ""
	WriteHTMLLine 0 0 "Report Complete"
	Out-File -FilePath $Script:HTMLFileName -Append -InputObject "<p></p></body></html>" 4>$Null
}

Function SetFilenames
{
	Param([string]$OutputFileName)
	
	If($MSWord -or $PDF)
	{
		CheckWordPreReq
		
		SetupWord
	}
	If($Text)
	{
		SetupText
	}
	If($HTML)
	{
		SetupHTML
	}
	ShowScriptOptions
}

Function OutputReportFooter
{
	#Added in 2.51
	<#
	Report Footer
		Report information:
			Created with: <Script Name> - Release Date: <Script Release Date>
			Script version: <Script Version>
			Started on <Date Time in Local Format>
			Elapsed time: nn days, nn hours, nn minutes, nn.nn seconds
			Ran from domain <Domain Name> by user <Username>
			Ran from the folder <Folder Name>

	Script Name and Script Release date are script-specific variables.
	Script version is a script variable.
	Start Date Time in Local Format is a script variable.
	Domain Name is $env:USERDNSDOMAIN.
	Username is $env:USERNAME.
	Folder Name is a script variable.
	#>

	$runtime = $(Get-Date) - $Script:StartTime
	$Str = [string]::format("{0} days, {1} hours, {2} minutes, {3}.{4} seconds",
		$runtime.Days,
		$runtime.Hours,
		$runtime.Minutes,
		$runtime.Seconds,
		$runtime.Milliseconds)

	If($MSWORD -or $PDF)
	{
		$Script:selection.InsertNewPage()
		WriteWordLine 1 0 "Report Footer"
		WriteWordLine 2 0 "Report Information:"
		WriteWordLine 0 1 "Created with: $Script:ScriptName - Release Date: $Script:ReleaseDate"
		WriteWordLine 0 1 "Script version: $Script:MyVersion"
		WriteWordLine 0 1 "Started on $Script:StartTime"
		WriteWordLine 0 1 "Elapsed time: $Str"
		WriteWordLine 0 1 "Ran from domain $env:USERDNSDOMAIN by user $env:USERNAME"
		WriteWordLine 0 1 "Ran from the folder $Script:pwdpath"
	}
	If($Text)
	{
		Line 0 "///  Report Footer  \\\"
		Line 1 "Report Information:"
		Line 2 "Created with: $Script:ScriptName - Release Date: $Script:ReleaseDate"
		Line 2 "Script version: $Script:MyVersion"
		Line 2 "Started on $Script:StartTime"
		Line 2 "Elapsed time: $Str"
		Line 2 "Ran from domain $env:USERDNSDOMAIN by user $env:USERNAME"
		Line 2 "Ran from the folder $Script:pwdpath"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "///&nbsp;&nbsp;Report Footer&nbsp;&nbsp;\\\"
		WriteHTMLLine 2 0 "Report Information:"
		WriteHTMLLine 0 1 "Created with: $Script:ScriptName - Release Date: $Script:ReleaseDate"
		WriteHTMLLine 0 1 "Script version: $Script:MyVersion"
		WriteHTMLLine 0 1 "Started on $Script:StartTime"
		WriteHTMLLine 0 1 "Elapsed time: $Str"
		WriteHTMLLine 0 1 "Ran from domain $env:USERDNSDOMAIN by user $env:USERNAME"
		WriteHTMLLine 0 1 "Ran from the folder $Script:pwdpath"
	}
}

Function ProcessDocumentOutput
{
	Param([string] $Condition)
	
	If($MSWORD -or $PDF)
	{
		SaveandCloseDocumentandShutdownWord
	}
	If($Text)
	{
		SaveandCloseTextDocument
	}
	If($HTML)
	{
		SaveandCloseHTMLDocument
	}

	If($Condition -eq "Regular")
	{
		$GotFile = $False

		If($MSWord)
		{
			If(Test-Path "$($Script:WordFileName)")
			{
				Write-Verbose "$(Get-Date -Format G): $($Script:WordFileName) is ready for use"
				$GotFile = $True
			}
			Else
			{
				Write-Warning "$(Get-Date -Format G): Unable to save the output file, $($Script:WordFileName)"
				Write-Error "Unable to save the output file, $($Script:WordFileName)"
			}
		}
		If($PDF)
		{
			If(Test-Path "$($Script:PDFFileName)")
			{
				Write-Verbose "$(Get-Date -Format G): $($Script:PDFFileName) is ready for use"
				$GotFile = $True
			}
			Else
			{
				Write-Warning "$(Get-Date -Format G): Unable to save the output file, $($Script:PDFFileName)"
				Write-Error "Unable to save the output file, $($Script:PDFFileName)"
			}
		}
		If($Text)
		{
			If(Test-Path "$($Script:TextFileName)")
			{
				Write-Verbose "$(Get-Date -Format G): $($Script:TextFileName) is ready for use"
				$GotFile = $True
			}
			Else
			{
				Write-Warning "$(Get-Date -Format G): Unable to save the output file, $($Script:TextFileName)"
				Write-Error "Unable to save the output file, $($Script:TextFileName)"
			}
		}
		If($HTML)
		{
			If(Test-Path "$($Script:HTMLFileName)")
			{
				Write-Verbose "$(Get-Date -Format G): $($Script:HTMLFileName) is ready for use"
				$GotFile = $True
			}
			Else
			{
				Write-Warning "$(Get-Date -Format G): Unable to save the output file, $($Script:HTMLFileName)"
				Write-Error "Unable to save the output file, $($Script:HTMLFileName)"
			}
		}
		
		#email output file if requested
		If($GotFile -and ![System.String]::IsNullOrEmpty( $SmtpServer ))
		{
			If($MSWord)
			{
				$emailAttachment = $Script:WordFileName
				SendEmail $emailAttachment
			}
			If($PDF)
			{
				$emailAttachment = $Script:PDFFileName
				SendEmail $emailAttachment
			}
			If($Text)
			{
				$emailAttachment = $Script:TextFileName
				SendEmail $emailAttachment
			}
			If($HTML)
			{
				$emailAttachment = $Script:HTMLFileName
				SendEmail $emailAttachment
			}
		}
	}
}

Function ShowScriptOptions
{
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): Add DateTime         : $($AddDateTime)"
	If($MSWORD -or $PDF)
	{
		Write-Verbose "$(Get-Date -Format G): Company Name         : $($Script:CoName)"
		Write-Verbose "$(Get-Date -Format G): Company Address      : $($CompanyAddress)"
		Write-Verbose "$(Get-Date -Format G): Company Email        : $($CompanyEmail)"
		Write-Verbose "$(Get-Date -Format G): Company Fax          : $($CompanyFax)"
		Write-Verbose "$(Get-Date -Format G): Company Phone        : $($CompanyPhone)"
		Write-Verbose "$(Get-Date -Format G): Cover Page           : $($CoverPage)"
	}
	Write-Verbose "$(Get-Date -Format G): Dev                  : $($Dev)"
	If($Dev)
	{
		Write-Verbose "$(Get-Date -Format G): DevErrorFile         : $($Script:DevErrorFile)"
	}
	If($MSWord)
	{
		Write-Verbose "$(Get-Date -Format G): Word FileName        : $($Script:WordFileName)"
	}
	If($HTML)
	{
		Write-Verbose "$(Get-Date -Format G): HTML FileName        : $($Script:HtmlFileName)"
	} 
	If($PDF)
	{
		Write-Verbose "$(Get-Date -Format G): PDF FileName         : $($Script:PDFFileName)"
	}
	If($Text)
	{
		Write-Verbose "$(Get-Date -Format G): Text FileName        : $($Script:TextFileName)"
	}
	Write-Verbose "$(Get-Date -Format G): Folder               : $($Folder)"
	Write-Verbose "$(Get-Date -Format G): From                 : $($From)"
	Write-Verbose "$(Get-Date -Format G): Log                  : $($Log)"
	Write-Verbose "$(Get-Date -Format G): Report Footer        : $ReportFooter"
	Write-Verbose "$(Get-Date -Format G): Save As HTML         : $($HTML)"
	Write-Verbose "$(Get-Date -Format G): Save As PDF          : $($PDF)"
	Write-Verbose "$(Get-Date -Format G): Save As TEXT         : $($TEXT)"
	Write-Verbose "$(Get-Date -Format G): Save As WORD         : $($MSWORD)"
	Write-Verbose "$(Get-Date -Format G): ScriptInfo           : $($ScriptInfo)"
	Write-Verbose "$(Get-Date -Format G): Smtp Port            : $($SmtpPort)"
	Write-Verbose "$(Get-Date -Format G): Smtp Server          : $($SmtpServer)"
	Write-Verbose "$(Get-Date -Format G): Title                : $($Script:Title)"
	Write-Verbose "$(Get-Date -Format G): To                   : $($To)"
	Write-Verbose "$(Get-Date -Format G): Use SSL              : $($UseSSL)"
	Write-Verbose "$(Get-Date -Format G): User                 : $($Script:User)"
	If($MSWORD -or $PDF)
	{
		Write-Verbose "$(Get-Date -Format G): User Name            : $($UserName)"
	}
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): OS Detected          : $($Script:RunningOS)"
	Write-Verbose "$(Get-Date -Format G): PoSH version         : $($Host.Version)"
	Write-Verbose "$(Get-Date -Format G): PSCulture            : $($PSCulture)"
	Write-Verbose "$(Get-Date -Format G): PSUICulture          : $($PSUICulture)"
	Write-Verbose "$(Get-Date -Format G): RAS Version          : $($Script:RASVersion)"
	If($MSWORD -or $PDF)
	{
		Write-Verbose "$(Get-Date -Format G): Word language        : $($Script:WordLanguageValue)"
		Write-Verbose "$(Get-Date -Format G): Word version         : $($Script:WordProduct)"
	}
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): Script start         : $($Script:StartTime)"
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): "
}
#endregion

#region email function
Function SendEmail
{
	Param([array]$Attachments)
	Write-Verbose "$(Get-Date -Format G): Prepare to email"

	$emailAttachment = $Attachments
	$emailSubject = $Script:Title
	$emailBody = @"
Hello, <br />
<br />
$Script:Title is attached.

"@ 

	If($Dev)
	{
		Out-File -FilePath $Script:DevErrorFile -InputObject $error 4>$Null
	}

	$error.Clear()
	
	If($From -Like "anonymous@*")
	{
		#https://serverfault.com/questions/543052/sending-unauthenticated-mail-through-ms-exchange-with-powershell-windows-server
		$anonUsername = "anonymous"
		$anonPassword = ConvertTo-SecureString -String "anonymous" -AsPlainText -Force
		$anonCredentials = New-Object System.Management.Automation.PSCredential($anonUsername,$anonPassword)

		If($UseSSL)
		{
			Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
			-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
			-UseSSL -credential $anonCredentials *>$Null 
		}
		Else
		{
			Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
			-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
			-credential $anonCredentials *>$Null 
		}
		
		If($?)
		{
			Write-Verbose "$(Get-Date -Format G): Email successfully sent using anonymous credentials"
		}
		ElseIf(!$?)
		{
			$e = $error[0]

			Write-Verbose "$(Get-Date -Format G): Email was not sent:"
			Write-Warning "$(Get-Date -Format G): Exception: $e.Exception" 
		}
	}
	Else
	{
		If($UseSSL)
		{
			Write-Verbose "$(Get-Date -Format G): Trying to send email using current user's credentials with SSL"
			Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
			-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
			-UseSSL *>$Null
		}
		Else
		{
			Write-Verbose  "$(Get-Date -Format G): Trying to send email using current user's credentials without SSL"
			Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
			-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To *>$Null
		}

		If(!$?)
		{
			$e = $error[0]
			
			#error 5.7.57 is O365 and error 5.7.0 is gmail
			If($null -ne $e.Exception -and $e.Exception.ToString().Contains("5.7"))
			{
				#The server response was: 5.7.xx SMTP; Client was not authenticated to send anonymous mail during MAIL FROM
				Write-Verbose "$(Get-Date -Format G): Current user's credentials failed. Ask for usable credentials."

				If($Dev)
				{
					Out-File -FilePath $Script:DevErrorFile -InputObject $error -Append 4>$Null
				}

				$error.Clear()

				$emailCredentials = Get-Credential -UserName $From -Message "Enter the password to send email"

				If($UseSSL)
				{
					Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
					-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
					-UseSSL -credential $emailCredentials *>$Null 
				}
				Else
				{
					Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
					-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
					-credential $emailCredentials *>$Null 
				}

				If($?)
				{
					Write-Verbose "$(Get-Date -Format G): Email successfully sent using new credentials"
				}
				ElseIf(!$?)
				{
					$e = $error[0]

					Write-Verbose "$(Get-Date -Format G): Email was not sent:"
					Write-Warning "$(Get-Date -Format G): Exception: $e.Exception" 
				}
			}
			Else
			{
				Write-Verbose "$(Get-Date -Format G): Email was not sent:"
				Write-Warning "$(Get-Date -Format G): Exception: $e.Exception" 
			}
		}
	}
}
#endregion

#region script start function
Function ProcessScriptSetup
{
	$script:startTime = Get-Date

	#make sure RASAdmin module is loaded
	If(!(Check-LoadedModule "RASAdmin"))
	{
		Write-Error "
		`n`n
		The RASAdmin module could not be loaded.
		`n`n
		Are you running this script against a V18 RAS server?
		`n`n
		Please see the Prerequisites section in the ReadMe file (RAS_Inventory_V2_ReadMe.rtf).
		`n`n
		https://carlwebster.sharefile.com/d-sa796d75a5fa74f84b0c6a35fa0ea7a4b
		`n`n
		Script cannot continue.
		`n`n
		"
		Write-Verbose "$(Get-Date -Format G): "
		AbortScript
	}

	#if computer name is localhost, get actual server name
	If($Script:ServerName -eq "localhost")
	{
		$Script:ServerName = $env:ComputerName
		Write-Verbose "$(Get-Date -Format G): Server name has been changed from localhost to $($Script:ServerName)"
	}
	
	#if computer name is an IP address, get host name from DNS
	#http://blogs.technet.com/b/gary/archive/2009/08/29/resolve-ip-addresses-to-hostname-using-powershell.aspx
	#help from Michael B. Smith
	$ip = $Script:ServerName -as [System.Net.IpAddress]
	If($ip)
	{
		$Result = [System.Net.Dns]::gethostentry($ip)
		
		If($? -and $Null -ne $Result)
		{
			$Script:ServerName = $Result.HostName
			Write-Verbose "$(Get-Date -Format G): Server name has been changed from $ip to $Script:ServerName"
		}
		Else
		{
			Write-Warning "Unable to resolve $Script:ServerName to a hostname"
		}
	}
	Else
	{
		#server is online but for some reason $Script:ServerName cannot be converted to a System.Net.IpAddress
	}

	If(![String]::IsNullOrEmpty($Script:ServerName)) 
	{
		#get server name
		#first test to make sure the server is reachable
		Write-Verbose "$(Get-Date -Format G): Testing to see if $Script:ServerName is online and reachable"
		If(Test-Connection -ComputerName $Script:ServerName -quiet -EA 0)
		{
			Write-Verbose "$(Get-Date -Format G): Server $Script:ServerName is online."
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): Server $Script:ServerName is offline"
			$ErrorActionPreference = $SaveEAPreference
			Write-Error "
			`n`n
			Computer $Script:ServerName is either offline or is not a valid computer name.
			`n`n
			Script cannot continue.
			`n`n
			"
			AbortScript
		}
	}

	#attempt to connect to the RAS server
	
	$creds = Get-Credential -UserName $Script:User -message "Enter credentials to connect to $Script:ServerName"

	Write-Verbose "$(Get-Date -Format G): Attempting connection to $Script:ServerName as $($creds.UserName)"
	$PSDefaultParameterValues = @{"*:Verbose"=$False}
	
	$Results = New-RASSession -username $creds.UserName -Password $creds.Password -Server $Script:ServerName -EA 0 *>$Null
	
	If(!($?))
	{
		$PSDefaultParameterValues = @{"*:Verbose"=$True}
		Write-Error "
		`n`n
		Unable to connect to Parallels RAS server $Script:ServerName.`
		`n`n
		Please rerun the script with the correct RAS server name, user name, or password.
		`n`n
		Script cannot continue.
		`n`n
		"
		AbortScript
	}
	Else
	{
		$PSDefaultParameterValues = @{"*:Verbose"=$True}
		$Script:User = $creds.UserName
		Write-Verbose "$(Get-Date -Format G): Successfully connected to $Script:ServerName as $Script:User"
	}

	Write-Verbose "$(Get-Date -Format G): Get RAS Version"
	$Results = Get-RASVersion -EA 0 4>$Null
	
	If($? -and $Null -ne $Results)
	{
		#this script is only for RAS 18.1
		$tmp = $results.split(".")
		
		$Script:RASVersion = "$($tmp[0]).$($tmp[1])"
		$Script:RASFullVersion = $Results
		
		If([version]$Script:RASVersion -ge [version]"19.1")
		{
			#we are good
		}
		Else
		{
			#wrong RAS version
			Write-Host "You are running version $Results" -ForegroundColor White
			Write-Error "
	`n`n
	This script is designed for RAS 19.1 and should not be run on $Results.
	`n`n
	If you are running RAS 18.x, please use: 
	https://carlwebster.com/downloads/download-info/parallels-remote-application-server/
	`n`n
	If you are running RAS 17, please use:
	https://carlwebster.com/downloads/download-info/parallels-remote-application-server-v17/
	`n`n
	Script cannot continue
	`n`n
		"
			AbortScript
		}
	}
	Else
	{
		$Script:RASVersion = "Unable to determine"
		$Script:RASFullVersion = "Unable to determine"

		Write-Error "
	`n`n
	This script is designed for RAS 19.1 and your RAS version could not be determined.
	`n`n
	If you are running RAS 18.x, please use: 
	https://carlwebster.com/downloads/download-info/parallels-remote-application-server/
	`n`n
	If you are running RAS 17, please use:
	https://carlwebster.com/downloads/download-info/parallels-remote-application-server-v17/
	`n`n
	Script cannot continue
	`n`n
		"
		AbortScript
	}
	Write-Verbose "$(Get-Date -Format G): Running RAS Version $($Script:RASVersion)"
	
	$Script:Title = "Parallels RAS Inventory"
}
#endregion

#region script end
Function ProcessScriptEnd
{
	Write-Verbose "$(Get-Date -Format G): Script has completed"
	Write-Verbose "$(Get-Date -Format G): "

	#http://poshtips.com/measuring-elapsed-time-in-powershell/
	Write-Verbose "$(Get-Date -Format G): Script started: $($Script:StartTime)"
	Write-Verbose "$(Get-Date -Format G): Script ended: $(Get-Date)"
	$runtime = $(Get-Date) - $Script:StartTime
	$Str = [string]::format("{0} days, {1} hours, {2} minutes, {3}.{4} seconds",
		$runtime.Days,
		$runtime.Hours,
		$runtime.Minutes,
		$runtime.Seconds,
		$runtime.Milliseconds)
	Write-Verbose "$(Get-Date -Format G): Elapsed time: $($Str)"

	If($Dev)
	{
		If($SmtpServer -eq "")
		{
			Out-File -FilePath $Script:DevErrorFile -InputObject $error 4>$Null
		}
		Else
		{
			Out-File -FilePath $Script:DevErrorFile -InputObject $error -Append 4>$Null
		}
	}

	If($ScriptInfo)
	{
		$SIFile = "$Script:pwdpath\RASInventoryScriptInfo_$(Get-Date -f yyyy-MM-dd_HHmm).txt"
		Out-File -FilePath $SIFile -InputObject "" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Add DateTime         : $AddDateTime" 4>$Null
		If($MSWORD -or $PDF)
		{
			Out-File -FilePath $SIFile -Append -InputObject "Company Name         : $Script:CoName" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Company Address      : $CompanyAddress" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Company Email        : $CompanyEmail" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Company Fax          : $CompanyFax" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Company Phone        : $CompanyPhone" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Cover Page           : $CoverPage" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "Dev                  : $Dev" 4>$Null
		If($Dev)
		{
			Out-File -FilePath $SIFile -Append -InputObject "DevErrorFile         : $Script:DevErrorFile" 4>$Null
		}
		If($MSWord)
		{
			Out-File -FilePath $SIFile -Append -InputObject "Word FileName        : $Script:WordFileName" 4>$Null
		}
		If($HTML)
		{
			Out-File -FilePath $SIFile -Append -InputObject "HTML FileName        : $Script:HtmlFileName" 4>$Null
		}
		If($PDF)
		{
			Out-File -FilePath $SIFile -Append -InputObject "PDF Filename         : $Script:PDFFileName" 4>$Null
		}
		If($Text)
		{
			Out-File -FilePath $SIFile -Append -InputObject "Text FileName        : $Script:TextFileName" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "Folder               : $Folder" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "From                 : $From" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Log                  : $Log" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Report Footer        : $ReportFooter" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Save As HTML         : $HTML" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Save As PDF          : $PDF" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Save As TEXT         : $TEXT" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Save As WORD         : $MSWORD" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Script Info          : $ScriptInfo" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Server               : $Script:ServerName" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Smtp Port            : $SmtpPort" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Smtp Server          : $SmtpServer" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Title                : $Script:Title" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "To                   : $To" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Use SSL              : $UseSSL" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "User                 : $Script:User" 4>$Null
		If($MSWORD -or $PDF)
		{
			Out-File -FilePath $SIFile -Append -InputObject "User Name            : $UserName" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "OS Detected          : $Script:RunningOS" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "PoSH version         : $($Host.Version)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "PSCulture            : $PSCulture" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "PSUICulture          : $PSUICulture" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "RAS Version          : $Script:RASVersion" 4>$Null
		If($MSWORD -or $PDF)
		{
			Out-File -FilePath $SIFile -Append -InputObject "Word language        : $Script:WordLanguageValue" 4>$Null
			Out-File -FilePath $SIFile -Append -InputObject "Word version         : $Script:WordProduct" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Script start         : $Script:StartTime" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Elapsed time         : $Str" 4>$Null
	}

	#stop transcript logging
	If($Log -eq $True) 
	{
		If($Script:StartLog -eq $true) 
		{
			try 
			{
				Stop-Transcript | Out-Null
				Write-Verbose "$(Get-Date -Format G): $Script:LogPath is ready for use"
			} 
			catch 
			{
				Write-Verbose "$(Get-Date -Format G): Transcript/log stop failed"
			}
		}
	}
	
	#cleanup obj variables
	$Script:Output = $Null
}
#endregion

#region process farm
Function ProcessFarm
{
	Write-Verbose "$(Get-Date -Format G): Processing Farm"
	
	$Results = Get-RASFarmSettings -EA 0 4>$Null

	If(!$?)
	{
		Write-Error "
		`n`n
		Unable to retrieve RAS Farm Settings for Parallels RAS server $Script:ServerName.`
		`n`n
		Script cannot continue.
		`n`n
		"
		AbortScript
	}
	ElseIf($? -and $Null -eq $Results)
	{
		Write-Error "
		`n`n
		No RAS Farm Settings retrieved for Parallels RAS server $Script:ServerName.`
		`n`n
		Script cannot continue.
		`n`n
		"
		AbortScript
	}
	Else
	{
		$Script:RASFarmName = $Results.Name
	}
}

Function OutputFarm
{
	Write-Verbose "$(Get-Date -Format G): Output Farm"
	
	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "Farm - " $Script:RASFarmName
	}
	If($Text)
	{
		Line 0 "Farm - " $Script:RASFarmName
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "Farm - " $Script:RASFarmName
	}
}

Function GetFarmSites
{
	#Write-Verbose "$(Get-Date -Format G): `tRetrieving Farm Sites"
	
	If($RASSite -eq "All")
	{
		$Script:Sites = Get-RASSite -EA 0 4> $Null
	}
	Else
	{
		$Script:Sites = Get-RASSite -Name $RASSite -EA 0 4> $Null
	}

	If(!$?)
	{
		If($RASSite -eq "All")
		{
	Write-Error "
	`n`n
	Unable to retrieve Sites for Farm $Script:RASFarmName
	`n`n
	Script cannot continue
	`n`n
	"
		}
		Else
		{
	Write-Error "
	`n`n
	Unable to retrieve Site $RASSite for Farm $Script:RASFarmName
	`n`n
	Script cannot continue
	`n`n
	"
		}
		AbortScript
	}
	ElseIf($? -and $Null -eq $Script:Sites)
	{
	Write-Warning "
	`n
	No Sites were found for Farm $Script:RASFarmName.`
	`n
	"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Sites were found for Farm $Script:RASFarmName"
		}
		If($Text)
		{
			Line 0 "No Sites were found for Farm $Script:RASFarmName"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Sites were found for Farm $Script:RASFarmName"
		}
	}
	Else
	{
		#Continue on with script
	}
}

Function OutputFarmSite
{
	Param([object]$Site)
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Farm Site $($Site.Name)"
	$SiteSettings = Get-RASSiteStatus -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Site Status for Site $Site.Name`
		"
		$PrimaryPublishingAgent = "N/A"
		$Type                   = "N/A"
		$State                  = "N/A"
		$Description            = "Can't find"
		$ID                     = $Site.Id
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Site Status for Site $Site.Name"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Site Status for Site $Site.Name"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Site Status for Site $Site.Name"
		}
	}
	ElseIf($? -and $Null -eq $SiteSettings)
	{
		Write-Host "
	No Site Status retrieved for Site $Site.Name.`
		" -ForegroundColor White
		$PrimaryPublishingAgent = "N/A"
		If($Site.LicensingSite)
		{
			$Type = "Licensing Site/Current Site"
		}
		Else
		{
			$Type = "Secondary Site"
		}
		$State = "N/A"
		$Description = "Can't find"
		$ID = $Site.Id
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Site Status retrieved for Site $Site.Name"
		}
		If($Text)
		{
			Line 0 "No Site Status retrieved for Site $Site.Name"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Site Status retrieved for Site $Site.Name"
		}
	}
	Else
	{
		$Results = Get-RASBroker -SiteId $Site.Id -EA 0 4> $Null | Select-Object -First 1 #changed in 2.52 to only get the first PA
		
		If($? -and $Null -ne $Results)
		{
			$Description = $Results.Description
		}
		Else
		{
			$Description = "-"
		}
		
		$PrimaryPublishingAgent = $SiteSettings.Server
		If($Site.LicensingSite)
		{
			$Type = "Licensing Site/Local Site/Current Site"
		}
		Else
		{
			$Type = "Secondary Site"
		}
		$State = GetRASStatus $SiteSettings.AgentState
		$ID = $Site.Id
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Site"; Value = $Site.Name; }) > $Null
		$ScriptInformation.Add(@{Data = "Primary Connection Broker"; Value = $PrimaryPublishingAgent; }) > $Null
		$ScriptInformation.Add(@{Data = "Type"; Value = $Type; }) > $Null
		$ScriptInformation.Add(@{Data = "State"; Value = $State; }) > $Null
		$ScriptInformation.Add(@{Data = "Description"; Value = $Description; }) > $Null
		$ScriptInformation.Add(@{Data = "ID"; Value = $ID; }) > $Null
		$ScriptInformation.Add(@{Data = "Last modification by"; Value = $Site.AdminLastMod; }) > $Null
		$ScriptInformation.Add(@{Data = "Modified on"; Value = $Site.TimeLastMod.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = "Created by"; Value = $Site.AdminCreate; }) > $Null
		$ScriptInformation.Add(@{Data = "Created on"; Value = $Site.TimeCreate.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 1 "Site`t`t`t : " $Site.Name
		Line 1 "Primary Connection Broker: " $PrimaryPublishingAgent
		Line 1 "Type`t`t`t : " $Type
		Line 1 "State`t`t`t : " $State
		Line 1 "Description`t`t : " $Description
		Line 1 "ID`t`t`t : " $ID
		Line 1 "Last modification by`t : " $Site.AdminLastMod
		Line 1 "Modified on`t`t : " $Site.TimeLastMod.ToString()
		Line 1 "Created by`t`t : " $Site.AdminCreate
		Line 1 "Created on`t`t : " $Site.TimeCreate.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Site",($Script:htmlsb),$Site.Name,$htmlwhite)
		$rowdata += @(,("Primary Connection Broker",($Script:htmlsb),$PrimaryPublishingAgent,$htmlwhite))
		$rowdata += @(,("Type",($Script:htmlsb),$Type,$htmlwhite))
		$rowdata += @(,("State",($Script:htmlsb),$State.ToString(),$htmlwhite))
		$rowdata += @(,("Description",($Script:htmlsb),$Description,$htmlwhite))
		$rowdata += @(,("ID",($Script:htmlsb),$ID,$htmlwhite))
		$rowdata += @(,("Last modification by",($Script:htmlsb), $Site.AdminLastMod,$htmlwhite))
		$rowdata += @(,("Modified on",($Script:htmlsb), $Site.TimeLastMod.ToString(),$htmlwhite))
		$rowdata += @(,("Created by",($Script:htmlsb), $Site.AdminCreate,$htmlwhite))
		$rowdata += @(,("Created on",($Script:htmlsb), $Site.TimeCreate.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("200","275")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function GetVDIType
{
	Param([string] $VDIHostType)
	
	Switch ($VDIHostType)
	{
		"HyperVWin2008Std"					{$VDIType = "HyperV on Windows Server 2008 Standard Edition"; Break}
		"HyperVWin2008Ent"					{$VDIType = "HyperV on Windows Server 2008 Enterprise Edition"; Break}
		"HyperVWin2008Dtc"					{$VDIType = "HyperV on Windows Server 2008 Datacenter Edition"; Break}
		"HyperV"							{$VDIType = "HyperV"; Break}
		"HyperVWin2012Std"					{$VDIType = "HyperV on Windows Server 2012 Datacenter Edition"; Break}
		"HyperVWin2012Dtc"					{$VDIType = "HyperV on Windows Server 2012 Datacenter Edition"; Break}
		"HyperVWin2012Srv"					{$VDIType = "HyperV on Windows Server 2012"; Break}
		"HyperVWin2008R2Std"				{$VDIType = "HyperV on Windows Server 2008 R2 Standard Edition"; Break}
		"HyperVWin2008R2Ent"				{$VDIType = "HyperV on Windows Server 2008 R2 Enterprise Edition"; Break}
		"HyperVWin2008R2Dtc"				{$VDIType = "HyperV on Windows Server 2008 R2 Datacenter Edition"; Break}
		"CitrixXenUnknown"					{$VDIType = "Citrix XenServer"; Break}
		"CitrixXen5_0"						{$VDIType = "Citrix XenServer 5.0"; Break}
		"CitrixXen5_5"						{$VDIType = "Citrix XenServer 5.5"; Break}
		"CitrixXen5_6"						{$VDIType = "Citrix XenServer 5.6"; Break}
		"CitrixXen5_6_1"					{$VDIType = "Citrix XenServer 5.6.1"; Break}
		"CitrixXen6_0"						{$VDIType = "Citrix XenServer 6.0"; Break}
		"CitrixXen6_1"						{$VDIType = "Citrix XenServer 6.1"; Break}
		"CitrixXen6_2"						{$VDIType = "Citrix XenServer 6.2"; Break}
		"CitrixXen6_5"						{$VDIType = "Citrix XenServer 6.5"; Break}
		"CitrixXen7_0"						{$VDIType = "Citrix XenServer 7.0"; Break}
		"CitrixXen7_1"						{$VDIType = "Citrix XenServer 7.1"; Break}
		"CitrixXen7_2"						{$VDIType = "Citrix XenServer 7.2"; Break}
		"QemuKvmUnknown"					{$VDIType = "QEMU KVM unknown"; Break}
		"QemuKvm1_2_14"						{$VDIType = "QEMU KVM 1.2.14"; Break}
		"HyperVUnknown"						{$VDIType = "HyperV on Unknown Server"; Break}
		"HyperVWin2012R2Std"				{$VDIType = "HyperV on Windows Server 2012 Standard Edition"; Break}
		"HyperVWin2012R2Dtc"				{$VDIType = "HyperV on Windows Server 2012 R2 Datacenter Edition"; Break}
		"HyperVWin2012R2Srv"				{$VDIType = "HyperV on Windows Server 2012 R2"; Break}
		"HyperVWin2016Std"					{$VDIType = "HyperV on Windows Server 2016 Standard Edition"; Break}
		"HyperVWin2016Dtc"					{$VDIType = "HyperV on Windows Server 2016 Datacenter Edition"; Break}
		"HyperVWin2016Srv"					{$VDIType = "HyperV on Windows Server 2016"; Break}
		"HyperVWin2019Std"					{$VDIType = "HyperV on Windows Server 2019 Standard Edition"; Break}
		"HyperVWin2019Dtc"					{$VDIType = "HyperV on Windows Server 2019 Datacenter Edition"; Break}
		"HyperVWin2019Srv"					{$VDIType = "HyperV on Windows Server 2019"; Break}
		"HyperVWin2022Std"					{$VDIType = "HyperV on Windows Server 2022 Standard Edition"; Break}
		"HyperVWin2022Dtc"					{$VDIType = "HyperV on Windows Server 2022 Datacenter Edition"; Break}
		"HyperVFailoverClusterUnknown"		{$VDIType = "HyperV Failover Cluster on Unknown Server"; Break}
		"HyperVFailoverClusterEnt"			{$VDIType = "HyperV Failover Cluster Enterprise Edition"; Break}
		"HyperVFailoverClusterDtc"			{$VDIType = "HyperV Failover Cluster Datacenter Edition"; Break}
		"HyperVFailoverClusterWin2012"		{$VDIType = "HyperV Failover Cluster on Windows Server 2012"; Break}
		"HyperVFailoverClusterWin2012R2"	{$VDIType = "HyperV Failover Cluster on Windows Server 2012 R2"; Break}
		"HyperVFailoverClusterWin2016"		{$VDIType = "HyperV Failover Cluster on Windows Server 2016"; Break}
		"HyperVFailoverClusterWin2019"		{$VDIType = "HyperV Failover Cluster on Windows Server 2019"; Break}
		"HyperVFailoverClusterWin2022"		{$VDIType = "HyperV Failover Cluster on Windows Server 2022"; Break}
		"VmwareESXUnknown"					{$VDIType = "Vmware ESXi"; Break}
		"VmwareESXi4_0"						{$VDIType = "Vmware ESXi 4.0"; Break}
		"VmwareESX4_0"						{$VDIType = "Vmware ESX 4.0"; Break}
		"VmwareESXi4_1"						{$VDIType = "Vmware ESXi 4.1"; Break}
		"VmwareESX4_1"						{$VDIType = "Vmware ESX 4.1"; Break}
		"VmwareESXi5_0"						{$VDIType = "Vmware ESXi 5.0"; Break}
		"VmwareESXi5_1"						{$VDIType = "Vmware ESXi 5.1"; Break}
		"VmwareESXi5_5"						{$VDIType = "Vmware ESXi 5.5"; Break}
		"VmwareESXi6_0"						{$VDIType = "Vmware ESXi 6.0"; Break}
		"VmwareESXi6_5"						{$VDIType = "Vmware ESXi 6.5"; Break}
		"VmwareESXi6_7"						{$VDIType = "Vmware ESXi 6.7"; Break}
		"VmwareESXi7_0"						{$VDIType = "Vmware ESXi 7.0"; Break}
		"VmwareVCenterUnknown"				{$VDIType = "Vmware VCenter Server"; Break}
		"VmwareVCenter4_0"					{$VDIType = "Vmware VCenter Server 4.0"; Break}
		"VmwareVCenter4_1"					{$VDIType = "Vmware VCenter Server 4.1"; Break}
		"VmwareVCenter5_0"					{$VDIType = "Vmware VCenter Server 5.0"; Break}
		"VmwareVCenter5_1"					{$VDIType = "Vmware VCenter Server 5.1"; Break}
		"VmwareVCenter5_5"					{$VDIType = "Vmware VCenter Server 5.5"; Break}
		"VmwareVCenter6_0"					{$VDIType = "Vmware VCenter Server 6.0"; Break}
		"VmwareVCenter6_5"					{$VDIType = "Vmware VCenter Server 6.5"; Break}
		"VmwareVCenter6_7"					{$VDIType = "Vmware VCenter Server 6.7"; Break}
		"VmwareVCenter7_0"					{$VDIType = "Vmware VCenter Server 7.0"; Break}
		15									{$VDIType = "Vmware VCenter Server 7.0"; Break}
		"NutanixUnknown"					{$VDIType = "Nutanix unknown"; Break}
		"Nutanix5_0"						{$VDIType = "Nutanix 5.0"; Break}
		"Nutanix5_5"						{$VDIType = "Nutanix 5.5"; Break}
		"Nutanix5_10"						{$VDIType = "Nutanix 5.10"; Break}
		"Nutanix5_15"						{$VDIType = "Nutanix 5.15"; Break}
		"Nutanix5_20"						{$VDIType = "Nutanix 5.20"; Break}
		"Nutanix6_5"						{$VDIType = "Nutanix 6.5"; Break}
		"RemotePCStaticUnknown"				{$VDIType = "Remote PC static unknown"; Break}
		"RemotePCStatic"					{$VDIType = "Remote PC static"; Break}
		"RemotePCDynamicUnknown"			{$VDIType = "Remote PC dynamic unknown"; Break}
		"RemotePCDynamic"					{$VDIType = "Remote PC dynamic"; Break}
		"Scale"								{$VDIType = "Scale unknown"; Break}
		"ScaleUnknown"						{$VDIType = "Scale unknown"; Break}
		"Scale7_4"							{$VDIType = "Scale 7.4"; Break}
		"Scale8_6_5"						{$VDIType = "Scale 8.6.5"; Break}
		"Scale8_8"							{$VDIType = "Scale 8.8"; Break}
		"Scale8_9"							{$VDIType = "Scale 8.9"; Break}
		"Scale9_1"							{$VDIType = "Scale 9.1"; Break}
		"Azure"								{$VDIType = "Azure"; Break}
		21									{$VDIType = "Azure"; Break}
		"AzureUnknown"						{$VDIType = "Azure"; Break}					
		"AVD"								{$VDIType = "AVD"; Break}					
		"AWSEC2"							{$VDIType = "AWSEC2"; Break}					
		Default								{$VDIType = "Unable to determine VDI Host Type: $($VDIHostType)"; Break}
	}
	
	Return $VDIType
}

Function GetRASStatus
{
	Param([string] $RASStatus)
	
	Switch ($RASStatus)
	{
		#""						{$FullRASStatus = ""; Break}
		"AddingMembers"					{$FullRASStatus = "Guest being added to the group"; Break}
		"Broken"						{$FullRASStatus = "Agent broken state"; Break}
		"BrokerNoAvailableGWs"			{$FullRASStatus = "There are no gateways that the Tenant Broker can use to process connections"; Break}
		"CloningCanceled"				{$FullRASStatus = "Cloning is being cancelled"; Break}
		"CloningFailed"					{$FullRASStatus = "Cloning process failed"; Break}
		"CloningInProgress"				{$FullRASStatus = "Cloning for RAS Template is in progress"; Break}
		"ConnectionFailed"				{$FullRASStatus = "Agent cannot connect to the host"; Break}
		"DeleteInProgress"				{$FullRASStatus = "A delete is currently in progress"; Break}
		"DisabledFromSettings"			{$FullRASStatus = "Agent was disabled from configuration but it's still available in the runtime"; Break}
		"Disconnected"					{$FullRASStatus = "Agent is not connected to any RAS Publishing Agent"; Break}
		"EnrollmentUnavailable"			{$FullRASStatus = "Enrollment agent certificated was not created"; Break}
		"EnrollServerNotInitialized"	{$FullRASStatus = "Enrollment agent not initialized (i.e. waiting for new settings)"; Break}
		"EnumSessionsFailed"			{$FullRASStatus = "Failed to get sessions information from the agent"; Break}
		"FailedPerfCounters"			{$FullRASStatus = "Performance counters failed to initialize"; Break}
		"ForcedDisconnect"				{$FullRASStatus = "Agent forced to disconnect"; Break}
		"FreeESXLicenseNotSupported"	{$FullRASStatus = "Free ESX License is not supported with RAS"; Break}
		"FSLogixNeedsUpdate"			{$FullRASStatus = "Version of installed FSLogix older than the one in configuration"; Break}
		"FSLogixNotAvail"				{$FullRASStatus = "FSLogix is not available"; Break}
		"HotfixKB2580360NotInstalled"	{$FullRASStatus = "Hotfix KB2580360 not installed on the host. This is required by the RAS Vdi Agent to connect to the host"; Break}
		"ImageOptimization"				{$FullRASStatus = "Image optimization is in active state"; Break}
		"ImageOptimizationPending"		{$FullRASStatus = "Image optimization is in pending state"; Break}
		"InstallingRDSRole"				{$FullRASStatus = "Installation of RDS role is in progress"; Break}
		"InUse"							{$FullRASStatus = "Agent is already connected to another farm"; Break}
		"Invalid"						{$FullRASStatus = "WVD object data corrupted"; Break}
		"InvalidCAConfig"				{$FullRASStatus = "Invalid Certificate Authority configuration"; Break}
		"InvalidCredentials"			{$FullRASStatus = "Connection to host failed because of invalid credentials"; Break}
		"InvalidEAUserCredentials"		{$FullRASStatus = "Invalid enrollment agent credentials"; Break}
		"InvalidESSettings"				{$FullRASStatus = "Invalid Enrollment Agent Settings"; Break}
		"InvalidHostVersion"			{$FullRASStatus = "Invalid Provider version"; Break}
		"JoinBroken"					{$FullRASStatus = "The tenant failed to connect to Tenant Broker"; Break}
		"JoiningToGroup"				{$FullRASStatus = "A host is current being joined to a group or hostpool"; Break}
		"LicenseExpired"				{$FullRASStatus = "The tenant License has expired"; Break}
		"LogonDisabled"					{$FullRASStatus = "Disable user login from sessions"; Break}
		"LogonDrain"					{$FullRASStatus = "New logons disabled (drain mode)"; Break}
		"LogonDrainUntilRestart"		{$FullRASStatus = "New logons disabled (drain mode) until restart"; Break}
		"ManagedESXNotSupported"		{$FullRASStatus = "Managed ESX License is not supported by RAS"; Break}
		"MarkedForDeletion"				{$FullRASStatus = "Agent is marked for deletion"; Break}
		"MaxNonCompletedSessions"		{$FullRASStatus = "Maximum number of non-completed sessions limit reached"; Break}
		"MembersNeedUpdate"				{$FullRASStatus = "One or more members in the host pool is in need update state"; Break}
		"NeedsAttention"				{$FullRASStatus = "HALB Instance: One or more HALB devices are not configured OR WVD HostPool is empty (no hosts assigned)"; Break}
		"NeedsDowngrade"				{$FullRASStatus = "Agent version is greater than the RAS Publishing Agent version"; Break}
		"NeedsSysprep"					{$FullRASStatus = "Guest agent needs Sysprep answer file"; Break}
		"NeedsUpdate"					{$FullRASStatus = "Agent version is less than the RAS Server version"; Break}
		"NoAvailableGateways"			{$FullRASStatus = "There are no RAS Secure Gateways that the Tenant Broker can use to process connections"; Break}
		"NoDevices"						{$FullRASStatus = "HALB Instance: No HALB devices are configured"; Break}
		"NoMembersAvailable"			{$FullRASStatus = "No members in the host pool"; Break}
		"NonRAS"						{$FullRASStatus = "Non RAS agent (WVD related agents)"; Break}
		"NotApplied"					{$FullRASStatus = "Agent settings not applied"; Break}
		"NotInUse"						{$FullRASStatus = "Agent is not connect to any farm"; Break}
		"NotJoined"						{$FullRASStatus = "Tenant is invited to join or has been added to the farm but not yet joined"; Break}
		"NotVerified"					{$FullRASStatus = "Agent not connected to RAS Publishing Agent and cannot be used"; Break}
		"OK"							{$FullRASStatus = "Agent is working correctly"; Break}
		"PendingRecreation"				{$FullRASStatus = "Machine will be recreated on the last user logoff"; Break}
		"PortMismatch"					{$FullRASStatus = "Port mismatch found on the agent because it's already in use"; Break}
		"Provisioning"					{$FullRASStatus = "A clone is being provisioned from the assigned template"; Break}
		"RASprepInProgress"				{$FullRASStatus = "RASprep in progress on machine"; Break}
		"RASScheduleInProgress"			{$FullRASStatus = "Disabled (scheduler)"; Break}
		"RDSRoleDisabled"				{$FullRASStatus = "RD Session Host disabled or denying connections"; Break}
		"RebootPending"					{$FullRASStatus = "Reboot of machine is pending"; Break}
		"RemovingMembers"				{$FullRASStatus = "Guest being removed from the group"; Break}
		"ScalingIn"						{$FullRASStatus = "Deprecated: use RemovingMembers instead"; Break}
		"ScalingOut"					{$FullRASStatus = "Deprecated: use AddingMembers instead"; Break}
		"ServerDeleted"					{$FullRASStatus = "Agent was removed from configuration."; Break}
		"StandBy"						{$FullRASStatus = "Agent is in standby mode"; Break}
		"Synchronising"					{$FullRASStatus = "Synchronizing agent settings is in progress"; Break}
		"SysPrepInProgress"				{$FullRASStatus = "SysPrep in progress on machine"; Break}
		"Unavailable"					{$FullRASStatus = "Agent is not available since depending objects are not available or empty"; Break}
		"UnderConstruction"				{$FullRASStatus = "Agent under construction"; Break}
		"Unknown"						{$FullRASStatus = "No agent state information available"; Break}
		"Unsupported"					{$FullRASStatus = "Agent version is no longer supported or agent's OS no longer supported"; Break}
		"UnsupportedVDIType"			{$FullRASStatus = "Provider type is not supported"; Break}
		Default							{$FullRASStatus = "Unable to determine Provider Status: $($ProviderStatus)"; Break}
	}
	
	Return $FullRASStatus
}

Function OutputSite
{
	Param([object]$Site)
	
	Write-Verbose "$(Get-Date -Format G): Output Site $($Site.Name)"
	$RDSHosts = Get-RASRDS -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve RD Session Hosts for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve RD Session Hosts for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve RD Session Hosts for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve RD Session Hosts for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $RDSHosts)
	{
		Write-Host "
	No RD Session Hosts retrieved for Site $($Site.Name).
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No RD Session Hosts retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No RD Session Hosts retrieved for Site $($Site.Name)e"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No RD Session Hosts retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		If($MSWord -or $PDF)
		{
			$Script:Selection.InsertNewPage()
			WriteWordLine 1 0 "Site - $($Site.Name)"
			WriteWordLine 2 0 "RD Session Hosts"
		}
		If($Text)
		{
			Line 0 "Site - $($Site.Name)"
			Line 1 "RD Session Hosts"
		}
		If($HTML)
		{
			WriteHTMLLine 1 0 "Site - $($Site.Name)"
			WriteHTMLLine 2 0 "RD Session Hosts"
		}

		Write-Verbose "$(Get-Date -Format G): `tOutput RD Session Hosts"
		ForEach($RDSHost in $RDSHosts)
		{
			$RDSStatus = Get-RASRDSStatus -Id $RDSHost.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve RDS Status for RDS Host $($RDSHost.Server)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve RDS Status for RDS Host $($RDSHost.Server)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve RDS Status for RDS Host $($RDSHost.Server)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve RDS Status for RDS Host $($RDSHost.Server)"
				}
			}
			ElseIf($? -and $Null -eq $RDSStatus)
			{
				Write-Host "
				No RDS Status retrieved for RDS Host $($RDSHost.Server)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No RDS Status retrieved for RDS Host $($RDSHost.Server)"
				}
				If($Text)
				{
					Line 0 "No RDS Status retrieved for RDS Host $($RDSHost.Server)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No RDS Status retrieved for RDS Host $($RDSHost.Server)"
				}
			}
			Else
			{
				$Sessions = "$($RDSStatus.ActiveSessions)/$($RDSHost.MaxSessions)"
				$RDSStatusAgentState = GetRASStatus $RDSStatus.AgentState
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Name"; Value = $RDSHost.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "Status"; Value = $RDSStatusAgentState; }) > $Null
					$ScriptInformation.Add(@{Data = "CPU"; Value = "$($RDSStatus.CPULoad)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "RAM"; Value = "$($RDSStatus.MemLoad)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Disk read time"; Value = "$($RDSStatus.DiskRead)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Disk write time"; Value = "$($RDSStatus.DiskWrite)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Sessions"; Value = $Sessions; }) > $Null
					$ScriptInformation.Add(@{Data = "Preferred Connection Broker"; Value = $RDSStatus.PreferredBroker; }) > $Null
					$ScriptInformation.Add(@{Data = "Operating system"; Value = $RDSStatus.ServerOS; }) > $Null
					$ScriptInformation.Add(@{Data = "Agent version"; Value = $RDSStatus.AgentVer; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 300;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 2 "Name`t`t`t`t: " $RDSHost.Server
					Line 2 "Status`t`t`t`t: " $RDSStatusAgentState
					Line 2 "CPU`t`t`t`t: " "$($RDSStatus.CPULoad)%"
					Line 2 "RAM`t`t`t`t: " "$($RDSStatus.MemLoad)%"
					Line 2 "Disk read time`t`t`t: " "$($RDSStatus.DiskRead)%"
					Line 2 "Disk write time`t`t`t: " "$($RDSStatus.DiskWrite)%"
					Line 2 "Sessions`t`t`t: " $Sessions
					Line 2 "Preferred Connection Broker`t: " $RDSStatus.PreferredBroker
					Line 2 "Operating system`t`t: " $RDSStatus.ServerOS
					Line 2 "Agent version`t`t`t: " $RDSStatus.AgentVer
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Name",($Script:htmlsb),$RDSHost.Server,$htmlwhite)
					$rowdata += @(,("Status",($Script:htmlsb),$RDSStatusAgentState,$htmlwhite))
					$rowdata += @(,("CPU",($Script:htmlsb),"$($RDSStatus.CPULoad)%",$htmlwhite))
					$rowdata += @(,("RAM",($Script:htmlsb),"$($RDSStatus.MemLoad)%",$htmlwhite))
					$rowdata += @(,("Disk read time",($Script:htmlsb),"$($RDSStatus.DiskRead)%",$htmlwhite))
					$rowdata += @(,("Disk write time",($Script:htmlsb),"$($RDSStatus.DiskWrite)%",$htmlwhite))
					$rowdata += @(,("Sessions",($Script:htmlsb),$Sessions,$htmlwhite))
					$rowdata += @(,("Preferred Connection Broker",($Script:htmlsb),$RDSStatus.PreferredBroker,$htmlwhite))
					$rowdata += @(,("Operating system",($Script:htmlsb),$RDSStatus.ServerOS,$htmlwhite))
					$rowdata += @(,("Agent version",($Script:htmlsb),$RDSStatus.AgentVer,$htmlwhite))

					$msg = ""
					$columnWidths = @("200","350")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
		}
	}

	Write-Verbose "$(Get-Date -Format G): `tOutput Providers"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Providers"
	}
	If($Text)
	{
		Line 1 "Providers"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Providers"
	}

	$Providers = Get-RASProvider -SiteId $Site.Id -EA 0 4>$Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Providers for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Providers for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Providers for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Providers for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $Providers)
	{
		Write-Host "
	No Providers retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Providers retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Providers retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Providers retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($Provider in $Providers)
		{
			$Providerstatus = Get-RASProviderStatus -Id $Provider.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve VDI Host Status for VDI Host $($Provider.Id)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve VDI Host Status for VDI Host $($Provider.Id)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve VDI Host Status for VDI Host $($Provider.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve VDI Host Status for VDI Host $($Provider.Id)"
				}
			}
			ElseIf($? -and $Null -eq $Providerstatus)
			{
				Write-Host "
				No VDI Host Status retrieved for VDI Host $($Provider.Id)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No VDI Host Status retrieved for VDI Host $($Provider.Id)"
				}
				If($Text)
				{
					Line 0 "No VDI Host Status retrieved for VDI Host $($Provider.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No VDI Host Status retrieved for VDI Host $($Provider.Id)"
				}
			}
			Else
			{
				$FullProviderStatus = GetRASStatus $Providerstatus.AgentState
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Name"; Value = $Provider.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "Status"; Value = $FullProviderStatus; }) > $Null
					$ScriptInformation.Add(@{Data = "CPU"; Value = "$($Providerstatus.CPULoad)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "RAM"; Value = "$($Providerstatus.MemLoad)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Disk read time"; Value = "$($Providerstatus.DiskRead)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Disk write time"; Value = "$($Providerstatus.DiskWrite)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Preferred COnnection Broker"; Value = $Providerstatus.PreferredBroker; }) > $Null
					$ScriptInformation.Add(@{Data = "Operating system"; Value = $Providerstatus.ServerOS; }) > $Null
					$ScriptInformation.Add(@{Data = "Agent version"; Value = $Providerstatus.AgentVer; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 300;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 2 "Name`t`t`t`t: " $Provider.Server
					Line 2 "Status`t`t`t`t: " $FullProviderStatus
					Line 2 "CPU`t`t`t`t: " "$($Providerstatus.CPULoad)%"
					Line 2 "RAM`t`t`t`t: " "$($Providerstatus.MemLoad)%"
					Line 2 "Disk read time`t`t`t: " "$($Providerstatus.DiskRead)%"
					Line 2 "Disk write time`t`t`t: " "$($Providerstatus.DiskWrite)%"
					Line 2 "Preferred Connection Broker`t: " $Providerstatus.PreferredBroker
					Line 2 "Operating system`t`t: " $Providerstatus.ServerOS
					Line 2 "Agent version`t`t`t: " $Providerstatus.AgentVer
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Name",($Script:htmlsb),$Provider.Server,$htmlwhite)
					$rowdata += @(,("Status",($Script:htmlsb),$FullProviderStatus,$htmlwhite))
					$rowdata += @(,("CPU",($Script:htmlsb),"$($Providerstatus.CPULoad)%",$htmlwhite))
					$rowdata += @(,("RAM",($Script:htmlsb),"$($Providerstatus.MemLoad)%",$htmlwhite))
					$rowdata += @(,("Disk read time",($Script:htmlsb),"$($Providerstatus.DiskRead)%",$htmlwhite))
					$rowdata += @(,("Disk write time",($Script:htmlsb),"$($Providerstatus.DiskWrite)%",$htmlwhite))
					$rowdata += @(,("Preferred Connection Broker",($Script:htmlsb),$Providerstatus.PreferredBroker,$htmlwhite))
					$rowdata += @(,("Operating system",($Script:htmlsb),$Providerstatus.ServerOS,$htmlwhite))
					$rowdata += @(,("Agent version",($Script:htmlsb),$Providerstatus.AgentVer,$htmlwhite))

					$msg = ""
					$columnWidths = @("200","350")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
		}
	}
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Secure Gateways"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Secure Gateways"
	}
	If($Text)
	{
		Line 1 "Secure Gateways"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Secure Gateways"
	}

	$SecureGateways = Get-RASGateway -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Secure Gateways for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Secure Gateways for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Secure Gateways for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Secure Gateways for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $SecureGateways)
	{
		Write-Host "
	No Secure Gateways retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Secure Gateways retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Secure Gateways retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Secure Gateways retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($SecureGateway in $SecureGateways)
		{
			$SecureGatewayStatus = Get-RASGatewayStatus -Id $SecureGateway.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve Gateway Status for Secure Gateway $($SecureGateway.Id)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve Gateway Status for Secure Gateway $($SecureGateway.Id)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve Gateway Status for Secure Gateway $($SecureGateway.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve Gateway Status for Secure Gateway $($SecureGateway.Id)"
				}
			}
			ElseIf($? -and $Null -eq $SecureGatewayStatus)
			{
				Write-Host "
				No Gateway Status retrieved for Secure Gateway $($SecureGateway.Id)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No Gateway Status retrieved for Secure Gateway $($SecureGateway.Id)"
				}
				If($Text)
				{
					Line 0 "No Gateway Status retrieved for Secure Gateway $($SecureGateway.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No Gateway Status retrieved for Secure Gateway $($SecureGateway.Id)"
				}
			}
			Else
			{
				$Sessions = ($SecureGatewayStatus.ActiveRDPSessions + $SecureGatewayStatus.ActiveRDPSSLSessions)
				$SecureGatewayStatusAgentState = GetRASStatus $SecureGatewayStatus.AgentState
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Name"; Value = $SecureGateway.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "Status"; Value = $SecureGatewayStatusAgentState; }) > $Null
					$ScriptInformation.Add(@{Data = "CPU"; Value = "$($SecureGatewayStatus.CPULoad)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "RAM"; Value = "$($SecureGatewayStatus.MemLoad)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Disk read time"; Value = "$($SecureGatewayStatus.DiskRead)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Disk write time"; Value = "$($SecureGatewayStatus.DiskWrite)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Sessions"; Value = $Sessions.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Preferred Connection Broker"; Value = $SecureGatewayStatus.PreferredBroker; }) > $Null
					$ScriptInformation.Add(@{Data = "Operating system"; Value = $SecureGatewayStatus.ServerOS; }) > $Null
					$ScriptInformation.Add(@{Data = "Agent version"; Value = $SecureGatewayStatus.AgentVer; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 300;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 2 "Name`t`t`t`t: " $SecureGateway.Server
					Line 2 "Status`t`t`t`t: " $SecureGatewayStatusAgentState
					Line 2 "CPU`t`t`t`t: " "$($SecureGatewayStatus.CPULoad)%"
					Line 2 "RAM`t`t`t`t: " "$($SecureGatewayStatus.MemLoad)%"
					Line 2 "Disk read time`t`t`t: " "$($SecureGatewayStatus.DiskRead)%"
					Line 2 "Disk write time`t`t`t: " "$($SecureGatewayStatus.DiskWrite)%"
					Line 2 "Sessions`t`t`t: " $Sessions.ToString()
					Line 2 "Preferred Connection Broker`t: " $SecureGatewayStatus.PreferredBroker
					Line 2 "Operating system`t`t: " $SecureGatewayStatus.ServerOS
					Line 2 "Agent version`t`t`t: " $SecureGatewayStatus.AgentVer
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Name",($Script:htmlsb),$SecureGateway.Server,$htmlwhite)
					$rowdata += @(,("Status",($Script:htmlsb),$SecureGatewayStatusAgentState.ToString(),$htmlwhite))
					$rowdata += @(,("CPU",($Script:htmlsb),"$($SecureGatewayStatus.CPULoad)%",$htmlwhite))
					$rowdata += @(,("RAM",($Script:htmlsb),"$($SecureGatewayStatus.MemLoad)%",$htmlwhite))
					$rowdata += @(,("Disk read time",($Script:htmlsb),"$($SecureGatewayStatus.DiskRead)%",$htmlwhite))
					$rowdata += @(,("Disk write time",($Script:htmlsb),"$($SecureGatewayStatus.DiskWrite)%",$htmlwhite))
					$rowdata += @(,("Sessions",($Script:htmlsb),$Sessions.ToString(),$htmlwhite))
					$rowdata += @(,("Preferred Connection Broker",($Script:htmlsb),$SecureGatewayStatus.PreferredBroker,$htmlwhite))
					$rowdata += @(,("Operating system",($Script:htmlsb),$SecureGatewayStatus.ServerOS,$htmlwhite))
					$rowdata += @(,("Agent version",($Script:htmlsb),$SecureGatewayStatus.AgentVer,$htmlwhite))

					$msg = ""
					$columnWidths = @("200","350")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
		}
	}
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Connection Brokers"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Connection Brokers"
	}
	If($Text)
	{
		Line 1 "Connection Brokers"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Connection Brokers"
	}

	$ConnectionBrokers = Get-RASBroker -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Connection Brokers for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Connection Brokers for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Connection Brokers for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Connection Brokers for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $ConnectionBrokers)
	{
		Write-Host "
	No Connection Brokers retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Connection Brokers retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Connection Brokers retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Connection Brokers retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($ConnectionBroker in $ConnectionBrokers)
		{
			$ConnectionBrokerStatus = Get-RASBrokerStatus -Id $ConnectionBroker.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve Connection Brokers Status for Connection Brokers $($ConnectionBroker.Id)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve Connection Brokers Status for Connection Brokers $($ConnectionBroker.Id)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve Connection Brokers Status for Connection Brokers $($ConnectionBroker.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve Connection Brokers Status for Connection Brokers $($ConnectionBroker.Id)"
				}
			}
			ElseIf($? -and $Null -eq $ConnectionBrokerStatus)
			{
				Write-Host "
				No Connection Brokers Status retrieved for Connection Brokers $($ConnectionBroker.Id)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No Connection Brokers Status retrieved for Connection Brokers $($ConnectionBroker.Id)"
				}
				If($Text)
				{
					Line 0 "No Connection Brokers Status retrieved for Connection Brokers $($ConnectionBroker.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No Connection Brokers Status retrieved for Connection Brokers $($ConnectionBroker.Id)"
				}
			}
			Else
			{
				If($ConnectionBroker.Priority -eq 0)
				{
					$ConnectionBrokerPriority = "Primary"
				}
				Else
				{
					$ConnectionBrokerPriority = "Secondary"
				}
				
				$ConnectionBrokerStatusAgentState = GetRASStatus $ConnectionBrokerStatus.AgentState
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Name"; Value = $ConnectionBroker.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "Priority"; Value = $ConnectionBrokerPriority; }) > $Null
					$ScriptInformation.Add(@{Data = "Status"; Value = $ConnectionBrokerStatusAgentState; }) > $Null
					$ScriptInformation.Add(@{Data = "CPU"; Value = "$($ConnectionBrokerStatus.CPULoad)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "RAM"; Value = "$($ConnectionBrokerStatus.MemLoad)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Disk read time"; Value = "$($ConnectionBrokerStatus.DiskRead)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Disk write time"; Value = "$($ConnectionBrokerStatus.DiskWrite)%"; }) > $Null
					$ScriptInformation.Add(@{Data = "Operating system"; Value = $ConnectionBrokerStatus.ServerOS; }) > $Null
					$ScriptInformation.Add(@{Data = "Agent version"; Value = $ConnectionBrokerStatus.AgentVer; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 300;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 2 "Name`t`t: " $ConnectionBroker.Server
					Line 2 "Priority`t: " $ConnectionBrokerPriority
					Line 2 "Status`t`t: " $ConnectionBrokerStatusAgentState
					Line 2 "CPU`t`t: " "$($ConnectionBrokerStatus.CPULoad)%"
					Line 2 "RAM`t`t: " "$($ConnectionBrokerStatus.MemLoad)%"
					Line 2 "Disk read time`t: " "$($ConnectionBrokerStatus.DiskRead)%"
					Line 2 "Disk write time`t: " "$($ConnectionBrokerStatus.DiskWrite)%"
					Line 2 "Operating system: " $ConnectionBrokerStatus.ServerOS
					Line 2 "Agent version`t: " $ConnectionBrokerStatus.AgentVer
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Name",($Script:htmlsb),$ConnectionBroker.Server,$htmlwhite)
					$rowdata += @(,("Priority",($Script:htmlsb),$ConnectionBrokerPriority,$htmlwhite))
					$rowdata += @(,("Status",($Script:htmlsb),$ConnectionBrokerStatusAgentState.ToString(),$htmlwhite))
					$rowdata += @(,("CPU",($Script:htmlsb),"$($ConnectionBrokerStatus.CPULoad)%",$htmlwhite))
					$rowdata += @(,("RAM",($Script:htmlsb),"$($ConnectionBrokerStatus.MemLoad)%",$htmlwhite))
					$rowdata += @(,("Disk read time",($Script:htmlsb),"$($ConnectionBrokerStatus.DiskRead)%",$htmlwhite))
					$rowdata += @(,("Disk write time",($Script:htmlsb),"$($ConnectionBrokerStatus.DiskWrite)%",$htmlwhite))
					$rowdata += @(,("Operating system",($Script:htmlsb),$ConnectionBrokerStatus.ServerOS,$htmlwhite))
					$rowdata += @(,("Agent version",($Script:htmlsb),$ConnectionBrokerStatus.AgentVer,$htmlwhite))

					$msg = ""
					$columnWidths = @("200","350")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
		}
	}
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Enrollment Servers"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Enrollment Servers"
	}
	If($Text)
	{
		Line 1 "Enrollment Servers"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Enrollment Servers"
	}

	$EnrollmentServers = Get-RASEnrollmentServer -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Enrollment Servers for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Enrollment Servers for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Enrollment Servers for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Enrollment Servers for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $EnrollmentServers)
	{
		Write-Host "
	No Enrollment Servers retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Enrollment Servers retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Enrollment Servers retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Enrollment Servers retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($EnrollmentServer in $EnrollmentServers)
		{
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $EnrollmentServer.Server; }) > $Null
				$ScriptInformation.Add(@{Data = "Status"; Value = "Can't find"; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Name`t`t`t: " $EnrollmentServer.Server
				Line 3 "Status`t`t`t: " "Can't find"
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$EnrollmentServer.Server,$htmlwhite)
				$rowdata += @(,("Status",($Script:htmlsb),"Can't find",$htmlwhite))

				$msg = ""
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}
	
	Write-Verbose "$(Get-Date -Format G): Output RD Session Hosts"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "RD Session Hosts"
	}
	If($Text)
	{
		Line 1 "RD Session Hosts"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "RD Session Hosts"
	}

	$RDSHosts = Get-RASRDS -Siteid $Site.Id -EA 0 4>$Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve RD Session Hosts for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve RD Session Hosts for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve RD Session Hosts for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve RD Session Hosts for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $RDSHosts)
	{
		Write-Host "
	No RD Session Hosts retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No RD Session Hosts retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No RD Session Hosts retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No RD Session Hosts retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($RDSHost in $RDSHosts)
		{
			$RDSStatus = Get-RASRDSStatus -Id $RDSHost.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve RD Session Hosts Status for RD Session Hosts $($RDSHost.Id)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve RD Session Hosts Status for RD Session Hosts $($RDSHost.Id)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve RD Session Hosts Status for RD Session Hosts $($RDSHost.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve RD Session Hosts Status for RD Session Hosts $($RDSHost.Id)"
				}
			}
			ElseIf($? -and $Null -eq $RDSStatus)
			{
				Write-Host "
				No RD Session Hosts Status retrieved for RD Session Hosts $($RDSHost.Id)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No RD Session Hosts Status retrieved for RD Session Hosts $($RDSHost.Id)"
				}
				If($Text)
				{
					Line 0 "No RD Session Hosts Status retrieved for RD Session Hosts $($RDSHost.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No RD Session Hosts Status retrieved for RD Session Hosts $($RDSHost.Id)"
				}
			}
			Else
			{
				If($MSWord -or $PDF)
				{
					WriteWordLine 3 0 "Server $($RDSHost.Server)"
				}
				If($Text)
				{
					Line 2 "Server $($RDSHost.Server)"
				}
				If($HTML)
				{
					WriteHTMLLine 3 0 "Server $($RDSHost.Server)"
				}

				$LogonStatus = "N/A"

				$FullAgentStatus = GetRASStatus $RDSStatus.AgentState
				
				Switch($RDSStatus.LoginStatus)
				{
					"Enabled"	{$LogonStatus = "Enabled"; Break}
					"Disabled"	{$LogonStatus = "Disabled"; Break}
					"DrainMode"	{$LogonStatus = "Drain Mode"; Break}
					Default		{$LogonStatus = "Unable to determine RDS Status Logon status: $($RDSStatus.LoginStatus)"; Break}
				}
				
				$UPDStatus = "Unknown"
				If($RDSStatus.UPDStatus -eq "NotSupported")
				{
					$UPDDefault = (Get-RASRDSDefaultSettings -SiteId $Site.Id -Ea 0 4>$Null).UPDMode
					
					If($UPDDefault -eq "DoNotChange")
					{
						$UPDStatus = "Disabled"
					}
					Else
					{
						$UPDStatus = $UPDDefault
					}
				}
				Else
				{
					Switch($RDSStatus.UPDStatus)
					{
						"Enabled"		{$UPDStatus = "Enabled"; Break}
						"Disabled"		{$UPDStatus = "Disabled"; Break}
						"NotSupported"	{$UPDStatus = "Not Supported"; Break}
						Default			{$UPDStatus = "Unable to determine UPD Status: $($RDSStatus.UPDStatus)"; Break}
					}
				}
				
				$RDSGroup = @()
				
				$Results = Get-RASRDSGroup -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $Results)
				{
					If($Results.RDSIds -Contains $RDSHost.Id )
					{
						$RDSGroup += $Results.Name
					}
					Else
					{
						$RDSGroup += ""
					}
				}
				Else
				{
					$RDSGroup += "N/A"
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Server"; Value = $RDSHost.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "Status"; Value = $FullAgentStatus; }) > $Null
					$ScriptInformation.Add(@{Data = "Logon status"; Value = $LogonStatus; }) > $Null
					$ScriptInformation.Add(@{Data = "Group"; Value = $RDSGroup[0]; }) > $Null
					$ScriptInformation.Add(@{Data = "Direct address"; Value = $RDSHost.DirectAddress; }) > $Null
					$ScriptInformation.Add(@{Data = "Description"; Value = $RDSHost.Description; }) > $Null
					$ScriptInformation.Add(@{Data = "UPD"; Value = $UPDStatus; }) > $Null
					$ScriptInformation.Add(@{Data = "Log level"; Value = $RDSStatus.LogLevel; }) > $Null
					$ScriptInformation.Add(@{Data = "Agent version"; Value = $RDSStatus.AgentVer; }) > $Null
					$ScriptInformation.Add(@{Data = "Last modification by"; Value = $RDSHost.AdminLastMod; }) > $Null
					$ScriptInformation.Add(@{Data = "Modified on"; Value = $RDSHost.TimeLastMod.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Created by"; Value = $RDSHost.AdminCreate; }) > $Null
					$ScriptInformation.Add(@{Data = "Created on"; Value = $RDSHost.TimeCreate.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "ID"; Value = $RDSHost.Id.ToString(); }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 250;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 3 "Server`t`t`t: " $RDSHost.Server
					Line 3 "Status`t`t`t: " $FullAgentStatus
					Line 3 "Logon status`t`t: " $LogonStatus
					Line 3 "Group`t`t`t: " $RDSGroup[0]
					Line 3 "Direct address`t`t: " $RDSHost.DirectAddress
					Line 3 "Description`t`t: " $RDSHost.Description
					Line 3 "UPD`t`t`t: " $UPDStatus
					Line 3 "Log level`t`t: " $RDSStatus.LogLevel
					Line 3 "Agent version`t`t: " $RDSStatus.AgentVer
					Line 3 "Last modification by`t: " $RDSHost.AdminLastMod
					Line 3 "Modified on`t`t: " $RDSHost.TimeLastMod.ToString()
					Line 3 "Created by`t`t: " $RDSHost.AdminCreate
					Line 3 "Created on`t`t: " $RDSHost.TimeCreate.ToString()
					Line 3 "ID`t`t`t: " $RDSHost.Id.ToString()
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Server",($Script:htmlsb),$RDSHost.Server,$htmlwhite)
					$rowdata += @(,("Status",($Script:htmlsb),$FullAgentStatus,$htmlwhite))
					$rowdata += @(,("Logon status",($Script:htmlsb),$LogonStatus,$htmlwhite))
					$rowdata += @(,("Group",($Script:htmlsb),$RDSGroup[0],$htmlwhite))
					$rowdata += @(,("Direct address",($Script:htmlsb),$RDSHost.DirectAddress,$htmlwhite))
					$rowdata += @(,("Description",($Script:htmlsb),$RDSHost.Description,$htmlwhite))
					$rowdata += @(,("UPD",($Script:htmlsb),$UPDStatus,$htmlwhite))
					$rowdata += @(,("Log level",($Script:htmlsb),$RDSStatus.LogLevel,$htmlwhite))
					$rowdata += @(,("Agent version",($Script:htmlsb),$RDSStatus.AgentVer,$htmlwhite))
					$rowdata += @(,("Last modification by",($Script:htmlsb), $RDSHost.AdminLastMod,$htmlwhite))
					$rowdata += @(,("Modified on",($Script:htmlsb), $RDSHost.TimeLastMod.ToString(),$htmlwhite))
					$rowdata += @(,("Created by",($Script:htmlsb), $RDSHost.AdminCreate,$htmlwhite))
					$rowdata += @(,("Created on",($Script:htmlsb), $RDSHost.TimeCreate.ToString(),$htmlwhite))
					$rowdata += @(,("ID",($Script:htmlsb),$RDSHost.Id.ToString(),$htmlwhite))

					$msg = ""
					$columnWidths = @("300","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
			
			#Properties
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 3 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable server in site"; Value = $RDSHost.Enabled.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Server"; Value = $RDSHost.Server; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $RDSHost.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Direct Address"; Value = $RDSHost.DirectAddress; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 4 "Enable server in site`t: " $RDSHost.Enabled.ToString()
				Line 4 "Server`t`t`t: " $RDSHost.Server
				Line 4 "Description`t`t: " $RDSHost.Description
				Line 4 "Direct Address`t`t: " $RDSHost.DirectAddress
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable server in site",($Script:htmlsb),$RDSHost.Enabled.ToString(),$htmlwhite)
				$rowdata += @(,("Server",($Script:htmlsb),$RDSHost.Server,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$RDSHost.Description,$htmlwhite))
				$rowdata += @(,("Direct Address",($Script:htmlsb),$RDSHost.DirectAddress,$htmlwhite))

				$msg = "General"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Agent Settings
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Agent settings"
			}
			If($Text)
			{
				Line 3 "Agent settings"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($RDSHost.InheritDefaultAgentSettings)
			{
				#do we inherit group or site defaults?
				#is this RDS host in a group?
				$Results = Get-RASRDSGroup -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $Results)
				{
					If($Results.RDSIds -Contains $RDSHost.Id )
					{
						$Result = $Results | Where-Object {$_.RDSIDs -eq $RDSHost.Id} #fix for 2.53
						#does this group inherit default settings?
						If($Result.InheritDefaultAgentSettings -eq $False) #fix for 2.53
						{
							#no we don't, so get the default settings for the group
							$GroupDefaults  = $Result.RDSDefSettings #fix for 2.53

							$RDSPort        = $GroupDefaults.Port.ToString()
							$RDSMaxSessions = $GroupDefaults.MaxSessions.ToString()
							
							Switch ($GroupDefaults.SessionTimeout)
							{
								0		{$RDSPublishingSessionDisconnectTimeout = "Never"; Break}
								25		{$RDSPublishingSessionDisconnectTimeout = "25 seconds"; Break}
								60		{$RDSPublishingSessionDisconnectTimeout = "1 minute"; Break}
								300		{$RDSPublishingSessionDisconnectTimeout = "5 minutes"; Break}
								3600	{$RDSPublishingSessionDisconnectTimeout = "1 hour"; Break}
								Default	{$RDSPublishingSessionDisconnectTimeout = "Unable to determine Publishing Session Disconnect Timeout: $($GroupDefaults.SessionTimeout)"; Break}
							}
							
							Switch ($GroupDefaults.SessionLogoffTimeout)
							{
								0		{$RDSPublishingSessionResetTime = "Never"; Break}
								1		{$RDSPublishingSessionResetTime = "Immediate"; Break}
								25		{$RDSPublishingSessionResetTime = "25 seconds"; Break}
								60		{$RDSPublishingSessionResetTime = "1 minute"; Break}
								300		{$RDSPublishingSessionResetTime = "5 minutes"; Break}
								3600	{$RDSPublishingSessionResetTime = "1 hour"; Break}
								Default	{$RDSPublishingSessionResetTime = "Unable to determine Publishing Session Reset Timeout: $($GroupDefaults.SessionLogoffTimeout)"; Break}
							}
							
							Switch($GroupDefaults.AllowURLAndMailRedirection)
							{
								"Enabled"						{$RDSAllowClientURLMailRedirection = "Enabled"; 
																 $ReplaceRegisteredApplication = "False";
																 Break}
								"Disabled"						{$RDSAllowClientURLMailRedirection = "Disabled"; 
																 $ReplaceRegisteredApplication = "False";
																 Break}
								"EnabledWithAppRegistration"	{$RDSAllowClientURLMailRedirection = "Enabled";
																 $ReplaceRegisteredApplication = "True";
																 Break}
								Default 						{$RDSAllowClientURLMailRedirection = "Unable to determine Allow CLient URL/Mail Redirection: $($GroupDefaults.AllowURLAndMailRedirection)"; 
																 $ReplaceRegisteredApplication = "False";
																 Break}
							}
							
							$RDSSupportShellURLNamespaceObject = $GroupDefaults.SupportShellURLNamespaceObjects.ToString()
							
							Switch ($GroupDefaults.DragAndDropMode)
							{
								"Bidirectional"		{$RDSDragAndDrop = "Bidirectional"; 
								$RDSAllowDragAndDrop = "True";
								Break}
								"Disabled"			{$RDSDragAndDrop = "Disabled"; 
								$RDSAllowDragAndDrop = "False";
								Break}
								"ClientToServer"	{$RDSDragAndDrop = "Client to server only"; 
								$RDSAllowDragAndDrop = "True";
								Break}
								"ServerToClient"	{$RDSDragAndDrop = "Server to client only"; 
								$RDSAllowDragAndDrop = "True";
								Break}
								Default				{$RDSDragAndDrop = "Unable to determine Drag and drop: $($GroupDefaults.DragAndDropMode)"; 
								$RDSAllowDragAndDrop = "False";
								Break}
							}
							
							If($GroupDefaults.PreferredBrokerId -eq 0)
							{
								$RDSPreferredPublishingAgent = "Automatically"
							}
							Else
							{
								$RDSPreferredPublishingAgent = (Get-RASBroker -Id $GroupDefaults.PreferredBrokerId -EA 0 4>$Null).Server
							}

							Switch ($GroupDefaults.FileTransferMode)
							{
								"Bidirectional"		{$RDSFileTransferMode = "Bidirectional"; Break}
								"Disabled"			{$RDSFileTransferMode = "Disabled"; Break}
								"ClientToServer"	{$RDSFileTransferMode = "Client to server only"; Break}
								"ServerToClient"	{$RDSFileTransferMode = "Server to client only"; Break}
								Default				{$RDSFileTransferMode = "Unable to determine File Transfer mode: $($GroupDefaults.FileTransferMode)"; Break}
							}
							If($GroupDefaults.FileTransferLocation -eq "")
							{
								$RDSFileTransferLocation = "Default download location"
							}
							Else
							{
								$RDSFileTransferLocation = $GroupDefaults.FileTransferLocation
							}
							$RDSFileTransferChangeLocation = $GroupDefaults.FileTransferLockLocation.ToString()

							#fixed the following missing variables in 2.52 thanks to Thomas Krampe
							$RDSAllowRemoteExec             = $GroupDefaults.AllowRemoteExec.ToString()
							$RDSUseRemoteApps               = $GroupDefaults.UseRemoteApps.ToString()
							$RDSEnableAppMonitoring         = $GroupDefaults.EnableAppMonitoring.ToString()
							$RDSAllowFileTransfer           = $GroupDefaults.AllowFileTransfer.ToString()
							$RDSEnableDriveRedirectionCache = $GroupDefaults.EnableDriveRedirectionCache.ToString()
						}
						Else
						{
							#yes we do, get the default settings for the Site
							#use the Site default settings

							$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
							
							If($? -and $Null -ne $RDSDefaults)
							{
								$RDSPort        = $RDSDefaults.Port.ToString()
								$RDSMaxSessions = $RDSDefaults.MaxSessions.ToString()
								
								Switch ($RDSDefaults.SessionTimeout)
								{
									0		{$RDSPublishingSessionDisconnectTimeout = "Never"; Break}
									25		{$RDSPublishingSessionDisconnectTimeout = "25 seconds"; Break}
									60		{$RDSPublishingSessionDisconnectTimeout = "1 minute"; Break}
									300		{$RDSPublishingSessionDisconnectTimeout = "5 minutes"; Break}
									3600	{$RDSPublishingSessionDisconnectTimeout = "1 hour"; Break}
									Default	{$RDSPublishingSessionDisconnectTimeout = "Unable to determine Publishing Session Disconnect Timeout: $($RDSDefaults.SessionTimeout)"; Break}
								}
								
								Switch ($RDSDefaults.SessionLogoffTimeout)
								{
									0		{$RDSPublishingSessionResetTime = "Never"; Break}
									1		{$RDSPublishingSessionResetTime = "Immediate"; Break}
									25		{$RDSPublishingSessionResetTime = "25 seconds"; Break}
									60		{$RDSPublishingSessionResetTime = "1 minute"; Break}
									300		{$RDSPublishingSessionResetTime = "5 minutes"; Break}
									3600	{$RDSPublishingSessionResetTime = "1 hour"; Break}
									Default	{$RDSPublishingSessionResetTime = "Unable to determine Publishing Session Reset Timeout: $($RDSDefaults.SessionLogoffTimeout)"; Break}
								}
								
								Switch($RDSDefaults.AllowURLAndMailRedirection)
								{
									"Enabled"						{$RDSAllowClientURLMailRedirection = "Enabled"; 
																	 $ReplaceRegisteredApplication = "False";
																	 Break}
									"Disabled"						{$RDSAllowClientURLMailRedirection = "Disabled"; 
																	 $ReplaceRegisteredApplication = "False";
																	 Break}
									"EnabledWithAppRegistration"	{$RDSAllowClientURLMailRedirection = "Enabled";
																	 $ReplaceRegisteredApplication = "True";
																	 Break}
									Default 						{$RDSAllowClientURLMailRedirection = "Unable to determine Allow CLient URL/Mail Redirection: $($RDSDefaults.AllowURLAndMailRedirection)"; 
																	 $ReplaceRegisteredApplication = "False";
																	 Break}
								}
								
								$RDSSupportShellURLNamespaceObject = $RDSDefaults.SupportShellURLNamespaceObjects.ToString()
								
								Switch ($RDSDefaults.DragAndDropMode)
								{
									"Bidirectional"		{$RDSDragAndDrop = "Bidirectional"; 
									$RDSAllowDragAndDrop = "True";
									Break}
									"Disabled"			{$RDSDragAndDrop = "Disabled"; 
									$RDSAllowDragAndDrop = "False";
									Break}
									"ClientToServer"	{$RDSDragAndDrop = "Client to server only"; 
									$RDSAllowDragAndDrop = "True";
									Break}
									"ServerToClient"	{$RDSDragAndDrop = "Server to client only"; 
									$RDSAllowDragAndDrop = "True";
									Break}
									Default				{$RDSDragAndDrop = "Unable to determine Drag and drop: $($RDSDefaults.DragAndDropMode)"; 
									$RDSAllowDragAndDrop = "False";
									Break}
								}
								
								Switch ($RDSDefaults.FileTransferMode)
								{
									"Bidirectional"		{$RDSFileTransferMode = "Bidirectional"; Break}
									"Disabled"			{$RDSFileTransferMode = "Disabled"; Break}
									"ClientToServer"	{$RDSFileTransferMode = "Client to server only"; Break}
									"ServerToClient"	{$RDSFileTransferMode = "Server to client only"; Break}
									Default				{$RDSFileTransferMode = "Unable to determine File Transfer mode: $($RDSDefaults.FileTransferMode)"; Break}
								}
								If($RDSDefaults.FileTransferLocation -eq "")
								{
									$RDSFileTransferLocation = "Default download location"
								}
								Else
								{
									$RDSFileTransferLocation = $RDSDefaults.FileTransferLocation
								}
								$RDSFileTransferChangeLocation = $RDSDefaults.FileTransferLockLocation.ToString()

								If($RDSDefaults.PreferredBrokerId -eq 0)
								{
									$RDSPreferredPublishingAgent = "Automatically"
								}
								Else
								{
									$RDSPreferredPublishingAgent = (Get-RASBroker -Id $RDSDefaults.PreferredBrokerId -EA 0 4>$Null).Server
								}
								$RDSAllowRemoteExec             = $RDSDefaults.AllowRemoteExec.ToString()
								$RDSUseRemoteApps               = $RDSDefaults.UseRemoteApps.ToString()
								$RDSEnableAppMonitoring         = $RDSDefaults.EnableAppMonitoring.ToString()
								$RDSAllowFileTransfer           = $RDSDefaults.AllowFileTransfer.ToString()
								$RDSEnableDriveRedirectionCache = $RDSDefaults.EnableDriveRedirectionCache.ToString()
							}
							Else
							{
								#unable to retrieve default, use built-in default values
								$RDSPort                               = "3389"
								$RDSMaxSessions                        = "250"
								$RDSPublishingSessionDisconnectTimeout = "25 seconds"
								$RDSPublishingSessionResetTime         = "Immediate"
								$RDSAllowClientURLMailRedirection      = "Enabled"
								$ReplaceRegisteredApplication          = "False"
								$RDSSupportShellURLNamespaceObject     = "True"
								$RDSDragAndDrop                        = "Bidirectional"
								$RDSAllowDragAndDrop                   = "Enabled"
								$RDSFileTransferMode                   = "Bidirectional"
								$RDSFileTransferLocation               = "Default download location"
								$RDSFileTransferChangeLocation         = "False"
								$RDSPreferredPublishingAgent           = "Automatically"
								$RDSAllowRemoteExec                    = "True"
								$RDSUseRemoteApps                      = "False"
								$RDSEnableAppMonitoring                = "True"
								$RDSAllowFileTransfer                  = "True"
								$RDSEnableDriveRedirectionCache        = "True"
							}
						}
					}
				}
				Else
				{
					#server is not in an RDS group
					#get the settings configured for this RDS host
					$RDSPort        = $RDSHost.Port.ToString()
					$RDSMaxSessions = $RDSHost.MaxSessions.ToString()
					
					Switch ($RDSHost.SessionTimeout)
					{
						0		{$RDSPublishingSessionDisconnectTimeout = "Never"; Break}
						25		{$RDSPublishingSessionDisconnectTimeout = "25 seconds"; Break}
						60		{$RDSPublishingSessionDisconnectTimeout = "1 minute"; Break}
						300		{$RDSPublishingSessionDisconnectTimeout = "5 minutes"; Break}
						3600	{$RDSPublishingSessionDisconnectTimeout = "1 hour"; Break}
						Default	{$RDSPublishingSessionDisconnectTimeout = "Unable to determine Publishing Session Disconnect Timeout: $($RDSHost.SessionTimeout)"; Break}
					}
					
					Switch ($RDSHost.SessionLogoffTimeout)
					{
						0		{$RDSPublishingSessionResetTime = "Never"; Break}
						1		{$RDSPublishingSessionResetTime = "Immediate"; Break}
						25		{$RDSPublishingSessionResetTime = "25 seconds"; Break}
						60		{$RDSPublishingSessionResetTime = "1 minute"; Break}
						300		{$RDSPublishingSessionResetTime = "5 minutes"; Break}
						3600	{$RDSPublishingSessionResetTime = "1 hour"; Break}
						Default	{$RDSPublishingSessionResetTime = "Unable to determine Publishing Session Reset Timeout: $($RDSHost.SessionLogoffTimeout)"; Break}
					}
					
					Switch($RDSHost.AllowURLAndMailRedirection)
					{
						"Enabled"						{$RDSAllowClientURLMailRedirection = "Enabled"; 
														 $ReplaceRegisteredApplication = "False";
														 Break}
						"Disabled"						{$RDSAllowClientURLMailRedirection = "Disabled"; 
														 $ReplaceRegisteredApplication = "False";
														 Break}
						"EnabledWithAppRegistration"	{$RDSAllowClientURLMailRedirection = "Enabled";
														 $ReplaceRegisteredApplication = "True";
														 Break}
						Default 						{$RDSAllowClientURLMailRedirection = "Unable to determine Allow CLient URL/Mail Redirection: $($RDSHost.AllowURLAndMailRedirection)"; 
														 $ReplaceRegisteredApplication = "False";
														 Break}
					}
					
					$RDSSupportShellURLNamespaceObject = $RDSHost.SupportShellURLNamespaceObjects.ToString()
					
					Switch ($RDSHost.DragAndDropMode)
					{
						"Bidirectional"		{$RDSDragAndDrop = "Bidirectional"; 
						$RDSAllowDragAndDrop = "True";
						Break}
						"Disabled"			{$RDSDragAndDrop = "Disabled"; 
						$RDSAllowDragAndDrop = "False";
						Break}
						"ClientToServer"	{$RDSDragAndDrop = "Client to server only"; 
						$RDSAllowDragAndDrop = "True";
						Break}
						"ServerToClient"	{$RDSDragAndDrop = "Server to client only"; 
						$RDSAllowDragAndDrop = "True";
						Break}
						Default				{$RDSDragAndDrop = "Unable to determine Drag and drop: $($RDSHost.DragAndDropMode)"; 
						$RDSAllowDragAndDrop = "False";
						Break}
					}
					
					Switch ($RDSHost.FileTransferMode)
					{
						"Bidirectional"		{$RDSFileTransferMode = "Bidirectional"; Break}
						"Disabled"			{$RDSFileTransferMode = "Disabled"; Break}
						"ClientToServer"	{$RDSFileTransferMode = "Client to server only"; Break}
						"ServerToClient"	{$RDSFileTransferMode = "Server to client only"; Break}
						Default				{$RDSFileTransferMode = "Unable to determine File Transfer mode: $($RDSHost.FileTransferMode)"; Break}
					}
					If($RDSHost.FileTransferLocation -eq "")
					{
						$RDSFileTransferLocation = "Default download location"
					}
					Else
					{
						$RDSFileTransferLocation = $RDSHost.FileTransferLocation
					}
					$RDSFileTransferChangeLocation = $RDSHost.FileTransferLockLocation.ToString()

					If($RDSHost.PreferredBrokerId -eq 0)
					{
						$RDSPreferredPublishingAgent = "Automatically"
					}
					Else
					{
						$RDSPreferredPublishingAgent = (Get-RASBroker -Id $RDSHost.PreferredBrokerId -EA 0 4>$Null).Server
					}
					$RDSAllowRemoteExec             = $RDSHost.AllowRemoteExec.ToString()
					$RDSUseRemoteApps               = $RDSHost.UseRemoteApps.ToString()
					$RDSEnableAppMonitoring         = $RDSHost.EnableAppMonitoring.ToString()
					$RDSAllowFileTransfer           = $RDSHost.AllowFileTransfer.ToString()
					$RDSEnableDriveRedirectionCache = $RDSHost.EnableDriveRedirectionCache.ToString()
				}
			}
			Else
			{
				#we don't inherit settings
				#get the settings configured for this RDS host
				$RDSPort        = $RDSHost.Port.ToString()
				$RDSMaxSessions = $RDSHost.MaxSessions.ToString()
				
				Switch ($RDSHost.SessionTimeout)
				{
					0		{$RDSPublishingSessionDisconnectTimeout = "Never"; Break}
					25		{$RDSPublishingSessionDisconnectTimeout = "25 seconds"; Break}
					60		{$RDSPublishingSessionDisconnectTimeout = "1 minute"; Break}
					300		{$RDSPublishingSessionDisconnectTimeout = "5 minutes"; Break}
					3600	{$RDSPublishingSessionDisconnectTimeout = "1 hour"; Break}
					Default	{$RDSPublishingSessionDisconnectTimeout = "Unable to determine Publishing Session Disconnect Timeout: $($RDSHost.SessionTimeout)"; Break}
				}
				
				Switch ($RDSHost.SessionLogoffTimeout)
				{
					0		{$RDSPublishingSessionResetTime = "Never"; Break}
					1		{$RDSPublishingSessionResetTime = "Immediate"; Break}
					25		{$RDSPublishingSessionResetTime = "25 seconds"; Break}
					60		{$RDSPublishingSessionResetTime = "1 minute"; Break}
					300		{$RDSPublishingSessionResetTime = "5 minutes"; Break}
					3600	{$RDSPublishingSessionResetTime = "1 hour"; Break}
					Default	{$RDSPublishingSessionResetTime = "Unable to determine Publishing Session Reset Timeout: $($RDSHost.SessionLogoffTimeout)"; Break}
				}
				
				Switch($RDSHost.AllowURLAndMailRedirection)
				{
					"Enabled"						{$RDSAllowClientURLMailRedirection = "Enabled"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
					"Disabled"						{$RDSAllowClientURLMailRedirection = "Disabled"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
					"EnabledWithAppRegistration"	{$RDSAllowClientURLMailRedirection = "Enabled";
													 $ReplaceRegisteredApplication = "True";
													 Break}
					Default 						{$RDSAllowClientURLMailRedirection = "Unable to determine Allow CLient URL/Mail Redirection: $($RDSHost.AllowURLAndMailRedirection)"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
				}
				
				$RDSSupportShellURLNamespaceObject = $RDSHost.SupportShellURLNamespaceObjects.ToString()
				
				Switch ($RDSHost.DragAndDropMode)
				{
					"Bidirectional"		{$RDSDragAndDrop = "Bidirectional"; 
					$RDSAllowDragAndDrop = "True";
					Break}
					"Disabled"			{$RDSDragAndDrop = "Disabled"; 
					$RDSAllowDragAndDrop = "False";
					Break}
					"ClientToServer"	{$RDSDragAndDrop = "Client to server only"; 
					$RDSAllowDragAndDrop = "True";
					Break}
					"ServerToClient"	{$RDSDragAndDrop = "Server to client only"; 
					$RDSAllowDragAndDrop = "True";
					Break}
					Default				{$RDSDragAndDrop = "Unable to determine Drag and drop: $($RDSHost.DragAndDropMode)"; 
					$RDSAllowDragAndDrop = "False";
					Break}
				}
				
				Switch ($RDSHost.FileTransferMode)
				{
					"Bidirectional"		{$RDSFileTransferMode = "Bidirectional"; Break}
					"Disabled"			{$RDSFileTransferMode = "Disabled"; Break}
					"ClientToServer"	{$RDSFileTransferMode = "Client to server only"; Break}
					"ServerToClient"	{$RDSFileTransferMode = "Server to client only"; Break}
					Default				{$RDSFileTransferMode = "Unable to determine File Transfer mode: $($RDSHost.FileTransferMode)"; Break}
				}
				If($RDSHost.FileTransferLocation -eq "")
				{
					$RDSFileTransferLocation = "Default download location"
				}
				Else
				{
					$RDSFileTransferLocation = $RDSHost.FileTransferLocation
				}
				$RDSFileTransferChangeLocation = $RDSHost.FileTransferLockLocation.ToString()

				If($RDSHost.PreferredBrokerId -eq 0)
				{
					$RDSPreferredPublishingAgent = "Automatically"
				}
				Else
				{
					$RDSPreferredPublishingAgent = (Get-RASBroker -Id $RDSHost.PreferredBrokerId -EA 0 4>$Null).Server
				}
				$RDSAllowRemoteExec             = $RDSHost.AllowRemoteExec.ToString()
				$RDSUseRemoteApps               = $RDSHost.UseRemoteApps.ToString()
				$RDSEnableAppMonitoring         = $RDSHost.EnableAppMonitoring.ToString()
				$RDSAllowFileTransfer           = $RDSHost.AllowFileTransfer.ToString()
				$RDSEnableDriveRedirectionCache = $RDSHost.EnableDriveRedirectionCache.ToString()
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSHost.InheritDefaultAgentSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Application session lingering"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Disconnect active session after"; Value = $RDSPublishingSessionDisconnectTimeout; }) > $Null
				$ScriptInformation.Add(@{Data = "     Logoff disconnected session after"; Value = $RDSPublishingSessionResetTime; }) > $Null
				$ScriptInformation.Add(@{Data = "Other settings"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Port"; Value = $RDSPort; }) > $Null
				$ScriptInformation.Add(@{Data = "     Max Sessions"; Value = $RDSMaxSessions; }) > $Null
				$ScriptInformation.Add(@{Data = "     Preferred Connection Broker"; Value = $RDSPreferredPublishingAgent; }) > $Null
				$ScriptInformation.Add(@{Data = "Allow Client URL/Mail Redirection"; Value = $RDSAllowClientURLMailRedirection; }) > $Null
				$ScriptInformation.Add(@{Data = "     Replace registered application"; Value = $ReplaceRegisteredApplication; }) > $Null
				$ScriptInformation.Add(@{Data = "     Support Windows Shell URL namespace objects"; Value = $RDSSupportShellURLNamespaceObject; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable Drag and drop"; Value = $RDSAllowDragandDrop; }) > $Null
				$ScriptInformation.Add(@{Data = "     Direction"; Value = $RDSDragAndDrop; }) > $Null
				$ScriptInformation.Add(@{Data = "Allow 2xRemoteExec to send command to the client"; Value = $RDSAllowRemoteExec; }) > $Null
				$ScriptInformation.Add(@{Data = "Use RemoteApp if available"; Value = $RDSUseRemoteApps; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable applications monitoring"; Value = $RDSEnableAppMonitoring; }) > $Null
				$ScriptInformation.Add(@{Data = "Allow file transfer command (Web (HTML5) and Chrome clients)"; Value = $RDSAllowFileTransfer; }) > $Null
				$ScriptInformation.Add(@{Data = "     Configure File Transfer"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "          Direction"; Value = $RDSFileTransferMode; }) > $Null
				$ScriptInformation.Add(@{Data = "          Location"; Value = $RDSFileTransferLocation; }) > $Null
				$ScriptInformation.Add(@{Data = "          Do not allow to change location"; Value = $RDSFileTransferChangeLocation; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable drive redirection cache"; Value = $RDSEnableDriveRedirectionCache; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 4 "Inherit default settings`t`t`t`t`t: " $RDSHost.InheritDefaultAgentSettings.ToString()
				Line 4 "Application session lingering"
				Line 5 "Disconnect active session after`t`t`t`t: " $RDSPublishingSessionDisconnectTimeout
				Line 5 "Logoff disconnected session after`t`t`t: " $RDSPublishingSessionResetTime
				Line 4 "Other settings"
				Line 5 "Port`t`t`t`t`t`t`t: " $RDSPort
				Line 5 "Max Sessions`t`t`t`t`t`t: " $RDSMaxSessions
				Line 5 "Preferred Connection Broker`t`t`t`t: " $RDSPreferredPublishingAgent
				Line 4 "Allow Client URL/Mail Redirection`t`t`t`t: " $RDSAllowClientURLMailRedirection
				Line 5 "Replace registered application`t`t`t`t: " $ReplaceRegisteredApplication
				Line 5 "Support Windows Shell URL namespace objects`t`t: " $RDSSupportShellURLNamespaceObject
				Line 4 "Enable Drag and drop`t`t`t`t`t`t: " $RDSAllowDragandDrop
				Line 5 "Direction`t`t`t`t`t`t: " $RDSDragAndDrop
				Line 4 "Allow 2xRemoteExec to send command to the client`t`t: " $RDSAllowRemoteExec
				Line 4 "Use RemoteApp if available`t`t`t`t`t: " $RDSUseRemoteApps
				Line 4 "Enable applications monitoring`t`t`t`t`t: " $RDSEnableAppMonitoring
				Line 4 "Allow file transfer command (Web (HTML5) and Chrome clients)`t: " $RDSAllowFileTransfer
				Line 5 "Configure File Transfer"
				Line 6 "Direction`t`t`t: " $RDSFileTransferMode
				Line 6 "Location`t`t`t: " $RDSFileTransferLocation
				Line 6 "Do not allow to change location : " $RDSFileTransferChangeLocation
				Line 4 "Enable drive redirection cache`t`t`t`t`t: " $RDSEnableDriveRedirectionCache
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$RDSHost.InheritDefaultAgentSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Application session lingering",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Disconnect active session after",($Script:htmlsb),$RDSPublishingSessionDisconnectTimeout,$htmlwhite))
				$rowdata += @(,("     Logoff disconnected session after",($Script:htmlsb),$RDSPublishingSessionResetTime,$htmlwhite))
				$rowdata += @(,("Other settings",($Script:htmlsb),$RDSPort,$htmlwhite))
				$rowdata += @(,("     Port",($Script:htmlsb),$RDSPort,$htmlwhite))
				$rowdata += @(,("     Max Sessions",($Script:htmlsb),$RDSMaxSessions,$htmlwhite))
				$rowdata += @(,("     Preferred Connection Broker",($Script:htmlsb),$RDSPreferredPublishingAgent,$htmlwhite))
				$rowdata += @(,("Allow Client URL/Mail Redirection",($Script:htmlsb),$RDSAllowClientURLMailRedirection,$htmlwhite))
				$rowdata += @(,("     Replace registered application",($Script:htmlsb),$ReplaceRegisteredApplication,$htmlwhite))
				$rowdata += @(,("     Support Windows Shell URL namespace objects",($Script:htmlsb),$RDSSupportShellURLNamespaceObject,$htmlwhite))
				$rowdata += @(,("Enable Drag and drop",($Script:htmlsb),$RDSAllowDragandDrop,$htmlwhite))
				$rowdata += @(,("     Direction",($Script:htmlsb),$RDSDragAndDrop,$htmlwhite))
				$rowdata += @(,("Allow 2xRemoteExec to send command to the client",($Script:htmlsb),$RDSAllowRemoteExec,$htmlwhite))
				$rowdata += @(,("Use RemoteApp if available",($Script:htmlsb),$RDSUseRemoteApps,$htmlwhite))
				$rowdata += @(,("Enable applications monitoring",($Script:htmlsb),$RDSEnableAppMonitoring,$htmlwhite))
				$rowdata += @(,("Allow file transfer command (Web (HTML5) and Chrome clients)",($Script:htmlsb),$RDSAllowFileTransfer,$htmlwhite))
				$rowdata += @(,("     Configure File Transfer",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("          Direction",($Script:htmlsb),$RDSFileTransferMode,$htmlwhite))
				$rowdata += @(,("          Location",($Script:htmlsb),$RDSFileTransferLocation,$htmlwhite))
				$rowdata += @(,("          Do not allow to change location",($Script:htmlsb),$RDSFileTransferChangeLocation,$htmlwhite))
				$rowdata += @(,("Enable drive redirection cache",($Script:htmlsb),$RDSEnableDriveRedirectionCache,$htmlwhite))

				$msg = "Agent settings"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#User Profile
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User profile"
			}
			If($Text)
			{
				Line 3 "User profile"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($RDSHost.InheritDefaultUserProfileSettings)
			{
				#do we inherit group or site defaults?
				#is this RDS host in a group?
				$Results = Get-RASRDSGroup -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $Results)
				{
					If($Results.RDSIds -Contains $RDSHost.Id )
					{
						#does this group inherit default settings?
						If($Results.InheritDefaultUserProfileSettings -eq $False)
						{
							#no we don't, so get the default settings for the group
							$GroupDefaults = $Results.RDSDefSettings

							Switch ($GroupDefaults.UPDMode)
							{
								"DoNotChange"	{$RDSUPDState = "Do not change"; Break}
								"Enabled"		{$RDSUPDState = "Enabled"; Break}
								"Disabled"		{$RDSUPDState = "Disabled"; Break}
								Default			{$RDSUPDState = "Unable to determine Current UPD State: $($GroupDefaults.UPDMode)"; Break}
							}
							
							Switch ($GroupDefaults.Technology)
							{
								"DoNotManage"				{$RDSTechnology = "Do not manage by RAS"; Break}
								"UPD"						{$RDSTechnology = "User profile disk"; Break}
								"FSLogixProfileContainer"	{$RDSTechnology = "FSLogix"; Break}
								Default						{$RDSTechnology = "Unable to determine Technology State: $($GroupDefaults.Technology)"; Break}
							}
							
							$RDSUPDLocation = $GroupDefaults.DiskPath
							$RDSUPDSize     = $GroupDefaults.MaxUserProfileDiskSizeGB.ToString()

							Switch ($GroupDefaults.RoamingMode)
							{
								"Exclude"	{$RDSUPDRoamingMode = "Exclude"; Break}
								"Include"	{$RDSUPDRoamingMode = "Include"; Break}
								Default		{$RDSUPDRoamingMode = "Unable to determine UPD Roaming Mode: $($GroupDefaults.RoamingMode)"; Break}
							}
							
							If($RDSUPDRoamingMode -eq "Exclude")
							{
								$RDSUPDExcludeFilePath   = $GroupDefaults.ExcludeFilePath
								$RDSUPDExcludeFolderPath = $GroupDefaults.ExcludeFolderPath
							}
							ElseIf($RDSUPDRoamingMode -eq "Include")
							{
								$RDSUPDIncludeFilePath   = $GroupDefaults.IncludeFilePath
								$RDSUPDIncludeFolderPath = $GroupDefaults.IncludeFolderPath
							}
							Else
							{
								$RDSUPDExcludeFilePath   = {"Unable to determine UPD Roaming Mode"}
								$RDSUPDExcludeFolderPath = {"Unable to determine UPD Roaming Mode"}
								$RDSUPDIncludeFilePath   = {"Unable to determine UPD Roaming Mode"}
								$RDSUPDIncludeFolderPath = {"Unable to determine UPD Roaming Mode"}
							}
							
							$FSLogixSettings           = $GroupDefaults.FSLogix.ProfileContainer
							$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
							
							Switch($FSLogixDeploymentSettings.InstallType)
							{
								"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
								"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
								"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
								"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
								Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
							}
							
							$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
							$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
							$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
							#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate
							
							Switch ($FSLogixSettings.LocationType)
							{
								"SMBLocation"	
								{
									$FSLogixLocationType = "SMB Location"
									$FSLogixLocationOfProfileDisks = $FSLogixSettings.VHDLocations
									Break
								}
								"CloudCache"	
								{
									$FSLogixLocationType = "Cloud Cache"
									$FSLogixLocationOfProfileDisks = $FSLogixSettings.CCDLocations
									Break
								}
								Default 		
								{
									$FSLogixLocationType = "Unable to determine FSLogix Location type: $($FSLogixSettings.LocationType)"
									$FSLogixLocationOfProfileDisks = @()
									Break
								}
							}
							
							Switch ($FSLogixSettings.ProfileDiskFormat)
							{
								"VHD"	{$FSLogixProfileDiskFormat = "VHD"; Break}
								"VHDX"	{$FSLogixProfileDiskFormat = "VHDX"; Break}
								Default	{$FSLogixProfileDiskFormat = "Unable to determine FSLogix Profile disk format: $($FSLogixSettings.ProfileDiskFormat)"; Break}
							}
							
							Switch ($FSLogixSettings.AllocationType)
							{
								"Dynamic"	{$FSLogixAllocationType = "Dynamic"; Break}
								"Full"		{$FSLogixAllocationType = "Full"; Break}
								Default		{$FSLogixAllocationType = "Unable to determine FSLogix Allocation type: $($FSLogixSettings.AllocationType)"; Break}
							}
							
							$FSLogixDefaultSize = $FSLogixSettings.DefaultSize.ToString()
							
							#FSLogix Additional settings
							#Users and Groups tab
							If($FSLogixSettings.UserInclusionList.Count -eq 0)
							{
								$FSLogixSettingsUserInclusionList = @("Everyone")
							}
							Else
							{
								$FSLogixSettingsUserInclusionList = $FSLogixSettings.UserInclusionList
							}
							$FSLogixSettingsUserExclusionList       = $FSLogixSettings.UserExclusionList
							
							#Folders tab
							$FSLogixSettingsCustomizeProfileFolders = $FSLogixSettings.CustomizeProfileFolders
							$FSLogixSettingsExcludeCommonFolders    = $FSLogixSettings | Select-Object -ExpandProperty ExcludeCommonFolders
							$ExcludedCommonFolders                  = @()
							$FSLogixSettingsFolderInclusionList     = $FSLogixSettings.FolderInclusionList
							$FSLogixSettingsFolderExclusionList     = $FSLogixSettings.FolderExclusionList

							If($FSLogixSettingsCustomizeProfileFolders)
							{
								#this is cumulative
								#Contacts, Desktop, Documents, Links, MusicPodcasts, PicturesVideos, FoldersLowIntegProcesses
								If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Contacts)
								{
									$ExcludedCommonFolders += "Contacts"
								}
								If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Desktop)
								{
									$ExcludedCommonFolders += "Desktop"
								}
								If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Documents)
								{
									$ExcludedCommonFolders += "Documents"
								}
								If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Links)
								{
									$ExcludedCommonFolders += "Links"
								}
								If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::MusicPodcasts)
								{
									$ExcludedCommonFolders += 'Music & Podcasts'
								}
								If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::PicturesVideos)
								{
									$ExcludedCommonFolders += 'Pictures & Videos'
								}
								If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::FoldersLowIntegProcesses)
								{
									$ExcludedCommonFolders += "Folders used by Low Integrity processes"
								}
							}
							
							#Advanced tab
							$FSLogixAS = $FSLogixSettings.AdvancedSettings
							
							Switch($FSLogixAS.AccessNetworkAsComputerObject)
							{
								"Enable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Enable"; Break}
								"Disable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Disable"; Break}
								Default		{$FSLogixAS_AccessNetworkAsComputerObject = "Unknown: $($FSLogixAS.AccessNetworkAsComputerObject)"; Break}
							}
							
							$FSLogixAS_AttachVHDSDDL = $FSLogixAS.AttachVHDSDDL
							
							Switch($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)
							{
								"Enable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Enable"; Break}
								"Disable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"; Break}
								Default		{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Unknown: $($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)"; Break}
							}

							$FSLogixAS_DiffDiskParentFolderPath = $FSLogixAS.DiffDiskParentFolderPath  

							Switch($FSLogixAS.FlipFlopProfileDirectoryName)
							{
								"Enable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Enable"; Break}
								"Disable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Disable"; Break}
								Default		{$FSLogixAS_FlipFlopProfileDirectoryName = "Unknown: $($FSLogixAS.FlipFlopProfileDirectoryName)"; Break}
							}
							
							Switch($FSLogixAS.KeepLocalDir)
							{
								"Enable"	{$FSLogixAS_KeepLocalDir = "Enable"; Break}
								"Disable"	{$FSLogixAS_KeepLocalDir = "Disable"; Break}
								Default		{$FSLogixAS_KeepLocalDir = "Unknown: $($FSLogixAS.KeepLocalDir)"; Break}
							}

							$FSLogixAS_LockedRetryCount    = $FSLogixAS.LockedRetryCount                       
							$FSLogixAS_LockedRetryInterval = $FSLogixAS.LockedRetryInterval     
							
							Switch($FSLogixAS.NoProfileContainingFolder)
							{
								"Enable"	{$FSLogixAS_NoProfileContainingFolder = "Enable"; Break}
								"Disable"	{$FSLogixAS_NoProfileContainingFolder = "Disable"; Break}
								Default		{$FSLogixAS_NoProfileContainingFolder = "Unknown: $($FSLogixAS.NoProfileContainingFolder)"; Break}
							}

							Switch($FSLogixAS.OutlookCachedMode)
							{
								"Enable"	{$FSLogixAS_OutlookCachedMode = "Enable"; Break}
								"Disable"	{$FSLogixAS_OutlookCachedMode = "Disable"; Break}
								Default		{$FSLogixAS_OutlookCachedMode = "Unknown: $($FSLogixAS.OutlookCachedMode)"; Break}
							}

							Switch($FSLogixAS.PreventLoginWithFailure)
							{
								"Enable"	{$FSLogixAS_PreventLoginWithFailure = "Enable"; Break}
								"Disable"	{$FSLogixAS_PreventLoginWithFailure = "Disable"; Break}
								Default		{$FSLogixAS_PreventLoginWithFailure = "Unknown: $($FSLogixAS.PreventLoginWithFailure)"; Break}
							}

							Switch($FSLogixAS.PreventLoginWithTempProfile)
							{
								"Enable"	{$FSLogixAS_PreventLoginWithTempProfile = "Enable"; Break}
								"Disable"	{$FSLogixAS_PreventLoginWithTempProfile = "Disable"; Break}
								Default		{$FSLogixAS_PreventLoginWithTempProfile = "Unknown: $($FSLogixAS.PreventLoginWithTempProfile)"; Break}
							}

							$FSLogixAS_ProfileDirSDDL = $FSLogixAS.ProfileDirSDDL

							Switch($FSLogixAS.ProfileType)
							{
								"NormalProfile"	{$FSLogixAS_ProfileType = "Normal profile"; Break}
								"OnlyRWProfile"	{$FSLogixAS_ProfileType = "Only RW profile"; Break}
								"OnlyROProfile"	{$FSLogixAS_ProfileType = "Only RO profile"; Break}
								"RWROProfile"	{$FSLogixAS_ProfileType = "RW/RO profile"; Break}
								Default		{$FSLogixAS_ProfileType = "Unknown: $($FSLogixAS.ProfileType)"; Break}
							}

							$FSLogixAS_ReAttachIntervalSeconds = $FSLogixAS.ReAttachIntervalSeconds                
							$FSLogixAS_ReAttachRetryCount      = $FSLogixAS.ReAttachRetryCount                     

							Switch($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)
							{
								"Enable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Enable"; Break}
								"Disable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Disable"; Break}
								Default		{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Unknown: $($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)"; Break}
							}

							Switch($FSLogixAS.RoamSearch)
							{
								"Enable"	{$FSLogixAS_RoamSearch = "Enable"; Break}
								"Disable"	{$FSLogixAS_RoamSearch = "Disable"; Break}
								Default		{$FSLogixAS_RoamSearch = "Unknown: $($FSLogixAS.RoamSearch)"; Break}
							}

							Switch($FSLogixAS.SetTempToLocalPath)
							{
								"TakeNoAction"					{$FSLogixAS_SetTempToLocalPath = "Take no action"; Break}
								"RedirectTempAndTmp"			{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP and TMP"; Break}
								"RedirectINetCache"				{$FSLogixAS_SetTempToLocalPath = "Redirect INetCache"; Break}
								"RedirectTempTmpAndINetCache"	{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP, TMP, and INetCache"; Break}
								Default							{$FSLogixAS_SetTempToLocalPath = "Unknown: $($FSLogixAS.SetTempToLocalPath)"; Break}
							}

							$FSLogixAS_SIDDirNameMatch   = $FSLogixAS.SIDDirNameMatch                        
							$FSLogixAS_SIDDirNamePattern = $FSLogixAS.SIDDirNamePattern                      
							$FSLogixAS_SIDDirSDDL        = $FSLogixAS.SIDDirSDDL
							$FSLogixAS_VHDNameMatch      = $FSLogixAS.VHDNameMatch                           
							$FSLogixAS_VHDNamePattern    = $FSLogixAS.VHDNamePattern                         

							Switch($FSLogixAS.VHDXSectorSize)
							{
								0		{$FSLogixAS_VHDXSectorSize = "System default"; Break}
								512		{$FSLogixAS_VHDXSectorSize = "512"; Break}
								4096	{$FSLogixAS_VHDXSectorSize = "4096"; Break}
								Default	{$FSLogixAS_VHDXSectorSize = "Unknown: $($FSLogixAS.VHDXSectorSize)"; Break}
							}

							$FSLogixAS_VolumeWaitTimeMS = $FSLogixAS.VolumeWaitTimeMS                       					
						}
						Else
						{
							#yes we do, get the default settings for the Site
							#use the Site default settings
							$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
							
							If($? -and $Null -ne $RDSDefaults)
							{
								Switch ($RDSDefaults.UPDMode)
								{
									"DoNotChange"	{$RDSUPDState = "Do not change"; Break}
									"Enabled"		{$RDSUPDState = "Enabled"; Break}
									"Disabled"		{$RDSUPDState = "Disabled"; Break}
									Default			{$RDSUPDState = "Unable to determine Current UPD State: $($RDSDefaults.UPDMode)"; Break}
								}
								
								Switch ($RDSDefaults.Technology)
								{
									"DoNotManage"				{$RDSTechnology = "Do not manage by RAS"; Break}
									"UPD"						{$RDSTechnology = "User profile disk"; Break}
									"FSLogixProfileContainer"	{$RDSTechnology = "FSLogix"; Break}
									Default						{$RDSTechnology = "Unable to determine Technology State: $($RDSDefaults.Technology)"; Break}
								}
								
								$RDSUPDLocation = $RDSDefaults.DiskPath
								$RDSUPDSize     = $RDSDefaults.MaxUserProfileDiskSizeGB.ToString()

								Switch ($RDSDefaults.RoamingMode)
								{
									"Exclude"	{$RDSUPDRoamingMode = "Exclude"; Break}
									"Include"	{$RDSUPDRoamingMode = "Include"; Break}
									Default		{$RDSUPDRoamingMode = "Unable to determine UPD Roaming Mode: $($RDSDefaults.RoamingMode)"; Break}
								}
								
								If($RDSUPDRoamingMode -eq "Exclude")
								{
									$RDSUPDExcludeFilePath   = $RDSDefaults.ExcludeFilePath
									$RDSUPDExcludeFolderPath = $RDSDefaults.ExcludeFolderPath
								}
								ElseIf($RDSUPDRoamingMode -eq "Include")
								{
									$RDSUPDIncludeFilePath   = $RDSDefaults.IncludeFilePath
									$RDSUPDIncludeFolderPath = $RDSDefaults.IncludeFolderPath
								}
								Else
								{
									$RDSUPDExcludeFilePath   = {"Unable to determine UPD Roaming Mode"}
									$RDSUPDExcludeFolderPath = {"Unable to determine UPD Roaming Mode"}
									$RDSUPDIncludeFilePath   = {"Unable to determine UPD Roaming Mode"}
									$RDSUPDIncludeFolderPath = {"Unable to determine UPD Roaming Mode"}
								}
							
								$FSLogixSettings           = $RDSDefaults.FSLogix.ProfileContainer
								$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
								
								Switch($FSLogixDeploymentSettings.InstallType)
								{
									"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
									"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
									"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
									"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
									Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
								}
								
								$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
								$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
								$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
								#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate
								
								Switch ($FSLogixSettings.LocationType)
								{
									"SMBLocation"	
									{
										$FSLogixLocationType = "SMB Location"
										$FSLogixLocationOfProfileDisks = $FSLogixSettings.VHDLocations
										Break
									}
									"CloudCache"	
									{
										$FSLogixLocationType = "Cloud Cache"
										$FSLogixLocationOfProfileDisks = $FSLogixSettings.CCDLocations
										Break
									}
									Default 		
									{
										$FSLogixLocationType = "Unable to determine FSLogix Location type: $($FSLogixSettings.LocationType)"
										$FSLogixLocationOfProfileDisks = @()
										Break
									}
								}
								
								Switch ($FSLogixSettings.ProfileDiskFormat)
								{
									"VHD"	{$FSLogixProfileDiskFormat = "VHD"; Break}
									"VHDX"	{$FSLogixProfileDiskFormat = "VHDX"; Break}
									Default	{$FSLogixProfileDiskFormat = "Unable to determine FSLogix Profile disk format: $($FSLogixSettings.ProfileDiskFormat)"; Break}
								}
								
								Switch ($FSLogixSettings.AllocationType)
								{
									"Dynamic"	{$FSLogixAllocationType = "Dynamic"; Break}
									"Full"		{$FSLogixAllocationType = "Full"; Break}
									Default		{$FSLogixAllocationType = "Unable to determine FSLogix Allocation type: $($FSLogixSettings.AllocationType)"; Break}
								}
								
								$FSLogixDefaultSize = $FSLogixSettings.DefaultSize.ToString()
							
								#FSLogix Additional settings
								#Users and Groups tab
								If($FSLogixSettings.UserInclusionList.Count -eq 0)
								{
									$FSLogixSettingsUserInclusionList = @("Everyone")
								}
								Else
								{
									$FSLogixSettingsUserInclusionList = $FSLogixSettings.UserInclusionList
								}
								$FSLogixSettingsUserExclusionList       = $FSLogixSettings.UserExclusionList
							
								#Folders tab
								$FSLogixSettingsCustomizeProfileFolders = $FSLogixSettings.CustomizeProfileFolders
								$FSLogixSettingsExcludeCommonFolders    = $FSLogixSettings | Select-Object -ExpandProperty ExcludeCommonFolders
								$ExcludedCommonFolders                  = @()
								$FSLogixSettingsFolderInclusionList     = $FSLogixSettings.FolderInclusionList
								$FSLogixSettingsFolderExclusionList     = $FSLogixSettings.FolderExclusionList

								If($FSLogixSettingsCustomizeProfileFolders)
								{
									#####################################################################################
									#MANY thanks to Guy Leech for helping me figure out how to process and use this Enum#
									#####################################################################################

									#this is cumulative
									#Contacts, Desktop, Documents, Links, MusicPodcasts, PicturesVideos, FoldersLowIntegProcesses
									If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Contacts)
									{
										$ExcludedCommonFolders += "Contacts"
									}
									If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Desktop)
									{
										$ExcludedCommonFolders += "Desktop"
									}
									If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Documents)
									{
										$ExcludedCommonFolders += "Documents"
									}
									If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Links)
									{
										$ExcludedCommonFolders += "Links"
									}
									If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::MusicPodcasts)
									{
										$ExcludedCommonFolders += 'Music & Podcasts'
									}
									If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::PicturesVideos)
									{
										$ExcludedCommonFolders += 'Pictures & Videos'
									}
									If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::FoldersLowIntegProcesses)
									{
										$ExcludedCommonFolders += "Folders used by Low Integrity processes"
									}
								}
							
								#Advanced tab
								$FSLogixAS = $FSLogixSettings.AdvancedSettings
								
								Switch($FSLogixAS.AccessNetworkAsComputerObject)
								{
									"Enable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Enable"; Break}
									"Disable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Disable"; Break}
									Default		{$FSLogixAS_AccessNetworkAsComputerObject = "Unknown: $($FSLogixAS.AccessNetworkAsComputerObject)"; Break}
								}
								
								$FSLogixAS_AttachVHDSDDL = $FSLogixAS.AttachVHDSDDL
								
								Switch($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)
								{
									"Enable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Enable"; Break}
									"Disable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"; Break}
									Default		{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Unknown: $($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)"; Break}
								}

								$FSLogixAS_DiffDiskParentFolderPath = $FSLogixAS.DiffDiskParentFolderPath  

								Switch($FSLogixAS.FlipFlopProfileDirectoryName)
								{
									"Enable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Enable"; Break}
									"Disable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Disable"; Break}
									Default		{$FSLogixAS_FlipFlopProfileDirectoryName = "Unknown: $($FSLogixAS.FlipFlopProfileDirectoryName)"; Break}
								}
								
								Switch($FSLogixAS.KeepLocalDir)
								{
									"Enable"	{$FSLogixAS_KeepLocalDir = "Enable"; Break}
									"Disable"	{$FSLogixAS_KeepLocalDir = "Disable"; Break}
									Default		{$FSLogixAS_KeepLocalDir = "Unknown: $($FSLogixAS.KeepLocalDir)"; Break}
								}

								$FSLogixAS_LockedRetryCount    = $FSLogixAS.LockedRetryCount                       
								$FSLogixAS_LockedRetryInterval = $FSLogixAS.LockedRetryInterval     
								
								Switch($FSLogixAS.NoProfileContainingFolder)
								{
									"Enable"	{$FSLogixAS_NoProfileContainingFolder = "Enable"; Break}
									"Disable"	{$FSLogixAS_NoProfileContainingFolder = "Disable"; Break}
									Default		{$FSLogixAS_NoProfileContainingFolder = "Unknown: $($FSLogixAS.NoProfileContainingFolder)"; Break}
								}

								Switch($FSLogixAS.OutlookCachedMode)
								{
									"Enable"	{$FSLogixAS_OutlookCachedMode = "Enable"; Break}
									"Disable"	{$FSLogixAS_OutlookCachedMode = "Disable"; Break}
									Default		{$FSLogixAS_OutlookCachedMode = "Unknown: $($FSLogixAS.OutlookCachedMode)"; Break}
								}

								Switch($FSLogixAS.PreventLoginWithFailure)
								{
									"Enable"	{$FSLogixAS_PreventLoginWithFailure = "Enable"; Break}
									"Disable"	{$FSLogixAS_PreventLoginWithFailure = "Disable"; Break}
									Default		{$FSLogixAS_PreventLoginWithFailure = "Unknown: $($FSLogixAS.PreventLoginWithFailure)"; Break}
								}

								Switch($FSLogixAS.PreventLoginWithTempProfile)
								{
									"Enable"	{$FSLogixAS_PreventLoginWithTempProfile = "Enable"; Break}
									"Disable"	{$FSLogixAS_PreventLoginWithTempProfile = "Disable"; Break}
									Default		{$FSLogixAS_PreventLoginWithTempProfile = "Unknown: $($FSLogixAS.PreventLoginWithTempProfile)"; Break}
								}

								$FSLogixAS_ProfileDirSDDL = $FSLogixAS.ProfileDirSDDL

								Switch($FSLogixAS.ProfileType)
								{
									"NormalProfile"	{$FSLogixAS_ProfileType = "Normal profile"; Break}
									"OnlyRWProfile"	{$FSLogixAS_ProfileType = "Only RW profile"; Break}
									"OnlyROProfile"	{$FSLogixAS_ProfileType = "Only RO profile"; Break}
									"RWROProfile"	{$FSLogixAS_ProfileType = "RW/RO profile"; Break}
									Default		{$FSLogixAS_ProfileType = "Unknown: $($FSLogixAS.ProfileType)"; Break}
								}

								$FSLogixAS_ReAttachIntervalSeconds = $FSLogixAS.ReAttachIntervalSeconds                
								$FSLogixAS_ReAttachRetryCount      = $FSLogixAS.ReAttachRetryCount                     

								Switch($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)
								{
									"Enable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Enable"; Break}
									"Disable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Disable"; Break}
									Default		{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Unknown: $($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)"; Break}
								}

								Switch($FSLogixAS.RoamSearch)
								{
									"Enable"	{$FSLogixAS_RoamSearch = "Enable"; Break}
									"Disable"	{$FSLogixAS_RoamSearch = "Disable"; Break}
									Default		{$FSLogixAS_RoamSearch = "Unknown: $($FSLogixAS.RoamSearch)"; Break}
								}

								Switch($FSLogixAS.SetTempToLocalPath)
								{
									"TakeNoAction"					{$FSLogixAS_SetTempToLocalPath = "Take no action"; Break}
									"RedirectTempAndTmp"			{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP and TMP"; Break}
									"RedirectINetCache"				{$FSLogixAS_SetTempToLocalPath = "Redirect INetCache"; Break}
									"RedirectTempTmpAndINetCache"	{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP, TMP, and INetCache"; Break}
									Default							{$FSLogixAS_SetTempToLocalPath = "Unknown: $($FSLogixAS.SetTempToLocalPath)"; Break}
								}

								$FSLogixAS_SIDDirNameMatch   = $FSLogixAS.SIDDirNameMatch                        
								$FSLogixAS_SIDDirNamePattern = $FSLogixAS.SIDDirNamePattern                      
								$FSLogixAS_SIDDirSDDL        = $FSLogixAS.SIDDirSDDL
								$FSLogixAS_VHDNameMatch      = $FSLogixAS.VHDNameMatch                           
								$FSLogixAS_VHDNamePattern    = $FSLogixAS.VHDNamePattern                         

								Switch($FSLogixAS.VHDXSectorSize)
								{
									0		{$FSLogixAS_VHDXSectorSize = "System default"; Break}
									512		{$FSLogixAS_VHDXSectorSize = "512"; Break}
									4096	{$FSLogixAS_VHDXSectorSize = "4096"; Break}
									Default	{$FSLogixAS_VHDXSectorSize = "Unknown: $($FSLogixAS.VHDXSectorSize)"; Break}
								}

								$FSLogixAS_VolumeWaitTimeMS = $FSLogixAS.VolumeWaitTimeMS                       					
							}
							Else
							{
								#unable to retrieve default, use built-in default values
								$RDSUPDState                                    = "Do not change"
								$RDSUPDLocation                                 = "None"
								$RDSUPDSize                                     = "20"
								$RDSTechnology                                  = "Do not manage by RAS"
								$RDSUPDRoamingMode                              = "Exclude"
								$RDSUPDExcludeFilePath                          = @()
								$RDSUPDExcludeFolderPath                        = @()
								$RDSUPDIncludeFilePath                          = @()
								$RDSUPDIncludeFolderPath                        = @()
								$FSLogixDeploymentSettingsDeploymentMethod      = "None"
								$FSLogixDeploymentSettingsInstallOnlineURL      = "None"
								$FSLogixDeploymentSettingsNetworkDrivePath      = "None"
								$FSLogixDeploymentSettingsInstallerFileName     = "None"
								#$FSLogixDeploymentSettingsReplicate             = $False
								$FSLogixLocationType                            = "None"
								$FSLogixLocationOfProfileDisks                  = @()
								$FSLogixProfileDiskFormat                       = "None"
								$FSLogixAllocationType                          = "None"
								$FSLogixDefaultSize                             = "0"
								$FSLogixSettingsUserInclusionList               = @("Everyone")
								$FSLogixSettingsUserExclusionList               = @()
								$FSLogixSettingsCustomizeProfileFolders         = $False
								$FSLogixSettingsExcludeCommonFolders            = "None"
								$ExcludedCommonFolders                          = @()
								$FSLogixSettingsFolderInclusionList             = @()
								$FSLogixSettingsFolderExclusionList             = @()
								$FSLogixAS_AccessNetworkAsComputerObject        = "Disable"
								$FSLogixAS_AttachVHDSDDL                        = "None"
								$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"
								$FSLogixAS_DiffDiskParentFolderPath             = "%TEMP"
								$FSLogixAS_FlipFlopProfileDirectoryName         = "Disable"
								$FSLogixAS_KeepLocalDir                         = "Disable"
								$FSLogixAS_LockedRetryCount                     = 12
								$FSLogixAS_LockedRetryInterval                  = 5
								$FSLogixAS_NoProfileContainingFolder            = "Disable"
								$FSLogixAS_OutlookCachedMode                    = "Disable"
								$FSLogixAS_PreventLoginWithFailure              = "Disable"
								$FSLogixAS_PreventLoginWithTempProfile          = "Disable"
								$FSLogixAS_ProfileDirSDDL                       = "None"
								$FSLogixAS_ProfileType                          = "Normal profile"
								$FSLogixAS_ReAttachIntervalSeconds              = 10
								$FSLogixAS_ReAttachRetryCount                   = 60
								$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff       = "Enable"
								$FSLogixAS_RoamSearch                           = "Disable"
								$FSLogixAS_SetTempToLocalPath                   = "Redirect TEMP, TMP, and INetCache"
								$FSLogixAS_SIDDirNameMatch                      = "%sid%_%username%"
								$FSLogixAS_SIDDirNamePattern                    = "%sid%_%username%"
								$FSLogixAS_SIDDirSDDL                           = "None"
								$FSLogixAS_VHDNameMatch                         = "Profile*"
								$FSLogixAS_VHDNamePattern                       = "Profile_%username%"
								$FSLogixAS_VHDXSectorSize                       = "System default"
								$FSLogixAS_VolumeWaitTimeMS                     = 20000
							}
						}
					}
				}
				Else
				{
					#RDS Host is not in a group
					#get the settings for the host
					Switch ($RDSHost.UPDMode)
					{
						"DoNotChange"	{$RDSUPDState = "Do not change"; Break}
						"Enabled"		{$RDSUPDState = "Enabled"; Break}
						"Disabled"		{$RDSUPDState = "Disabled"; Break}
						Default			{$RDSUPDState = "Unable to determine Current UPD State: $($RDSHost.UPDMode)"; Break}
					}
					
					Switch ($RDSHost.Technology)
					{
						"DoNotManage"				{$RDSTechnology = "Do not manage by RAS"; Break}
						"UPD"						{$RDSTechnology = "User profile disk"; Break}
						"FSLogixProfileContainer"	{$RDSTechnology = "FSLogix"; Break}
						Default						{$RDSTechnology = "Unable to determine Technology State: $($RDSHost.Technology)"; Break}
					}
					
					$RDSUPDLocation = $RDSHost.DiskPath
					$RDSUPDSize     = $RDSHost.MaxUserProfileDiskSizeGB.ToString()

					Switch ($RDSHost.RoamingMode)
					{
						"Exclude"	{$RDSUPDRoamingMode = "Exclude"; Break}
						"Include"	{$RDSUPDRoamingMode = "Include"; Break}
						Default		{$RDSUPDRoamingMode = "Unable to determine UPD Roaming Mode: $($RDSHost.RoamingMode)"; Break}
					}
					
					If($RDSUPDRoamingMode -eq "Exclude")
					{
						$RDSUPDExcludeFilePath   = $RDSHost.ExcludeFilePath
						$RDSUPDExcludeFolderPath = $RDSHost.ExcludeFolderPath
					}
					ElseIf($RDSUPDRoamingMode -eq "Include")
					{
						$RDSUPDIncludeFilePath   = $RDSHost.IncludeFilePath
						$RDSUPDIncludeFolderPath = $RDSHost.IncludeFolderPath
					}
					Else
					{
						$RDSUPDExcludeFilePath   = {"Unable to determine UPD Roaming Mode"}
						$RDSUPDExcludeFolderPath = {"Unable to determine UPD Roaming Mode"}
						$RDSUPDIncludeFilePath   = {"Unable to determine UPD Roaming Mode"}
						$RDSUPDIncludeFolderPath = {"Unable to determine UPD Roaming Mode"}
					}

					$FSLogixSettings           = $RDSHost.FSLogix.ProfileContainer
					$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
					
					Switch($FSLogixDeploymentSettings.InstallType)
					{
						"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
						"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
						"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
						"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
						Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
					}
					
					$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
					$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
					$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
					#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate
					
					Switch ($FSLogixSettings.LocationType)
					{
						"SMBLocation"	
						{
							$FSLogixLocationType = "SMB Location"
							$FSLogixLocationOfProfileDisks = $FSLogixSettings.VHDLocations
							Break
						}
						"CloudCache"	
						{
							$FSLogixLocationType = "Cloud Cache"
							$FSLogixLocationOfProfileDisks = $FSLogixSettings.CCDLocations
							Break
						}
						Default 		
						{
							$FSLogixLocationType = "Unable to determine FSLogix Location type: $($FSLogixSettings.LocationType)"
							$FSLogixLocationOfProfileDisks = @()
							Break
						}
					}
					
					Switch ($FSLogixSettings.ProfileDiskFormat)
					{
						"VHD"	{$FSLogixProfileDiskFormat = "VHD"; Break}
						"VHDX"	{$FSLogixProfileDiskFormat = "VHDX"; Break}
						Default	{$FSLogixProfileDiskFormat = "Unable to determine FSLogix Profile disk format: $($FSLogixSettings.ProfileDiskFormat)"; Break}
					}
					
					Switch ($FSLogixSettings.AllocationType)
					{
						"Dynamic"	{$FSLogixAllocationType = "Dynamic"; Break}
						"Full"		{$FSLogixAllocationType = "Full"; Break}
						Default		{$FSLogixAllocationType = "Unable to determine FSLogix Allocation type: $($FSLogixSettings.AllocationType)"; Break}
					}
					
					$FSLogixDefaultSize = $FSLogixSettings.DefaultSize.ToString()
						
					#FSLogix Additional settings
					#Users and Groups tab
					If($FSLogixSettings.UserInclusionList.Count -eq 0)
					{
						$FSLogixSettingsUserInclusionList = @("Everyone")
					}
					Else
					{
						$FSLogixSettingsUserInclusionList = $FSLogixSettings.UserInclusionList
					}
					$FSLogixSettingsUserExclusionList       = $FSLogixSettings.UserExclusionList
						
					#Folders tab
					$FSLogixSettingsCustomizeProfileFolders = $FSLogixSettings.CustomizeProfileFolders
					$FSLogixSettingsExcludeCommonFolders    = $FSLogixSettings | Select-Object -ExpandProperty ExcludeCommonFolders
					$ExcludedCommonFolders                  = @()
					$FSLogixSettingsFolderInclusionList     = $FSLogixSettings.FolderInclusionList
					$FSLogixSettingsFolderExclusionList     = $FSLogixSettings.FolderExclusionList

					If($FSLogixSettingsCustomizeProfileFolders)
					{
						#####################################################################################
						#MANY thanks to Guy Leech for helping me figure out how to process and use this Enum#
						#####################################################################################

						#this is cumulative
						#Contacts, Desktop, Documents, Links, MusicPodcasts, PicturesVideos, FoldersLowIntegProcesses
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Contacts)
						{
							$ExcludedCommonFolders += "Contacts"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Desktop)
						{
							$ExcludedCommonFolders += "Desktop"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Documents)
						{
							$ExcludedCommonFolders += "Documents"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Links)
						{
							$ExcludedCommonFolders += "Links"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::MusicPodcasts)
						{
							$ExcludedCommonFolders += 'Music & Podcasts'
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::PicturesVideos)
						{
							$ExcludedCommonFolders += 'Pictures & Videos'
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::FoldersLowIntegProcesses)
						{
							$ExcludedCommonFolders += "Folders used by Low Integrity processes"
						}
					}
						
					#Advanced tab
					$FSLogixAS = $FSLogixSettings.AdvancedSettings
					
					Switch($FSLogixAS.AccessNetworkAsComputerObject)
					{
						"Enable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Enable"; Break}
						"Disable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Disable"; Break}
						Default		{$FSLogixAS_AccessNetworkAsComputerObject = "Unknown: $($FSLogixAS.AccessNetworkAsComputerObject)"; Break}
					}
					
					$FSLogixAS_AttachVHDSDDL = $FSLogixAS.AttachVHDSDDL
					
					Switch($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)
					{
						"Enable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Enable"; Break}
						"Disable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"; Break}
						Default		{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Unknown: $($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)"; Break}
					}

					$FSLogixAS_DiffDiskParentFolderPath = $FSLogixAS.DiffDiskParentFolderPath  

					Switch($FSLogixAS.FlipFlopProfileDirectoryName)
					{
						"Enable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Enable"; Break}
						"Disable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Disable"; Break}
						Default		{$FSLogixAS_FlipFlopProfileDirectoryName = "Unknown: $($FSLogixAS.FlipFlopProfileDirectoryName)"; Break}
					}
					
					Switch($FSLogixAS.KeepLocalDir)
					{
						"Enable"	{$FSLogixAS_KeepLocalDir = "Enable"; Break}
						"Disable"	{$FSLogixAS_KeepLocalDir = "Disable"; Break}
						Default		{$FSLogixAS_KeepLocalDir = "Unknown: $($FSLogixAS.KeepLocalDir)"; Break}
					}

					$FSLogixAS_LockedRetryCount    = $FSLogixAS.LockedRetryCount                       
					$FSLogixAS_LockedRetryInterval = $FSLogixAS.LockedRetryInterval     
					
					Switch($FSLogixAS.NoProfileContainingFolder)
					{
						"Enable"	{$FSLogixAS_NoProfileContainingFolder = "Enable"; Break}
						"Disable"	{$FSLogixAS_NoProfileContainingFolder = "Disable"; Break}
						Default		{$FSLogixAS_NoProfileContainingFolder = "Unknown: $($FSLogixAS.NoProfileContainingFolder)"; Break}
					}

					Switch($FSLogixAS.OutlookCachedMode)
					{
						"Enable"	{$FSLogixAS_OutlookCachedMode = "Enable"; Break}
						"Disable"	{$FSLogixAS_OutlookCachedMode = "Disable"; Break}
						Default		{$FSLogixAS_OutlookCachedMode = "Unknown: $($FSLogixAS.OutlookCachedMode)"; Break}
					}

					Switch($FSLogixAS.PreventLoginWithFailure)
					{
						"Enable"	{$FSLogixAS_PreventLoginWithFailure = "Enable"; Break}
						"Disable"	{$FSLogixAS_PreventLoginWithFailure = "Disable"; Break}
						Default		{$FSLogixAS_PreventLoginWithFailure = "Unknown: $($FSLogixAS.PreventLoginWithFailure)"; Break}
					}

					Switch($FSLogixAS.PreventLoginWithTempProfile)
					{
						"Enable"	{$FSLogixAS_PreventLoginWithTempProfile = "Enable"; Break}
						"Disable"	{$FSLogixAS_PreventLoginWithTempProfile = "Disable"; Break}
						Default		{$FSLogixAS_PreventLoginWithTempProfile = "Unknown: $($FSLogixAS.PreventLoginWithTempProfile)"; Break}
					}

					$FSLogixAS_ProfileDirSDDL = $FSLogixAS.ProfileDirSDDL

					Switch($FSLogixAS.ProfileType)
					{
						"NormalProfile"	{$FSLogixAS_ProfileType = "Normal profile"; Break}
						"OnlyRWProfile"	{$FSLogixAS_ProfileType = "Only RW profile"; Break}
						"OnlyROProfile"	{$FSLogixAS_ProfileType = "Only RO profile"; Break}
						"RWROProfile"	{$FSLogixAS_ProfileType = "RW/RO profile"; Break}
						Default		{$FSLogixAS_ProfileType = "Unknown: $($FSLogixAS.ProfileType)"; Break}
					}

					$FSLogixAS_ReAttachIntervalSeconds = $FSLogixAS.ReAttachIntervalSeconds                
					$FSLogixAS_ReAttachRetryCount      = $FSLogixAS.ReAttachRetryCount                     

					Switch($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)
					{
						"Enable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Enable"; Break}
						"Disable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Disable"; Break}
						Default		{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Unknown: $($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)"; Break}
					}

					Switch($FSLogixAS.RoamSearch)
					{
						"Enable"	{$FSLogixAS_RoamSearch = "Enable"; Break}
						"Disable"	{$FSLogixAS_RoamSearch = "Disable"; Break}
						Default		{$FSLogixAS_RoamSearch = "Unknown: $($FSLogixAS.RoamSearch)"; Break}
					}

					Switch($FSLogixAS.SetTempToLocalPath)
					{
						"TakeNoAction"					{$FSLogixAS_SetTempToLocalPath = "Take no action"; Break}
						"RedirectTempAndTmp"			{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP and TMP"; Break}
						"RedirectINetCache"				{$FSLogixAS_SetTempToLocalPath = "Redirect INetCache"; Break}
						"RedirectTempTmpAndINetCache"	{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP, TMP, and INetCache"; Break}
						Default							{$FSLogixAS_SetTempToLocalPath = "Unknown: $($FSLogixAS.SetTempToLocalPath)"; Break}
					}

					$FSLogixAS_SIDDirNameMatch   = $FSLogixAS.SIDDirNameMatch                        
					$FSLogixAS_SIDDirNamePattern = $FSLogixAS.SIDDirNamePattern                      
					$FSLogixAS_SIDDirSDDL        = $FSLogixAS.SIDDirSDDL
					$FSLogixAS_VHDNameMatch      = $FSLogixAS.VHDNameMatch                           
					$FSLogixAS_VHDNamePattern    = $FSLogixAS.VHDNamePattern                         

					Switch($FSLogixAS.VHDXSectorSize)
					{
						0		{$FSLogixAS_VHDXSectorSize = "System default"; Break}
						512		{$FSLogixAS_VHDXSectorSize = "512"; Break}
						4096	{$FSLogixAS_VHDXSectorSize = "4096"; Break}
						Default	{$FSLogixAS_VHDXSectorSize = "Unknown: $($FSLogixAS.VHDXSectorSize)"; Break}
					}

					$FSLogixAS_VolumeWaitTimeMS = $FSLogixAS.VolumeWaitTimeMS                       					
				}
			}
			Else
			{
				#we don't inherit
				#get the settings for the host
				Switch ($RDSHost.UPDMode)
				{
					"DoNotChange"	{$RDSUPDState = "Do not change"; Break}
					"Enabled"		{$RDSUPDState = "Enabled"; Break}
					"Disabled"		{$RDSUPDState = "Disabled"; Break}
					Default			{$RDSUPDState = "Unable to determine Current UPD State: $($RDSHost.UPDMode)"; Break}
				}
				
				Switch ($RDSHost.Technology)
				{
					"DoNotManage"				{$RDSTechnology = "Do not manage by RAS"; Break}
					"UPD"						{$RDSTechnology = "User profile disk"; Break}
					"FSLogixProfileContainer"	{$RDSTechnology = "FSLogix"; Break}
					Default						{$RDSTechnology = "Unable to determine Technology State: $($RDSHost.Technology)"; Break}
				}
				
				$RDSUPDLocation = $RDSHost.DiskPath
				$RDSUPDSize     = $RDSHost.MaxUserProfileDiskSizeGB.ToString()

				Switch ($RDSHost.RoamingMode)
				{
					"Exclude"	{$RDSUPDRoamingMode = "Exclude"; Break}
					"Include"	{$RDSUPDRoamingMode = "Include"; Break}
					Default		{$RDSUPDRoamingMode = "Unable to determine UPD Roaming Mode: $($RDSHost.RoamingMode)"; Break}
				}
				
				If($RDSUPDRoamingMode -eq "Exclude")
				{
					$RDSUPDExcludeFilePath   = $RDSHost.ExcludeFilePath
					$RDSUPDExcludeFolderPath = $RDSHost.ExcludeFolderPath
				}
				ElseIf($RDSUPDRoamingMode -eq "Include")
				{
					$RDSUPDIncludeFilePath   = $RDSHost.IncludeFilePath
					$RDSUPDIncludeFolderPath = $RDSHost.IncludeFolderPath
				}
				Else
				{
					$RDSUPDExcludeFilePath   = {"Unable to determine UPD Roaming Mode"}
					$RDSUPDExcludeFolderPath = {"Unable to determine UPD Roaming Mode"}
					$RDSUPDIncludeFilePath   = {"Unable to determine UPD Roaming Mode"}
					$RDSUPDIncludeFolderPath = {"Unable to determine UPD Roaming Mode"}
				}

				$FSLogixSettings           = $RDSHost.FSLogix.ProfileContainer
				$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
				
				Switch($FSLogixDeploymentSettings.InstallType)
				{
					"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
					"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
					"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
					"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
					Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
				}
				
				$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
				$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
				$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
				#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate
				
				Switch ($FSLogixSettings.LocationType)
				{
					"SMBLocation"	
					{
						$FSLogixLocationType = "SMB Location"
						$FSLogixLocationOfProfileDisks = $FSLogixSettings.VHDLocations
						Break
					}
					"CloudCache"	
					{
						$FSLogixLocationType = "Cloud Cache"
						$FSLogixLocationOfProfileDisks = $FSLogixSettings.CCDLocations
						Break
					}
					Default 		
					{
						$FSLogixLocationType = "Unable to determine FSLogix Location type: $($FSLogixSettings.LocationType)"
						$FSLogixLocationOfProfileDisks = @()
						Break
					}
				}
				
				Switch ($FSLogixSettings.ProfileDiskFormat)
				{
					"VHD"	{$FSLogixProfileDiskFormat = "VHD"; Break}
					"VHDX"	{$FSLogixProfileDiskFormat = "VHDX"; Break}
					Default	{$FSLogixProfileDiskFormat = "Unable to determine FSLogix Profile disk format: $($FSLogixSettings.ProfileDiskFormat)"; Break}
				}
				
				Switch ($FSLogixSettings.AllocationType)
				{
					"Dynamic"	{$FSLogixAllocationType = "Dynamic"; Break}
					"Full"		{$FSLogixAllocationType = "Full"; Break}
					Default		{$FSLogixAllocationType = "Unable to determine FSLogix Allocation type: $($FSLogixSettings.AllocationType)"; Break}
				}
				
				$FSLogixDefaultSize = $FSLogixSettings.DefaultSize.ToString()
						
				#FSLogix Additional settings
				#Users and Groups tab
				If($FSLogixSettings.UserInclusionList.Count -eq 0)
				{
					$FSLogixSettingsUserInclusionList = @("Everyone")
				}
				Else
				{
					$FSLogixSettingsUserInclusionList = $FSLogixSettings.UserInclusionList
				}
				$FSLogixSettingsUserExclusionList       = $FSLogixSettings.UserExclusionList
						
				#Folders tab
				$FSLogixSettingsCustomizeProfileFolders = $FSLogixSettings.CustomizeProfileFolders
				$FSLogixSettingsExcludeCommonFolders    = $FSLogixSettings | Select-Object -ExpandProperty ExcludeCommonFolders
				$ExcludedCommonFolders                  = @()
				$FSLogixSettingsFolderInclusionList     = $FSLogixSettings.FolderInclusionList
				$FSLogixSettingsFolderExclusionList     = $FSLogixSettings.FolderExclusionList

				If($FSLogixSettingsCustomizeProfileFolders)
				{
					#####################################################################################
					#MANY thanks to Guy Leech for helping me figure out how to process and use this Enum#
					#####################################################################################

					#this is cumulative
					#Contacts, Desktop, Documents, Links, MusicPodcasts, PicturesVideos, FoldersLowIntegProcesses
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Contacts)
					{
						$ExcludedCommonFolders += "Contacts"
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Desktop)
					{
						$ExcludedCommonFolders += "Desktop"
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Documents)
					{
						$ExcludedCommonFolders += "Documents"
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Links)
					{
						$ExcludedCommonFolders += "Links"
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::MusicPodcasts)
					{
						$ExcludedCommonFolders += 'Music & Podcasts'
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::PicturesVideos)
					{
						$ExcludedCommonFolders += 'Pictures & Videos'
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::FoldersLowIntegProcesses)
					{
						$ExcludedCommonFolders += "Folders used by Low Integrity processes"
					}
				}
				
				#Advanced tab
				$FSLogixAS = $FSLogixSettings.AdvancedSettings
				
				Switch($FSLogixAS.AccessNetworkAsComputerObject)
				{
					"Enable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Enable"; Break}
					"Disable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Disable"; Break}
					Default		{$FSLogixAS_AccessNetworkAsComputerObject = "Unknown: $($FSLogixAS.AccessNetworkAsComputerObject)"; Break}
				}
				
				$FSLogixAS_AttachVHDSDDL = $FSLogixAS.AttachVHDSDDL
				
				Switch($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)
				{
					"Enable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Enable"; Break}
					"Disable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"; Break}
					Default		{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Unknown: $($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)"; Break}
				}

				$FSLogixAS_DiffDiskParentFolderPath = $FSLogixAS.DiffDiskParentFolderPath  

				Switch($FSLogixAS.FlipFlopProfileDirectoryName)
				{
					"Enable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Enable"; Break}
					"Disable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Disable"; Break}
					Default		{$FSLogixAS_FlipFlopProfileDirectoryName = "Unknown: $($FSLogixAS.FlipFlopProfileDirectoryName)"; Break}
				}
				
				Switch($FSLogixAS.KeepLocalDir)
				{
					"Enable"	{$FSLogixAS_KeepLocalDir = "Enable"; Break}
					"Disable"	{$FSLogixAS_KeepLocalDir = "Disable"; Break}
					Default		{$FSLogixAS_KeepLocalDir = "Unknown: $($FSLogixAS.KeepLocalDir)"; Break}
				}

				$FSLogixAS_LockedRetryCount    = $FSLogixAS.LockedRetryCount                       
				$FSLogixAS_LockedRetryInterval = $FSLogixAS.LockedRetryInterval     
				
				Switch($FSLogixAS.NoProfileContainingFolder)
				{
					"Enable"	{$FSLogixAS_NoProfileContainingFolder = "Enable"; Break}
					"Disable"	{$FSLogixAS_NoProfileContainingFolder = "Disable"; Break}
					Default		{$FSLogixAS_NoProfileContainingFolder = "Unknown: $($FSLogixAS.NoProfileContainingFolder)"; Break}
				}

				Switch($FSLogixAS.OutlookCachedMode)
				{
					"Enable"	{$FSLogixAS_OutlookCachedMode = "Enable"; Break}
					"Disable"	{$FSLogixAS_OutlookCachedMode = "Disable"; Break}
					Default		{$FSLogixAS_OutlookCachedMode = "Unknown: $($FSLogixAS.OutlookCachedMode)"; Break}
				}

				Switch($FSLogixAS.PreventLoginWithFailure)
				{
					"Enable"	{$FSLogixAS_PreventLoginWithFailure = "Enable"; Break}
					"Disable"	{$FSLogixAS_PreventLoginWithFailure = "Disable"; Break}
					Default		{$FSLogixAS_PreventLoginWithFailure = "Unknown: $($FSLogixAS.PreventLoginWithFailure)"; Break}
				}

				Switch($FSLogixAS.PreventLoginWithTempProfile)
				{
					"Enable"	{$FSLogixAS_PreventLoginWithTempProfile = "Enable"; Break}
					"Disable"	{$FSLogixAS_PreventLoginWithTempProfile = "Disable"; Break}
					Default		{$FSLogixAS_PreventLoginWithTempProfile = "Unknown: $($FSLogixAS.PreventLoginWithTempProfile)"; Break}
				}

				$FSLogixAS_ProfileDirSDDL = $FSLogixAS.ProfileDirSDDL

				Switch($FSLogixAS.ProfileType)
				{
					"NormalProfile"	{$FSLogixAS_ProfileType = "Normal profile"; Break}
					"OnlyRWProfile"	{$FSLogixAS_ProfileType = "Only RW profile"; Break}
					"OnlyROProfile"	{$FSLogixAS_ProfileType = "Only RO profile"; Break}
					"RWROProfile"	{$FSLogixAS_ProfileType = "RW/RO profile"; Break}
					Default		{$FSLogixAS_ProfileType = "Unknown: $($FSLogixAS.ProfileType)"; Break}
				}

				$FSLogixAS_ReAttachIntervalSeconds = $FSLogixAS.ReAttachIntervalSeconds                
				$FSLogixAS_ReAttachRetryCount      = $FSLogixAS.ReAttachRetryCount                     

				Switch($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)
				{
					"Enable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Enable"; Break}
					"Disable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Disable"; Break}
					Default		{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Unknown: $($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)"; Break}
				}

				Switch($FSLogixAS.RoamSearch)
				{
					"Enable"	{$FSLogixAS_RoamSearch = "Enable"; Break}
					"Disable"	{$FSLogixAS_RoamSearch = "Disable"; Break}
					Default		{$FSLogixAS_RoamSearch = "Unknown: $($FSLogixAS.RoamSearch)"; Break}
				}

				Switch($FSLogixAS.SetTempToLocalPath)
				{
					"TakeNoAction"					{$FSLogixAS_SetTempToLocalPath = "Take no action"; Break}
					"RedirectTempAndTmp"			{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP and TMP"; Break}
					"RedirectINetCache"				{$FSLogixAS_SetTempToLocalPath = "Redirect INetCache"; Break}
					"RedirectTempTmpAndINetCache"	{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP, TMP, and INetCache"; Break}
					Default							{$FSLogixAS_SetTempToLocalPath = "Unknown: $($FSLogixAS.SetTempToLocalPath)"; Break}
				}

				$FSLogixAS_SIDDirNameMatch   = $FSLogixAS.SIDDirNameMatch                        
				$FSLogixAS_SIDDirNamePattern = $FSLogixAS.SIDDirNamePattern                      
				$FSLogixAS_SIDDirSDDL        = $FSLogixAS.SIDDirSDDL
				$FSLogixAS_VHDNameMatch      = $FSLogixAS.VHDNameMatch                           
				$FSLogixAS_VHDNamePattern    = $FSLogixAS.VHDNamePattern                         

				Switch($FSLogixAS.VHDXSectorSize)
				{
					0		{$FSLogixAS_VHDXSectorSize = "System default"; Break}
					512		{$FSLogixAS_VHDXSectorSize = "512"; Break}
					4096	{$FSLogixAS_VHDXSectorSize = "4096"; Break}
					Default	{$FSLogixAS_VHDXSectorSize = "Unknown: $($FSLogixAS.VHDXSectorSize)"; Break}
				}

				$FSLogixAS_VolumeWaitTimeMS = $FSLogixAS.VolumeWaitTimeMS                       					
			}
				
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSHost.InheritDefaultUserProfileSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Technology"; Value = $RDSTechnology; }) > $Null
				
				If($RDSTechnology -eq "Do not manage by RAS")
				{
					#do nothing
				}
				ElseIf($RDSTechnology -eq "User profile disk")
				{
					$ScriptInformation.Add(@{Data = "Settings"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     UPD State"; Value = $RDSUPDState; }) > $Null
					$ScriptInformation.Add(@{Data = "     Location of UPD"; Value = $RDSUPDLocation; }) > $Null
					$ScriptInformation.Add(@{Data = "     Maximum size (in GB)"; Value = $RDSUPDSize; }) > $Null
					$ScriptInformation.Add(@{Data = "     User profile disks data settings..."; Value = ""; }) > $Null
					
					If($RDSUPDRoamingMode -eq "Exclude")
					{
						$ScriptInformation.Add(@{Data = "     Store all user settings and data on the user profile disk"; Value = ""; }) > $Null
						$cnt = -1
						ForEach($item in $RDSUPDExcludeFilePath)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude the following folders"; Value = ""; }) > $Null
							}
							$ScriptInformation.Add(@{Data = ""; Value = "Path: $item     Type: File"; }) > $Null
						}
						
						ForEach($item in $RDSUPDExcludeFolderPath)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude the following folders"; Value = ""; }) > $Null
							}
							$ScriptInformation.Add(@{Data = ""; Value = "Path: $item     Type: Folder"; }) > $Null
						}
					}
					ElseIf($RDSUPDRoamingMode -eq "Include")
					{
						$ScriptInformation.Add(@{Data = "     Store only the following folders on the user profile disk"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "     All other folders in the user profile will not be preserved"; Value = ""; }) > $Null
						ForEach($item in $RDSUPDIncludeFolderPath)
						{
							$ScriptInformation.Add(@{Data = ""; Value = "Path: $item     Type: Folder"; }) > $Null
						}
						$ScriptInformation.Add(@{Data = "     Include the following folders"; Value = ""; }) > $Null
						ForEach($item in $RDSUPDIncludeFilePath)
						{
							$ScriptInformation.Add(@{Data = ""; Value = "Path: $item     Type: File"; }) > $Null
						}
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "     Unable to determine UPD Roaming Mode"; Value = ""; }) > $Null
					}
				}
				ElseIf($RDSTechnology -eq "FSLogix")
				{
					$ScriptInformation.Add(@{Data = "Deployment method"; Value = $FSLogixDeploymentSettingsDeploymentMethod; }) > $Null
					If($FSLogixDeploymentSettings.InstallType -eq "Online")
					{
						$ScriptInformation.Add(@{Data = "URL"; Value = $FSLogixDeploymentSettingsInstallOnlineURL; }) > $Null
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
					{
						$ScriptInformation.Add(@{Data = ""; Value = $FSLogixDeploymentSettingsNetworkDrivePath; }) > $Null
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
					{
						$ScriptInformation.Add(@{Data = ""; Value = $FSLogixDeploymentSettingsInstallerFileName; }) > $Null
					}
					#$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $FSLogixDeploymentSettingsReplicate.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Settings"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Location type"; Value = $FSLogixLocationType; }) > $Null
					
					$cnt = -1
					ForEach($item in $FSLogixLocationOfProfileDisks)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "     Location of profile disks"; Value = $item; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
						}
					}
					$ScriptInformation.Add(@{Data = "     Profile disk format"; Value = $FSLogixProfileDiskFormat; }) > $Null
					$ScriptInformation.Add(@{Data = "     Allocation type"; Value = $FSLogixAllocationType; }) > $Null
					$ScriptInformation.Add(@{Data = "     Default size"; Value = "$FSLogixDefaultSize GB"; }) > $Null
					$ScriptInformation.Add(@{Data = "Additional settings"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Users and Groups"; Value = ""; }) > $Null
					If($FSLogixSettingsUserInclusionList.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          User Inclusion List"; Value = "None"; }) > $Null
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "          User Inclusion List"; Value = "User: $($item.Account)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "User: $($item.Account)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
						}
					}

					If($FSLogixSettingsUserExclusionList.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          User Exclusion List"; Value = "None"; }) > $Null
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserExclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								#$ScriptInformation.Add(@{Data = "          User Exclusion List"; Value = "User: $($item.Account)  Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = "          User Exclusion List"; Value = "User: $($item.Account)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "User: $($item.Account)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
						}
					}
					$ScriptInformation.Add(@{Data = "     Folders"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          Customize profile folders"; Value = $FSLogixSettingsCustomizeProfileFolders.ToString(); }) > $Null
					If($FSLogixSettingsCustomizeProfileFolders)
					{
						If($ExcludedCommonFolders.Count -gt 0)
						{
							$cnt = -1
							ForEach($item in $ExcludedCommonFolders)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "               Exclude Common Folders"; Value = $item; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
								}
							}
						}
						Else
						{
							$ScriptInformation.Add(@{Data = "               Exclude Common Folders"; Value = "None"; }) > $Null
						}
					}
					
					If($FSLogixSettingsFolderInclusionList.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          Folder Inclusion List"; Value = "None"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          Folder Inclusion List"; Value = ""; }) > $Null
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "               Folder"; Value = "$item"; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$item"; }) > $Null
							}
						}
					}

					If($FSLogixSettingsFolderExclusionList.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          Folder Exclusion List"; Value = "None"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          Folder Exclusion List"; Value = ""; }) > $Null
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderExclusionList)
						{
							$cnt++
							
							Switch($item.ExcludeFolderCopy)
							{
								"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
								"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
								"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
								"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
								Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
							}
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "               Folder"; Value = "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"; }) > $Null
							}
						}
					}
					
					$ScriptInformation.Add(@{Data = "     Advanced"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          FSLogix Setting:"; Value = "Value:"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Access network as computer object"; Value = "$($FSLogixAS_AccessNetworkAsComputerObject)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Custom SDDL for profile directory"; Value = "$($FSLogixAS_ProfileDirSDDL)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Delay between locked VHD(X) retries"; Value = "$($FSLogixAS_LockedRetryInterval)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Delete local profile when loading from VHD"; Value = "$($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Diff disk parent folder path"; Value = "$($FSLogixAS_DiffDiskParentFolderPath)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Do not create a folder for new profiles"; Value = "$($FSLogixAS_NoProfileContainingFolder)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Enable Cached mode for Outlook"; Value = "$($FSLogixAS_OutlookCachedMode)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Keep local profiles"; Value = "$($FSLogixAS_KeepLocalDir)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Naming pattern for new VHD(X) files"; Value = "$($FSLogixAS_VHDNamePattern)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Number of locked VHD(X) retries"; Value = "$($FSLogixAS_LockedRetryCount)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Prevent logons with failures"; Value = "$($FSLogixAS_PreventLoginWithFailure)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Prevent logons with temp profiles"; Value = "$($FSLogixAS_PreventLoginWithTempProfile)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Profile folder naming pattern"; Value = "$($FSLogixAS_SIDDirNameMatch)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Profile type"; Value = "$($FSLogixAS_ProfileType)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Profile VHD(X) file matching pattern"; Value = "$($FSLogixAS_VHDNameMatch)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Re-attach interval"; Value = "$($FSLogixAS_ReAttachIntervalSeconds)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Re-attach retry limit"; Value = "$($FSLogixAS_ReAttachRetryCount)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Remove duplicate OST files on logoff"; Value = "$($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          SDDL used when attaching the VHD"; Value = "$($FSLogixAS_AttachVHDSDDL)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Search roaming feature mode"; Value = "$($FSLogixAS_RoamSearch)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Swap SID and username in profile directory names"; Value = "$($FSLogixAS_FlipFlopProfileDirectoryName)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Temporary folders redirection mode"; Value = "$($FSLogixAS_SetTempToLocalPath)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Use SDDL on creation of SID containing folder"; Value = "$($FSLogixAS_SIDDirSDDL)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          User-to-Profile matching pattern"; Value = "$($FSLogixAS_SIDDirNamePattern)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          VHDX sector size"; Value = "$($FSLogixAS_VHDXSectorSize)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Volume wait time"; Value = "$($FSLogixAS_VolumeWaitTimeMS)"; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 4 "Inherit default settings`t`t`t`t: " $RDSHost.InheritDefaultUserProfileSettings.ToString()
				Line 4 "Technology`t`t`t`t`t`t: " $RDSTechnology

				If($RDSTechnology -eq "Do not manage by RAS")
				{
					#do nothing
				}
				ElseIf($RDSTechnology -eq "User profile disk")
				{
					Line 4 "Settings"
					Line 5 "UPD State`t`t`t`t`t: " $RDSUPDState
					Line 5 "Location of UPD`t`t`t`t`t: " $RDSUPDLocation
					Line 5 "Maximum size (in GB)`t`t`t`t: " $RDSUPDSize
					Line 5 "User profile disks data settings..."
					
					If($RDSUPDRoamingMode -eq "Exclude")
					{
						Line 6 "Store all user settings and data on the user profile disk"
						Line 6 "Exclude the following folders"
						ForEach($item in $RDSUPDExcludeFilePath)
						{
							Line 7 "Path: $item Type: File"
						}
						
						ForEach($item in $RDSUPDExcludeFolderPath)
						{
							Line 7 "Path: $item Type: Folder"
						}
					}
					ElseIf($RDSUPDRoamingMode -eq "Include")
					{
						Line 6 "Store only the following folders on the user profile disk"
						Line 6 "All other folders in the user profile will not be preserved"
						ForEach($item in $RDSUPDIncludeFolderPath)
						{
							Line 7 "Path: $item Type: Folder"
						}
						Line 6 "Include the following folders"
						ForEach($item in $RDSUPDIncludeFilePath)
						{
							Line 7 "Path: $item Type: File"
						}
					}
					Else
					{
						Line 6 "Unable to determine UPD Roaming Mode"
					}
				}
				ElseIf($RDSTechnology -eq "FSLogix")
				{
					Line 4 "Deployment method`t`t`t`t`t: " $FSLogixDeploymentSettingsDeploymentMethod
					If($FSLogixDeploymentSettings.InstallType -eq "Online")
					{
						Line 4 "URL`t`t`t`t`t`t`t: " $FSLogixDeploymentSettingsInstallOnlineURL
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
					{
						Line 11 ": " $FSLogixDeploymentSettingsNetworkDrivePath
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
					{
						Line 11 ": " $FSLogixDeploymentSettingsInstallerFileName
					}
					#Line 4 "Settings are replicated to all Sites`t`t`t: " $FSLogixDeploymentSettingsReplicate.ToString()
					Line 4 "Settings"
					Line 5 "Location type`t`t`t`t`t: " $FSLogixLocationType
					
					$cnt = -1
					ForEach($item in $FSLogixLocationOfProfileDisks)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							Line 5 "Location of profile disks`t`t`t: " $item
						}
						Else
						{
							Line 11 "  " $item
						}
					}
					Line 5 "Profile disk format`t`t`t`t: " $FSLogixProfileDiskFormat
					Line 5 "Allocation type`t`t`t`t`t: " $FSLogixAllocationType
					Line 5 "Default size`t`t`t`t`t: " "$FSLogixDefaultSize GB"
					Line 4 "Additional settings"
					Line 5 "Users and Groups"
					If($FSLogixSettingsUserInclusionList.Count -eq 0)
					{
						Line 6 "User Inclusion List`t`t`t: " "None"
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								Line 6 "User Inclusion List`t`t`t: " "User: $($item.Account)  Type: $($item.Type)"
							}
							Else
							{
								Line 11 "  " "User: $($item.Account)  Type: $($item.Type)"
							}
						}
					}

					If($FSLogixSettingsUserExclusionList.Count -eq 0)
					{
						Line 6 "User Exclusion List`t`t`t: " "None"
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserExclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								Line 6 "User Exclusion List`t`t`t: " "User: $($item.Account)  Type: $($item.Type)"
							}
							Else
							{
								Line 11 "  " "User: $($item.Account)  Type: $($item.Type)"
							}
						}
					}
					Line 5 "Folders"
					Line 6 "Customize profile folders`t`t: " $FSLogixSettingsCustomizeProfileFolders.ToString()
					If($FSLogixSettingsCustomizeProfileFolders)
					{
						If($ExcludedCommonFolders.Count -gt 0)
						{
							$cnt = -1
							ForEach($item in $ExcludedCommonFolders)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									Line 7 "Exclude Common Folders`t`t: " $item
								}
								Else
								{
									Line 11 "  " $item
								}
							}
						}
						Else
						{
							Line 7 "Exclude Common Folders`t`t: None"
						}
					}
					
					If($FSLogixSettingsFolderInclusionList.Count -eq 0)
					{
						Line 6 "Folder Inclusion List`t`t`t: " "None"
					}
					Else
					{
						Line 6 "Folder Inclusion List"
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								Line 7 "Folder`t`t`t`t: " $item
							}
							Else
							{
								Line 11 "  " $item
							}
						}
					}

					If($FSLogixSettingsFolderExclusionList.Count -eq 0)
					{
						Line 6 "Folder Exclusion List`t`t`t: " "None"
					}
					Else
					{
						Line 6 "Folder Exclusion List"
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderExclusionList)
						{
							$cnt++
							
							Switch($item.ExcludeFolderCopy)
							{
								"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
								"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
								"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
								"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
								Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
							}
							
							If($cnt -eq 0)
							{
								Line 7 "Folder`t`t`t`t: " "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"
							}
							Else
							{
								Line 11 "  " "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"
							}
						}
					}
					
					Line 5 "Advanced"
					Line 6 "FSLogix Setting                                      Value"
					Line 6 "======================================================================================"
					#      "Swap SID and username in profile directory names     Redirect TEMP, TMP, and INetCache"
					Line 6 "Access network as computer object                    $($FSLogixAS_AccessNetworkAsComputerObject)"
					Line 6 "Custom SDDL for profile directory                    $($FSLogixAS_ProfileDirSDDL)"
					Line 6 "Delay between locked VHD(X) retries                  $($FSLogixAS_LockedRetryInterval)"
					Line 6 "Delete local profile when loading from VHD           $($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)"
					Line 6 "Diff disk parent folder path                         $($FSLogixAS_DiffDiskParentFolderPath)"
					Line 6 "Do not create a folder for new profiles              $($FSLogixAS_NoProfileContainingFolder)"
					Line 6 "Enable Cached mode for Outlook                       $($FSLogixAS_OutlookCachedMode)"
					Line 6 "Keep local profiles                                  $($FSLogixAS_KeepLocalDir)"
					Line 6 "Naming pattern for new VHD(X) files                  $($FSLogixAS_VHDNamePattern)"
					Line 6 "Number of locked VHD(X) retries                      $($FSLogixAS_LockedRetryCount)"
					Line 6 "Prevent logons with failures                         $($FSLogixAS_PreventLoginWithFailure)"
					Line 6 "Prevent logons with temp profiles                    $($FSLogixAS_PreventLoginWithTempProfile)"
					Line 6 "Profile folder naming pattern                        $($FSLogixAS_SIDDirNameMatch)"
					Line 6 "Profile type                                         $($FSLogixAS_ProfileType)"
					Line 6 "Profile VHD(X) file matching pattern                 $($FSLogixAS_VHDNameMatch)"
					Line 6 "Re-attach interval                                   $($FSLogixAS_ReAttachIntervalSeconds)"
					Line 6 "Re-attach retry limit                                $($FSLogixAS_ReAttachRetryCount)"
					Line 6 "Remove duplicate OST files on logoff                 $($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)"
					Line 6 "SDDL used when attaching the VHD                     $($FSLogixAS_AttachVHDSDDL)"
					Line 6 "Search roaming feature mode                          $($FSLogixAS_RoamSearch)"
					Line 6 "Swap SID and username in profile directory names     $($FSLogixAS_FlipFlopProfileDirectoryName)"
					Line 6 "Temporary folders redirection mode                   $($FSLogixAS_SetTempToLocalPath)"
					Line 6 "Use SDDL on creation of SID containing folder        $($FSLogixAS_SIDDirSDDL)"
					Line 6 "User-to-Profile matching pattern                     $($FSLogixAS_SIDDirNamePattern)"
					Line 6 "VHDX sector size                                     $($FSLogixAS_VHDXSectorSize)"
					Line 6 "Volume wait time                                     $($FSLogixAS_VolumeWaitTimeMS)"
				}

				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$RDSHost.InheritDefaultUserProfileSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Technology",($Script:htmlsb),$RDSTechnology,$htmlwhite))

				If($RDSTechnology -eq "Do not manage by RAS")
				{
					#do nothing
				}
				ElseIf($RDSTechnology -eq "User profile disk")
				{
					$rowdata += @(,("Settings",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("     UPD State",($Script:htmlsb),$RDSUPDState,$htmlwhite))
					$rowdata += @(,("     Location of UPD",($Script:htmlsb),$RDSUPDLocation,$htmlwhite))
					$rowdata += @(,("     Maximum size (in GB)",($Script:htmlsb),$RDSUPDSize,$htmlwhite))
					$rowdata += @(,("     User profile disks data settings...",($Script:htmlsb),"",$htmlwhite))
					
					If($RDSUPDRoamingMode -eq "Exclude")
					{
						$rowdata += @(,("     Store all user settings and data on the user profile disk",($Script:htmlsb),"",$htmlwhite))
						$cnt = -1
						ForEach($item in $RDSUPDExcludeFilePath)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude the following folders",($Script:htmlsb),"",$htmlwhite))
							}
							$rowdata += @(,("",($Script:htmlsb),"Path: $item     Type: File",$htmlwhite))
						}
						
						ForEach($item in $RDSUPDExcludeFolderPath)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude the following folders",($Script:htmlsb),"",$htmlwhite))
							}
							$rowdata += @(,("",($Script:htmlsb),"Path: $item     Type: Folder",$htmlwhite))
						}
					}
					ElseIf($RDSUPDRoamingMode -eq "Include")
					{
						$rowdata += @(,("     Store only the following folders on the user profile disk",($Script:htmlsb),"",$htmlwhite))
						$rowdata += @(,("     All other folders in the user profile will not be preserved",($Script:htmlsb),"",$htmlwhite))
						ForEach($item in $RDSUPDIncludeFolderPath)
						{
							$rowdata += @(,("",($Script:htmlsb),"Path: $item     Type: Folder",$htmlwhite))
						}
						$rowdata += @(,("     Include the following folders",($Script:htmlsb),"",$htmlwhite))
						ForEach($item in $RDSUPDIncludeFilePath)
						{
							$rowdata += @(,("",($Script:htmlsb),"Path: $item     Type: File",$htmlwhite))
						}
					}
					Else
					{
						$rowdata += @(,("     Unable to determine UPD Roaming Mode",($Script:htmlsb),"",$htmlwhite))
					}
				}
				ElseIf($RDSTechnology -eq "FSLogix")
				{
					$rowdata += @(,("Deployment method",($Script:htmlsb),$FSLogixDeploymentSettingsDeploymentMethod,$htmlwhite))
					If($FSLogixDeploymentSettings.InstallType -eq "Online")
					{
						$rowdata += @(,("URL",($Script:htmlsb),$FSLogixDeploymentSettingsInstallOnlineURL,$htmlwhite))
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
					{
						$rowdata += @(,("",($Script:htmlsb),$FSLogixDeploymentSettingsNetworkDrivePath,$htmlwhite))
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
					{
						$rowdata += @(,("",($Script:htmlsb),$FSLogixDeploymentSettingsInstallerFileName,$htmlwhite))
					}
					#$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$FSLogixDeploymentSettingsReplicate.ToString(),$htmlwhite))
					$rowdata += @(,("Settings",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("     Location type",($Script:htmlsb),$FSLogixLocationType,$htmlwhite))
					
					$cnt = -1
					ForEach($item in $FSLogixLocationOfProfileDisks)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("     Location of profile disks",($Script:htmlsb),$item,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
						}
					}
					$rowdata += @(,("     Profile disk format",($Script:htmlsb),$FSLogixProfileDiskFormat,$htmlwhite))
					$rowdata += @(,("     Allocation type",($Script:htmlsb),$FSLogixAllocationType,$htmlwhite))
					$rowdata += @(,("     Default size",($Script:htmlsb),"$FSLogixDefaultSize GB",$htmlwhite))
					$rowdata += @(,("Additional settings",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("     Users and Groups",($Script:htmlsb),"",$htmlwhite))
					If($FSLogixSettingsUserInclusionList.Count -eq 0)
					{
						$rowdata += @(,("          User Inclusion List",($Script:htmlsb),"None",$htmlwhite))
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("          User Inclusion List",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
						}
					}

					If($FSLogixSettingsUserExclusionList.Count -eq 0)
					{
						$rowdata += @(,("          User Exclusion List",($Script:htmlsb),"None",$htmlwhite))
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserExclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("          User Exclusion List",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
						}
					}
					$rowdata += @(,("     Folders",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          Customize profile folders",($Script:htmlsb),$FSLogixSettingsCustomizeProfileFolders.ToString(),$htmlwhite))
					If($FSLogixSettingsCustomizeProfileFolders)
					{
						If($ExcludedCommonFolders.Count -gt 0)
						{
							$cnt = -1
							ForEach($item in $ExcludedCommonFolders)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$rowdata += @(,("               Exclude Common Folders",($Script:htmlsb),$item,$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
								}
							}
						}
						Else
						{
							$rowdata += @(,("               Exclude Common Folders",($Script:htmlsb),"None",$htmlwhite))
						}
					}

					If($FSLogixSettingsFolderInclusionList.Count -eq 0)
					{
						$rowdata += @(,("          Folder Inclusion List",($Script:htmlsb),"None",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("          Folder Inclusion List",($Script:htmlsb),"",$htmlwhite))
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("               Folder",($Script:htmlsb),"$item",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$item",$htmlwhite))
							}
						}
					}

					If($FSLogixSettingsFolderExclusionList.Count -eq 0)
					{
						$rowdata += @(,("          Folder Exclusion List",($Script:htmlsb),"None",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("          Folder Exclusion List",($Script:htmlsb),"",$htmlwhite))
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderExclusionList)
						{
							$cnt++
							
							Switch($item.ExcludeFolderCopy)
							{
								"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
								"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
								"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
								"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
								Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
							}
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("               Folder",($Script:htmlsb),"$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack",$htmlwhite))
							}
						}
					}

					$rowdata += @(,("     Advanced",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          FSLogix Setting:",($Script:htmlsb),"Value:",$htmlwhite))
					$rowdata += @(,("          Access network as computer object",($Script:htmlsb),"$($FSLogixAS_AccessNetworkAsComputerObject)",$htmlwhite))
					$rowdata += @(,("          Custom SDDL for profile directory",($Script:htmlsb),"$($FSLogixAS_ProfileDirSDDL)",$htmlwhite))
					$rowdata += @(,("          Delay between locked VHD(X) retries",($Script:htmlsb),"$($FSLogixAS_LockedRetryInterval)",$htmlwhite))
					$rowdata += @(,("          Delete local profile when loading from VHD",($Script:htmlsb),"$($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)",$htmlwhite))
					$rowdata += @(,("          Diff disk parent folder path",($Script:htmlsb),"$($FSLogixAS_DiffDiskParentFolderPath)",$htmlwhite))
					$rowdata += @(,("          Do not create a folder for new profiles",($Script:htmlsb),"$($FSLogixAS_NoProfileContainingFolder)",$htmlwhite))
					$rowdata += @(,("          Enable Cached mode for Outlook",($Script:htmlsb),"$($FSLogixAS_OutlookCachedMode)",$htmlwhite))
					$rowdata += @(,("          Keep local profiles",($Script:htmlsb),"$($FSLogixAS_KeepLocalDir)",$htmlwhite))
					$rowdata += @(,("          Naming pattern for new VHD(X) files",($Script:htmlsb),"$($FSLogixAS_VHDNamePattern)",$htmlwhite))
					$rowdata += @(,("          Number of locked VHD(X) retries",($Script:htmlsb),"$($FSLogixAS_LockedRetryCount)",$htmlwhite))
					$rowdata += @(,("          Prevent logons with failures",($Script:htmlsb),"$($FSLogixAS_PreventLoginWithFailure)",$htmlwhite))
					$rowdata += @(,("          Prevent logons with temp profiles",($Script:htmlsb),"$($FSLogixAS_PreventLoginWithTempProfile)",$htmlwhite))
					$rowdata += @(,("          Profile folder naming pattern",($Script:htmlsb),"$($FSLogixAS_SIDDirNameMatch)",$htmlwhite))
					$rowdata += @(,("          Profile type",($Script:htmlsb),"$($FSLogixAS_ProfileType)",$htmlwhite))
					$rowdata += @(,("          Profile VHD(X) file matching pattern",($Script:htmlsb),"$($FSLogixAS_VHDNameMatch)",$htmlwhite))
					$rowdata += @(,("          Re-attach interval",($Script:htmlsb),"$($FSLogixAS_ReAttachIntervalSeconds)",$htmlwhite))
					$rowdata += @(,("          Re-attach retry limit",($Script:htmlsb),"$($FSLogixAS_ReAttachRetryCount)",$htmlwhite))
					$rowdata += @(,("          Remove duplicate OST files on logoff",($Script:htmlsb),"$($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)",$htmlwhite))
					$rowdata += @(,("          SDDL used when attaching the VHD",($Script:htmlsb),"$($FSLogixAS_AttachVHDSDDL)",$htmlwhite))
					$rowdata += @(,("          Search roaming feature mode",($Script:htmlsb),"$($FSLogixAS_RoamSearch)",$htmlwhite))
					$rowdata += @(,("          Swap SID and username in profile directory names",($Script:htmlsb),"$($FSLogixAS_FlipFlopProfileDirectoryName)",$htmlwhite))
					$rowdata += @(,("          Temporary folders redirection mode",($Script:htmlsb),"$($FSLogixAS_SetTempToLocalPath)",$htmlwhite))
					$rowdata += @(,("          Use SDDL on creation of SID containing folder",($Script:htmlsb),"$($FSLogixAS_SIDDirSDDL)",$htmlwhite))
					$rowdata += @(,("          User-to-Profile matching pattern",($Script:htmlsb),"$($FSLogixAS_SIDDirNamePattern)",$htmlwhite))
					$rowdata += @(,("          VHDX sector size",($Script:htmlsb),"$($FSLogixAS_VHDXSectorSize)",$htmlwhite))
					$rowdata += @(,("          Volume wait time",($Script:htmlsb),"$($FSLogixAS_VolumeWaitTimeMS)",$htmlwhite))
				}

				$msg = "User profile"
				$columnWidths = @("350","325")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Optimization
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Optimization"
			}
			If($Text)
			{
				Line 3 "Optimization"
			}
			If($HTML)
			{
				#Nothing
			}

			<#
			Get-RASImageOptimization -Id 1 -ObjType RDS

			EnableOptimization            : True
			OptimizationType              : Automatic
			WindowsDefenderATP            : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.WindowsDefenderATP
			WindowsComponents             : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.WindowsComponents
			WindowsDefenderATPEnabled     : True
			WindowsComponentsEnabled      : True
			WindowsServicesEnabled        : True
			WindowsScheduledTasksEnabled  : True
			WindowsAdvancedOptionsEnabled : True
			NetworkPerformanceEnabled     : True
			RegistryEnabled               : True
			VisualEffectsEnabled          : True
			DiskCleanupEnabled            : True
			CustomScriptEnabled           : False
			WindowsServices               : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.WindowsServices
			WindowsAdvancedOptions        : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.WindowsAdvancedOptions
			NetworkPerformance            : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.NetworkPerformance
			CustomScript                  : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.CustomScript
			DiskCleanup                   : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.DiskCleanup
			VisualEffects                 : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.VisualEffects
			WindowsScheduledTasks         : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.WindowsScheduledTasks
			Registry                      : RASAdminEngine.Core.OutputModels.ImagesOptimization.Categories.Registries
			#>

			If($RDSHost.InheritDefaultOptimizationSettings)
			{
				#do we inherit group or site defaults?
				#is this RDS host in a group?
				#http://woshub.com/hot-to-convert-sid-to-username-and-vice-versa/
				#for translating the User SID to the AD user name
				$RDSGroup = Get-RASRDSGroup -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $RDSGroup)
				{
					If($RDSGroup.RDSIds -Contains $RDSHost.Id )
					{
						#does this group inherit default settings?
						If($RDSGroup.InheritDefaultOptimizationSettings -eq $False)
						{
							#no we don't, so get the default settings for the group
							$OPTEnableOptimization            = $RDSGroup.Optimization.EnableOptimization.ToString()
							$OPTOptimizationType              = $RDSGroup.Optimization.OptimizationType.ToString()
							$OPTWindowsDefenderATPEnabled     = $RDSGroup.Optimization.WindowsDefenderATPEnabled.ToString()    
							$OPTWindowsComponentsEnabled      = $RDSGroup.Optimization.WindowsComponentsEnabled.ToString()
							$OPTWindowsServicesEnabled        = $RDSGroup.Optimization.WindowsServicesEnabled.ToString()
							$OPTWinodwsScheduledTasksEnabled  = $RDSGroup.Optimization.WindowsScheduledTasksEnabled.ToString()
							$OPTWindowsAdvancedOptionsEnabled = $RDSGroup.Optimization.WindowsAdvancedOptionsEnabled.ToString()
							$OPTNetworkPerformanceEnabled     = $RDSGroup.Optimization.NetworkPerformanceEnabled.ToString()
							$OPTRegistryEnabled               = $RDSGroup.Optimization.RegistryEnabled.ToString()
							$OPTVisualEffectsEnabled          = $RDSGroup.Optimization.VisualEffectsEnabled.ToString()   
							$OPTDiskCleanupEnabled            = $RDSGroup.Optimization.DiskCleanupEnabled.ToString()
							$OPTCustomScriptEnabled           = $RDSGroup.Optimization.CustomScriptEnabled.ToString()
						}
						Else
						{
							#yes we do, get the default settings for the Site
							#use the Site default settings
							$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
							
							If($? -and $Null -ne $RDSDefaults)
							{
								$OPTEnableOptimization            = $RDSDefaults.Optimization.EnableOptimization.ToString()
								$OPTOptimizationType              = $RDSDefaults.Optimization.OptimizationType.ToString()
								$OPTWindowsDefenderATPEnabled     = $RDSDefaults.Optimization.WindowsDefenderATPEnabled.ToString()    
								$OPTWindowsComponentsEnabled      = $RDSDefaults.Optimization.WindowsComponentsEnabled.ToString()
								$OPTWindowsServicesEnabled        = $RDSDefaults.Optimization.WindowsServicesEnabled.ToString()
								$OPTWinodwsScheduledTasksEnabled  = $RDSDefaults.Optimization.WindowsScheduledTasksEnabled.ToString()
								$OPTWindowsAdvancedOptionsEnabled = $RDSDefaults.Optimization.WindowsAdvancedOptionsEnabled.ToString()
								$OPTNetworkPerformanceEnabled     = $RDSDefaults.Optimization.NetworkPerformanceEnabled.ToString()
								$OPTRegistryEnabled               = $RDSDefaults.Optimization.RegistryEnabled.ToString()
								$OPTVisualEffectsEnabled          = $RDSDefaults.Optimization.VisualEffectsEnabled.ToString()   
								$OPTDiskCleanupEnabled            = $RDSDefaults.Optimization.DiskCleanupEnabled.ToString()
								$OPTCustomScriptEnabled           = $RDSDefaults.Optimization.CustomScriptEnabled.ToString()
							}
							Else
							{
								#unable to retrieve default, use built-in default values
								$OPTEnableOptimization            = "False"
								$OPTOptimizationType              = ""
								$OPTWindowsDefenderATPEnabled     = "False"
								$OPTWindowsComponentsEnabled      = "False"
								$OPTWindowsServicesEnabled        = "False"
								$OPTWinodwsScheduledTasksEnabled  = "False"
								$OPTWindowsAdvancedOptionsEnabled = "False"
								$OPTNetworkPerformanceEnabled     = "False"
								$OPTRegistryEnabled               = "False"
								$OPTVisualEffectsEnabled          = "False"
								$OPTDiskCleanupEnabled            = "False"
								$OPTCustomScriptEnabled           = "False"
							}
						}
					}
				}
				Else
				{
					#RDS Host is not in a group
					#get the settings for the host
					
					$OPTEnableOptimization            = $RDSHost.Optimization.EnableOptimization.ToString()
					$OPTOptimizationType              = $RDSHost.Optimization.OptimizationType.ToString()
					$OPTWindowsDefenderATPEnabled     = $RDSHost.Optimization.WindowsDefenderATPEnabled.ToString()    
					$OPTWindowsComponentsEnabled      = $RDSHost.Optimization.WindowsComponentsEnabled.ToString()
					$OPTWindowsServicesEnabled        = $RDSHost.Optimization.WindowsServicesEnabled.ToString()
					$OPTWinodwsScheduledTasksEnabled  = $RDSHost.Optimization.WindowsScheduledTasksEnabled.ToString()
					$OPTWindowsAdvancedOptionsEnabled = $RDSHost.Optimization.WindowsAdvancedOptionsEnabled.ToString()
					$OPTNetworkPerformanceEnabled     = $RDSHost.Optimization.NetworkPerformanceEnabled.ToString()
					$OPTRegistryEnabled               = $RDSHost.Optimization.RegistryEnabled.ToString()
					$OPTVisualEffectsEnabled          = $RDSHost.Optimization.VisualEffectsEnabled.ToString()   
					$OPTDiskCleanupEnabled            = $RDSHost.Optimization.DiskCleanupEnabled.ToString()
					$OPTCustomScriptEnabled           = $RDSHost.Optimization.CustomScriptEnabled.ToString()
				}
			}
			Else
			{
				#we don't inherit
				#get the settings for the host
				
				$OPTEnableOptimization            = $RDSHost.Optimization.EnableOptimization.ToString()
				$OPTOptimizationType              = $RDSHost.Optimization.OptimizationType.ToString()
				$OPTWindowsDefenderATPEnabled     = $RDSHost.Optimization.WindowsDefenderATPEnabled.ToString()    
				$OPTWindowsComponentsEnabled      = $RDSHost.Optimization.WindowsComponentsEnabled.ToString()
				$OPTWindowsServicesEnabled        = $RDSHost.Optimization.WindowsServicesEnabled.ToString()
				$OPTWinodwsScheduledTasksEnabled  = $RDSHost.Optimization.WindowsScheduledTasksEnabled.ToString()
				$OPTWindowsAdvancedOptionsEnabled = $RDSHost.Optimization.WindowsAdvancedOptionsEnabled.ToString()
				$OPTNetworkPerformanceEnabled     = $RDSHost.Optimization.NetworkPerformanceEnabled.ToString()
				$OPTRegistryEnabled               = $RDSHost.Optimization.RegistryEnabled.ToString()
				$OPTVisualEffectsEnabled          = $RDSHost.Optimization.VisualEffectsEnabled.ToString()   
				$OPTDiskCleanupEnabled            = $RDSHost.Optimization.DiskCleanupEnabled.ToString()
				$OPTCustomScriptEnabled           = $RDSHost.Optimization.CustomScriptEnabled.ToString()
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSHost.InheritDefaultUserProfileSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Enable optimization"; Value = $OPTEnableOptimization; }) > $Null
				$ScriptInformation.Add(@{Data = "Optimization type"; Value = $OPTOptimizationType; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 5 0 "Windows Defender ATP:" $OPTWindowsDefenderATPEnabled
				If($OPTWindowsDefenderATPEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Defender ATP Optimizations"; Value = ""; }) > $Null

					If($RDSHost.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
					{
						$ScriptInformation.Add(@{Data = "     Turn off Windows Defender ATP (I use my own ATP solution)"; Value = ""; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "     Turn on Windows Defender ATP and set process and folder exclusions"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "     Disable real-time protection"; Value = $RDSHost.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString(); }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						
						$cnt = -1
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeFolders)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude files and folders"; Value = $item; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
							}
						}

						$cnt = -1
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeProcesses)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude processes"; Value = $item; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
							}
						}
						
						$cnt = -1
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeExtension)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude extensions"; Value = $item; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
							}
						}
					}

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 250;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}

				WriteWordLine 5 0 "Windows Components:" $OPTWindowsComponentsEnabled
				If($OPTWindowsComponentsEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Components Optimizations"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "Disable (remove) components:"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					ForEach($item in $RDSHost.Optimization.WindowsComponents.WindowsComponentsList)
					{
							If($Null -eq $item.DisplayName)
							{
								$DisplayName = ""
							}
							Else
							{
								$DisplayName = $item.DisplayName
							}
							If($Null -eq $item.ComponentName)
							{
								$ComponentName = ""
							}
							Else
							{
								$ComponentName = $item.ComponentName
							}
						$OptimizationTable += @{
							DisplayName = $DisplayName
							ComponentName = $ComponentName
						}
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns DisplayName, ComponentName `
						-Headers "Display name", "Component" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 200;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}

				WriteWordLine 5 0 "Windows Services: " $OPTWindowsServicesEnabled       
				If($OPTWindowsServicesEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Services Optimizations"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "Disable services:"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					ForEach($item in $RDSHost.Optimization.WindowsServices.WindowsServicesList)
					{
							If($Null -eq $item.DisplayName)
							{
								$DisplayName = ""
							}
							Else
							{
								$DisplayName = $item.DisplayName
							}
							If($Null -eq $item.ServiceName)
							{
								$Service = ""
							}
							Else
							{
								$Service = $item.ServiceName
							}
							If($Null -eq $item.Aliases)
							{
								$Aliases = ""
							}
							Else
							{
								$Aliases = $item.Aliases
							}
						$OptimizationTable += @{
							DisplayName = $DisplayName
							Service     = $Service
							Aliases     = $Aliases
						}
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns DisplayName, Service, Aliases `
						-Headers "Display name", "Service", "Aliases" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 100;
						$Table.Columns.Item(3).Width = 50;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				
				WriteWordLine 5 0 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled 
				If($OPTWinodwsScheduledTasksEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Scheduled Tasks Optimizations"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "Disable tasks:"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					ForEach($item in $RDSHost.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
					{
							If($Null -eq $item.Task)
							{
								$Task = ""
							}
							Else
							{
								$Task = $item.Task
							}
							If($Null -eq $item.Type)
							{
								$Type = ""
							}
							Else
							{
								$Type = $item.Type.ToString()
							}
							If($Null -eq $item.Location)
							{
								$Location = ""
							}
							Else
							{
								$Location = $item.Location
							}
						$OptimizationTable += @{
							Task     = $Task
							Type     = $Type
							Location = $Location
						}
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Task, Type, Location `
						-Headers "Task", "Type", "Location" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 50;
						$Table.Columns.Item(3).Width = 250;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				
				WriteWordLine 5 0 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
				If($OPTWindowsAdvancedOptionsEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Advanced Options"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					$OptimizationTable += @{
						Setting = "Disable Hibernate"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.Hibernate.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable Telemetry collection"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.TeleCollection.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable System Restore"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.SystemRestore.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable error reporting to send additional data"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable Tiles"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.Tiles.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable Cortana digital assistant"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.Cortana.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Turn off Microsoft consumer experience"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Do not show Windows tips"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.WindowsTips.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Remove Common program groups from the Start Menu"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Partial Start Menu layout"
						Enabled = $RDSHost.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString()
						Value   = $RDSHost.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Setting, Enabled, Value `
						-Headers "Setting", "Enabled", "Value" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 275;
						$Table.Columns.Item(2).Width = 50;
						$Table.Columns.Item(3).Width = 175;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				
				WriteWordLine 5 0 "Network performance: " $OPTNetworkPerformanceEnabled
				If($OPTNetworkPerformanceEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Network Performance Optimizations"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					$OptimizationTable += @{
						Setting = "FileInfoCacheEntriesMax"
						Enabled = $RDSHost.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString()
						Value   = $RDSHost.Optimization.NetworkPerformance.FileInfoCache
					}

					$OptimizationTable += @{
						Setting = "DirectoryCacheEntriesMax"
						Enabled = $RDSHost.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString()
						Value   = $RDSHost.Optimization.NetworkPerformance.DirCacheMax
					}

					$OptimizationTable += @{
						Setting = "FileNotFoundCacheEntriesMax"
						Enabled = $RDSHost.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString()
						Value   = $RDSHost.Optimization.NetworkPerformance.FileNotFoundCache
					}

					$OptimizationTable += @{
						Setting = "DormantFileLimit"
						Enabled = $RDSHost.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString()
						Value   = $RDSHost.Optimization.NetworkPerformance.DormantFileLimit
					}

					$OptimizationTable += @{
						Setting = "Disable TCP/IP Task Offload"
						Enabled = $RDSHost.Optimization.NetworkPerformance.DisableTCP.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable IPv6 Components"
						Enabled = $RDSHost.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable IPv6 to IPv4"
						Enabled = $RDSHost.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disables isatap for IPv6"
						Enabled = $RDSHost.Optimization.NetworkPerformance.DisableIsaTap.ToString()
						Value   = ""
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Setting, Enabled, Value `
						-Headers "Setting", "Enabled", "Value" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 150;
						$Table.Columns.Item(2).Width = 50;
						$Table.Columns.Item(3).Width = 50;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}

				WriteWordLine 5 0 "Registry: " $OPTRegistryEnabled
				If($OPTRegistryEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Registry Optimizations"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null

					ForEach($item in $RDSHost.Optimization.Registry.RegistryList)
					{
						If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
						{
							$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
							$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
							$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
							$ScriptInformation.Add(@{Data = "Type"; Value = $item.RegType.ToString(); }) > $Null
							$ScriptInformation.Add(@{Data = "Data"; Value = $item.StringValue; }) > $Null
							$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						}
						ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
						{
							$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
							$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
							$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
							$ScriptInformation.Add(@{Data = "Type"; Value = $item.RegType.ToString(); }) > $Null
							$ScriptInformation.Add(@{Data = "Data"; Value = $item.DWORDValue; }) > $Null
							$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						}
						ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
						{
							$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
							$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
							$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
							$cnt = -1
							$TmpArray = $item.StringValue.Split("`r")
							ForEach($SubItem in $TmpArray)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "Type"; Value = $SubItem; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = $SubItem; }) > $Null
								}
							}
							$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						}
					}

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 125;
					$Table.Columns.Item(2).Width = 375;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				
				WriteWordLine 5 0 "Visual Effects: " $OPTVisualEffectsEnabled
				If($OPTVisualEffectsEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Visual Effects Optimizations"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					$OptimizationTable += @{
						Setting = "Animate controls and elements inside windows"
						Enabled = $RDSHost.Optimization.VisualEffects.AnimateControlSelectElements.ToString()
					}

					$OptimizationTable += @{
						Setting = "Animate windows when minimizing and maximizing"
						Enabled = $RDSHost.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString()
					}

					$OptimizationTable += @{
						Setting = "Animations in the taskbar"
						Enabled = $RDSHost.Optimization.VisualEffects.AnimateTaskbar.ToString()
					}

					$OptimizationTable += @{
						Setting = "Enable Peek"
						Enabled = $RDSHost.Optimization.VisualEffects.EnablePeek.ToString()
					}

					$OptimizationTable += @{
						Setting = "Fade or slide menus into view"
						Enabled = $RDSHost.Optimization.VisualEffects.FadeSlideMenus.ToString()
					}

					$OptimizationTable += @{
						Setting = "Fade or slide Tooltips into view"
						Enabled = $RDSHost.Optimization.VisualEffects.FadeSlideToolTips.ToString()
					}

					$OptimizationTable += @{
						Setting = "Fade out menu items after clicking"
						Enabled = $RDSHost.Optimization.VisualEffects.FadeOutMenuItems.ToString()
					}

					$OptimizationTable += @{
						Setting = "Save taskbar thumbnail previews"
						Enabled = $RDSHost.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show shadows under mouse pointer"
						Enabled = $RDSHost.Optimization.VisualEffects.ShowShadowUnderMouse.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show shadows under windows"
						Enabled = $RDSHost.Optimization.VisualEffects.ShadowUnderWindows.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show thumbnails instead of icons"
						Enabled = $RDSHost.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show translucent selection rectangle"
						Enabled = $RDSHost.Optimization.VisualEffects.ShowTranslucentSelection.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show window contents while dragging"
						Enabled = $RDSHost.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString()
					}

					$OptimizationTable += @{
						Setting = "Slide open combo boxes"
						Enabled = $RDSHost.Optimization.VisualEffects.SlideOpenComboBoxes.ToString()
					}

					$OptimizationTable += @{
						Setting = "Smooth edges of screen fonts"
						Enabled = $RDSHost.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString()
					}

					$OptimizationTable += @{
						Setting = "Smooth-scroll list boxes"
						Enabled = $RDSHost.Optimization.VisualEffects.SmoothScrollListBoxes.ToString()
					}

					$OptimizationTable += @{
						Setting = "Use drop shadows for icon labels on the desktop"
						Enabled = $RDSHost.Optimization.VisualEffects.DropShadowsIcon.ToString()
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Setting, Enabled `
						-Headers "Setting", "Enabled" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 250;
						$Table.Columns.Item(2).Width = 50;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				
				WriteWordLine 5 0 "Disk cleanup: " $OPTDiskCleanupEnabled
				If($OPTDiskCleanupEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Disk Cleanup Optimizations"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					$OptimizationTable += @{
						Setting = "Clean up redundant system files"
						Enabled = $RDSHost.Optimization.DiskCleanup.CleanupSystemFiles.ToString()
					}

					$OptimizationTable += @{
						Setting = "Clean up the WinSxS Folder"
						Enabled = $RDSHost.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString()
					}

					$OptimizationTable += @{
						Setting = "Clean up temporary files and logs"
						Enabled = $RDSHost.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString()
					}

					$OptimizationTable += @{
						Setting = "Remove OneDrive"
						Enabled = $RDSHost.Optimization.DiskCleanup.RemoveOneDrive.ToString()
					}

					$OptimizationTable += @{
						Setting = "Delete users' profiles"
						Enabled = $RDSHost.Optimization.DiskCleanup.DeleteUserProfiles.ToString()
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Setting, Enabled `
						-Headers "Setting", "Enabled" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 175;
						$Table.Columns.Item(2).Width = 50;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}

				WriteWordLine 5 0 "Custom script: " $OPTCustomScriptEnabled
				If($OPTCustomScriptEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Custom Script"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Command"; Value = $RDSHost.Optimization.CustomScript.Command; }) > $Null
					$ScriptInformation.Add(@{Data = "     Arguments"; Value = $RDSHost.Optimization.CustomScript.Arguments; }) > $Null
					$ScriptInformation.Add(@{Data = "     Initial directory"; Value = $RDSHost.Optimization.CustomScript.InitDir; }) > $Null
					$ScriptInformation.Add(@{Data = "     Username"; Value = $RDSHost.Optimization.CustomScript.User; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 100;
					$Table.Columns.Item(2).Width = 200;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
			}
			If($Text)
			{
				Line 4 "Inherit default settings`t: " $RDSHost.InheritDefaultOptimizationSettings.ToString()
				Line 4 "Enable optimization`t`t: " $OPTEnableOptimization
				Line 4 "Optimization type`t`t: " $OPTOptimizationType
				Line 4 "Category"
				
				Line 5 "Windows Defender ATP: " $OPTWindowsDefenderATPEnabled
				If($OPTWindowsDefenderATPEnabled -eq "True")
				{
					Line 6 "Windows Defender ATP Optimizations"
					<#
						WinDefATPTurnOffOn        : TurnOnWindowsDefenderATP
						DisableRealTimeProtection : False
						ExcludeFolders            : {%ProgramData%\Parallels\RASLogs\, %ProgramFiles(x86)%\Parallels\,
													%ProgramFiles%\Parallels\, %WINDOWS%\system32\config\...}
						ExcludeProcesses          : {csrss.exe, winlogon.exe, rdpclip.exe, rdpinit.exe...}
						ExcludeExtension          : {.vhd, .vhdx}					
					#>
					If($RDSHost.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
					{
						Line 7 "Turn off Windows Defender ATP (I use my own ATP solution)"
					}
					Else
					{
						Line 7 "Turn on Windows Defender ATP and set process and folder exclusions"
						Line 7 "Disable real-time protection: " $RDSHost.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString()
						Line 0 ""
						Line 7 "Exclude files and folders:"
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeFolders)
						{
							Line 8 $item
						}

						Line 7 "Exclude processes:"
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeProcesses)
						{
							Line 8 $item
						}
						
						Line 7 "Exclude extensions:"
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeExtension)
						{
							Line 8 $item
						}
					}
					
					Line 0 ""
				}
				
				Line 5 "Windows Components: " $OPTWindowsComponentsEnabled
				If($OPTWindowsComponentsEnabled -eq "True")
				{
					Line 6 "Windows Components Optimizations"
					Line 7 "Disable (remove) components:"
					Line 0 ""
					Line 7 "Display name                                        Component                                         "
					Line 7 "======================================================================================================"
					#		12345678901234567890123456789012345678901234567890SS12345678901234567890123456789012345678901234567890
					#		Printing-XPSServices-Features                       SMB 1.0/CIFS File sharing support component
					<#
							  Type ComponentName                 DisplayName Aliases
							  ---- -------------                 ----------- -------
						Predefined MSRDC-Infrastructure
						Predefined MediaPlayback
						Predefined WindowsMediaPlayer
						Predefined Printing-XPSServices-Features
						Predefined SMB1Protocol
						Predefined SearchEngine-Client-Package
						Predefined Xps-Foundation-Xps-Viewer					
					#>
					ForEach($item in $RDSHost.Optimization.WindowsComponents.WindowsComponentsList)
					{
						Line 7 ( "{0,-50}  {1,-50}" -f $item.DisplayName, $item.ComponentName)
					}
					Line 0 ""
				}
				
				Line 5 "Windows Services: " $OPTWindowsServicesEnabled       
				If($OPTWindowsServicesEnabled -eq "True")
				{
					Line 6 "Windows Services Optimizations"
					Line 7 "Disable services:"
					Line 0 ""
					Line 7 "Display name                                        Service                         Aliases             "
					Line 7 "========================================================================================================"
					#		12345678901234567890123456789012345678901234567890SS123456789012345678901234567890SS12345678901234567890
					#		Windows Media Player Network Sharing Service        TabletInputService              Superfecth
					<#
							  Type ServiceName        DisplayName Aliases
							  ---- -----------        ----------- -------
						Predefined AJRouter
						Predefined ALG
						Predefined BTAGService
						Predefined BthAvctpSvc
						Predefined CscService
						Predefined DOT3SVC
						Predefined DPS
						Predefined DiagTrack
						Predefined EFS
						Predefined FDResPub
						Predefined MapsBroker
						Predefined SSDPSRV
						Predefined SensrSvc
						Predefined SharedAccess
						Predefined ShellHWDetection
						Predefined StorSvc
						Predefined Sysmain
						Predefined Superfetch
						Predefined TabletInputService
						Predefined TapiSrv
						Predefined Themes
						Predefined WMPNetworkSvc
						Predefined WbioSrvc
						Predefined WdiSystemHost
						Predefined WerSvc
						Predefined bthserv
						Predefined fdPHost
						Predefined lfsvc
						Predefined upnphost
						Predefined wbengine
						Predefined wisvc
						Predefined wlidsvc					
					#>
					ForEach($item in $RDSHost.Optimization.WindowsServices.WindowsServicesList)
					{
						Line 7 ( "{0,-50}  {1,-30}  {2,-20}" -f $item.DisplayName, $item.ServiceName, $item.Aliases)
					}
					Line 0 ""
				}
				
				Line 5 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled 
				If($OPTWinodwsScheduledTasksEnabled -eq "True")
				{
					Line 6 "Windows Scheduled Tasks Optimizations"
					Line 7 "Disable tasks:"
					Line 0 ""
					Line 7 "Task                                                Type    Location                                          "
					Line 7 "=============================================================================================================="
					#		12345678901234567890123456789012345678901234567890SS123456SS12345678901234567890123456789012345678901234567890
					#		MNO Metadata Parser                                 Folder  \Microsoft\Windows\Mobile Broadband Accounts\
					<#
						Task                Location                                        Type
						----                --------                                        ----
						*                   \Microsoft\Windows\Application Experience     Folder
						*                   \Microsoft\Windows\BitLocker                  Folder
						CDSSync             \Microsoft\Windows\WlanSvc\                     Task
						*                   \Microsoft\OneCore\DirectX                    Folder
						GatherNetworkInfo   \Microsoft\Windows\NetTrace\                    Task
						MNO Metadata Parser \Microsoft\Windows\Mobile Broadband Accounts\   Task
						NotificationTask    \Microsoft\Windows\WwanSvc\                     Task
						*                   \Microsoft\Office                             Folder
						QueueReporting      \Microsoft\Windows\Windows Error Reporting\     Task
						SR                  \Microsoft\Windows\SystemRestore\               Task
						ScheduledDefrag     \Microsoft\Windows\Defrag\                      Task
						Scheduled Start     \Microsoft\Windows\WindowsUpdate\               Task
						*                   \Microsoft\Windows\Sysmain                    Folder
						Tpm-HASCertRetr     \Microsoft\Windows\TPM\                         Task
						Tpm-Maintenance     \Microsoft\Windows\TPM\                         Task
						UninstallDeviceTask \Microsoft\Windows\Bluetooth\                   Task
						UpdateLibrary       \Microsoft\Windows\Windows Media Sharing\       Task
						*                   \Microsoft\Windows\Windows Defender           Folder
						XblGameSaveTask     \Microsoft\XblGameSave\                         Task
						sihpostreboot       \Microsoft\Windows\WindowsUpdate\               Task					
					#>
					ForEach($item in $RDSHost.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
					{
						Line 7 ( "{0,-50}  {1,-6}  {2,-50}" -f $item.Task, $item.Type.ToString(), $item.Location)
					}
					Line 0 ""
				}

				Line 5 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
				If($OPTWindowsAdvancedOptionsEnabled -eq "True")
				{
					Line 6 "Windows Advanced Options"
					Line 0 ""
					Line 7 "Setting                                           Enabled  Value                                             "
					Line 7 "============================================================================================================="
					#		123456789012345678901234567890123456789012345678SS1234567SS12345678901234567890123456789012345678901234567890
					#		Remove Common program groups from the start menu  False    SomeConfigFile.xml
					<#
						PartialStartLayoutContent   : Configuration.xml
						Hibernate                   : True
						TeleCollection              : True
						SystemRestore               : True
						AdditionalErrorReport       : True
						Tiles                       : True
						Cortana                     : True
						MicrosoftConsumerExperience : True
						WindowsTips                 : True
						CommonProgramGroups         : True
						PartialStartMenu            : True
					#>
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable Hibernate", `
					$RDSHost.Optimization.WindowsAdvancedOptions.Hibernate.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable Telemetry collection", `
					$RDSHost.Optimization.WindowsAdvancedOptions.TeleCollection.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable System Restore", `
					$RDSHost.Optimization.WindowsAdvancedOptions.SystemRestore.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable error reporting to send additional data", `
					$RDSHost.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable Tiles", `
					$RDSHost.Optimization.WindowsAdvancedOptions.Tiles.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable Cortana digital assistant", `
					$RDSHost.Optimization.WindowsAdvancedOptions.Cortana.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Turn off Microsoft consumer experience", `
					$RDSHost.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Do not show Windows tips", `
					$RDSHost.Optimization.WindowsAdvancedOptions.WindowsTips.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Remove Common program groups from the Start Menu", `
					$RDSHost.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString(), `
					"")
					
					Line 7 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Partial Start Menu layout", `
					$RDSHost.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString(), `
					$RDSHost.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent)
					
					Line 0 ""
				}

				Line 5 "Network performance: " $OPTNetworkPerformanceEnabled
				If($OPTNetworkPerformanceEnabled -eq "True")
				{
					Line 6 "Network Performance Optimizations"
					Line 0 ""
					Line 7 "Setting                      Enabled  Value"
					Line 7 "==========================================="
					#		123456789012345678901234567SS1234567SS12345
					#		FileNotFoundCacheEntriesMax  False    32768
					<#
						DirCacheMax             : 4096
						DormantFileLimit        : 256
						FileNotFoundCache       : 32768
						FileInfoCache           : 32768
						FileInfoCacheEnable     : True
						DirectoryCacheEnable    : True
						FileNotFoundCacheEnable : True
						DormantFileLimitEnable  : True
						DisableTCP              : True
						DisableIPv6CompEnable   : True
						DisableIPv6ToIPv4       : True
						DisableIsaTap           : True
					#>
					Line 7 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"FileInfoCacheEntriesMax", `
					$RDSHost.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString(), `
					$RDSHost.Optimization.NetworkPerformance.FileInfoCache)
					
					Line 7 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"DirectoryCacheEntriesMax", `
					$RDSHost.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString(), `
					$RDSHost.Optimization.NetworkPerformance.DirCacheMax)
					
					Line 7 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"FileNotFoundCacheEntriesMax", `
					$RDSHost.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString(), `
					$RDSHost.Optimization.NetworkPerformance.FileNotFoundCache)
					
					Line 7 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"DormantFileLimit", `
					$RDSHost.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString(), `
					$RDSHost.Optimization.NetworkPerformance.DormantFileLimit)
					
					Line 7 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"Disable TCP/IP Task Offload", `
					$RDSHost.Optimization.NetworkPerformance.DisableTCP.ToString(), `
					"")
					
					Line 7 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"Disable IPv6 Components", `
					$RDSHost.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString(), `
					"")
					
					Line 7 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"Disable IPv6 to IPv4", `
					$RDSHost.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString(), `
					"")
					
					Line 7 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"Disables isatap for IPv6", `
					$RDSHost.Optimization.NetworkPerformance.DisableIsaTap.ToString(), `
					"")
					
					Line 0 ""
				}

				Line 5 "Registry: " $OPTRegistryEnabled
				If($OPTRegistryEnabled -eq "True")
				{
					Line 6 "Registry Optimizations"
					Line 0 ""
					#		123456789012345678901234567SS1234567SS12345
					#		FileNotFoundCacheEntriesMax  False    32768
					<#
						Id           : 1
						Action       : Modify
						RegistryName : ServicesPipeTimeout
						DWORDValue   : 18000
						DisplayName  : Increase service startup timeouts
						HiveType     : HKEY_LOCAL_MACHINE
						Path         : System\CurrentControlSet\Control
						RegType      : REG_DWORD

						Id           : 2
						Action       : Modify
						RegistryName : TimeOutValue
						DWORDValue   : 200
						DisplayName  : Increase Disk I/O Timeout
						HiveType     : HKEY_LOCAL_MACHINE
						Path         : System\CurrentControlSet\Services\Disk
						RegType      : REG_DWORD
					#>
					Line 7 "Registry                                  Action  Value                 Type           Data                  Path                                                        "
					Line 7 "========================================================================================================================================================================="
					#		1234567890123456789012345678901234567890SS123456SS12345678901234567890SS1234567890123SS12345678901234567890SS123456789012345678901234567890123456789012345678901234567890
					#		Increase service startup timeouts         Modify  99999999999999999999  REG_EXPAND_SZ  99999999999999999999  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Disk
					ForEach($item in $RDSHost.Optimization.Registry.RegistryList)
					{
						If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
						{
							Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
							$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.StringValue, "$($item.HiveType)\$($item.Path)")
						}
						ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
						{
							Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
							$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.DWORDValue, "$($item.HiveType)\$($item.Path)")
						}
						ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
						{
							#If($item.StringValue.Count -eq 1)
							#{
							#	Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
							#	$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.StringValue.ToString(), "$($item.HiveType)\$($item.Path)")
							#}
							#Else
							#{
								$cnt = -1
								$TmpArray = $item.StringValue.Split("`r")
								ForEach($SubItem in $TmpArray)
								{
									$cnt++
									
									If($cnt -eq 0)
									{
										Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
										$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $SubItem, "$($item.HiveType)\$($item.Path)")
									}
									Else
									{
										Line 17 "       " $SubItem
									}
								}
							#}
						}
					}
					Line 0 ""
				}

				Line 5 "Visual Effects: " $OPTVisualEffectsEnabled
				If($OPTVisualEffectsEnabled -eq "True")
				{
					Line 6 "Visual Effects Optimizations"
					Line 0 ""
					
					Switch ($RDSHost.Optimization.VisualEffects.VisualEffectsTypes)
					{
						"LetWindowsChooseWhatsBest"	{$VisualEffectsType = "Let Windows choose what's best"; Break}
						"AdjustForBestAppearnce"	{$VisualEffectsType = "Adjust for best appearance"; Break} #misspelled in the PoSH output and the docs
						"AdjustForBestPerformance"	{$VisualEffectsType = "Adjust for best performance"; Break}
						"Custom"					{$VisualEffectsType = "Custom"; Break}
						Default						{$VisualEffectsType = "Unable to determine Visual Effects Optimization type: $($RDSHost.Optimization.VisualEffects.VisualEffectsTypes)"; Break}
					}
					Line 7 $VisualEffectsType
					Line 0 ""
					Line 7 "Setting                                             Enabled"
					Line 7 "==========================================================="
					#		12345678901234567890123456789012345678901234567890SS1234567
					#		Use drop shadows for icon labels on the desktop     False  
					<#
						VisualEffectsTypes                     : Custom
						AnimateControlSelectElements           : False
						AnimateWindowsWhenMinimizingMaximizing : False
						AnimateTaskbar                         : False
						EnablePeek                             : False
						FadeSlideMenus                         : False
						FadeSlideToolTips                      : False
						FadeOutMenuItems                       : False
						SaveTaskbarThumbnail                   : False
						ShowShadowUnderMouse                   : False
						ShadowUnderWindows                     : False
						ThumbnailsInsteadOfIcons               : False
						ShowTranslucentSelection               : False
						ShowWindowsContentWhilstDragging       : False
						SlideOpenComboBoxes                    : False
						SmoothEdgesScreenFonts                 : True
						SmoothScrollListBoxes                  : False
						DropShadowsIcon                        : False
					#>
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Animate controls and elements inside windows", `
					$RDSHost.Optimization.VisualEffects.AnimateControlSelectElements.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Animate windows when minimizing and maximizing", `
					$RDSHost.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Animations in the taskbar", `
					$RDSHost.Optimization.VisualEffects.AnimateTaskbar.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Enable Peek", `
					$RDSHost.Optimization.VisualEffects.EnablePeek.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Fade or slide menus into view", `
					$RDSHost.Optimization.VisualEffects.FadeSlideMenus.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Fade or slide Tooltips into view", `
					$RDSHost.Optimization.VisualEffects.FadeSlideToolTips.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Fade out menu items after clicking", `
					$RDSHost.Optimization.VisualEffects.FadeOutMenuItems.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Save taskbar thumbnail previews", `
					$RDSHost.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Show shadows under mouse pointer", `
					$RDSHost.Optimization.VisualEffects.ShowShadowUnderMouse.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Show shadows under windows", `
					$RDSHost.Optimization.VisualEffects.ShadowUnderWindows.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Show thumbnails instead of icons", `
					$RDSHost.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Show translucent selection rectangle", `
					$RDSHost.Optimization.VisualEffects.ShowTranslucentSelection.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Show window contents while dragging", `
					$RDSHost.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Slide open combo boxes", `
					$RDSHost.Optimization.VisualEffects.SlideOpenComboBoxes.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Smooth edges of screen fonts", `
					$RDSHost.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Smooth-scroll list boxes", `
					$RDSHost.Optimization.VisualEffects.SmoothScrollListBoxes.ToString())
					
					Line 7 ( "{0,-50}  {1,-7}" -f `
					"Use drop shadows for icon labels on the desktop", `
					$RDSHost.Optimization.VisualEffects.DropShadowsIcon.ToString())
					
					Line 0 ""
				}

				Line 5 "Disk cleanup: " $OPTDiskCleanupEnabled
				If($OPTDiskCleanupEnabled -eq "True")
				{
					Line 6 "Disk Cleanup Optimizations"
					Line 0 ""
					
					Line 7 "Setting                            Enabled"
					Line 7 "=========================================="
					#		123456789012345678901234567890123SS1234567
					#		Clean up temporary files and logs  False  
					<#
						CleanupWinSxSFolder      : False
						CleanupSystemFiles       : False
						CleanupTemporaryFileLogs : True
						RemoveOneDrive           : False
						DeleteUserProfiles       : False
					#>
					Line 7 ( "{0,-33}  {1,-7}" -f `
					"Clean up redundant system files", `
					$RDSHost.Optimization.DiskCleanup.CleanupSystemFiles.ToString())
					
					Line 7 ( "{0,-33}  {1,-7}" -f `
					"Clean up the WinSxS Folder", `
					$RDSHost.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString())
					
					Line 7 ( "{0,-33}  {1,-7}" -f `
					"Clean up temporary files and logs", `
					$RDSHost.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString())
					
					Line 7 ( "{0,-33}  {1,-7}" -f `
					"Remove OneDrive", `
					$RDSHost.Optimization.DiskCleanup.RemoveOneDrive.ToString())
					
					Line 7 ( "{0,-33}  {1,-7}" -f `
					"Delete users' profiles", `
					$RDSHost.Optimization.DiskCleanup.DeleteUserProfiles.ToString())
					
					Line 0 ""
				}

				Line 5 "Custom script: " $OPTCustomScriptEnabled
				If($OPTCustomScriptEnabled  -eq "True")
				{
					Line 6 "Custom Script"
					Line 0 ""
					
					<#
						Arguments : CustomScriptArguments
						Command   : CustomScriptCommand
						InitDir   : CustomScriptInitialDirectory
						User      : CustomScriptUsername
					#>
					Line 7 "Command`t`t : " $RDSHost.Optimization.CustomScript.Command
					Line 7 "Arguments`t : " $RDSHost.Optimization.CustomScript.Arguments
					Line 7 "Initial directory: " $RDSHost.Optimization.CustomScript.InitDir
					Line 7 "Username`t : " $RDSHost.Optimization.CustomScript.User
					Line 0 ""
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings:",($Script:htmlsb),$RDSHost.InheritDefaultOptimizationSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Enable optimization",($Script:htmlsb), $OPTEnableOptimization,$htmlwhite))
				$rowdata += @(,("Optimization type",($Script:htmlsb), $OPTOptimizationType,$htmlwhite))

				$msg = "Optimization"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 4 0 "Windows Defender ATP: " $OPTWindowsDefenderATPEnabled
				If($OPTWindowsDefenderATPEnabled -eq "True")
				{
					$rowdata = @()
					$columnHeaders = @("Windows Defender ATP Optimizations",($Script:htmlsb),"",$htmlwhite)

					If($RDSHost.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
					{
						$rowdata += @(,("     Turn off Windows Defender ATP (I use my own ATP solution)",($Script:htmlsb), "",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("     Turn on Windows Defender ATP and set process and folder exclusions",($Script:htmlsb), "",$htmlwhite))
						$rowdata += @(,("     Disable real-time protection",($Script:htmlsb), $RDSHost.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString(),$htmlwhite))
						$rowdata += @(,("",($Script:htmlsb), "",$htmlwhite))
						
						$cnt = -1
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeFolders)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude files and folders",($Script:htmlsb), $item,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
							}
						}

						$cnt = -1
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeProcesses)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude processes",($Script:htmlsb), $item,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
							}
						}
						
						$cnt = -1
						ForEach($item in $RDSHost.Optimization.WindowsDefenderATP.ExcludeExtension)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude extensions",($Script:htmlsb), $item,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
							}
						}
					}


					$msg = ""
					$columnWidths = @("300","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Windows Components: " $OPTWindowsComponentsEnabled
				If($OPTWindowsComponentsEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Windows Components Optimizations"

					$rowdata = @()

					ForEach($item in $RDSHost.Optimization.WindowsComponents.WindowsComponentsList)
					{
						$rowdata += @(,(
							$item.DisplayName,$htmlwhite,
							$item.ComponentName,$htmlwhite)
						)
					}

					$columnHeaders = @(
						"Display Name",($Script:htmlsb),
						"Component",($Script:htmlsb)
					)

					$msg = "Disable (remove) components:"
					$columnWidths = @("200","200")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Windows Services: " $OPTWindowsServicesEnabled       
				If($OPTWindowsServicesEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Windows Services Optimizations"

					$rowdata = @()

					ForEach($item in $RDSHost.Optimization.WindowsServices.WindowsServicesList)
					{
						$rowdata += @(,(
							$item.DisplayName,$htmlwhite,
							$item.ServiceName,$htmlwhite,
							$item.Aliases,$htmlwhite)
						)
					}

					$columnHeaders = @(
						"Display Name",($Script:htmlsb),
						"Service",($Script:htmlsb),
						"Aliases",($Script:htmlsb)
					)

					$msg = "Disable services:"
					$columnWidths = @("200","100","50")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled
				If($OPTWinodwsScheduledTasksEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Windows Scheduled Tasks Optimizations"

					$rowdata = @()

					ForEach($item in $RDSHost.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
					{
						$rowdata += @(,(
							$item.Task,$htmlwhite,
							$item.Type.Tostring(),$htmlwhite,
							$item.Location,$htmlwhite)
						)
					}

					$columnHeaders = @(
						"Task",($Script:htmlsb),
						"Type",($Script:htmlsb),
						"Location",($Script:htmlsb)
					)

					$msg = "Disable tasks:"
					$columnWidths = @("200","50","250")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
				If($OPTWindowsAdvancedOptionsEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Windows Advanced Options"

					$rowdata = @()

					$rowdata += @(,(
						"Disable Hibernate",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.Hibernate.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable Telemetry collection",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.TeleCollection.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable System Restore",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.SystemRestore.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable error reporting to send additional data",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable Tiles",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.Tiles.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable Cortana digital assistant",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.Cortana.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Turn off Microsoft consumer experience",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Do not show Windows tips",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.WindowsTips.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Remove Common program groups from the Start Menu",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Partial Start Menu layout",$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString(),$htmlwhite,
						$RDSHost.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent,$htmlwhite)
					)

					$columnHeaders = @(
						"Setting",($Script:htmlsb),
						"Enabled",($Script:htmlsb),
						"Value",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("300","50","200")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Network performance: " $OPTNetworkPerformanceEnabled
				If($OPTWindowsAdvancedOptionsEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Network Performance Optimizations"

					$rowdata = @()

					$rowdata += @(,(
						"FileInfoCacheEntriesMax",$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString(),$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.FileInfoCache,$htmlwhite)
					)

					$rowdata += @(,(
						"DirectoryCacheEntriesMax",$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString(),$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.DirCacheMax,$htmlwhite)
					)

					$rowdata += @(,(
						"FileNotFoundCacheEntriesMax",$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString(),$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.FileNotFoundCache,$htmlwhite)
					)

					$rowdata += @(,(
						"DormantFileLimit",$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString(),$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.DormantFileLimit,$htmlwhite)
					)

					$rowdata += @(,(
						"Disable TCP/IP Task Offload",$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.DisableTCP.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable IPv6 Components",$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable IPv6 to IPv4",$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disables isatap for IPv6",$htmlwhite,
						$RDSHost.Optimization.NetworkPerformance.DisableIsaTap.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$columnHeaders = @(
						"Setting",($Script:htmlsb),
						"Enabled",($Script:htmlsb),
						"Value",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("170","50","50")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Registry: " $OPTRegistryEnabled       
				If($OPTRegistryEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Registry Optimizations"

					$rowdata = @()

					ForEach($item in $RDSHost.Optimization.Registry.RegistryList)
					{
						If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
						{
							$rowdata += @(,(
								$item.DisplayName,$htmlwhite,
								$item.Action,$htmlwhite,
								$item.RegistryName,$htmlwhite,
								$item.RegType.ToString(),$htmlwhite,
								$item.StringValue,$htmlwhite,
								"$($item.HiveType)\$($item.Path)",$htmlwhite)
							)
						}
						ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
						{
							$rowdata += @(,(
								$item.DisplayName,$htmlwhite,
								$item.Action,$htmlwhite,
								$item.RegistryName,$htmlwhite,
								$item.RegType.ToString(),$htmlwhite,
								$item.DWORDValue,$htmlwhite,
								"$($item.HiveType)\$($item.Path)",$htmlwhite)
							)
						}
						ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
						{
							$rowdata += @(,(
								$item.DisplayName,$htmlwhite,
								$item.Action,$htmlwhite,
								$item.RegistryName,$htmlwhite,
								$item.RegType.ToString(),$htmlwhite,
								$item.StringValue.ToString(),$htmlwhite,
								"$($item.HiveType)\$($item.Path)",$htmlwhite)
							)
						}
					}

					$columnHeaders = @(
						"Registry",($Script:htmlsb),
						"Action",($Script:htmlsb),
						"Value",($Script:htmlsb),
						"Type",($Script:htmlsb),
						"Data",($Script:htmlsb),
						"Path",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("200","50","100","100","100","200")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Visual Effects: " $OPTVisualEffectsEnabled
				If($OPTVisualEffectsEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Visual Effects Optimizations"

					$rowdata = @()

					$rowdata += @(,(
						"Animate controls and elements inside windows",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.AnimateControlSelectElements.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Animate windows when minimizing and maximizing",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Animations in the taskbar",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.AnimateTaskbar.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Enable Peek",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.EnablePeek.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Fade or slide menus into view",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.FadeSlideMenus.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Fade or slide Tooltips into view",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.FadeSlideToolTips.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Fade out menu items after clicking",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.FadeOutMenuItems.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Save taskbar thumbnail previews",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show shadows under mouse pointer",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.ShowShadowUnderMouse.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show shadows under windows",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.ShadowUnderWindows.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show thumbnails instead of icons",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show translucent selection rectangle",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.ShowTranslucentSelection.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show window contents while dragging",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Slide open combo boxes",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.SlideOpenComboBoxes.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Smooth edges of screen fonts",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Smooth-scroll list boxes",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.SmoothScrollListBoxes.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Use drop shadows for icon labels on the desktop",$htmlwhite,
						$RDSHost.Optimization.VisualEffects.DropShadowsIcon.ToString(),$htmlwhite)
					)

					$columnHeaders = @(
						"Setting",($Script:htmlsb),
						"Enabled",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("275","50")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Disk cleanup: " $OPTDiskCleanupEnabled
				If($OPTDiskCleanupEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Disk Cleanup Optimizations"

					$rowdata = @()

					$rowdata += @(,(
						"Clean up redundant system files",$htmlwhite,
						$RDSHost.Optimization.DiskCleanup.CleanupSystemFiles.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Clean up the WinSxS Folder",$htmlwhite,
						$RDSHost.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Clean up temporary files and logs",$htmlwhite,
						$RDSHost.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Remove OneDrive",$htmlwhite,
						$RDSHost.Optimization.DiskCleanup.RemoveOneDrive.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Delete users' profiles",$htmlwhite,
						$RDSHost.Optimization.DiskCleanup.DeleteUserProfiles.ToString(),$htmlwhite)
					)

					$columnHeaders = @(
						"Setting",($Script:htmlsb),
						"Enabled",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("200","50")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Custom script: " $OPTCustomScriptEnabled
				If($OPTCustomScriptEnabled -eq "True")
				{
					$rowdata = @()
					$columnHeaders = @("Custom Script",($Script:htmlsb),"",$htmlwhite)
					$rowdata += @(,("     Command",($Script:htmlsb), $RDSHost.Optimization.CustomScript.Command,$htmlwhite))
					$rowdata += @(,("     Arguments",($Script:htmlsb), $RDSHost.Optimization.CustomScript.Arguments,$htmlwhite))
					$rowdata += @(,("     Initial directory",($Script:htmlsb), $RDSHost.Optimization.CustomScript.InitDir,$htmlwhite))
					$rowdata += @(,("     Username",($Script:htmlsb), $RDSHost.Optimization.CustomScript.User,$htmlwhite))

					$msg = ""
					$columnWidths = @("125","200")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}

			#Desktop Access
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Desktop access"
			}
			If($Text)
			{
				Line 3 "Desktop access"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($RDSHost.InheritDefaultDesktopAccessSettings)
			{
				#do we inherit group or site defaults?
				#is this RDS host in a group?
				#http://woshub.com/hot-to-convert-sid-to-username-and-vice-versa/
				#for translating the User SID to the AD user name
				$Results = Get-RASRDSGroup -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $Results)
				{
					If($Results.RDSIds -Contains $RDSHost.Id )
					{
						#does this group inherit default settings?
						If($Results.InheritDefaultDesktopAccessSettings -eq $False)
						{
							#no we don't, so get the default settings for the group
							$GroupDefaults = $Results.RDSDefSettings

							$RDSRestrictDesktopAccess = $GroupDefaults.RestrictDesktopAccess.ToString()
							$RDSRestrictedUsers       = @()
							
							ForEach($User in $GroupDefaults.RestrictedUsers)
							{
								$objSID  = New-Object System.Security.Principal.SecurityIdentifier ($User)
								$objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
								
								$RDSRestrictedUsers += $objUser.Value
							}
						}
						Else
						{
							#yes we do, get the default settings for the Site
							#use the Site default settings
							$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
							
							If($? -and $Null -ne $RDSDefaults)
							{
								$RDSRestrictDesktopAccess = $RDSDefaults.RestrictDesktopAccess.ToString()
								$RDSRestrictedUsers       = @()
								
								ForEach($User in $RDSDefaults.RestrictedUsers)
								{
									$objSID  = New-Object System.Security.Principal.SecurityIdentifier ($User)
									$objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
									
									$RDSRestrictedUsers += $objUser.Value
								}
							}
							Else
							{
								#unable to retrieve default, use built-in default values
								$RDSRestrictDesktopAccess = "False"
								$RDSRestrictedUsers       = @()
							}
						}
					}
				}
				Else
				{
					#RDS Host is not in a group
					#get the settings for the host
					$RDSRestrictDesktopAccess = $RDSHost.RestrictDesktopAccess.ToString()
					$RDSRestrictedUsers       = @()
					
					ForEach($User in $RDSHost.RestrictedUsers)
					{
						$objSID  = New-Object System.Security.Principal.SecurityIdentifier ($User)
						$objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
						
						$RDSRestrictedUsers += $objUser.Value
					}
				}
			}
			Else
			{
				#we don't inherit
				#get the settings for the host
				$RDSRestrictDesktopAccess = $RDSHost.RestrictDesktopAccess.ToString()
				$RDSRestrictedUsers       = @()
				
				ForEach($User in $RDSHost.RestrictedUsers)
				{
					$objSID  = New-Object System.Security.Principal.SecurityIdentifier ($User)
					$objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
					
					$RDSRestrictedUsers += $objUser.Value
				}
			}
				
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSHost.InheritDefaultDesktopAccessSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Restrict direct desktop access to the following users"; Value = $RDSRestrictDesktopAccess; }) > $Null
				
				$cnt = -1
				ForEach($Item in $RDSRestrictedUsers)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Users"; Value = $Item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 4 "Inherit default settings`t`t`t`t: " $RDSHost.InheritDefaultDesktopAccessSettings.ToString()
				Line 4 "Restrict direct desktop access to the following users`t: " $RDSRestrictDesktopAccess
				$cnt = -1
				ForEach($Item in $RDSRestrictedUsers)
				{
					$cnt++
					If($cnt -eq 0)
					{
						Line 10 "Users`t: " $Item
					}
					Else
					{
						Line 11 "  " $Item
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$RDSHost.InheritDefaultDesktopAccessSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Restrict direct desktop access to the following users",($Script:htmlsb),$RDSRestrictDesktopAccess,$htmlwhite))
				
				$cnt = -1
				ForEach($Item in $RDSRestrictedUsers)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$rowdata += @(,("Users",($Script:htmlsb),$Item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}

				$msg = "Desktop access"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#RDP Printer
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "RDP printer"
			}
			If($Text)
			{
				Line 3 "RDP printer"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($RDSHost.InheritDefaultPrinterSettings)
			{
				#do we inherit group or site defaults?
				#is this RDS host in a group?
				$Results = Get-RASRDSGroup -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $Results)
				{
					If($Results.RDSIds -Contains $RDSHost.Id )
					{
						#does this group inherit default settings?
						If($Results.InheritDefaultPrinterSettings -eq $False)
						{
							#no we don't, so get the default settings for the group
							$RDSDefaults = $Results.RDSDefSettings

							Switch ($RDSDefaults.PrinterNameFormat)
							{
								"PrnFormat_PRN_CMP_SES"	{$RDSPrinterNameFormat = "Printername (from Computername) in Session no."; Break}
								"PrnFormat_SES_CMP_PRN"	{$RDSPrinterNameFormat = "Session no. (Computername from) Printername"; Break}
								"PrnFormat_PRN_REDSES"	{$RDSPrinterNameFormat = "Printername (redirected Session no.)"; Break}
								Default					{$RDSPrinterNameFormat = "Unable to determine RDP Printer Name Format: $($RDSDefaults.PrinterNameFormat)"; Break}
							}
							
							$RDSRemoveSessionNumberFromPrinter = $GroupDefaults.RemoveSessionNumberFromPrinterName.ToString()
							$RDSRemoveClientNameFromPrinter          = $GroupDefaults.RemoveClientNameFromPrinterName.ToString()
						}
						Else
						{
							#yes we do, get the default settings for the Site
							#use the Site default settings
							$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
							
							If($? -and $Null -ne $RDSDefaults)
							{
								Switch ($RDSDefaults.PrinterNameFormat)
								{
									"PrnFormat_PRN_CMP_SES"	{$RDSPrinterNameFormat = "Printername (from Computername) in Session no."; Break}
									"PrnFormat_SES_CMP_PRN"	{$RDSPrinterNameFormat = "Session no. (Computername from) Printername"; Break}
									"PrnFormat_PRN_REDSES"	{$RDSPrinterNameFormat = "Printername (redirected Session no.)"; Break}
									Default					{$RDSPrinterNameFormat = "Unable to determine RDP Printer Name Format: $($RDSDefaults.PrinterNameFormat)"; Break}
								}
								
								$RDSRemoveSessionNumberFromPrinter = $RDSDefaults.RemoveSessionNumberFromPrinterName.ToString()
								$RDSRemoveClientNameFromPrinter          = $RDSDefaults.RemoveClientNameFromPrinterName.ToString()
							}
							Else
							{
								#unable to retrieve default, use built-in default values
								$RDSPrinterNameFormat              = "Printername (from Computername) in Session no."
								$RDSRemoveSessionNumberFromPrinter = "False"
								$RDSRemoveClientNameFromPrinter          = "False"
							}
						}
					}
				}
				Else
				{
					#RDS Host is not in a group
					#get the settings for the host
					Switch ($RDSHost.PrinterNameFormat)
					{
						"PrnFormat_PRN_CMP_SES"	{$RDSPrinterNameFormat = "Printername (from Computername) in Session no."; Break}
						"PrnFormat_SES_CMP_PRN"	{$RDSPrinterNameFormat = "Session no. (Computername from) Printername"; Break}
						"PrnFormat_PRN_REDSES"	{$RDSPrinterNameFormat = "Printername (redirected Session no.)"; Break}
						Default					{$RDSPrinterNameFormat = "Unable to determine RDP Printer Name Format: $($RDSHost.PrinterNameFormat)"; Break}
					}
					
					$RDSRemoveSessionNumberFromPrinter = $RDSHost.RemoveSessionNumberFromPrinterName.ToString()
					$RDSRemoveClientNameFromPrinter          = $RDSHost.RemoveClientNameFromPrinterName.ToString()
				}
			}
			Else
			{
				#we don't inherit
				#get the settings for the host
				Switch ($RDSHost.PrinterNameFormat)
				{
					"PrnFormat_PRN_CMP_SES"	{$RDSPrinterNameFormat = "Printername (from Computername) in Session no."; Break}
					"PrnFormat_SES_CMP_PRN"	{$RDSPrinterNameFormat = "Session no. (Computername from) Printername"; Break}
					"PrnFormat_PRN_REDSES"	{$RDSPrinterNameFormat = "Printername (redirected Session no.)"; Break}
					Default					{$RDSPrinterNameFormat = "Unable to determine RDP Printer Name Format: $($RDSHost.PrinterNameFormat)"; Break}
				}
				
				$RDSRemoveSessionNumberFromPrinter = $RDSHost.RemoveSessionNumberFromPrinterName.ToString()
				$RDSRemoveClientNameFromPrinter    = $RDSHost.RemoveClientNameFromPrinterName.ToString()
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSHost.InheritDefaultPrinterSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "RDP Printer Name Format"; Value = $RDSPrinterNameFormat; }) > $Null
				$ScriptInformation.Add(@{Data = "Remove session number from printer name"; Value = $RDSRemoveSessionNumberFromPrinter; }) > $Null
				If($RDSHost.RemoveSessionNumberFromPrinterName)
				{
					$ScriptInformation.Add(@{Data = "Remove client name from printer name"; Value = $RDSRemoveClientNameFromPrinter; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 4 "Inherit default settings`t`t`t`t: " $RDSHost.InheritDefaultPrinterSettings.ToString()
				Line 4 "RDP Printer Name Format`t`t`t`t`t: " $RDSPrinterNameFormat
				Line 4 "Remove session number from printer name`t`t`t: " $RDSRemoveSessionNumberFromPrinter
				If($RDSHost.RemoveSessionNumberFromPrinterName)
				{
					Line 4 "Remove client name from printer name`t`t`t: " $RDSRemoveClientNameFromPrinter
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$RDSHost.InheritDefaultPrinterSettings.ToString(),$htmlwhite)
				$rowdata += @(,("RDP Printer Name Format",($Script:htmlsb),$RDSPrinterNameFormat,$htmlwhite))
				$rowdata += @(,("Remove session number from printer name",($Script:htmlsb),$RDSRemoveSessionNumberFromPrinter,$htmlwhite))
				If($RDSHost.RemoveSessionNumberFromPrinterName)
				{
					$rowdata += @(,("Remove client name from printer name",($Script:htmlsb),$RDSRemoveClientNameFromPrinter,$htmlwhite))
				}

				$msg = "RDP printer"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}

	Write-Verbose "$(Get-Date -Format G): `tOutput RD Session Hosts Groups"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Groups"
	}
	If($Text)
	{
		Line 1 "Groups"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Groups"
	}

	$RDSGroups = Get-RASRDSGroup -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve RD Session Host Groups for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve RD Session Host Groups for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve RD Session Host Groups for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve RD Session Host Groups for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $RDSGroups)
	{
		Write-Host "
	No RD Session Host Groups retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No RD Session Host Groups retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No RD Session Host Groups retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No RD Session Host Groups retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($RDSGroup in $RDSGroups)
		{
			#Get the agent state for the group
			$RDSGroupStatus = Get-RASRDSGroupStatus -Name $RDSGroup.Name -EA 0 4>$Null
			
			If(!$? -or $Null -eq $RDSGroupStatus)
			{
				$RDSGroupAgentState = "Unknown"
			}
			Else
			{
				$RDSGroupAgentState = GetRASStatus $RDSGroupStatus.AgentState
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Group $($RDSGroup.Name)"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $RDSGroup.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Members"; Value = $RDSGroup.RDSIds.Count.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $RDSGroup.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Status"; Value = $RDSGroupAgentState; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $RDSGroup.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $RDSGroup.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $RDSGroup.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $RDSGroup.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "ID"; Value = $RDSGroup.Id.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "Name`t`t`t: " $RDSGroup.Name
				Line 2 "Members`t`t`t: " $RDSGroup.RDSIds.Count.ToString()
				Line 2 "Description`t`t: " $RDSGroup.Description
				Line 2 "Status`t`t`t: " $RDSGroupAgentState
				Line 2 "Last modification by`t: " $RDSGroup.AdminLastMod
				Line 2 "Modified on`t`t: " $RDSGroup.TimeLastMod.ToString()
				Line 2 "Created by`t`t: " $RDSGroup.AdminCreate
				Line 2 "Created on`t`t: " $RDSGroup.TimeCreate.ToString()
				Line 2 "ID`t`t`t: " $RDSGroup.Id.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Group $($RDSGroup.Name)"
				$rowdata = @()
				$columnHeaders = @("Server",($Script:htmlsb),$RDSGroup.Name,$htmlwhite)
				$rowdata += @(,("Members",($Script:htmlsb),$RDSGroup.RDSIds.Count.ToString(),$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$RDSGroup.Description,$htmlwhite))
				$rowdata += @(,("Status",($Script:htmlsb),$RDSGroupAgentState,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $RDSGroup.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $RDSGroup.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $RDSGroup.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $RDSGroup.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("ID",($Script:htmlsb),$RDSGroup.Id.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#General
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 2 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			#get any group members
			$RDSGroupMembers = @(Get-RASRDSGroupMember -GroupId $RDSGroup.Id -EA 0 4>$Null)
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable Group in site"; Value = $RDSGroup.Enabled.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Name"; Value = $RDSGroup.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $RDSGroup.Description; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Enable Group in site`t: " $RDSGroup.Enabled.ToString()
				Line 3 "Name`t`t`t: " $RDSGroup.Name
				Line 3 "Description`t`t: " $RDSGroup.Description
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable Group in site",($Script:htmlsb),$RDSGroup.Enabled.ToString(),$htmlwhite)
				$rowdata += @(,("Name",($Script:htmlsb),$RDSGroup.Name,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$RDSGroup.Description,$htmlwhite))

				$msg = "General"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Servers
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Servers"
			}
			If($Text)
			{
				Line 2 "Servers"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				If($RDSGroupMembers.Count -gt 0)
				{
					$cnt=-1
					ForEach($RDSGroupMember in $RDSGroupMembers)
					{
						If($RDSGroupMember.Enabled)
						{
							$RDSGroupMemberLogonStatus = "Enabled"
						}
						Else
						{
							$RDSGroupMemberLogonStatus = "Disabled"
						}
						
						$Status = Get-RASRDSStatus -Server $RDSGroupMember.Server  -EA 0 4>$Null
						
						If($? -and $Null -ne $Status)
						{
							$AgentStatus = GetRASStatus $Status.AgentState
							$cnt++
							$ScriptInformation.Add(@{Data = "Server"; Value = $RDSGroupMember.Server; }) > $Null
							$ScriptInformation.Add(@{Data = "Status"; Value = $AgentStatus; }) > $Null
							$ScriptInformation.Add(@{Data = "Logon status"; Value = $RDSGroupMemberLogonStatus; }) > $Null
							$ScriptInformation.Add(@{Data = "Description"; Value = $RDSGroupMember.Description; }) > $Null
							$ScriptInformation.Add(@{Data = "Sessions"; Value = $Status.ActiveSessions.ToString(); }) > $Null
							If($RDSGroupMembers.Count -gt 1)
							{
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
						}
						Else
						{
							$ScriptInformation.Add(@{Data = "Server"; Value = "Error retrieving server $($RDSGroupMember.Server) status"; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Group Members"; Value = "No Group Members Found"; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				If($RDSGroupMembers.Count -gt 0)
				{
					$cnt=-1
					ForEach($RDSGroupMember in $RDSGroupMembers)
					{
						If($RDSGroupMember.Enabled)
						{
							$RDSGroupMemberLogonStatus = "Enabled"
						}
						Else
						{
							$RDSGroupMemberLogonStatus = "Disabled"
						}
							
						$Status = Get-RASRDSStatus -Server $RDSGroupMember.Server  -EA 0 4>$Null
							
						If($? -and $Null -ne $Status)
						{
							$AgentStatus = GetRASStatus $Status.AgentState
							$cnt++
							Line 3 "Server`t`t: " $RDSGroupMember.Server
							Line 3 "Status`t`t: " $AgentStatus
							Line 3 "Logon status`t: " $RDSGroupMemberLogonStatus
							Line 3 "Description`t: " $RDSGroupMember.Description
							Line 3 "Sessions`t: " $Status.ActiveSessions.ToString()
							If($RDSGroupMembers.Count -gt 1)
							{
								Line 3 ""
							}
						}
						Else
						{
							Line 3 "Server`t`t: " "Error retrieving server $($RDSGroupMember.Server) status"
						}
					}
				}
				Else
				{
					Line 3 "Group Members`t`t: " "No Group Members Found"
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				If($RDSGroupMembers.Count -gt 0)
				{
					$cnt=-1
					ForEach($RDSGroupMember in $RDSGroupMembers)
					{
						If($RDSGroupMember.Enabled)
						{
							$RDSGroupMemberLogonStatus = "Enabled"
						}
						Else
						{
							$RDSGroupMemberLogonStatus = "Disabled"
						}
							
						$Status = Get-RASRDSStatus -Server $RDSGroupMember.Server  -EA 0 4>$Null
						
						If($? -and $Null -ne $Status)
						{
							$AgentStatus = GetRASStatus $Status.AgentState
							$cnt++
							If($cnt -eq 0)
							{
								$columnHeaders = @("Member",($Script:htmlsb),$RDSGroupMember.Server,$htmlwhite)
							}
							Else
							{
								$rowdata += @(,("Member",($Script:htmlsb),$RDSGroupMember.Server,$htmlwhite))
							}
							$rowdata += @(,("Status",($Script:htmlsb),$AgentStatus,$htmlwhite))
							$rowdata += @(,("Logon status",($Script:htmlsb),$RDSGroupMemberLogonStatus,$htmlwhite))
							$rowdata += @(,("Description",($Script:htmlsb),$RDSGroupMember.Description,$htmlwhite))
							$rowdata += @(,("Sessions",($Script:htmlsb),$Status.ActiveSessions.ToString(),$htmlwhite))
							If($RDSGroupMembers.Count -gt 1)
							{
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
						}
						Else
						{
							$rowdata += @(,("Server",($Script:htmlsb),"Error retrieving server $($RDSGroupMember.Server) status",$htmlwhite))
						}
					}
				}
				Else
				{
					$rowdata += @(,("Group Members",($Script:htmlsb),"No Group Members Found",$htmlwhite))
				}

				$msg = "Servers"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Agent Settings
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Agent settings"
			}
			If($Text)
			{
				Line 2 "Agent settings"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($RDSGroup.InheritDefaultAgentSettings)
			{
				#do we inherit site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings

				$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $RDSDefaults)
				{
					$RDSPort        = $RDSDefaults.Port.ToString()
					$RDSMaxSessions = $RDSDefaults.MaxSessions.ToString()
					
					Switch ($RDSDefaults.SessionTimeout)
					{
						0		{$RDSPublishingSessionDisconnectTimeout = "Never"; Break}
						25		{$RDSPublishingSessionDisconnectTimeout = "25 seconds"; Break}
						60		{$RDSPublishingSessionDisconnectTimeout = "1 minute"; Break}
						300		{$RDSPublishingSessionDisconnectTimeout = "5 minutes"; Break}
						3600	{$RDSPublishingSessionDisconnectTimeout = "1 hour"; Break}
						Default	{$RDSPublishingSessionDisconnectTimeout = "Unable to determine Publishing Session Disconnect Timeout: $($RDSDefaults.SessionTimeout)"; Break}
					}
					
					Switch ($RDSDefaults.SessionLogoffTimeout)
					{
						0		{$RDSPublishingSessionResetTime = "Never"; Break}
						1		{$RDSPublishingSessionResetTime = "Immediate"; Break}
						25		{$RDSPublishingSessionResetTime = "25 seconds"; Break}
						60		{$RDSPublishingSessionResetTime = "1 minute"; Break}
						300		{$RDSPublishingSessionResetTime = "5 minutes"; Break}
						3600	{$RDSPublishingSessionResetTime = "1 hour"; Break}
						Default	{$RDSPublishingSessionResetTime = "Unable to determine Publishing Session Reset Timeout: $($RDSDefaults.SessionLogoffTimeout)"; Break}
					}
					
					Switch($RDSDefaults.AllowURLAndMailRedirection)
					{
						"Enabled"						{$RDSAllowClientURLMailRedirection = "Enabled"; 
														 $ReplaceRegisteredApplication = "False";
														 Break}
						"Disabled"						{$RDSAllowClientURLMailRedirection = "Disabled"; 
														 $ReplaceRegisteredApplication = "False";
														 Break}
						"EnabledWithAppRegistration"	{$RDSAllowClientURLMailRedirection = "Enabled";
														 $ReplaceRegisteredApplication = "True";
														 Break}
						Default 						{$RDSAllowClientURLMailRedirection = "Unable to determine Allow CLient URL/Mail Redirection: $($RDSDefaults.AllowURLAndMailRedirection)"; 
														 $ReplaceRegisteredApplication = "False";
														 Break}
					}
					
					$RDSSupportShellURLNamespaceObject = $RDSDefaults.SupportShellURLNamespaceObjects.ToString()
					
					Switch ($RDSDefaults.DragAndDropMode)
					{
						"Bidirectional"		{$RDSDragAndDrop = "Bidirectional"; 
						$RDSAllowDragAndDrop = "True";
						Break}
						"Disabled"			{$RDSDragAndDrop = "Disabled"; 
						$RDSAllowDragAndDrop = "False";
						Break}
						"ClientToServer"	{$RDSDragAndDrop = "Client to server only"; 
						$RDSAllowDragAndDrop = "True";
						Break}
						"ServerToClient"	{$RDSDragAndDrop = "Server to client only"; 
						$RDSAllowDragAndDrop = "True";
						Break}
						Default				{$RDSDragAndDrop = "Unable to determine Drag and drop: $($RDSDefaults.DragAndDropMode)"; 
						$RDSAllowDragAndDrop = "False";
						Break}
					}
					
					Switch ($RDSDefaults.FileTransferMode)
					{
						"Bidirectional"		{$RDSFileTransferMode = "Bidirectional"; Break}
						"Disabled"			{$RDSFileTransferMode = "Disabled"; Break}
						"ClientToServer"	{$RDSFileTransferMode = "Client to server only"; Break}
						"ServerToClient"	{$RDSFileTransferMode = "Server to client only"; Break}
						Default				{$RDSFileTransferMode = "Unable to determine File Transfer mode: $($RDSDefaults.FileTransferMode)"; Break}
					}
					If($RDSDefaults.FileTransferLocation -eq "")
					{
						$RDSFileTransferLocation = "Default download location"
					}
					Else
					{
						$RDSFileTransferLocation = $RDSDefaults.FileTransferLocation
					}
					$RDSFileTransferChangeLocation = $RDSDefaults.FileTransferLockLocation.ToString()

					If($RDSDefaults.PreferredBrokerId -eq 0)
					{
						$RDSPreferredPublishingAgent = "Automatically"
					}
					Else
					{
						$RDSPreferredPublishingAgent = (Get-RASBroker -Id $RDSDefaults.PreferredBrokerId -EA 0 4>$Null).Server
					}
					$RDSAllowRemoteExec     = $RDSDefaults.AllowRemoteExec.ToString()
					$RDSUseRemoteApps       = $RDSDefaults.UseRemoteApps.ToString()
					$RDSEnableAppMonitoring = $RDSDefaults.EnableAppMonitoring.ToString()
					$RDSAllowFileTransfer   = $RDSDefaults.AllowFileTransfer.ToString()
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$RDSPort                               = "3389"
					$RDSMaxSessions                        = "250"
					$RDSPublishingSessionDisconnectTimeout = "25 seconds"
					$RDSPublishingSessionResetTime         = "Immediate"
					$RDSAllowClientURLMailRedirection      = "Enabled"
					$ReplaceRegisteredApplication          = "False"
					$RDSSupportShellURLNamespaceObject     = "True"
					$RDSDragAndDrop                        = "Bidirectional"
					$RDSAllowDragAndDrop                   = "True"
					$RDSFileTransferMode                   = "Bidirectional"
					$RDSFileTransferLocation               = "Default download location"
					$RDSFileTransferChangeLocation         = "False"
					$RDSPreferredPublishingAgent           = "Automatically"
					$RDSAllowRemoteExec                    = "True"
					$RDSUseRemoteApps                      = "False"
					$RDSEnableAppMonitoring                = "True"
					$RDSAllowFileTransfer                  = "True"
				}
			}
			Else
			{
				#we don't inherit settings
				#get the settings configured for this RDS group
				$RDSGroupDefaults = $RDSGroup.RDSDefSettings
				$RDSPort          = $RDSGroupDefaults.Port.ToString()
				$RDSMaxSessions   = $RDSGroupDefaults.MaxSessions.ToString()
				
				Switch ($RDSGroupDefaults.SessionTimeout)
				{
					0		{$RDSPublishingSessionDisconnectTimeout = "Never"; Break}
					25		{$RDSPublishingSessionDisconnectTimeout = "25 seconds"; Break}
					60		{$RDSPublishingSessionDisconnectTimeout = "1 minute"; Break}
					300		{$RDSPublishingSessionDisconnectTimeout = "5 minutes"; Break}
					3600	{$RDSPublishingSessionDisconnectTimeout = "1 hour"; Break}
					Default	{$RDSPublishingSessionDisconnectTimeout = "Unable to determine Publishing Session Disconnect Timeout: $($RDSGroup.SessionTimeout)"; Break}
				}
				
				Switch ($RDSGroupDefaults.SessionLogoffTimeout)
				{
					0		{$RDSPublishingSessionResetTime = "Never"; Break}
					1		{$RDSPublishingSessionResetTime = "Immediate"; Break}
					25		{$RDSPublishingSessionResetTime = "25 seconds"; Break}
					60		{$RDSPublishingSessionResetTime = "1 minute"; Break}
					300		{$RDSPublishingSessionResetTime = "5 minutes"; Break}
					3600	{$RDSPublishingSessionResetTime = "1 hour"; Break}
					Default	{$RDSPublishingSessionResetTime = "Unable to determine Publishing Session Reset Timeout: $($RDSGroup.SessionLogoffTimeout)"; Break}
				}
				
				Switch($RDSGroupDefaults.AllowURLAndMailRedirection)
				{
					"Enabled"						{$RDSAllowClientURLMailRedirection = "Enabled"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
					"Disabled"						{$RDSAllowClientURLMailRedirection = "Disabled"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
					"EnabledWithAppRegistration"	{$RDSAllowClientURLMailRedirection = "Enabled";
													 $ReplaceRegisteredApplication = "True";
													 Break}
					Default 						{$RDSAllowClientURLMailRedirection = "Unable to determine Allow CLient URL/Mail Redirection: $($RDSGroupDefaults.AllowURLAndMailRedirection)"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
				}
				
				$RDSSupportShellURLNamespaceObject = $RDSGroupDefaults.SupportShellURLNamespaceObjects.ToString()
				
				Switch ($RDSGroupDefaults.DragAndDropMode)
				{
					"Bidirectional"		{$RDSDragAndDrop = "Bidirectional"; 
					$RDSAllowDragAndDrop = "True";
					Break}
					"Disabled"			{$RDSDragAndDrop = "Disabled"; 
					$RDSAllowDragAndDrop = "False";
					Break}
					"ClientToServer"	{$RDSDragAndDrop = "Client to server only"; 
					$RDSAllowDragAndDrop = "True";
					Break}
					"ServerToClient"	{$RDSDragAndDrop = "Server to client only"; 
					$RDSAllowDragAndDrop = "True";
					Break}
					Default				{$RDSDragAndDrop = "Unable to determine Drag and drop: $($RDSGroupDefaults.DragAndDropMode)"; 
					$RDSAllowDragAndDrop = "False";
					Break}
				}
				
				If($RDSGroupDefaults.PreferredBrokerId -eq 0)
				{
					$RDSPreferredPublishingAgent = "Automatically"
				}
				Else
				{
					$RDSPreferredPublishingAgent = (Get-RASBroker -Id $RDSGroupDefaults.PreferredBrokerId -EA 0 4>$Null).Server
				}
				$RDSAllowRemoteExec     = $RDSGroupDefaults.AllowRemoteExec.ToString()
				$RDSUseRemoteApps       = $RDSGroupDefaults.UseRemoteApps.ToString()
				$RDSEnableAppMonitoring = $RDSGroupDefaults.EnableAppMonitoring.ToString()
				$RDSAllowFileTransfer   = $RDSGroupDefaults.AllowFileTransfer.ToString()
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSGroup.InheritDefaultAgentSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Application session lingering"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Disconnect active session after"; Value = $RDSPublishingSessionDisconnectTimeout; }) > $Null
				$ScriptInformation.Add(@{Data = "     Logoff disconnected session after"; Value = $RDSPublishingSessionResetTime; }) > $Null
				$ScriptInformation.Add(@{Data = "Other settings"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Port"; Value = $RDSPort; }) > $Null
				$ScriptInformation.Add(@{Data = "     Max Sessions"; Value = $RDSMaxSessions; }) > $Null
				$ScriptInformation.Add(@{Data = "     Preferred Connection Broker"; Value = $RDSPreferredPublishingAgent; }) > $Null
				$ScriptInformation.Add(@{Data = "Allow Client URL/Mail Redirection"; Value = $RDSAllowClientURLMailRedirection; }) > $Null
				$ScriptInformation.Add(@{Data = "     Replace registered application"; Value = $ReplaceRegisteredApplication; }) > $Null
				$ScriptInformation.Add(@{Data = "     Support Windows Shell URL namespace objects"; Value = $RDSSupportShellURLNamespaceObject; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable Drag and drop"; Value = $RDSAllowDragandDrop; }) > $Null
				$ScriptInformation.Add(@{Data = "     Direction"; Value = $RDSDragAndDrop; }) > $Null
				$ScriptInformation.Add(@{Data = "Allow 2xRemoteExec to send command to the client"; Value = $RDSAllowRemoteExec; }) > $Null
				$ScriptInformation.Add(@{Data = "Use RemoteApp if available"; Value = $RDSUseRemoteApps; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable applications monitoring"; Value = $RDSEnableAppMonitoring; }) > $Null
				$ScriptInformation.Add(@{Data = "Allow file transfer command (Web (HTML5) and Chrome clients)"; Value = $RDSAllowFileTransfer; }) > $Null
				$ScriptInformation.Add(@{Data = "     Configure File Transfer"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "          Direction"; Value = $RDSFileTransferMode; }) > $Null
				$ScriptInformation.Add(@{Data = "          Location"; Value = $RDSFileTransferLocation; }) > $Null
				$ScriptInformation.Add(@{Data = "          Do not allow to change location"; Value = $RDSFileTransferChangeLocation; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable drive redirection cache"; Value = $RDSEnableDriveRedirectionCache; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t`t`t`t: " $RDSGroup.InheritDefaultAgentSettings.ToString()
				Line 3 "Application session lingering"
				Line 4 "Disconnect active session after`t`t`t`t: " $RDSPublishingSessionDisconnectTimeout
				Line 4 "Logoff disconnected session after`t`t`t: " $RDSPublishingSessionResetTime
				Line 3 "Other settings"
				Line 4 "Port`t`t`t`t`t`t`t: " $RDSPort
				Line 4 "Max Sessions`t`t`t`t`t`t: " $RDSMaxSessions
				Line 4 "Preferred Connection Broker`t`t`t`t: " $RDSPreferredPublishingAgent
				Line 3 "Allow Client URL/Mail Redirection`t`t`t`t: " $RDSAllowClientURLMailRedirection
				Line 4 "Replace registered application`t`t`t`t: " $ReplaceRegisteredApplication
				Line 4 "Support Windows Shell URL namespace objects`t`t: " $RDSSupportShellURLNamespaceObject
				Line 3 "Enable Drag and drop`t`t`t`t`t`t: " $RDSAllowDragandDrop
				Line 4 "Direction`t`t`t`t`t`t: " $RDSDragAndDrop
				Line 3 "Allow 2xRemoteExec to send command to the client`t`t: " $RDSAllowRemoteExec
				Line 3 "Use RemoteApp if available`t`t`t`t`t: " $RDSUseRemoteApps
				Line 3 "Enable applications monitoring`t`t`t`t`t: " $RDSEnableAppMonitoring
				Line 3 "Allow file transfer command (Web (HTML5) and Chrome clients)`t: " $RDSAllowFileTransfer
				Line 4 "Configure File Transfer"
				Line 5 "Direction`t`t`t: " $RDSFileTransferMode
				Line 5 "Location`t`t`t: " $RDSFileTransferLocation
				Line 5 "Do not allow to change location : " $RDSFileTransferChangeLocation
				Line 3 "Enable drive redirection cache`t`t`t`t`t: " $RDSEnableDriveRedirectionCache
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$RDSGroup.InheritDefaultAgentSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Application session lingering",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Disconnect active session after",($Script:htmlsb),$RDSPublishingSessionDisconnectTimeout,$htmlwhite))
				$rowdata += @(,("     Logoff disconnected session after",($Script:htmlsb),$RDSPublishingSessionResetTime,$htmlwhite))
				$rowdata += @(,("Other settings",($Script:htmlsb),$RDSPort,$htmlwhite))
				$rowdata += @(,("     Port",($Script:htmlsb),$RDSPort,$htmlwhite))
				$rowdata += @(,("     Max Sessions",($Script:htmlsb),$RDSMaxSessions,$htmlwhite))
				$rowdata += @(,("     Preferred Connection Broker",($Script:htmlsb),$RDSPreferredPublishingAgent,$htmlwhite))
				$rowdata += @(,("Allow Client URL/Mail Redirection",($Script:htmlsb),$RDSAllowClientURLMailRedirection,$htmlwhite))
				$rowdata += @(,("     Replace registered application",($Script:htmlsb),$ReplaceRegisteredApplication,$htmlwhite))
				$rowdata += @(,("     Support Windows Shell URL namespace objects",($Script:htmlsb),$RDSSupportShellURLNamespaceObject,$htmlwhite))
				$rowdata += @(,("Enable Drag and drop",($Script:htmlsb),$RDSAllowDragandDrop,$htmlwhite))
				$rowdata += @(,("     Direction",($Script:htmlsb),$RDSDragAndDrop,$htmlwhite))
				$rowdata += @(,("Allow 2xRemoteExec to send command to the client",($Script:htmlsb),$RDSAllowRemoteExec,$htmlwhite))
				$rowdata += @(,("Use RemoteApp if available",($Script:htmlsb),$RDSUseRemoteApps,$htmlwhite))
				$rowdata += @(,("Enable applications monitoring",($Script:htmlsb),$RDSEnableAppMonitoring,$htmlwhite))
				$rowdata += @(,("Allow file transfer command (Web (HTML5) and Chrome clients)",($Script:htmlsb),$RDSAllowFileTransfer,$htmlwhite))
				$rowdata += @(,("     Configure File Transfer",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("          Direction",($Script:htmlsb),$RDSFileTransferMode,$htmlwhite))
				$rowdata += @(,("          Location",($Script:htmlsb),$RDSFileTransferLocation,$htmlwhite))
				$rowdata += @(,("          Do not allow to change location",($Script:htmlsb),$RDSFileTransferChangeLocation,$htmlwhite))
				$rowdata += @(,("Enable drive redirection cache",($Script:htmlsb),$RDSEnableDriveRedirectionCache,$htmlwhite))

				$msg = "Agent settings"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#User Profile Disks
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User profile"
			}
			If($Text)
			{
				Line 2 "User profile"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($RDSGroup.InheritDefaultUserProfileSettings)
			{
				#do we inherit site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings
				$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $RDSDefaults)
				{
					Switch ($RDSDefaults.UPDMode)
					{
						"DoNotChange"	{$RDSUPDState = "Do not change"; Break}
						"Enabled"		{$RDSUPDState = "Enabled"; Break}
						"Disabled"		{$RDSUPDState = "Disabled"; Break}
						Default			{$RDSUPDState = "Unable to determine Current UPD State: $($RDSDefaults.UPDMode)"; Break}
					}
					
					Switch ($RDSDefaults.Technology)
					{
						"DoNotManage"				{$RDSTechnology = "Do not manage by RAS"; Break}
						"UPD"						{$RDSTechnology = "User profile disk"; Break}
						"FSLogixProfileContainer"	{$RDSTechnology = "FSLogix"; Break}
						Default						{$RDSTechnology = "Unable to determine Technology State: $($RDSDefaults.Technology)"; Break}
					}
					
					$RDSUPDLocation = $RDSDefaults.DiskPath
					$RDSUPDSize     = $RDSDefaults.MaxUserProfileDiskSizeGB.ToString()

					Switch ($RDSDefaults.RoamingMode)
					{
						"Exclude"	{$RDSUPDRoamingMode = "Exclude"; Break}
						"Include"	{$RDSUPDRoamingMode = "Include"; Break}
						Default		{$RDSUPDRoamingMode = "Unable to determine UPD Roaming Mode: $($RDSDefaults.RoamingMode)"; Break}
					}
					
					If($RDSUPDRoamingMode -eq "Exclude")
					{
						$RDSUPDExcludeFilePath   = $RDSDefaults.ExcludeFilePath
						$RDSUPDExcludeFolderPath = $RDSDefaults.ExcludeFolderPath
					}
					ElseIf($RDSUPDRoamingMode -eq "Include")
					{
						$RDSUPDIncludeFilePath   = $RDSDefaults.IncludeFilePath
						$RDSUPDIncludeFolderPath = $RDSDefaults.IncludeFolderPath
					}
					Else
					{
						$RDSUPDExcludeFilePath   = {"Unable to determine UPD Roaming Mode"}
						$RDSUPDExcludeFolderPath = {"Unable to determine UPD Roaming Mode"}
						$RDSUPDIncludeFilePath   = {"Unable to determine UPD Roaming Mode"}
						$RDSUPDIncludeFolderPath = {"Unable to determine UPD Roaming Mode"}
					}
						
					$FSLogixSettings           = $RDSDefaults.FSLogix.ProfileContainer
					$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
					
					Switch($FSLogixDeploymentSettings.InstallType)
					{
						"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
						"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
						"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
						"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
						Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
					}
					
					$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
					$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
					$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
					#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate

					Switch ($FSLogixSettings.LocationType)
					{
						"SMBLocation"	
						{
							$FSLogixLocationType = "SMB Location"
							$FSLogixLocationOfProfileDisks = $FSLogixSettings.VHDLocations
							Break
						}
						"CloudCache"	
						{
							$FSLogixLocationType = "Cloud Cache"
							$FSLogixLocationOfProfileDisks = $FSLogixSettings.CCDLocations
							Break
						}
						Default 		
						{
							$FSLogixLocationType = "Unable to determine FSLogix Location type: $($FSLogixSettings.LocationType)"
							$FSLogixLocationOfProfileDisks = @()
							Break
						}
					}
					
					Switch ($FSLogixSettings.ProfileDiskFormat)
					{
						"VHD"	{$FSLogixProfileDiskFormat = "VHD"; Break}
						"VHDX"	{$FSLogixProfileDiskFormat = "VHDX"; Break}
						Default	{$FSLogixProfileDiskFormat = "Unable to determine FSLogix Profile disk format: $($FSLogixSettings.ProfileDiskFormat)"; Break}
					}
					
					Switch ($FSLogixSettings.AllocationType)
					{
						"Dynamic"	{$FSLogixAllocationType = "Dynamic"; Break}
						"Full"		{$FSLogixAllocationType = "Full"; Break}
						Default		{$FSLogixAllocationType = "Unable to determine FSLogix Allocation type: $($FSLogixSettings.AllocationType)"; Break}
					}
					
					$FSLogixDefaultSize = $FSLogixSettings.DefaultSize.ToString()
						
					#FSLogix Additional settings
					#Users and Groups tab
					If($FSLogixSettings.UserInclusionList.Count -eq 0)
					{
						$FSLogixSettingsUserInclusionList = @("Everyone")
					}
					Else
					{
						$FSLogixSettingsUserInclusionList = $FSLogixSettings.UserInclusionList
					}
					$FSLogixSettingsUserExclusionList       = $FSLogixSettings.UserExclusionList
						
					#Folders tab
					$FSLogixSettingsCustomizeProfileFolders = $FSLogixSettings.CustomizeProfileFolders
					$FSLogixSettingsExcludeCommonFolders    = $FSLogixSettings | Select-Object -ExpandProperty ExcludeCommonFolders
					$ExcludedCommonFolders                  = @()
					$FSLogixSettingsFolderInclusionList     = $FSLogixSettings.FolderInclusionList
					$FSLogixSettingsFolderExclusionList     = $FSLogixSettings.FolderExclusionList

					If($FSLogixSettingsCustomizeProfileFolders)
					{
						#####################################################################################
						#MANY thanks to Guy Leech for helping me figure out how to process and use this Enum#
						#####################################################################################

						#this is cumulative
						#Contacts, Desktop, Documents, Links, MusicPodcasts, PicturesVideos, FoldersLowIntegProcesses
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Contacts)
						{
							$ExcludedCommonFolders += "Contacts"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Desktop)
						{
							$ExcludedCommonFolders += "Desktop"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Documents)
						{
							$ExcludedCommonFolders += "Documents"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Links)
						{
							$ExcludedCommonFolders += "Links"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::MusicPodcasts)
						{
							$ExcludedCommonFolders += 'Music & Podcasts'
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::PicturesVideos)
						{
							$ExcludedCommonFolders += 'Pictures & Videos'
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::FoldersLowIntegProcesses)
						{
							$ExcludedCommonFolders += "Folders used by Low Integrity processes"
						}
					}
						
					#Advanced tab
					$FSLogixAS = $FSLogixSettings.AdvancedSettings
					
					Switch($FSLogixAS.AccessNetworkAsComputerObject)
					{
						"Enable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Enable"; Break}
						"Disable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Disable"; Break}
						Default		{$FSLogixAS_AccessNetworkAsComputerObject = "Unknown: $($FSLogixAS.AccessNetworkAsComputerObject)"; Break}
					}
					
					$FSLogixAS_AttachVHDSDDL = $FSLogixAS.AttachVHDSDDL
					
					Switch($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)
					{
						"Enable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Enable"; Break}
						"Disable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"; Break}
						Default		{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Unknown: $($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)"; Break}
					}

					$FSLogixAS_DiffDiskParentFolderPath = $FSLogixAS.DiffDiskParentFolderPath  

					Switch($FSLogixAS.FlipFlopProfileDirectoryName)
					{
						"Enable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Enable"; Break}
						"Disable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Disable"; Break}
						Default		{$FSLogixAS_FlipFlopProfileDirectoryName = "Unknown: $($FSLogixAS.FlipFlopProfileDirectoryName)"; Break}
					}
					
					Switch($FSLogixAS.KeepLocalDir)
					{
						"Enable"	{$FSLogixAS_KeepLocalDir = "Enable"; Break}
						"Disable"	{$FSLogixAS_KeepLocalDir = "Disable"; Break}
						Default		{$FSLogixAS_KeepLocalDir = "Unknown: $($FSLogixAS.KeepLocalDir)"; Break}
					}

					$FSLogixAS_LockedRetryCount    = $FSLogixAS.LockedRetryCount                       
					$FSLogixAS_LockedRetryInterval = $FSLogixAS.LockedRetryInterval     
					
					Switch($FSLogixAS.NoProfileContainingFolder)
					{
						"Enable"	{$FSLogixAS_NoProfileContainingFolder = "Enable"; Break}
						"Disable"	{$FSLogixAS_NoProfileContainingFolder = "Disable"; Break}
						Default		{$FSLogixAS_NoProfileContainingFolder = "Unknown: $($FSLogixAS.NoProfileContainingFolder)"; Break}
					}

					Switch($FSLogixAS.OutlookCachedMode)
					{
						"Enable"	{$FSLogixAS_OutlookCachedMode = "Enable"; Break}
						"Disable"	{$FSLogixAS_OutlookCachedMode = "Disable"; Break}
						Default		{$FSLogixAS_OutlookCachedMode = "Unknown: $($FSLogixAS.OutlookCachedMode)"; Break}
					}

					Switch($FSLogixAS.PreventLoginWithFailure)
					{
						"Enable"	{$FSLogixAS_PreventLoginWithFailure = "Enable"; Break}
						"Disable"	{$FSLogixAS_PreventLoginWithFailure = "Disable"; Break}
						Default		{$FSLogixAS_PreventLoginWithFailure = "Unknown: $($FSLogixAS.PreventLoginWithFailure)"; Break}
					}

					Switch($FSLogixAS.PreventLoginWithTempProfile)
					{
						"Enable"	{$FSLogixAS_PreventLoginWithTempProfile = "Enable"; Break}
						"Disable"	{$FSLogixAS_PreventLoginWithTempProfile = "Disable"; Break}
						Default		{$FSLogixAS_PreventLoginWithTempProfile = "Unknown: $($FSLogixAS.PreventLoginWithTempProfile)"; Break}
					}

					$FSLogixAS_ProfileDirSDDL = $FSLogixAS.ProfileDirSDDL

					Switch($FSLogixAS.ProfileType)
					{
						"NormalProfile"	{$FSLogixAS_ProfileType = "Normal profile"; Break}
						"OnlyRWProfile"	{$FSLogixAS_ProfileType = "Only RW profile"; Break}
						"OnlyROProfile"	{$FSLogixAS_ProfileType = "Only RO profile"; Break}
						"RWROProfile"	{$FSLogixAS_ProfileType = "RW/RO profile"; Break}
						Default			{$FSLogixAS_ProfileType = "Unknown: $($FSLogixAS.ProfileType)"; Break}
					}

					$FSLogixAS_ReAttachIntervalSeconds = $FSLogixAS.ReAttachIntervalSeconds                
					$FSLogixAS_ReAttachRetryCount      = $FSLogixAS.ReAttachRetryCount                     

					Switch($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)
					{
						"Enable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Enable"; Break}
						"Disable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Disable"; Break}
						Default		{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Unknown: $($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)"; Break}
					}

					Switch($FSLogixAS.RoamSearch)
					{
						"Enable"	{$FSLogixAS_RoamSearch = "Enable"; Break}
						"Disable"	{$FSLogixAS_RoamSearch = "Disable"; Break}
						Default		{$FSLogixAS_RoamSearch = "Unknown: $($FSLogixAS.RoamSearch)"; Break}
					}

					Switch($FSLogixAS.SetTempToLocalPath)
					{
						"TakeNoAction"					{$FSLogixAS_SetTempToLocalPath = "Take no action"; Break}
						"RedirectTempAndTmp"			{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP and TMP"; Break}
						"RedirectINetCache"				{$FSLogixAS_SetTempToLocalPath = "Redirect INetCache"; Break}
						"RedirectTempTmpAndINetCache"	{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP, TMP, and INetCache"; Break}
						Default							{$FSLogixAS_SetTempToLocalPath = "Unknown: $($FSLogixAS.SetTempToLocalPath)"; Break}
					}

					$FSLogixAS_SIDDirNameMatch   = $FSLogixAS.SIDDirNameMatch                        
					$FSLogixAS_SIDDirNamePattern = $FSLogixAS.SIDDirNamePattern                      
					$FSLogixAS_SIDDirSDDL        = $FSLogixAS.SIDDirSDDL
					$FSLogixAS_VHDNameMatch      = $FSLogixAS.VHDNameMatch                           
					$FSLogixAS_VHDNamePattern    = $FSLogixAS.VHDNamePattern                         

					Switch($FSLogixAS.VHDXSectorSize)
					{
						0		{$FSLogixAS_VHDXSectorSize = "System default"; Break}
						512		{$FSLogixAS_VHDXSectorSize = "512"; Break}
						4096	{$FSLogixAS_VHDXSectorSize = "4096"; Break}
						Default	{$FSLogixAS_VHDXSectorSize = "Unknown: $($FSLogixAS.VHDXSectorSize)"; Break}
					}

					$FSLogixAS_VolumeWaitTimeMS = $FSLogixAS.VolumeWaitTimeMS                       					
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$RDSUPDState                                    = "Do not change"
					$RDSUPDLocation                                 = "None"
					$RDSUPDSize                                     = "20"
					$RDSTechnology                                  = "Do not manage by RAS"
					$RDSUPDRoamingMode                              = "Exclude"
					$RDSUPDExcludeFilePath                          = @()
					$RDSUPDExcludeFolderPath                        = @()
					$RDSUPDIncludeFilePath                          = @()
					$RDSUPDIncludeFolderPath                        = @()
					$FSLogixDeploymentSettingsDeploymentMethod      = "None"
					$FSLogixDeploymentSettingsInstallOnlineURL      = "None"
					$FSLogixDeploymentSettingsNetworkDrivePath      = "None"
					$FSLogixDeploymentSettingsInstallerFileName     = "None"
					#$FSLogixDeploymentSettingsReplicate             = $False
					$FSLogixLocationType                            = "None"
					$FSLogixLocationOfProfileDisks                  = @()
					$FSLogixProfileDiskFormat                       = "None"
					$FSLogixAllocationType                          = "None"
					$FSLogixDefaultSize                             = "0"
					$FSLogixSettingsUserInclusionList               = @("Everyone")
					$FSLogixSettingsUserExclusionList               = @()
					$FSLogixSettingsCustomizeProfileFolders         = $False
					$FSLogixSettingsExcludeCommonFolders            = "None"
					$ExcludedCommonFolders                          = @()
					$FSLogixSettingsFolderInclusionList             = @()
					$FSLogixSettingsFolderExclusionList             = @()
					$FSLogixAS_AccessNetworkAsComputerObject        = "Disable"
					$FSLogixAS_AttachVHDSDDL                        = "None"
					$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"
					$FSLogixAS_DiffDiskParentFolderPath             = "%TEMP"
					$FSLogixAS_FlipFlopProfileDirectoryName         = "Disable"
					$FSLogixAS_KeepLocalDir                         = "Disable"
					$FSLogixAS_LockedRetryCount                     = 12
					$FSLogixAS_LockedRetryInterval                  = 5
					$FSLogixAS_NoProfileContainingFolder            = "Disable"
					$FSLogixAS_OutlookCachedMode                    = "Disable"
					$FSLogixAS_PreventLoginWithFailure              = "Disable"
					$FSLogixAS_PreventLoginWithTempProfile          = "Disable"
					$FSLogixAS_ProfileDirSDDL                       = "None"
					$FSLogixAS_ProfileType                          = "Normal profile"
					$FSLogixAS_ReAttachIntervalSeconds              = 10
					$FSLogixAS_ReAttachRetryCount                   = 60
					$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff       = "Enable"
					$FSLogixAS_RoamSearch                           = "Disable"
					$FSLogixAS_SetTempToLocalPath                   = "Redirect TEMP, TMP, and INetCache"
					$FSLogixAS_SIDDirNameMatch                      = "%sid%_%username%"
					$FSLogixAS_SIDDirNamePattern                    = "%sid%_%username%"
					$FSLogixAS_SIDDirSDDL                           = "None"
					$FSLogixAS_VHDNameMatch                         = "Profile*"
					$FSLogixAS_VHDNamePattern                       = "Profile_%username%"
					$FSLogixAS_VHDXSectorSize                       = "System default"
					$FSLogixAS_VolumeWaitTimeMS                     = 20000
				}
			}
			Else
			{
				#we don't inherit
				#get the settings for the group
				$RDSGroupDefaults = $RDSGroup.RDSDefSettings
				Switch ($RDSGroupDefaults.UPDMode)
				{
					"DoNotChange"	{$RDSUPDState = "Do not change"; Break}
					"Enabled"		{$RDSUPDState = "Enabled"; Break}
					"Disabled"		{$RDSUPDState = "Disabled"; Break}
					Default			{$RDSUPDState = "Unable to determine Current UPD State: $($RDSGroupDefaults.UPDMode)"; Break}
				}
				
				Switch ($RDSGroupDefaults.Technology)
				{
					"DoNotManage"				{$RDSTechnology = "Do not manage by RAS"; Break}
					"UPD"						{$RDSTechnology = "User profile disk"; Break}
					"FSLogixProfileContainer"	{$RDSTechnology = "FSLogix"; Break}
					Default						{$RDSTechnology = "Unable to determine Technology State: $($RDSGroupDefaults.Technology)"; Break}
				}
						
				$RDSUPDLocation = $RDSGroupDefaults.DiskPath
				$RDSUPDSize     = $RDSGroupDefaults.MaxUserProfileDiskSizeGB.ToString()

				Switch ($RDSGroupDefaults.RoamingMode)
				{
					"Exclude"	{$RDSUPDRoamingMode = "Exclude"; Break}
					"Include"	{$RDSUPDRoamingMode = "Include"; Break}
					Default		{$RDSUPDRoamingMode = "Unable to determine UPD Roaming Mode: $($RDSGroupDefaults.RoamingMode)"; Break}
				}
				
				If($RDSUPDRoamingMode -eq "Exclude")
				{
					$RDSUPDExcludeFilePath   = $RDSGroupDefaults.ExcludeFilePath
					$RDSUPDExcludeFolderPath = $RDSGroupDefaults.ExcludeFolderPath
				}
				ElseIf($RDSUPDRoamingMode -eq "Include")
				{
					$RDSUPDIncludeFilePath   = $RDSGroupDefaults.IncludeFilePath
					$RDSUPDIncludeFolderPath = $RDSGroupDefaults.IncludeFolderPath
				}
				Else
				{
					$RDSUPDExcludeFilePath   = {"Unable to determine UPD Roaming Mode"}
					$RDSUPDExcludeFolderPath = {"Unable to determine UPD Roaming Mode"}
					$RDSUPDIncludeFilePath   = {"Unable to determine UPD Roaming Mode"}
					$RDSUPDIncludeFolderPath = {"Unable to determine UPD Roaming Mode"}
				}
						
				$FSLogixSettings           = $RDSGroupDefaults.FSLogix.ProfileContainer
				$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
				
				Switch($FSLogixDeploymentSettings.InstallType)
				{
					"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
					"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
					"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
					"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
					Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
				}
				
				$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
				$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
				$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
				#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate
				
				Switch ($FSLogixSettings.LocationType)
				{
					"SMBLocation"	
					{
						$FSLogixLocationType = "SMB Location"
						$FSLogixLocationOfProfileDisks = $FSLogixSettings.VHDLocations
						Break
					}
					"CloudCache"	
					{
						$FSLogixLocationType = "Cloud Cache"
						$FSLogixLocationOfProfileDisks = $FSLogixSettings.CCDLocations
						Break
					}
					Default 		
					{
						$FSLogixLocationType = "Unable to determine FSLogix Location type: $($FSLogixSettings.LocationType)"
						$FSLogixLocationOfProfileDisks = @()
						Break
					}
				}
				
				Switch ($FSLogixSettings.ProfileDiskFormat)
				{
					"VHD"	{$FSLogixProfileDiskFormat = "VHD"; Break}
					"VHDX"	{$FSLogixProfileDiskFormat = "VHDX"; Break}
					Default	{$FSLogixProfileDiskFormat = "Unable to determine FSLogix Profile disk format: $($FSLogixSettings.ProfileDiskFormat)"; Break}
				}
				
				Switch ($FSLogixSettings.AllocationType)
				{
					"Dynamic"	{$FSLogixAllocationType = "Dynamic"; Break}
					"Full"		{$FSLogixAllocationType = "Full"; Break}
					Default		{$FSLogixAllocationType = "Unable to determine FSLogix Allocation type: $($FSLogixSettings.AllocationType)"; Break}
				}
				
				$FSLogixDefaultSize = $FSLogixSettings.DefaultSize.ToString()
						
				#FSLogix Additional settings
				#Users and Groups tab
				If($FSLogixSettings.UserInclusionList.Count -eq 0)
				{
					$FSLogixSettingsUserInclusionList = @("Everyone")
				}
				Else
				{
					$FSLogixSettingsUserInclusionList = $FSLogixSettings.UserInclusionList
				}
				$FSLogixSettingsUserExclusionList       = $FSLogixSettings.UserExclusionList
						
				#Folders tab
				$FSLogixSettingsCustomizeProfileFolders = $FSLogixSettings.CustomizeProfileFolders
				$FSLogixSettingsExcludeCommonFolders    = $FSLogixSettings | Select-Object -ExpandProperty ExcludeCommonFolders
				$ExcludedCommonFolders                  = @()
				$FSLogixSettingsFolderInclusionList     = $FSLogixSettings.FolderInclusionList
				$FSLogixSettingsFolderExclusionList     = $FSLogixSettings.FolderExclusionList

				If($FSLogixSettingsCustomizeProfileFolders)
				{
					#####################################################################################
					#MANY thanks to Guy Leech for helping me figure out how to process and use this Enum#
					#####################################################################################

					#this is cumulative
					#Contacts, Desktop, Documents, Links, MusicPodcasts, PicturesVideos, FoldersLowIntegProcesses
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Contacts)
					{
						$ExcludedCommonFolders += "Contacts"
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Desktop)
					{
						$ExcludedCommonFolders += "Desktop"
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Documents)
					{
						$ExcludedCommonFolders += "Documents"
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Links)
					{
						$ExcludedCommonFolders += "Links"
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::MusicPodcasts)
					{
						$ExcludedCommonFolders += 'Music & Podcasts'
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::PicturesVideos)
					{
						$ExcludedCommonFolders += 'Pictures & Videos'
					}
					If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::FoldersLowIntegProcesses)
					{
						$ExcludedCommonFolders += "Folders used by Low Integrity processes"
					}
				}
				
				#Advanced tab
				$FSLogixAS = $FSLogixSettings.AdvancedSettings
				
				Switch($FSLogixAS.AccessNetworkAsComputerObject)
				{
					"Enable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Enable"; Break}
					"Disable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Disable"; Break}
					Default		{$FSLogixAS_AccessNetworkAsComputerObject = "Unknown: $($FSLogixAS.AccessNetworkAsComputerObject)"; Break}
				}
				
				$FSLogixAS_AttachVHDSDDL = $FSLogixAS.AttachVHDSDDL
				
				Switch($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)
				{
					"Enable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Enable"; Break}
					"Disable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"; Break}
					Default		{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Unknown: $($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)"; Break}
				}

				$FSLogixAS_DiffDiskParentFolderPath = $FSLogixAS.DiffDiskParentFolderPath  

				Switch($FSLogixAS.FlipFlopProfileDirectoryName)
				{
					"Enable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Enable"; Break}
					"Disable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Disable"; Break}
					Default		{$FSLogixAS_FlipFlopProfileDirectoryName = "Unknown: $($FSLogixAS.FlipFlopProfileDirectoryName)"; Break}
				}
				
				Switch($FSLogixAS.KeepLocalDir)
				{
					"Enable"	{$FSLogixAS_KeepLocalDir = "Enable"; Break}
					"Disable"	{$FSLogixAS_KeepLocalDir = "Disable"; Break}
					Default		{$FSLogixAS_KeepLocalDir = "Unknown: $($FSLogixAS.KeepLocalDir)"; Break}
				}

				$FSLogixAS_LockedRetryCount    = $FSLogixAS.LockedRetryCount                       
				$FSLogixAS_LockedRetryInterval = $FSLogixAS.LockedRetryInterval     
				
				Switch($FSLogixAS.NoProfileContainingFolder)
				{
					"Enable"	{$FSLogixAS_NoProfileContainingFolder = "Enable"; Break}
					"Disable"	{$FSLogixAS_NoProfileContainingFolder = "Disable"; Break}
					Default		{$FSLogixAS_NoProfileContainingFolder = "Unknown: $($FSLogixAS.NoProfileContainingFolder)"; Break}
				}

				Switch($FSLogixAS.OutlookCachedMode)
				{
					"Enable"	{$FSLogixAS_OutlookCachedMode = "Enable"; Break}
					"Disable"	{$FSLogixAS_OutlookCachedMode = "Disable"; Break}
					Default		{$FSLogixAS_OutlookCachedMode = "Unknown: $($FSLogixAS.OutlookCachedMode)"; Break}
				}

				Switch($FSLogixAS.PreventLoginWithFailure)
				{
					"Enable"	{$FSLogixAS_PreventLoginWithFailure = "Enable"; Break}
					"Disable"	{$FSLogixAS_PreventLoginWithFailure = "Disable"; Break}
					Default		{$FSLogixAS_PreventLoginWithFailure = "Unknown: $($FSLogixAS.PreventLoginWithFailure)"; Break}
				}

				Switch($FSLogixAS.PreventLoginWithTempProfile)
				{
					"Enable"	{$FSLogixAS_PreventLoginWithTempProfile = "Enable"; Break}
					"Disable"	{$FSLogixAS_PreventLoginWithTempProfile = "Disable"; Break}
					Default		{$FSLogixAS_PreventLoginWithTempProfile = "Unknown: $($FSLogixAS.PreventLoginWithTempProfile)"; Break}
				}

				$FSLogixAS_ProfileDirSDDL = $FSLogixAS.ProfileDirSDDL

				Switch($FSLogixAS.ProfileType)
				{
					"NormalProfile"	{$FSLogixAS_ProfileType = "Normal profile"; Break}
					"OnlyRWProfile"	{$FSLogixAS_ProfileType = "Only RW profile"; Break}
					"OnlyROProfile"	{$FSLogixAS_ProfileType = "Only RO profile"; Break}
					"RWROProfile"	{$FSLogixAS_ProfileType = "RW/RO profile"; Break}
					Default		{$FSLogixAS_ProfileType = "Unknown: $($FSLogixAS.ProfileType)"; Break}
				}

				$FSLogixAS_ReAttachIntervalSeconds = $FSLogixAS.ReAttachIntervalSeconds                
				$FSLogixAS_ReAttachRetryCount      = $FSLogixAS.ReAttachRetryCount                     

				Switch($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)
				{
					"Enable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Enable"; Break}
					"Disable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Disable"; Break}
					Default		{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Unknown: $($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)"; Break}
				}

				Switch($FSLogixAS.RoamSearch)
				{
					"Enable"	{$FSLogixAS_RoamSearch = "Enable"; Break}
					"Disable"	{$FSLogixAS_RoamSearch = "Disable"; Break}
					Default		{$FSLogixAS_RoamSearch = "Unknown: $($FSLogixAS.RoamSearch)"; Break}
				}

				Switch($FSLogixAS.SetTempToLocalPath)
				{
					"TakeNoAction"					{$FSLogixAS_SetTempToLocalPath = "Take no action"; Break}
					"RedirectTempAndTmp"			{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP and TMP"; Break}
					"RedirectINetCache"				{$FSLogixAS_SetTempToLocalPath = "Redirect INetCache"; Break}
					"RedirectTempTmpAndINetCache"	{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP, TMP, and INetCache"; Break}
					Default							{$FSLogixAS_SetTempToLocalPath = "Unknown: $($FSLogixAS.SetTempToLocalPath)"; Break}
				}

				$FSLogixAS_SIDDirNameMatch   = $FSLogixAS.SIDDirNameMatch                        
				$FSLogixAS_SIDDirNamePattern = $FSLogixAS.SIDDirNamePattern                      
				$FSLogixAS_SIDDirSDDL        = $FSLogixAS.SIDDirSDDL
				$FSLogixAS_VHDNameMatch      = $FSLogixAS.VHDNameMatch                           
				$FSLogixAS_VHDNamePattern    = $FSLogixAS.VHDNamePattern                         

				Switch($FSLogixAS.VHDXSectorSize)
				{
					0		{$FSLogixAS_VHDXSectorSize = "System default"; Break}
					512		{$FSLogixAS_VHDXSectorSize = "512"; Break}
					4096	{$FSLogixAS_VHDXSectorSize = "4096"; Break}
					Default	{$FSLogixAS_VHDXSectorSize = "Unknown: $($FSLogixAS.VHDXSectorSize)"; Break}
				}

				$FSLogixAS_VolumeWaitTimeMS = $FSLogixAS.VolumeWaitTimeMS                       					
			}
				
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSGroup.InheritDefaultUserProfileSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Technology"; Value = $RDSTechnology; }) > $Null

				If($RDSTechnology -eq "Do not manage by RAS")
				{
					#do nothing
				}
				ElseIf($RDSTechnology -eq "User profile disk")
				{
					$ScriptInformation.Add(@{Data = "Settings"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     UPD State"; Value = $RDSUPDState; }) > $Null
					$ScriptInformation.Add(@{Data = "     Location of UPD"; Value = $RDSUPDLocation; }) > $Null
					$ScriptInformation.Add(@{Data = "     Maximum size (in GB)"; Value = $RDSUPDSize; }) > $Null
					$ScriptInformation.Add(@{Data = "     User profile disks data settings..."; Value = ""; }) > $Null
					
					If($RDSUPDRoamingMode -eq "Exclude")
					{
						$ScriptInformation.Add(@{Data = "     Store all user settings and data on the user profile disk"; Value = ""; }) > $Null
						
						$cnt = -1
						ForEach($item in $RDSUPDExcludeFilePath)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude the following folders"; Value = ""; }) > $Null
							}
							$ScriptInformation.Add(@{Data = ""; Value = "Path: $item     Type: File"; }) > $Null
						}
						
						ForEach($item in $RDSUPDExcludeFolderPath)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude the following folders"; Value = ""; }) > $Null
							}
							$ScriptInformation.Add(@{Data = ""; Value = "Path: $item     Type: Folder"; }) > $Null
						}
					}
					ElseIf($RDSUPDRoamingMode -eq "Include")
					{
						$ScriptInformation.Add(@{Data = "     Store only the following folders on the user profile disk"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "     All other folders in the user profile will not be preserved"; Value = ""; }) > $Null
						ForEach($item in $RDSUPDIncludeFolderPath)
						{
							$ScriptInformation.Add(@{Data = ""; Value = "Path: $item     Type: Folder"; }) > $Null
						}
						$ScriptInformation.Add(@{Data = "     Include the following folders"; Value = ""; }) > $Null
						ForEach($item in $RDSUPDIncludeFilePath)
						{
							$ScriptInformation.Add(@{Data = ""; Value = "Path: $item     Type: File"; }) > $Null
						}
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "     Unable to determine UPD Roaming Mode"; Value = ""; }) > $Null
					}
				}
				ElseIf($RDSTechnology -eq "FSLogix")
				{
					$ScriptInformation.Add(@{Data = "Deployment method"; Value = $FSLogixDeploymentSettingsDeploymentMethod; }) > $Null
					If($FSLogixDeploymentSettings.InstallType -eq "Online")
					{
						$ScriptInformation.Add(@{Data = "URL"; Value = $FSLogixDeploymentSettingsInstallOnlineURL; }) > $Null
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
					{
						$ScriptInformation.Add(@{Data = ""; Value = $FSLogixDeploymentSettingsNetworkDrivePath; }) > $Null
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
					{
						$ScriptInformation.Add(@{Data = ""; Value = $FSLogixDeploymentSettingsInstallerFileName; }) > $Null
					}
					#$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $FSLogixDeploymentSettingsReplicate.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Settings"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Location type"; Value = $FSLogixLocationType; }) > $Null
					
					$cnt = -1
					ForEach($item in $FSLogixLocationOfProfileDisks)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "     Location of profile disks"; Value = $item; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
						}
					}
					$ScriptInformation.Add(@{Data = "     Profile disk format"; Value = $FSLogixProfileDiskFormat; }) > $Null
					$ScriptInformation.Add(@{Data = "     Allocation type"; Value = $FSLogixAllocationType; }) > $Null
					$ScriptInformation.Add(@{Data = "     Default size"; Value = "$FSLogixDefaultSize GB"; }) > $Null
					$ScriptInformation.Add(@{Data = "Additional settings"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Users and Groups"; Value = ""; }) > $Null
					
					If($FSLogixSettingsUserInclusionList.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          User Inclusion List"; Value = "None"; }) > $Null
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "          User Inclusion List"; Value = "User: $($item.Account)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "User: $($item.Account)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
						}
					}

					If($FSLogixSettingsUserExclusionList.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          User Exclusion List"; Value = "None"; }) > $Null
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserExclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "          User Exclusion List"; Value = "User: $($item.Account)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "User: $($item.Account)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
						}
					}
					$ScriptInformation.Add(@{Data = "     Folders"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          Customize profile folders"; Value = $FSLogixSettingsCustomizeProfileFolders.ToString(); }) > $Null
					If($FSLogixSettingsCustomizeProfileFolders)
					{
						If($ExcludedCommonFolders.Count -gt 0)
						{
							$cnt = -1
							ForEach($item in $ExcludedCommonFolders)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "               Exclude Common Folders"; Value = $item; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
								}
							}
						}
						Else
						{
							$ScriptInformation.Add(@{Data = "               Exclude Common Folders"; Value = "None"; }) > $Null
						}
					}
					
					If($FSLogixSettingsFolderInclusionList.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          Folder Inclusion List"; Value = "None"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          Folder Inclusion List"; Value = ""; }) > $Null
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "               Folder"; Value = "$item"; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$item"; }) > $Null
							}
						}
					}

					If($FSLogixSettingsFolderExclusionList.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          Folder Exclusion List"; Value = "None"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          Folder Exclusion List"; Value = ""; }) > $Null
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderExclusionList)
						{
							$cnt++
							
							Switch($item.ExcludeFolderCopy)
							{
								"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
								"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
								"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
								"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
								Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
							}
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "               Folder"; Value = "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"; }) > $Null
							}
						}
					}
					
					$ScriptInformation.Add(@{Data = "     Advanced"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          FSLogix Setting:"; Value = "Value:"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Access network as computer object"; Value = "$($FSLogixAS_AccessNetworkAsComputerObject)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Custom SDDL for profile directory"; Value = "$($FSLogixAS_ProfileDirSDDL)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Delay between locked VHD(X) retries"; Value = "$($FSLogixAS_LockedRetryInterval)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Delete local profile when loading from VHD"; Value = "$($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Diff disk parent folder path"; Value = "$($FSLogixAS_DiffDiskParentFolderPath)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Do not create a folder for new profiles"; Value = "$($FSLogixAS_NoProfileContainingFolder)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Enable Cached mode for Outlook"; Value = "$($FSLogixAS_OutlookCachedMode)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Keep local profiles"; Value = "$($FSLogixAS_KeepLocalDir)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Naming pattern for new VHD(X) files"; Value = "$($FSLogixAS_VHDNamePattern)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Number of locked VHD(X) retries"; Value = "$($FSLogixAS_LockedRetryCount)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Prevent logons with failures"; Value = "$($FSLogixAS_PreventLoginWithFailure)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Prevent logons with temp profiles"; Value = "$($FSLogixAS_PreventLoginWithTempProfile)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Profile folder naming pattern"; Value = "$($FSLogixAS_SIDDirNameMatch)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Profile type"; Value = "$($FSLogixAS_ProfileType)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Profile VHD(X) file matching pattern"; Value = "$($FSLogixAS_VHDNameMatch)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Re-attach interval"; Value = "$($FSLogixAS_ReAttachIntervalSeconds)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Re-attach retry limit"; Value = "$($FSLogixAS_ReAttachRetryCount)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Remove duplicate OST files on logoff"; Value = "$($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          SDDL used when attaching the VHD"; Value = "$($FSLogixAS_AttachVHDSDDL)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Search roaming feature mode"; Value = "$($FSLogixAS_RoamSearch)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Swap SID and username in profile directory names"; Value = "$($FSLogixAS_FlipFlopProfileDirectoryName)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Temporary folders redirection mode"; Value = "$($FSLogixAS_SetTempToLocalPath)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Use SDDL on creation of SID containing folder"; Value = "$($FSLogixAS_SIDDirSDDL)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          User-to-Profile matching pattern"; Value = "$($FSLogixAS_SIDDirNamePattern)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          VHDX sector size"; Value = "$($FSLogixAS_VHDXSectorSize)"; }) > $Null
					$ScriptInformation.Add(@{Data = "          Volume wait time"; Value = "$($FSLogixAS_VolumeWaitTimeMS)"; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t`t`t: " $RDSGroup.InheritDefaultUserProfileSettings.ToString()
				Line 3 "Technology`t`t`t`t`t`t: " $RDSTechnology

				If($RDSTechnology -eq "Do not manage by RAS")
				{
					#do nothing
				}
				ElseIf($RDSTechnology -eq "User profile disk")
				{
					Line 3 "Settings"
					Line 4 "UPD State`t`t`t`t`t: " $RDSUPDState
					Line 4 "Location of UPD`t`t`t`t`t: " $RDSUPDLocation
					Line 4 "Maximum size (in GB)`t`t`t`t: " $RDSUPDSize
					Line 4 "User profile disks data settings..."
					
					If($RDSUPDRoamingMode -eq "Exclude")
					{
						Line 5 "Store all user settings and data on the user profile disk"
						Line 5 "Exclude the following folders"
						ForEach($item in $RDSUPDExcludeFilePath)
						{
							Line 6 "Path: $item Type: File"
						}
						
						ForEach($item in $RDSUPDExcludeFolderPath)
						{
							Line 6 "Path: $item Type: Folder"
						}
					}
					ElseIf($RDSUPDRoamingMode -eq "Include")
					{
						Line 5 "Store only the following folders on the user profile disk"
						Line 5 "All other folders in the user profile will not be preserved"
						ForEach($item in $RDSUPDIncludeFolderPath)
						{
							Line 6 "Path: $item Type: Folder"
						}
						Line 5 "Include the following folders"
						ForEach($item in $RDSUPDIncludeFilePath)
						{
							Line 6 "Path: $item Type: File"
						}
					}
					Else
					{
						Line 5 "Unable to determine UPD Roaming Mode"
					}
				}
				ElseIf($RDSTechnology -eq "FSLogix")
				{
					Line 3 "Deployment method`t`t`t`t`t: " $FSLogixDeploymentSettingsDeploymentMethod
					If($FSLogixDeploymentSettings.InstallType -eq "Online")
					{
						Line 3 "URL`t`t`t`t`t`t`t: " $FSLogixDeploymentSettingsInstallOnlineURL
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
					{
						Line 10 ": " $FSLogixDeploymentSettingsNetworkDrivePath
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
					{
						Line 10 ": " $FSLogixDeploymentSettingsInstallerFileName
					}
					#Line 3 "Settings are replicated to all Sites`t`t`t: " $FSLogixDeploymentSettingsReplicate.ToString()
					Line 3 "Settings"
					Line 4 "Location type`t`t`t`t`t: " $FSLogixLocationType
					
					$cnt = -1
					ForEach($item in $FSLogixLocationOfProfileDisks)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							Line 4 "Location of profile disks`t`t`t: " $item
						}
						Else
						{
							Line 10 "  " $item
						}
					}
					Line 4 "Profile disk format`t`t`t`t: " $FSLogixProfileDiskFormat
					Line 4 "Allocation type`t`t`t`t`t: " $FSLogixAllocationType
					Line 4 "Default size`t`t`t`t`t: " "$FSLogixDefaultSize GB"
					Line 3 "Additional settings"
					Line 4 "Users and Groups"
					
					If($FSLogixSettingsUserInclusionList.Count -eq 0)
					{
						Line 5 "User Inclusion List`t`t`t: " "None"
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								Line 5 "User Inclusion List`t`t`t: " "User: $($item.Account)  Type: $($item.Type)"
							}
							Else
							{
								Line 10 "  " "User: $($item.Account)  Type: $($item.Type)"
							}
						}
					}

					If($FSLogixSettingsUserExclusionList.Count -eq 0)
					{
						Line 5 "User Exclusion List`t`t`t: " "None"
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserExclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								Line 5 "User Exclusion List`t`t`t: " "User: $($item.Account)  Type: $($item.Type)"
							}
							Else
							{
								Line 10 "  " "User: $($item.Account)  Type: $($item.Type)"
							}
						}
					}
					Line 4 "Folders"
					Line 5 "Customize profile folders`t`t: " $FSLogixSettingsCustomizeProfileFolders.ToString()
					If($FSLogixSettingsCustomizeProfileFolders)
					{
						If($ExcludedCommonFolders.Count -gt 0)
						{
							$cnt = -1
							ForEach($item in $ExcludedCommonFolders)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									Line 6 "Exclude Common Folders`t`t: " $item
								}
								Else
								{
									Line 10 "  " $item
								}
							}
						}
						Else
						{
							Line 6 "Exclude Common Folders`t`t: None"
						}
					}
					
					If($FSLogixSettingsFolderInclusionList.Count -eq 0)
					{
						Line 5 "Folder Inclusion List`t`t`t: " "None"
					}
					Else
					{
						Line 5 "Folder Inclusion List"
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								Line 6 "Folder`t`t`t`t: " $item
							}
							Else
							{
								Line 10 "  " $item
							}
						}
					}

					If($FSLogixSettingsFolderExclusionList.Count -eq 0)
					{
						Line 5 "Folder Exclusion List`t`t`t: " "None"
					}
					Else
					{
						Line 5 "Folder Exclusion List"
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderExclusionList)
						{
							$cnt++
							
							Switch($item.ExcludeFolderCopy)
							{
								"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
								"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
								"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
								"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
								Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
							}
							
							If($cnt -eq 0)
							{
								Line 6 "Folder`t`t`t`t: " "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"
							}
							Else
							{
								Line 10 "  " "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"
							}
						}
					}
					
					Line 4 "Advanced"
					Line 5 "FSLogix Setting                                      Value"
					Line 5 "======================================================================================"
					#      "Swap SID and username in profile directory names     Redirect TEMP, TMP, and INetCache"
					Line 5 "Access network as computer object                    $($FSLogixAS_AccessNetworkAsComputerObject)"
					Line 5 "Custom SDDL for profile directory                    $($FSLogixAS_ProfileDirSDDL)"
					Line 5 "Delay between locked VHD(X) retries                  $($FSLogixAS_LockedRetryInterval)"
					Line 5 "Delete local profile when loading from VHD           $($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)"
					Line 5 "Diff disk parent folder path                         $($FSLogixAS_DiffDiskParentFolderPath)"
					Line 5 "Do not create a folder for new profiles              $($FSLogixAS_NoProfileContainingFolder)"
					Line 5 "Enable Cached mode for Outlook                       $($FSLogixAS_OutlookCachedMode)"
					Line 5 "Keep local profiles                                  $($FSLogixAS_KeepLocalDir)"
					Line 5 "Naming pattern for new VHD(X) files                  $($FSLogixAS_VHDNamePattern)"
					Line 5 "Number of locked VHD(X) retries                      $($FSLogixAS_LockedRetryCount)"
					Line 5 "Prevent logons with failures                         $($FSLogixAS_PreventLoginWithFailure)"
					Line 5 "Prevent logons with temp profiles                    $($FSLogixAS_PreventLoginWithTempProfile)"
					Line 5 "Profile folder naming pattern                        $($FSLogixAS_SIDDirNameMatch)"
					Line 5 "Profile type                                         $($FSLogixAS_ProfileType)"
					Line 5 "Profile VHD(X) file matching pattern                 $($FSLogixAS_VHDNameMatch)"
					Line 5 "Re-attach interval                                   $($FSLogixAS_ReAttachIntervalSeconds)"
					Line 5 "Re-attach retry limit                                $($FSLogixAS_ReAttachRetryCount)"
					Line 5 "Remove duplicate OST files on logoff                 $($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)"
					Line 5 "SDDL used when attaching the VHD                     $($FSLogixAS_AttachVHDSDDL)"
					Line 5 "Search roaming feature mode                          $($FSLogixAS_RoamSearch)"
					Line 5 "Swap SID and username in profile directory names     $($FSLogixAS_FlipFlopProfileDirectoryName)"
					Line 5 "Temporary folders redirection mode                   $($FSLogixAS_SetTempToLocalPath)"
					Line 5 "Use SDDL on creation of SID containing folder        $($FSLogixAS_SIDDirSDDL)"
					Line 5 "User-to-Profile matching pattern                     $($FSLogixAS_SIDDirNamePattern)"
					Line 5 "VHDX sector size                                     $($FSLogixAS_VHDXSectorSize)"
					Line 5 "Volume wait time                                     $($FSLogixAS_VolumeWaitTimeMS)"
				}

				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$RDSGroup.InheritDefaultUserProfileSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Technology",($Script:htmlsb),$RDSTechnology,$htmlwhite))

				If($RDSTechnology -eq "Do not manage by RAS")
				{
					#do nothing
				}
				ElseIf($RDSTechnology -eq "User profile disk")
				{
					$rowdata += @(,("Settings",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("     UPD State",($Script:htmlsb),$RDSUPDState,$htmlwhite))
					$rowdata += @(,("     Location of UPD",($Script:htmlsb),$RDSUPDLocation,$htmlwhite))
					$rowdata += @(,("     Maximum size (in GB)",($Script:htmlsb),$RDSUPDSize,$htmlwhite))
					$rowdata += @(,("     User profile disks data settings...",($Script:htmlsb),"",$htmlwhite))
					
					If($RDSUPDRoamingMode -eq "Exclude")
					{
						$rowdata += @(,("     Store all user settings and data on the user profile disk",($Script:htmlsb),"",$htmlwhite))
						$cnt = -1
						ForEach($item in $RDSUPDExcludeFilePath)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude the following folders",($Script:htmlsb),"",$htmlwhite))
							}
							$rowdata += @(,("",($Script:htmlsb),"Path: $item     Type: File",$htmlwhite))
						}
						
						ForEach($item in $RDSUPDExcludeFolderPath)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude the following folders",($Script:htmlsb),"",$htmlwhite))
							}
							$rowdata += @(,("",($Script:htmlsb),"Path: $item     Type: Folder",$htmlwhite))
						}
					}
					ElseIf($RDSUPDRoamingMode -eq "Include")
					{
						$rowdata += @(,("     Store only the following folders on the user profile disk",($Script:htmlsb),"",$htmlwhite))
						$rowdata += @(,("     All other folders in the user profile will not be preserved",($Script:htmlsb),"",$htmlwhite))
						ForEach($item in $RDSUPDIncludeFolderPath)
						{
							$rowdata += @(,("",($Script:htmlsb),"Path: $item     Type: Folder",$htmlwhite))
						}
						$rowdata += @(,("     Include the following folders",($Script:htmlsb),"",$htmlwhite))
						ForEach($item in $RDSUPDIncludeFilePath)
						{
							$rowdata += @(,("",($Script:htmlsb),"Path: $item     Type: File",$htmlwhite))
						}
					}
					Else
					{
						$rowdata += @(,("     Unable to determine UPD Roaming Mode",($Script:htmlsb),"",$htmlwhite))
					}
				}
				ElseIf($RDSTechnology -eq "FSLogix")
				{
					$rowdata += @(,("Deployment method",($Script:htmlsb),$FSLogixDeploymentSettingsDeploymentMethod,$htmlwhite))
					If($FSLogixDeploymentSettings.InstallType -eq "Online")
					{
						$rowdata += @(,("URL",($Script:htmlsb),$FSLogixDeploymentSettingsInstallOnlineURL,$htmlwhite))
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
					{
						$rowdata += @(,("",($Script:htmlsb),$FSLogixDeploymentSettingsNetworkDrivePath,$htmlwhite))
					}
					ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
					{
						$rowdata += @(,("",($Script:htmlsb),$FSLogixDeploymentSettingsInstallerFileName,$htmlwhite))
					}
					#$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$FSLogixDeploymentSettingsReplicate.ToString(),$htmlwhite))
					$rowdata += @(,("Settings",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("     Location type",($Script:htmlsb),$FSLogixLocationType,$htmlwhite))
					
					$cnt = -1
					ForEach($item in $FSLogixLocationOfProfileDisks)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("     Location of profile disks",($Script:htmlsb),$item,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
						}
					}
					$rowdata += @(,("     Profile disk format",($Script:htmlsb),$FSLogixProfileDiskFormat,$htmlwhite))
					$rowdata += @(,("     Allocation type",($Script:htmlsb),$FSLogixAllocationType,$htmlwhite))
					$rowdata += @(,("     Default size",($Script:htmlsb),"$FSLogixDefaultSize GB",$htmlwhite))
					$rowdata += @(,("Additional settings",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("     Users and Groups",($Script:htmlsb),"",$htmlwhite))
					
					If($FSLogixSettingsUserInclusionList.COunt -eq 0)
					{
						$rowdata += @(,("          User Inclusion List",($Script:htmlsb),"None",$htmlwhite))
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("          User Inclusion List",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
						}
					}

					If($FSLogixSettingsUserExclusionList.Count -eq 0)
					{
						$rowdata += @(,("          User Exclusion List",($Script:htmlsb),"None",$htmlwhite))
					}
					Else
					{
						$cnt = -1
						ForEach($item in $FSLogixSettingsUserExclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("          User Exclusion List",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
								$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
							}
						}
					}
					$rowdata += @(,("     Folders",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          Customize profile folders",($Script:htmlsb),$FSLogixSettingsCustomizeProfileFolders.ToString(),$htmlwhite))
					If($FSLogixSettingsCustomizeProfileFolders)
					{
						If($ExcludedCommonFolders.Count -gt 0)
						{
							$cnt = -1
							ForEach($item in $ExcludedCommonFolders)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$rowdata += @(,("               Exclude Common Folders",($Script:htmlsb),$item,$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
								}
							}
						}
						Else
						{
							$rowdata += @(,("               Exclude Common Folders",($Script:htmlsb),"None",$htmlwhite))
						}
					}

					If($FSLogixSettingsFolderInclusionList.Count -eq 0)
					{
						$rowdata += @(,("          Folder Inclusion List",($Script:htmlsb),"None",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("          Folder Inclusion List",($Script:htmlsb),"",$htmlwhite))
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderInclusionList)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("               Folder",($Script:htmlsb),"$item",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$item",$htmlwhite))
							}
						}
					}

					If($FSLogixSettingsFolderExclusionList.Count -eq 0)
					{
						$rowdata += @(,("          Folder Exclusion List",($Script:htmlsb),"None",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("          Folder Exclusion List",($Script:htmlsb),"",$htmlwhite))
						$cnt = -1
						ForEach($item in $FSLogixSettingsFolderExclusionList)
						{
							$cnt++
							
							Switch($item.ExcludeFolderCopy)
							{
								"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
								"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
								"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
								"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
								Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
							}
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("               Folder",($Script:htmlsb),"$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack",$htmlwhite))
							}
						}
					}

					$rowdata += @(,("     Advanced",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          FSLogix Setting:",($Script:htmlsb),"Value:",$htmlwhite))
					$rowdata += @(,("          Access network as computer object",($Script:htmlsb),"$($FSLogixAS_AccessNetworkAsComputerObject)",$htmlwhite))
					$rowdata += @(,("          Custom SDDL for profile directory",($Script:htmlsb),"$($FSLogixAS_ProfileDirSDDL)",$htmlwhite))
					$rowdata += @(,("          Delay between locked VHD(X) retries",($Script:htmlsb),"$($FSLogixAS_LockedRetryInterval)",$htmlwhite))
					$rowdata += @(,("          Delete local profile when loading from VHD",($Script:htmlsb),"$($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)",$htmlwhite))
					$rowdata += @(,("          Diff disk parent folder path",($Script:htmlsb),"$($FSLogixAS_DiffDiskParentFolderPath)",$htmlwhite))
					$rowdata += @(,("          Do not create a folder for new profiles",($Script:htmlsb),"$($FSLogixAS_NoProfileContainingFolder)",$htmlwhite))
					$rowdata += @(,("          Enable Cached mode for Outlook",($Script:htmlsb),"$($FSLogixAS_OutlookCachedMode)",$htmlwhite))
					$rowdata += @(,("          Keep local profiles",($Script:htmlsb),"$($FSLogixAS_KeepLocalDir)",$htmlwhite))
					$rowdata += @(,("          Naming pattern for new VHD(X) files",($Script:htmlsb),"$($FSLogixAS_VHDNamePattern)",$htmlwhite))
					$rowdata += @(,("          Number of locked VHD(X) retries",($Script:htmlsb),"$($FSLogixAS_LockedRetryCount)",$htmlwhite))
					$rowdata += @(,("          Prevent logons with failures",($Script:htmlsb),"$($FSLogixAS_PreventLoginWithFailure)",$htmlwhite))
					$rowdata += @(,("          Prevent logons with temp profiles",($Script:htmlsb),"$($FSLogixAS_PreventLoginWithTempProfile)",$htmlwhite))
					$rowdata += @(,("          Profile folder naming pattern",($Script:htmlsb),"$($FSLogixAS_SIDDirNameMatch)",$htmlwhite))
					$rowdata += @(,("          Profile type",($Script:htmlsb),"$($FSLogixAS_ProfileType)",$htmlwhite))
					$rowdata += @(,("          Profile VHD(X) file matching pattern",($Script:htmlsb),"$($FSLogixAS_VHDNameMatch)",$htmlwhite))
					$rowdata += @(,("          Re-attach interval",($Script:htmlsb),"$($FSLogixAS_ReAttachIntervalSeconds)",$htmlwhite))
					$rowdata += @(,("          Re-attach retry limit",($Script:htmlsb),"$($FSLogixAS_ReAttachRetryCount)",$htmlwhite))
					$rowdata += @(,("          Remove duplicate OST files on logoff",($Script:htmlsb),"$($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)",$htmlwhite))
					$rowdata += @(,("          SDDL used when attaching the VHD",($Script:htmlsb),"$($FSLogixAS_AttachVHDSDDL)",$htmlwhite))
					$rowdata += @(,("          Search roaming feature mode",($Script:htmlsb),"$($FSLogixAS_RoamSearch)",$htmlwhite))
					$rowdata += @(,("          Swap SID and username in profile directory names",($Script:htmlsb),"$($FSLogixAS_FlipFlopProfileDirectoryName)",$htmlwhite))
					$rowdata += @(,("          Temporary folders redirection mode",($Script:htmlsb),"$($FSLogixAS_SetTempToLocalPath)",$htmlwhite))
					$rowdata += @(,("          Use SDDL on creation of SID containing folder",($Script:htmlsb),"$($FSLogixAS_SIDDirSDDL)",$htmlwhite))
					$rowdata += @(,("          User-to-Profile matching pattern",($Script:htmlsb),"$($FSLogixAS_SIDDirNamePattern)",$htmlwhite))
					$rowdata += @(,("          VHDX sector size",($Script:htmlsb),"$($FSLogixAS_VHDXSectorSize)",$htmlwhite))
					$rowdata += @(,("          Volume wait time",($Script:htmlsb),"$($FSLogixAS_VolumeWaitTimeMS)",$htmlwhite))
				}

				$msg = "User profile"
				$columnWidths = @("350","325")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Desktop Access
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Desktop access"
			}
			If($Text)
			{
				Line 2 "Desktop access"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($RDSGroup.InheritDefaultDesktopAccessSettings)
			{
				#do we inherit group or site defaults?
				#http://woshub.com/hot-to-convert-sid-to-username-and-vice-versa/
				#for translating the User SID to the AD user name
				#yes we do, get the default settings for the Site
				#use the Site default settings
				$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $RDSDefaults)
				{
					$RDSRestrictDesktopAccess = $RDSDefaults.RestrictDesktopAccess.ToString()
					$RDSRestrictedUsers       = @()
					
					ForEach($User in $RDSDefaults.RestrictedUsers)
					{
						$objSID  = New-Object System.Security.Principal.SecurityIdentifier ($User)
						$objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
						
						$RDSRestrictedUsers += $objUser.Value
					}
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$RDSRestrictDesktopAccess = "False"
					$RDSRestrictedUsers       = @()
				}
			}
			Else
			{
				#we don't inherit
				#get the settings for the group
				$RDSGroupDefaults         = $RDSGroup.RDSDefSettings
				$RDSRestrictDesktopAccess = $RDSGroupDefaults.RestrictDesktopAccess.ToString()
				$RDSRestrictedUsers       = @()
				
				ForEach($User in $RDSGroupDefaults.RestrictedUsers)
				{
					$objSID  = New-Object System.Security.Principal.SecurityIdentifier ($User)
					$objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
					
					$RDSRestrictedUsers += $objUser.Value
				}
			}
				
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSGroup.InheritDefaultDesktopAccessSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Restrict direct desktop access to the following users"; Value = $RDSRestrictDesktopAccess; }) > $Null
				
				$cnt = -1
				ForEach($Item in $RDSRestrictedUsers)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Users"; Value = $Item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t`t`t: " $RDSGroup.InheritDefaultDesktopAccessSettings.ToString()
				Line 3 "Restrict direct desktop access to the following users`t: " $RDSRestrictDesktopAccess
				$cnt = -1
				ForEach($Item in $RDSRestrictedUsers)
				{
					$cnt++
					If($cnt -eq 0)
					{
						Line 9 "Users`t: " $Item
					}
					Else
					{
						Line 10 "  " $Item
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$RDSGroup.InheritDefaultDesktopAccessSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Restrict direct desktop access to the following users",($Script:htmlsb),$RDSRestrictDesktopAccess,$htmlwhite))
				
				$cnt = -1
				ForEach($Item in $RDSRestrictedUsers)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$rowdata += @(,("Users",($Script:htmlsb),$Item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}

				$msg = "Desktop access"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#RDP Printer
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "RDP printer"
			}
			If($Text)
			{
				Line 2 "RDP printer"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($RDSGroup.InheritDefaultPrinterSettings)
			{
				#do we inherit group or site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings
				$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $RDSDefaults)
				{
					Switch ($RDSDefaults.PrinterNameFormat)
					{
						"PrnFormat_PRN_CMP_SES"	{$RDSPrinterNameFormat = "Printername (from Computername) in Session no."; Break}
						"PrnFormat_SES_CMP_PRN"	{$RDSPrinterNameFormat = "Session no. (Computername from) Printername"; Break}
						"PrnFormat_PRN_REDSES"	{$RDSPrinterNameFormat = "Printername (redirected Session no.)"; Break}
						Default					{$RDSPrinterNameFormat = "Unable to determine RDP Printer Name Format: $($RDSFefaults.PrinterNameFormat)"; Break}
					}
					
					$RDSRemoveSessionNumberFromPrinter = $RDSDefaults.RemoveSessionNumberFromPrinterName.ToString()
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$RDSPrinterNameFormat = "Printername (from Computername) in Session no."
					$RDSRemoveSessionNumberFromPrinter = "False"
				}
			}
			Else
			{
				#we don't inherit
				#get the settings for the group
				$RDSGroupDefaults = $RDSGroup.RDSDefSettings
				Switch ($RDSGroupDefaults.PrinterNameFormat)
				{
					"PrnFormat_PRN_CMP_SES"	{$RDSPrinterNameFormat = "Printername (from Computername) in Session no."; Break}
					"PrnFormat_SES_CMP_PRN"	{$RDSPrinterNameFormat = "Session no. (Computername from) Printername"; Break}
					"PrnFormat_PRN_REDSES"	{$RDSPrinterNameFormat = "Printername (redirected Session no.)"; Break}
					Default					{$RDSPrinterNameFormat = "Unable to determine RDP Printer Name Format: $($RDSFefaults.PrinterNameFormat)"; Break}
				}
				
				$RDSRemoveSessionNumberFromPrinter = $RDSGroupDefaults.RemoveSessionNumberFromPrinterName.ToString()
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSGroup.InheritDefaultPrinterSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "RDP Printer Name Format"; Value = $RDSPrinterNameFormat; }) > $Null
				$ScriptInformation.Add(@{Data = "Remove session number from printer name"; Value = $RDSRemoveSessionNumberFromPrinter; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t`t`t: " $RDSGroup.InheritDefaultPrinterSettings.ToString()
				Line 3 "RDP Printer Name Format`t`t`t`t`t: " $RDSPrinterNameFormat
				Line 3 "Remove session number from printer name`t`t`t: " $RDSRemoveSessionNumberFromPrinter
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$RDSGroup.InheritDefaultPrinterSettings.ToString(),$htmlwhite)
				$rowdata += @(,("RDP Printer Name Format",($Script:htmlsb),$RDSPrinterNameFormat,$htmlwhite))
				$rowdata += @(,("Remove session number from printer name",($Script:htmlsb),$RDSRemoveSessionNumberFromPrinter,$htmlwhite))

				$msg = "RDP printer"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}

	Write-Verbose "$(Get-Date -Format G): `tOutput RD Session Hosts Templates"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Templates"
	}
	If($Text)
	{
		Line 1 "Templates"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Templates"
	}
		
	$RDSTemplates = Get-RASVDITemplate -Siteid $Site.Id -EA 0 4>$Null | Where-Object {$_.TemplateType -eq "RDSH"}

	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve RD Session Hosts Templates for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve RD Session Hosts Templates for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve RD Session Hosts Templates for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve RD Session Hosts Templates for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $RDSTemplates)
	{
		Write-Host "
	No RD Session Hosts Templates retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No RD Session Hosts Templates retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No RD Session Hosts Templates retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No RD Session Hosts Templates retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($RDSTemplate in $RDSTemplates)
		{
			$TemplateProvider = Get-RASProvider -Id $RDSTemplate.ProviderId -EA 0 4>$Null
			
			If($? -and $Null -ne $TemplateProvider)
			{
				$TemplateProviderName = $TemplateProvider.Server
				$TemplateProviderType = GetVDIType $TemplateProvider.Type
			}
			Else
			{
				$TemplateProviderName = ""
				$TemplateProviderType = ""
			}

			$TemplateVM = Get-RASVM -Id $RDSTemplate.VMId -ProviderId $RDSTemplate.ProviderId -EA 0 4>$Null
			
			If($? -and $Null -ne $TemplateVM)
			{
				<#
					Values	        Description
					Unknown	        The VM is in the 'Unknown' state
					On	            The VM is powered on.
					Off	            The VM is powered off
					Paused	        The VM is already, or in the process of being, suspended
					CloningFailed	Failed to clone the VM.
					CloningCanceled	VM cloning was cancelled
				#>
				Switch($TemplateVM.State)
				{
					"Unknown"			{$TemplatePowerState = "Unknown"; Break}
					"On"				{$TemplatePowerState = "Powered on"; Break}
					"Off"				{$TemplatePowerState = "Powered off"; Break}
					"Paused"			{$TemplatePowerState = "Paused"; Break}
					"CloningFailed"		{$TemplatePowerState = "Cloning failed"; Break}
					"CloningCanceled"	{$TemplatePowerState = "Cloning canceled"; Break}
					Default				{$TemplatePowerState = "Unable to determine template VM power state: $($TemplateVM.State)"; Break}
				}
			}
			Else
			{
				$TemplatePowerState = "Unknown"
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Template Name $($RDSTemplate.Name)"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $RDSTemplate.Name; }) > $Null
				#$ScriptInformation.Add(@{Data = "Status"; Value = "Can't find"; }) > $Null
				$ScriptInformation.Add(@{Data = "Power state"; Value = $TemplatePowerState; }) > $Null
				#$ScriptInformation.Add(@{Data = "Agent status"; Value = "Can't find"; }) > $Null
				#$ScriptInformation.Add(@{Data = "Distribution"; Value = "Can't find"; }) > $Null
				$ScriptInformation.Add(@{Data = "Provider"; Value = $TemplateProviderName; }) > $Null
				$ScriptInformation.Add(@{Data = "Provider type"; Value = $TemplateProviderType; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $RDSTemplate.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $RDSTemplate.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $RDSTemplate.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $RDSTemplate.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "ID"; Value = $RDSTemplate.Id.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "Name: " $RDSTemplate.Name
				#Line 2 "Status`t`t`t: " "Can't find"
				Line 2 "Power state`t`t: " $TemplatePowerState
				#Line 2 "Agent status`t`t: " "Can't find"
				#Line 2 "Distribution`t`t: " "Can't find"
				Line 2 "Provider`t`t: " $TemplateProviderName
				Line 2 "Provider type`t`t: " $TemplateProviderType
				Line 2 "Last modification by`t: " $RDSTemplate.AdminLastMod
				Line 2 "Modified on`t`t: " $RDSTemplate.TimeLastMod.ToString()
				Line 2 "Created by`t`t: " $RDSTemplate.AdminCreate
				Line 2 "Created on`t`t: " $RDSTemplate.TimeCreate.ToString()
				Line 2 "ID`t`t`t: " $RDSTemplate.Id.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$RDSTemplate.Name,$htmlwhite)
				#$rowdata += @(,("Status",($Script:htmlsb),"Can't find",$htmlwhite))
				$rowdata += @(,("Power state",($Script:htmlsb),$TemplatePowerState,$htmlwhite))
				#$rowdata += @(,("Agent status",($Script:htmlsb),"Can't find",$htmlwhite))
				#$rowdata += @(,("Distribution",($Script:htmlsb),"Can't find",$htmlwhite))
				$rowdata += @(,("Provider",($Script:htmlsb),$TemplateProviderName,$htmlwhite))
				$rowdata += @(,("Provider type",($Script:htmlsb),$TemplateProviderType,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $RDSTemplate.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $RDSTemplate.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $RDSTemplate.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $RDSTemplate.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Id",($Script:htmlsb),$RDSTemplate.Id.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			#General
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 2 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			Switch($RDSTemplate.UnusedVMDurationMins)
			{
				0		{$DeleteVMTime = "Never"; Break}
				5		{$DeleteVMTime = "5 minutes"; Break}
				30		{$DeleteVMTime = "30 minutes"; Break}
				60		{$DeleteVMTime = "1 hour"; Break}
				1440	{$DeleteVMTime = "1 day"; Break}
				10080	{$DeleteVMTime = "1 week"; Break}
				43200	{$DeleteVMTime = "30 days"; Break}
				Default	{$DeleteVMTime = "Unable to determine Delete unused guest VMs after: $($RDSTemplate.UnusedVMDurationMins)"; Break}
			}
			
			Switch($RDSTemplate.CloneMethod)
			{
				"LinkedClone"	{$CloneMethod = "Create a linked clone"; Break}
				"FullClone"		{$CloneMethod = "Create a full clone"; Break}
				Default			{$CloneMethod = "Unable to determine Clone method: $($RDSTemplate.CloneMethod)"; Break}
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Template name"; Value = $RDSTemplate.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Maximum guest VMs"; Value = $RDSTemplate.MaxVMs.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Keep available buffer"; Value = $RDSTemplate.PreCreatedVMs.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Guest VM name"; Value = $RDSTemplate.VMNameFormat; }) > $Null
				$ScriptInformation.Add(@{Data = "Guest VM state after the preparation"; Value = "Can't find"; }) > $Null
				$ScriptInformation.Add(@{Data = "Delete unused guest VMs after"; Value = $DeleteVMTime; }) > $Null
				$ScriptInformation.Add(@{Data = "Clone method"; Value = $CloneMethod; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Template name`t`t`t`t`t: " $RDSTemplate.Name
				Line 3 "Maximum guest VMs`t`t`t`t: " $RDSTemplate.MaxVMs.ToString()
				Line 3 "Keep available buffer`t`t`t`t: " $RDSTemplate.PreCreatedVMs.ToString()
				Line 3 "Guest VM name`t`t`t`t`t: " $RDSTemplate.VMNameFormat
				Line 3 "Guest VM state after the preparation`t: " "Can't find"
				Line 3 "Delete unused guest VMs after`t`t`t: " $DeleteVMTime
				Line 3 "Clone method`t`t`t`t`t: " $CloneMethod
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Template name",($Script:htmlsb),$RDSTemplate.Name,$htmlwhite)
				$rowdata += @(,("Maximum guest VMs",($Script:htmlsb),$RDSTemplate.MaxVMs.ToString(),$htmlwhite))
				$rowdata += @(,("Keep available buffer",($Script:htmlsb),$RDSTemplate.PreCreatedVMs.ToString(),$htmlwhite))
				$rowdata += @(,("Guest VM name",($Script:htmlsb),$RDSTemplate.VMNameFormat,$htmlwhite))
				$rowdata += @(,("Guest VM state after the preparation",($Script:htmlsb),"Can't find",$htmlwhite))
				$rowdata += @(,("Delete unused guest VMs after",($Script:htmlsb),$DeleteVMTime,$htmlwhite))
				$rowdata += @(,("Clone method",($Script:htmlsb),$CloneMethod,$htmlwhite))

				$msg = "General"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			#Advanced
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Advanced"
			}
			If($Text)
			{
				Line 2 "Advanced"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Folder"; Value = $RDSTemplate.FolderName; }) > $Null
				$ScriptInformation.Add(@{Data = "Resource pool"; Value = $RDSTemplate.NativePoolName; }) > $Null
				$ScriptInformation.Add(@{Data = "Physical Host"; Value = $RDSTemplate.PhysicalHostName; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable hardware acceleration graphics licensing support"; Value = $RDSTemplate.HWGPU.ToString(); }) > $Null
				#$ScriptInformation.Add(@{Data = "Use a separate network interface for LAN access"; Value = "Can't find"; }) > $Null
				#$ScriptInformation.Add(@{Data = "Specify management network details"; Value = ""; }) > $Null
				#$ScriptInformation.Add(@{Data = "     Address"; Value = ""; }) > $Null
				#$ScriptInformation.Add(@{Data = "     Subnet mask"; Value = ""; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Folder`t`t`t`t: " $RDSTemplate.FolderName
				Line 3 "Resource pool`t`t`t: " $RDSTemplate.NativePoolName
				Line 3 "Physical Host`t`t`t: " $RDSTemplate.PhysicalHostName
				Line 3 "Enable hardware acceleration "
				Line 3 "graphics licensing support`t: " $RDSTemplate.HWGPU.ToString()
				#Line 3 "Use a separate network interface for LAN access: " "Can't find"
				#Line 3 "Specify management network details:"
				#Line 4 "Address`t`t`t: " $DeleteVMTime
				#Line 4 "Subnet mask`t`t: " $CloneMethod
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Folder",($Script:htmlsb),$RDSTemplate.FolderName,$htmlwhite)
				$rowdata += @(,("Resource pool",($Script:htmlsb),$RDSTemplate.NativePoolName,$htmlwhite))
				$rowdata += @(,("Physical Host",($Script:htmlsb),$RDSTemplate.PhysicalHostName,$htmlwhite))
				$rowdata += @(,("Enable hardware acceleration graphics licensing support",($Script:htmlsb),$RDSTemplate.HWGPU.ToString(),$htmlwhite))
				#$rowdata += @(,("Use a separate network interface for LAN access",($Script:htmlsb),"Can't find",$htmlwhite))
				#$rowdata += @(,("Specify management network details",($Script:htmlsb),"",$htmlwhite))
				#$rowdata += @(,("     Address",($Script:htmlsb),"",$htmlwhite))
				#$rowdata += @(,("     Subnet mask",($Script:htmlsb),"",$htmlwhite))

				$msg = "Advanced"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			#Preparation
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Preparation"
			}
			If($Text)
			{
				Line 2 "Preparation"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Image preparation tool"; Value = $RDSTemplate.ImagePrepTool.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Computer name"; Value = $RDSTemplate.ComputerName; }) > $Null
				$ScriptInformation.Add(@{Data = "Owner name"; Value = $RDSTemplate.OwnerName; }) > $Null
				$ScriptInformation.Add(@{Data = "Organization"; Value = $RDSTemplate.Organization; }) > $Null
				$ScriptInformation.Add(@{Data = "Active Directory domain"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Domain"; Value = $RDSTemplate.Domain; }) > $Null
				$ScriptInformation.Add(@{Data = "     Administrator"; Value = $RDSTemplate.Administrator; }) > $Null
				$ScriptInformation.Add(@{Data = "     Target OU"; Value = $RDSTemplate.DomainOrgUnit; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Image preparation tool`t: " $RDSTemplate.ImagePrepTool.ToString()
				Line 3 "Computer name`t`t: " $RDSTemplate.ComputerName
				Line 3 "Owner name`t`t: " $RDSTemplate.OwnerName
				Line 3 "Organization`t`t: " $RDSTemplate.Organization
				Line 3 "Active Directory domain"
				Line 4 "Domain`t`t: " $RDSTemplate.Domain
				Line 4 "Administrator`t: " $RDSTemplate.Administrator
				Line 4 "Target OU`t: " $RDSTemplate.DomainOrgUnit
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Image preparation tool",($Script:htmlsb),$RDSTemplate.ImagePrepTool.ToString(),$htmlwhite)
				$rowdata += @(,("Computer name",($Script:htmlsb),$RDSTemplate.ComputerName,$htmlwhite))
				$rowdata += @(,("Owner name",($Script:htmlsb),$RDSTemplate.OwnerName,$htmlwhite))
				$rowdata += @(,("Organization",($Script:htmlsb),$RDSTemplate.Organization,$htmlwhite))
				$rowdata += @(,("Active Directory domain",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Domain",($Script:htmlsb),$RDSTemplate.Domain,$htmlwhite))
				$rowdata += @(,("     Administrator",($Script:htmlsb),$RDSTemplate.Administrator,$htmlwhite))
				$rowdata += @(,("     Target OU",($Script:htmlsb),$RDSTemplate.DomainOrgUnit,$htmlwhite))

				$msg = "Preparation"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			#Optimization
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Optimization"
			}
			If($Text)
			{
				Line 2 "Optimization"
			}
			If($HTML)
			{
				#Nothing
			}

			If($RDSTemplate.InheritDefaultOptimizationSettings)
			{
				#do we inherit site defaults?
				#http://woshub.com/hot-to-convert-sid-to-username-and-vice-versa/
				#for translating the User SID to the AD user name
				#yes we do, get the default settings for the Site
				#use the Site default settings
				$RDSDefaults = Get-RASRDSDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $RDSDefaults)
				{
					$OPTEnableOptimization            = $RDSDefaults.Optimization.EnableOptimization.ToString()
					$OPTOptimizationType              = $RDSDefaults.Optimization.OptimizationType.ToString()
					$OPTWindowsDefenderATPEnabled     = $RDSDefaults.Optimization.WindowsDefenderATPEnabled.ToString()    
					$OPTWindowsComponentsEnabled      = $RDSDefaults.Optimization.WindowsComponentsEnabled.ToString()
					$OPTWindowsServicesEnabled        = $RDSDefaults.Optimization.WindowsServicesEnabled.ToString()
					$OPTWinodwsScheduledTasksEnabled  = $RDSDefaults.Optimization.WindowsScheduledTasksEnabled.ToString()
					$OPTWindowsAdvancedOptionsEnabled = $RDSDefaults.Optimization.WindowsAdvancedOptionsEnabled.ToString()
					$OPTNetworkPerformanceEnabled     = $RDSDefaults.Optimization.NetworkPerformanceEnabled.ToString()
					$OPTRegistryEnabled               = $RDSDefaults.Optimization.RegistryEnabled.ToString()
					$OPTVisualEffectsEnabled          = $RDSDefaults.Optimization.VisualEffectsEnabled.ToString()   
					$OPTDiskCleanupEnabled            = $RDSDefaults.Optimization.DiskCleanupEnabled.ToString()
					$OPTCustomScriptEnabled           = $RDSDefaults.Optimization.CustomScriptEnabled.ToString()
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$OPTEnableOptimization            = "False"
					$OPTOptimizationType              = ""
					$OPTWindowsDefenderATPEnabled     = "False"
					$OPTWindowsComponentsEnabled      = "False"
					$OPTWindowsServicesEnabled        = "False"
					$OPTWinodwsScheduledTasksEnabled  = "False"
					$OPTWindowsAdvancedOptionsEnabled = "False"
					$OPTNetworkPerformanceEnabled     = "False"
					$OPTRegistryEnabled               = "False"
					$OPTVisualEffectsEnabled          = "False"
					$OPTDiskCleanupEnabled            = "False"
					$OPTCustomScriptEnabled           = "False"
				}
			}
			Else
			{
				#we don't inherit
				#get the settings for the template
				
				$OPTEnableOptimization            = $RDSTemplate.Optimization.EnableOptimization.ToString()
				$OPTOptimizationType              = $RDSTemplate.Optimization.OptimizationType.ToString()
				$OPTWindowsDefenderATPEnabled     = $RDSTemplate.Optimization.WindowsDefenderATPEnabled.ToString()    
				$OPTWindowsComponentsEnabled      = $RDSTemplate.Optimization.WindowsComponentsEnabled.ToString()
				$OPTWindowsServicesEnabled        = $RDSTemplate.Optimization.WindowsServicesEnabled.ToString()
				$OPTWinodwsScheduledTasksEnabled  = $RDSTemplate.Optimization.WindowsScheduledTasksEnabled.ToString()
				$OPTWindowsAdvancedOptionsEnabled = $RDSTemplate.Optimization.WindowsAdvancedOptionsEnabled.ToString()
				$OPTNetworkPerformanceEnabled     = $RDSTemplate.Optimization.NetworkPerformanceEnabled.ToString()
				$OPTRegistryEnabled               = $RDSTemplate.Optimization.RegistryEnabled.ToString()
				$OPTVisualEffectsEnabled          = $RDSTemplate.Optimization.VisualEffectsEnabled.ToString()   
				$OPTDiskCleanupEnabled            = $RDSTemplate.Optimization.DiskCleanupEnabled.ToString()
				$OPTCustomScriptEnabled           = $RDSTemplate.Optimization.CustomScriptEnabled.ToString()
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $RDSTemplate.InheritDefaultUserProfileSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Enable optimization"; Value = $OPTEnableOptimization; }) > $Null
				$ScriptInformation.Add(@{Data = "Optimization type"; Value = $OPTOptimizationType; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				#SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 5 0 "Windows Defender ATP:" $OPTWindowsDefenderATPEnabled
				If($OPTWindowsDefenderATPEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Defender ATP Optimizations"; Value = ""; }) > $Null

					If($RDSTemplate.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
					{
						$ScriptInformation.Add(@{Data = "     Turn off Windows Defender ATP (I use my own ATP solution)"; Value = ""; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "     Turn on Windows Defender ATP and set process and folder exclusions"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "     Disable real-time protection"; Value = $RDSTemplate.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString(); }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						
						$cnt = -1
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeFolders)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude files and folders"; Value = $item; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
							}
						}

						$cnt = -1
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeProcesses)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude processes"; Value = $item; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
							}
						}
						
						$cnt = -1
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeExtension)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Exclude extensions"; Value = $item; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
							}
						}
					}

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 250;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}

				WriteWordLine 5 0 "Windows Components:" $OPTWindowsComponentsEnabled
				If($OPTWindowsComponentsEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Components Optimizations"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "Disable (remove) components:"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					ForEach($item in $RDSTemplate.Optimization.WindowsComponents.WindowsComponentsList)
					{
							If($Null -eq $item.DisplayName)
							{
								$DisplayName = ""
							}
							Else
							{
								$DisplayName = $item.DisplayName
							}
							If($Null -eq $item.ComponentName)
							{
								$ComponentName = ""
							}
							Else
							{
								$ComponentName = $item.ComponentName
							}
						$OptimizationTable += @{
							DisplayName = $DisplayName
							ComponentName = $ComponentName
						}
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns DisplayName, ComponentName `
						-Headers "Display name", "Component" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 200;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}

				WriteWordLine 5 0 "Windows Services: " $OPTWindowsServicesEnabled       
				If($OPTWindowsServicesEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Services Optimizations"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "Disable services:"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					ForEach($item in $RDSTemplate.Optimization.WindowsServices.WindowsServicesList)
					{
							If($Null -eq $item.DisplayName)
							{
								$DisplayName = ""
							}
							Else
							{
								$DisplayName = $item.DisplayName
							}
							If($Null -eq $item.ServiceName)
							{
								$Service = ""
							}
							Else
							{
								$Service = $item.ServiceName
							}
							If($Null -eq $item.Aliases)
							{
								$Aliases = ""
							}
							Else
							{
								$Aliases = $item.Aliases
							}
						$OptimizationTable += @{
							DisplayName = $DisplayName
							Service     = $Service
							Aliases     = $Aliases
						}
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns DisplayName, Service, Aliases `
						-Headers "Display name", "Service", "Aliases" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 100;
						$Table.Columns.Item(3).Width = 50;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				
				WriteWordLine 5 0 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled 
				If($OPTWinodwsScheduledTasksEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Scheduled Tasks Optimizations"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "Disable tasks:"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					ForEach($item in $RDSTemplate.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
					{
							If($Null -eq $item.Task)
							{
								$Task = ""
							}
							Else
							{
								$Task = $item.Task
							}
							If($Null -eq $item.Type)
							{
								$Type = ""
							}
							Else
							{
								$Type = $item.Type.ToString()
							}
							If($Null -eq $item.Location)
							{
								$Location = ""
							}
							Else
							{
								$Location = $item.Location
							}
						$OptimizationTable += @{
							Task     = $Task
							Type     = $Type
							Location = $Location
						}
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Task, Type, Location `
						-Headers "Task", "Type", "Location" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 50;
						$Table.Columns.Item(3).Width = 250;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				
				WriteWordLine 5 0 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
				If($OPTWindowsAdvancedOptionsEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Windows Advanced Options"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					$OptimizationTable += @{
						Setting = "Disable Hibernate"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.Hibernate.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable Telemetry collection"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.TeleCollection.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable System Restore"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.SystemRestore.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable error reporting to send additional data"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable Tiles"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.Tiles.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable Cortana digital assistant"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.Cortana.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Turn off Microsoft consumer experience"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Do not show Windows tips"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.WindowsTips.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Remove Common program groups from the Start Menu"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Partial Start Menu layout"
						Enabled = $RDSTemplate.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString()
						Value   = $RDSTemplate.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Setting, Enabled, Value `
						-Headers "Setting", "Enabled", "Value" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 275;
						$Table.Columns.Item(2).Width = 50;
						$Table.Columns.Item(3).Width = 175;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				
				WriteWordLine 5 0 "Network performance: " $OPTNetworkPerformanceEnabled
				If($OPTNetworkPerformanceEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Network Performance Optimizations"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					$OptimizationTable += @{
						Setting = "FileInfoCacheEntriesMax"
						Enabled = $RDSTemplate.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString()
						Value   = $RDSTemplate.Optimization.NetworkPerformance.FileInfoCache
					}

					$OptimizationTable += @{
						Setting = "DirectoryCacheEntriesMax"
						Enabled = $RDSTemplate.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString()
						Value   = $RDSTemplate.Optimization.NetworkPerformance.DirCacheMax
					}

					$OptimizationTable += @{
						Setting = "FileNotFoundCacheEntriesMax"
						Enabled = $RDSTemplate.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString()
						Value   = $RDSTemplate.Optimization.NetworkPerformance.FileNotFoundCache
					}

					$OptimizationTable += @{
						Setting = "DormantFileLimit"
						Enabled = $RDSTemplate.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString()
						Value   = $RDSTemplate.Optimization.NetworkPerformance.DormantFileLimit
					}

					$OptimizationTable += @{
						Setting = "Disable TCP/IP Task Offload"
						Enabled = $RDSTemplate.Optimization.NetworkPerformance.DisableTCP.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable IPv6 Components"
						Enabled = $RDSTemplate.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disable IPv6 to IPv4"
						Enabled = $RDSTemplate.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString()
						Value   = ""
					}

					$OptimizationTable += @{
						Setting = "Disables isatap for IPv6"
						Enabled = $RDSTemplate.Optimization.NetworkPerformance.DisableIsaTap.ToString()
						Value   = ""
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Setting, Enabled, Value `
						-Headers "Setting", "Enabled", "Value" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 150;
						$Table.Columns.Item(2).Width = 50;
						$Table.Columns.Item(3).Width = 50;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}

				WriteWordLine 5 0 "Registry: " $OPTRegistryEnabled
				If($OPTRegistryEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Registry Optimizations"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null

					ForEach($item in $RDSTemplate.Optimization.Registry.RegistryList)
					{
						If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
						{
							$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
							$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
							$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
							$ScriptInformation.Add(@{Data = "Type"; Value = $item.RegType.ToString(); }) > $Null
							$ScriptInformation.Add(@{Data = "Data"; Value = $item.StringValue; }) > $Null
							$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						}
						ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
						{
							$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
							$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
							$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
							$ScriptInformation.Add(@{Data = "Type"; Value = $item.RegType.ToString(); }) > $Null
							$ScriptInformation.Add(@{Data = "Data"; Value = $item.DWORDValue; }) > $Null
							$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						}
						ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
						{
							$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
							$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
							$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
							$ScriptInformation.Add(@{Data = "Type"; Value = $item.RegType.ToString(); }) > $Null
							$cnt = -1
							$TmpArray = $item.StringValue.Split("`r")
							ForEach($SubItem in $TmpArray)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "Type"; Value = $SubItem; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = $SubItem; }) > $Null
								}
							}
							$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						}
					}

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 125;
					$Table.Columns.Item(2).Width = 375;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				
				WriteWordLine 5 0 "Visual Effects: " $OPTVisualEffectsEnabled
				If($OPTVisualEffectsEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Visual Effects Optimizations"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					$OptimizationTable += @{
						Setting = "Animate controls and elements inside windows"
						Enabled = $RDSTemplate.Optimization.VisualEffects.AnimateControlSelectElements.ToString()
					}

					$OptimizationTable += @{
						Setting = "Animate windows when minimizing and maximizing"
						Enabled = $RDSTemplate.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString()
					}

					$OptimizationTable += @{
						Setting = "Animations in the taskbar"
						Enabled = $RDSTemplate.Optimization.VisualEffects.AnimateTaskbar.ToString()
					}

					$OptimizationTable += @{
						Setting = "Enable Peek"
						Enabled = $RDSTemplate.Optimization.VisualEffects.EnablePeek.ToString()
					}

					$OptimizationTable += @{
						Setting = "Fade or slide menus into view"
						Enabled = $RDSTemplate.Optimization.VisualEffects.FadeSlideMenus.ToString()
					}

					$OptimizationTable += @{
						Setting = "Fade or slide Tooltips into view"
						Enabled = $RDSTemplate.Optimization.VisualEffects.FadeSlideToolTips.ToString()
					}

					$OptimizationTable += @{
						Setting = "Fade out menu items after clicking"
						Enabled = $RDSTemplate.Optimization.VisualEffects.FadeOutMenuItems.ToString()
					}

					$OptimizationTable += @{
						Setting = "Save taskbar thumbnail previews"
						Enabled = $RDSTemplate.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show shadows under mouse pointer"
						Enabled = $RDSTemplate.Optimization.VisualEffects.ShowShadowUnderMouse.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show shadows under windows"
						Enabled = $RDSTemplate.Optimization.VisualEffects.ShadowUnderWindows.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show thumbnails instead of icons"
						Enabled = $RDSTemplate.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show translucent selection rectangle"
						Enabled = $RDSTemplate.Optimization.VisualEffects.ShowTranslucentSelection.ToString()
					}

					$OptimizationTable += @{
						Setting = "Show window contents while dragging"
						Enabled = $RDSTemplate.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString()
					}

					$OptimizationTable += @{
						Setting = "Slide open combo boxes"
						Enabled = $RDSTemplate.Optimization.VisualEffects.SlideOpenComboBoxes.ToString()
					}

					$OptimizationTable += @{
						Setting = "Smooth edges of screen fonts"
						Enabled = $RDSTemplate.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString()
					}

					$OptimizationTable += @{
						Setting = "Smooth-scroll list boxes"
						Enabled = $RDSTemplate.Optimization.VisualEffects.SmoothScrollListBoxes.ToString()
					}

					$OptimizationTable += @{
						Setting = "Use drop shadows for icon labels on the desktop"
						Enabled = $RDSTemplate.Optimization.VisualEffects.DropShadowsIcon.ToString()
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Setting, Enabled `
						-Headers "Setting", "Enabled" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 250;
						$Table.Columns.Item(2).Width = 50;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				
				WriteWordLine 5 0 "Disk cleanup: " $OPTDiskCleanupEnabled
				If($OPTDiskCleanupEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Disk Cleanup Optimizations"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					$ScriptInformation = New-Object System.Collections.ArrayList
					$OptimizationTable = @()
		
					$OptimizationTable += @{
						Setting = "Clean up redundant system files"
						Enabled = $RDSTemplate.Optimization.DiskCleanup.CleanupSystemFiles.ToString()
					}

					$OptimizationTable += @{
						Setting = "Clean up the WinSxS Folder"
						Enabled = $RDSTemplate.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString()
					}

					$OptimizationTable += @{
						Setting = "Clean up temporary files and logs"
						Enabled = $RDSTemplate.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString()
					}

					$OptimizationTable += @{
						Setting = "Remove OneDrive"
						Enabled = $RDSTemplate.Optimization.DiskCleanup.RemoveOneDrive.ToString()
					}

					$OptimizationTable += @{
						Setting = "Delete users' profiles"
						Enabled = $RDSTemplate.Optimization.DiskCleanup.DeleteUserProfiles.ToString()
					}

					If($OptimizationTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $OptimizationTable `
						-Columns Setting, Enabled `
						-Headers "Setting", "Enabled" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 175;
						$Table.Columns.Item(2).Width = 50;
						
						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}

				WriteWordLine 5 0 "Custom script: " $OPTCustomScriptEnabled
				If($OPTCustomScriptEnabled -eq "True")
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Custom Script"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Command"; Value = $RDSTemplate.Optimization.CustomScript.Command; }) > $Null
					$ScriptInformation.Add(@{Data = "     Arguments"; Value = $RDSTemplate.Optimization.CustomScript.Arguments; }) > $Null
					$ScriptInformation.Add(@{Data = "     Initial directory"; Value = $RDSTemplate.Optimization.CustomScript.InitDir; }) > $Null
					$ScriptInformation.Add(@{Data = "     Username"; Value = $RDSTemplate.Optimization.CustomScript.User; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 100;
					$Table.Columns.Item(2).Width = 200;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t: " $RDSTemplate.InheritDefaultOptimizationSettings.ToString()
				Line 3 "Enable optimization`t`t: " $OPTEnableOptimization
				Line 3 "Optimization type`t`t: " $OPTOptimizationType
				Line 3 "Category"
				
				Line 4 "Windows Defender ATP: " $OPTWindowsDefenderATPEnabled
				If($OPTWindowsDefenderATPEnabled -eq "True")
				{
					Line 5 "Windows Defender ATP Optimizations"
					If($RDSTemplate.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
					{
						Line 6 "Turn off Windows Defender ATP (I use my own ATP solution)"
					}
					Else
					{
						Line 6 "Turn on Windows Defender ATP and set process and folder exclusions"
						Line 6 "Disable real-time protection: " $RDSTemplate.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString()
						Line 0 ""
						Line 6 "Exclude files and folders:"
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeFolders)
						{
							Line 7 $item
						}

						Line 6 "Exclude processes:"
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeProcesses)
						{
							Line 7 $item
						}
						
						Line 6 "Exclude extensions:"
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeExtension)
						{
							Line 7 $item
						}
					}
					
					Line 0 ""
				}
				
				Line 4 "Windows Components: " $OPTWindowsComponentsEnabled
				If($OPTWindowsComponentsEnabled -eq "True")
				{
					Line 5 "Windows Components Optimizations"
					Line 6 "Disable (remove) components:"
					Line 0 ""
					Line 6 "Display name                                        Component                                         "
					Line 6 "======================================================================================================"
					#		12345678901234567890123456789012345678901234567890SS12345678901234567890123456789012345678901234567890
					#		Printing-XPSServices-Features                       SMB 1.0/CIFS File sharing support component
					ForEach($item in $RDSTemplate.Optimization.WindowsComponents.WindowsComponentsList)
					{
						Line 6 ( "{0,-50}  {1,-50}" -f $item.DisplayName, $item.ComponentName)
					}
					Line 0 ""
				}
				
				Line 4 "Windows Services: " $OPTWindowsServicesEnabled       
				If($OPTWindowsServicesEnabled -eq "True")
				{
					Line 5 "Windows Services Optimizations"
					Line 6 "Disable services:"
					Line 0 ""
					Line 6 "Display name                                        Service                         Aliases             "
					Line 6 "========================================================================================================"
					#		12345678901234567890123456789012345678901234567890SS123456789012345678901234567890SS12345678901234567890
					#		Windows Media Player Network Sharing Service        TabletInputService              Superfecth
					ForEach($item in $RDSTemplate.Optimization.WindowsServices.WindowsServicesList)
					{
						Line 6 ( "{0,-50}  {1,-30}  {2,-20}" -f $item.DisplayName, $item.ServiceName, $item.Aliases)
					}
					Line 0 ""
				}
				
				Line 4 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled 
				If($OPTWinodwsScheduledTasksEnabled -eq "True")
				{
					Line 5 "Windows Scheduled Tasks Optimizations"
					Line 6 "Disable tasks:"
					Line 0 ""
					Line 6 "Task                                                Type    Location                                          "
					Line 6 "=============================================================================================================="
					#		12345678901234567890123456789012345678901234567890SS123456SS12345678901234567890123456789012345678901234567890
					#		MNO Metadata Parser                                 Folder  \Microsoft\Windows\Mobile Broadband Accounts\
					ForEach($item in $RDSTemplate.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
					{
						Line 6 ( "{0,-50}  {1,-6}  {2,-50}" -f $item.Task, $item.Type.ToString(), $item.Location)
					}
					Line 0 ""
				}

				Line 4 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
				If($OPTWindowsAdvancedOptionsEnabled -eq "True")
				{
					Line 5 "Windows Advanced Options"
					Line 0 ""
					Line 6 "Setting                                           Enabled  Value                                             "
					Line 6 "============================================================================================================="
					#		123456789012345678901234567890123456789012345678SS1234567SS12345678901234567890123456789012345678901234567890
					#		Remove Common program groups from the start menu  False    SomeConfigFile.xml
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable Hibernate", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.Hibernate.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable Telemetry collection", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.TeleCollection.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable System Restore", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.SystemRestore.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable error reporting to send additional data", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable Tiles", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.Tiles.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Disable Cortana digital assistant", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.Cortana.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Turn off Microsoft consumer experience", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Do not show Windows tips", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.WindowsTips.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Remove Common program groups from the Start Menu", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString(), `
					"")
					
					Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
					"Partial Start Menu layout", `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString(), `
					$RDSTemplate.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent)
					
					Line 0 ""
				}

				Line 4 "Network performance: " $OPTNetworkPerformanceEnabled
				If($OPTNetworkPerformanceEnabled -eq "True")
				{
					Line 5 "Network Performance Optimizations"
					Line 0 ""
					Line 6 "Setting                      Enabled  Value"
					Line 6 "==========================================="
					#		123456789012345678901234567SS1234567SS12345
					#		FileNotFoundCacheEntriesMax  False    32768
					Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"FileInfoCacheEntriesMax", `
					$RDSTemplate.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString(), `
					$RDSTemplate.Optimization.NetworkPerformance.FileInfoCache)
					
					Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"DirectoryCacheEntriesMax", `
					$RDSTemplate.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString(), `
					$RDSTemplate.Optimization.NetworkPerformance.DirCacheMax)
					
					Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"FileNotFoundCacheEntriesMax", `
					$RDSTemplate.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString(), `
					$RDSTemplate.Optimization.NetworkPerformance.FileNotFoundCache)
					
					Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"DormantFileLimit", `
					$RDSTemplate.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString(), `
					$RDSTemplate.Optimization.NetworkPerformance.DormantFileLimit)
					
					Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"Disable TCP/IP Task Offload", `
					$RDSTemplate.Optimization.NetworkPerformance.DisableTCP.ToString(), `
					"")
					
					Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"Disable IPv6 Components", `
					$RDSTemplate.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString(), `
					"")
					
					Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"Disable IPv6 to IPv4", `
					$RDSTemplate.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString(), `
					"")
					
					Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
					"Disables isatap for IPv6", `
					$RDSTemplate.Optimization.NetworkPerformance.DisableIsaTap.ToString(), `
					"")
					
					Line 0 ""
				}

				Line 4 "Registry: " $OPTRegistryEnabled
				If($OPTRegistryEnabled -eq "True")
				{
					Line 5 "Registry Optimizations"
					Line 0 ""
					#		123456789012345678901234567SS1234567SS12345
					#		FileNotFoundCacheEntriesMax  False    32768
					Line 6 "Registry                                  Action  Value                 Type           Data                  Path                                                        "
					Line 6 "========================================================================================================================================================================="
					#		1234567890123456789012345678901234567890SS123456SS12345678901234567890SS1234567890123SS12345678901234567890SS123456789012345678901234567890123456789012345678901234567890
					#		Increase service startup timeouts         Modify  99999999999999999999  REG_EXPAND_SZ  99999999999999999999  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Disk
					ForEach($item in $RDSHost.Optimization.Registry.RegistryList)
					{
						If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
						{
							Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
							$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.StringValue, "$($item.HiveType)\$($item.Path)")
						}
						ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
						{
							Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
							$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.DWORDValue, "$($item.HiveType)\$($item.Path)")
						}
						ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
						{
							#If($item.StringValue.Count -eq 1)
							#{
							#	Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
							#	$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.StringValue.ToString(), "$($item.HiveType)\$($item.Path)")
							#}
							#Else
							#{
								$cnt = -1
								$TmpArray = $item.StringValue.Split("`r")
								ForEach($SubItem in $TmpArray)
								{
									$cnt++
									
									If($cnt -eq 0)
									{
										Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
										$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $SubItem, "$($item.HiveType)\$($item.Path)")
									}
									Else
									{
										Line 17 "       " $SubItem
									}
								}
							#}
						}
					}
					Line 0 ""
				}

				Line 4 "Visual Effects: " $OPTVisualEffectsEnabled
				If($OPTVisualEffectsEnabled -eq "True")
				{
					Line 5 "Visual Effects Optimizations"
					Line 0 ""
					
					Switch ($RDSTemplate.Optimization.VisualEffects.VisualEffectsTypes)
					{
						"LetWindowsChooseWhatsBest"	{$VisualEffectsType = "Let Windows choose what's best"; Break}
						"AdjustForBestAppearnce"	{$VisualEffectsType = "Adjust for best appearance"; Break} #misspelled in the PoSH output and the docs
						"AdjustForBestPerformance"	{$VisualEffectsType = "Adjust for best performance"; Break}
						"Custom"					{$VisualEffectsType = "Custom"; Break}
						Default						{$VisualEffectsType = "Unable to determine Visual Effects Optimization type: $($RDSTemplate.Optimization.VisualEffects.VisualEffectsTypes)"; Break}
					}
					Line 6 $VisualEffectsType
					Line 0 ""
					Line 6 "Setting                                             Enabled"
					Line 6 "==========================================================="
					#		12345678901234567890123456789012345678901234567890SS1234567
					#		Use drop shadows for icon labels on the desktop     False  
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Animate controls and elements inside windows", `
					$RDSTemplate.Optimization.VisualEffects.AnimateControlSelectElements.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Animate windows when minimizing and maximizing", `
					$RDSTemplate.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Animations in the taskbar", `
					$RDSTemplate.Optimization.VisualEffects.AnimateTaskbar.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Enable Peek", `
					$RDSTemplate.Optimization.VisualEffects.EnablePeek.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Fade or slide menus into view", `
					$RDSTemplate.Optimization.VisualEffects.FadeSlideMenus.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Fade or slide Tooltips into view", `
					$RDSTemplate.Optimization.VisualEffects.FadeSlideToolTips.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Fade out menu items after clicking", `
					$RDSTemplate.Optimization.VisualEffects.FadeOutMenuItems.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Save taskbar thumbnail previews", `
					$RDSTemplate.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Show shadows under mouse pointer", `
					$RDSTemplate.Optimization.VisualEffects.ShowShadowUnderMouse.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Show shadows under windows", `
					$RDSTemplate.Optimization.VisualEffects.ShadowUnderWindows.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Show thumbnails instead of icons", `
					$RDSTemplate.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Show translucent selection rectangle", `
					$RDSTemplate.Optimization.VisualEffects.ShowTranslucentSelection.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Show window contents while dragging", `
					$RDSTemplate.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Slide open combo boxes", `
					$RDSTemplate.Optimization.VisualEffects.SlideOpenComboBoxes.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Smooth edges of screen fonts", `
					$RDSTemplate.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Smooth-scroll list boxes", `
					$RDSTemplate.Optimization.VisualEffects.SmoothScrollListBoxes.ToString())
					
					Line 6 ( "{0,-50}  {1,-7}" -f `
					"Use drop shadows for icon labels on the desktop", `
					$RDSTemplate.Optimization.VisualEffects.DropShadowsIcon.ToString())
					
					Line 0 ""
				}

				Line 4 "Disk cleanup: " $OPTDiskCleanupEnabled
				If($OPTDiskCleanupEnabled -eq "True")
				{
					Line 5 "Disk Cleanup Optimizations"
					Line 0 ""
					
					Line 6 "Setting                            Enabled"
					Line 6 "=========================================="
					#		123456789012345678901234567890123SS1234567
					#		Clean up temporary files and logs  False  
					Line 6 ( "{0,-33}  {1,-7}" -f `
					"Clean up redundant system files", `
					$RDSTemplate.Optimization.DiskCleanup.CleanupSystemFiles.ToString())
					
					Line 6 ( "{0,-33}  {1,-7}" -f `
					"Clean up the WinSxS Folder", `
					$RDSTemplate.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString())
					
					Line 6 ( "{0,-33}  {1,-7}" -f `
					"Clean up temporary files and logs", `
					$RDSTemplate.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString())
					
					Line 6 ( "{0,-33}  {1,-7}" -f `
					"Remove OneDrive", `
					$RDSTemplate.Optimization.DiskCleanup.RemoveOneDrive.ToString())
					
					Line 6 ( "{0,-33}  {1,-7}" -f `
					"Delete users' profiles", `
					$RDSTemplate.Optimization.DiskCleanup.DeleteUserProfiles.ToString())
					
					Line 0 ""
				}

				Line 4 "Custom script: " $OPTCustomScriptEnabled
				If($OPTCustomScriptEnabled  -eq "True")
				{
					Line 5 "Custom Script"
					Line 0 ""
					
					Line 6 "Command`t`t : " $RDSTemplate.Optimization.CustomScript.Command
					Line 6 "Arguments`t : " $RDSTemplate.Optimization.CustomScript.Arguments
					Line 6 "Initial directory: " $RDSTemplate.Optimization.CustomScript.InitDir
					Line 6 "Username`t : " $RDSTemplate.Optimization.CustomScript.User
					Line 0 ""
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings:",($Script:htmlsb),$RDSTemplate.InheritDefaultOptimizationSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Enable optimization:",($Script:htmlsb), $OPTEnableOptimization,$htmlwhite))
				$rowdata += @(,("Optimization type:",($Script:htmlsb), $OPTOptimizationType,$htmlwhite))

				$msg = "Optimization"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 4 0 "Windows Defender ATP: " $OPTWindowsDefenderATPEnabled
				If($OPTWindowsDefenderATPEnabled -eq "True")
				{
					$rowdata = @()
					$columnHeaders = @("Windows Defender ATP Optimizations",($Script:htmlsb),"",$htmlwhite)

					If($RDSTemplate.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
					{
						$rowdata += @(,("     Turn off Windows Defender ATP (I use my own ATP solution)",($Script:htmlsb), "",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("     Turn on Windows Defender ATP and set process and folder exclusions",($Script:htmlsb), "",$htmlwhite))
						$rowdata += @(,("     Disable real-time protection",($Script:htmlsb), $RDSTemplate.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString(),$htmlwhite))
						$rowdata += @(,("",($Script:htmlsb), "",$htmlwhite))
						
						$cnt = -1
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeFolders)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude files and folders",($Script:htmlsb), $item,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
							}
						}

						$cnt = -1
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeProcesses)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude processes",($Script:htmlsb), $item,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
							}
						}
						
						$cnt = -1
						ForEach($item in $RDSTemplate.Optimization.WindowsDefenderATP.ExcludeExtension)
						{
							$cnt++
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Exclude extensions",($Script:htmlsb), $item,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
							}
						}
					}


					$msg = ""
					$columnWidths = @("300","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Windows Components: " $OPTWindowsComponentsEnabled
				If($OPTWindowsComponentsEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Windows Components Optimizations"

					$rowdata = @()

					ForEach($item in $RDSTemplate.Optimization.WindowsComponents.WindowsComponentsList)
					{
						$rowdata += @(,(
							$item.DisplayName,$htmlwhite,
							$item.ComponentName,$htmlwhite)
						)
					}

					$columnHeaders = @(
						"Display Name",($Script:htmlsb),
						"Component",($Script:htmlsb)
					)

					$msg = "Disable (remove) components:"
					$columnWidths = @("200","200")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Windows Services: " $OPTWindowsServicesEnabled       
				If($OPTWindowsServicesEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Windows Services Optimizations"

					$rowdata = @()

					ForEach($item in $RDSTemplate.Optimization.WindowsServices.WindowsServicesList)
					{
						$rowdata += @(,(
							$item.DisplayName,$htmlwhite,
							$item.ServiceName,$htmlwhite,
							$item.Aliases,$htmlwhite)
						)
					}

					$columnHeaders = @(
						"Display Name",($Script:htmlsb),
						"Service",($Script:htmlsb),
						"Aliases",($Script:htmlsb)
					)

					$msg = "Disable services:"
					$columnWidths = @("200","100","50")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled
				If($OPTWinodwsScheduledTasksEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Windows Scheduled Tasks Optimizations"

					$rowdata = @()

					ForEach($item in $RDSTemplate.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
					{
						$rowdata += @(,(
							$item.Task,$htmlwhite,
							$item.Type.Tostring(),$htmlwhite,
							$item.Location,$htmlwhite)
						)
					}

					$columnHeaders = @(
						"Task",($Script:htmlsb),
						"Type",($Script:htmlsb),
						"Location",($Script:htmlsb)
					)

					$msg = "Disable tasks:"
					$columnWidths = @("200","50","250")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
				If($OPTWindowsAdvancedOptionsEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Windows Advanced Options"

					$rowdata = @()

					$rowdata += @(,(
						"Disable Hibernate",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.Hibernate.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable Telemetry collection",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.TeleCollection.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable System Restore",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.SystemRestore.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable error reporting to send additional data",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable Tiles",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.Tiles.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable Cortana digital assistant",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.Cortana.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Turn off Microsoft consumer experience",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Do not show Windows tips",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.WindowsTips.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Remove Common program groups from the Start Menu",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Partial Start Menu layout",$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString(),$htmlwhite,
						$RDSTemplate.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent,$htmlwhite)
					)

					$columnHeaders = @(
						"Setting",($Script:htmlsb),
						"Enabled",($Script:htmlsb),
						"Value",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("300","50","200")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Network performance: " $OPTNetworkPerformanceEnabled
				If($OPTWindowsAdvancedOptionsEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Network Performance Optimizations"

					$rowdata = @()

					$rowdata += @(,(
						"FileInfoCacheEntriesMax",$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString(),$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.FileInfoCache,$htmlwhite)
					)

					$rowdata += @(,(
						"DirectoryCacheEntriesMax",$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString(),$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.DirCacheMax,$htmlwhite)
					)

					$rowdata += @(,(
						"FileNotFoundCacheEntriesMax",$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString(),$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.FileNotFoundCache,$htmlwhite)
					)

					$rowdata += @(,(
						"DormantFileLimit",$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString(),$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.DormantFileLimit,$htmlwhite)
					)

					$rowdata += @(,(
						"Disable TCP/IP Task Offload",$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.DisableTCP.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable IPv6 Components",$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disable IPv6 to IPv4",$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$rowdata += @(,(
						"Disables isatap for IPv6",$htmlwhite,
						$RDSTemplate.Optimization.NetworkPerformance.DisableIsaTap.ToString(),$htmlwhite,
						"",$htmlwhite)
					)

					$columnHeaders = @(
						"Setting",($Script:htmlsb),
						"Enabled",($Script:htmlsb),
						"Value",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("170","50","50")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Registry: " $OPTRegistryEnabled       
				If($OPTRegistryEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Registry Optimizations"

					$rowdata = @()

					ForEach($item in $RDSTemplate.Optimization.Registry.RegistryList)
					{
						If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
						{
							$rowdata += @(,(
								$item.DisplayName,$htmlwhite,
								$item.Action,$htmlwhite,
								$item.RegistryName,$htmlwhite,
								$item.RegType.ToString(),$htmlwhite,
								$item.StringValue,$htmlwhite,
								"$($item.HiveType)\$($item.Path)",$htmlwhite)
							)
						}
						ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
						{
							$rowdata += @(,(
								$item.DisplayName,$htmlwhite,
								$item.Action,$htmlwhite,
								$item.RegistryName,$htmlwhite,
								$item.RegType.ToString(),$htmlwhite,
								$item.DWORDValue,$htmlwhite,
								"$($item.HiveType)\$($item.Path)",$htmlwhite)
							)
						}
						ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
						{
							$rowdata += @(,(
								$item.DisplayName,$htmlwhite,
								$item.Action,$htmlwhite,
								$item.RegistryName,$htmlwhite,
								$item.RegType.ToString(),$htmlwhite,
								$item.StringValue.ToString(),$htmlwhite,
								"$($item.HiveType)\$($item.Path)",$htmlwhite)
							)
						}
					}

					$columnHeaders = @(
						"Registry",($Script:htmlsb),
						"Action",($Script:htmlsb),
						"Value",($Script:htmlsb),
						"Type",($Script:htmlsb),
						"Data",($Script:htmlsb),
						"Path",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("200","50","100","100","100","200")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Visual Effects: " $OPTVisualEffectsEnabled
				If($OPTVisualEffectsEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Visual Effects Optimizations"

					$rowdata = @()

					$rowdata += @(,(
						"Animate controls and elements inside windows",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.AnimateControlSelectElements.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Animate windows when minimizing and maximizing",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Animations in the taskbar",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.AnimateTaskbar.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Enable Peek",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.EnablePeek.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Fade or slide menus into view",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.FadeSlideMenus.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Fade or slide Tooltips into view",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.FadeSlideToolTips.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Fade out menu items after clicking",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.FadeOutMenuItems.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Save taskbar thumbnail previews",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show shadows under mouse pointer",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.ShowShadowUnderMouse.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show shadows under windows",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.ShadowUnderWindows.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show thumbnails instead of icons",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show translucent selection rectangle",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.ShowTranslucentSelection.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Show window contents while dragging",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Slide open combo boxes",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.SlideOpenComboBoxes.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Smooth edges of screen fonts",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Smooth-scroll list boxes",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.SmoothScrollListBoxes.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Use drop shadows for icon labels on the desktop",$htmlwhite,
						$RDSTemplate.Optimization.VisualEffects.DropShadowsIcon.ToString(),$htmlwhite)
					)

					$columnHeaders = @(
						"Setting",($Script:htmlsb),
						"Enabled",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("275","50")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Disk cleanup: " $OPTDiskCleanupEnabled
				If($OPTDiskCleanupEnabled -eq "True")
				{
					WriteHTMLLine 0 0 "Disk Cleanup Optimizations"

					$rowdata = @()

					$rowdata += @(,(
						"Clean up redundant system files",$htmlwhite,
						$RDSTemplate.Optimization.DiskCleanup.CleanupSystemFiles.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Clean up the WinSxS Folder",$htmlwhite,
						$RDSTemplate.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Clean up temporary files and logs",$htmlwhite,
						$RDSTemplate.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Remove OneDrive",$htmlwhite,
						$RDSTemplate.Optimization.DiskCleanup.RemoveOneDrive.ToString(),$htmlwhite)
					)

					$rowdata += @(,(
						"Delete users' profiles",$htmlwhite,
						$RDSTemplate.Optimization.DiskCleanup.DeleteUserProfiles.ToString(),$htmlwhite)
					)

					$columnHeaders = @(
						"Setting",($Script:htmlsb),
						"Enabled",($Script:htmlsb)
					)

					$msg = ""
					$columnWidths = @("200","50")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				WriteHTMLLine 4 0 "Custom script: " $OPTCustomScriptEnabled
				If($OPTCustomScriptEnabled -eq "True")
				{
					$rowdata = @()
					$columnHeaders = @("Custom Script",($Script:htmlsb),"",$htmlwhite)
					$rowdata += @(,("     Command",($Script:htmlsb), $RDSTemplate.Optimization.CustomScript.Command,$htmlwhite))
					$rowdata += @(,("     Arguments",($Script:htmlsb), $RDSTemplate.Optimization.CustomScript.Arguments,$htmlwhite))
					$rowdata += @(,("     Initial directory",($Script:htmlsb), $RDSTemplate.Optimization.CustomScript.InitDir,$htmlwhite))
					$rowdata += @(,("     Username",($Script:htmlsb), $RDSTemplate.Optimization.CustomScript.User,$htmlwhite))

					$msg = ""
					$columnWidths = @("125","200")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}

			#License Keys
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "License Keys"
			}
			If($Text)
			{
				Line 2 "License Keys"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				
				If($RDSTemplate.LicenseKeyType.ToString() -eq "KMS")
				{
					$ScriptInformation.Add(@{Data = "License key management type"; Value = "Key Management Service (KMS)"; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "License key management type"; Value = "Multple Activation Key (MAK)"; }) > $Null
					
					$LicenseKeys = Get-RASVDITemplateLicenseKey -Id $RDSTemplate.Id -EA 0 4>$Null
					
					ForEach($Item in $LicenseKeys)
					{
						$ScriptInformation.Add(@{Data = "License Key"; Value = $Item.LicenseKey; }) > $Null
						$ScriptInformation.Add(@{Data = "Key Limit"; Value = $Item.KeyLimit; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				If($RDSTemplate.LicenseKeyType.ToString() -eq "KMS")
				{
					Line 3 "License key management type: " "Key Management Service (KMS)"
				}
				Else
				{
					Line 3 "License key management type: " "Multple Activation Key (MAK)"
					
					$LicenseKeys = Get-RASVDITemplateLicenseKey -Id $RDSTemplate.Id -EA 0 4>$Null

					ForEach($Item in $LicenseKeys)
					{
						Line 3 "License Key`t: " $Item.LicenseKey
						Line 3 "Key Limit`t: " $Item.KeyLimit
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				If($RDSTemplate.LicenseKeyType.ToString() -eq "KMS")
				{
					$columnHeaders = @("License key management type",($Script:htmlsb),"Key Management Service (KMS)",$htmlwhite)
				}
				Else
				{
					$columnHeaders = @("License key management type",($Script:htmlsb),"Multple Activation Key (MAK)",$htmlwhite)
					
					$LicenseKeys = Get-RASVDITemplateLicenseKey -Id $RDSTemplate.Id -EA 0 4>$Null

					$cnt = -1
					ForEach($Item in $LicenseKeys)
					{
						$rowdata += @(,("License Key",($Script:htmlsb),$Item.LicenseKey,$htmlwhite))
						$rowdata += @(,("Key Limit",($Script:htmlsb),$Item.KeyLimit,$htmlwhite))
					}
				}

				$msg = "License Keys"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}
	
	Write-Verbose "$(Get-Date -Format G): `tOutput RD Session Hosts Scheduler"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Scheduler"
	}
	If($Text)
	{
		Line 1 "Scheduler"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Scheduler"
	}

	$RDSSchedules = Get-RASRDSSchedule -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve RD Session Hosts Scheduler for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve RD Session Hosts Scheduler for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve RD Session Hosts Scheduler for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve RD Session Hosts Scheduler for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $RDSSchedules)
	{
		Write-Host "
	No RD Session Host Scheduler retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No RD Session Host Scheduler retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No RD Session Host Scheduler retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No RD Session Host Scheduler retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($RDSSchedule in $RDSSchedules)
		{
			$Action = $RDSSchedule.Action
			If($RDSSChedule.Action -eq "Reboot")
			{
				If($RDSSchedule.DrainMode)
				{
					$Action = "Reboot - Drain Mode"
				}
				Else
				{
					$Action = "Reboot"
				}
			}

			If($Action -eq "Reboot - Drain Mode")
			{
				If(validObject $RDSSchedule CompleteRebootInSecs)
				{
					Switch ($RDSSchedule.CompleteRebootInSecs)
					{
						600		{$TimeDuration = "10 minutes"; Break}
						900		{$TimeDuration = "15 minutes"; Break}
						1800	{$TimeDuration = "30 minutes"; Break}
						2700	{$TimeDuration = "45 minutes"; Break}
						3600	{$TimeDuration = "1 hour"; Break}
						7200	{$TimeDuration = "2 hours"; Break}
						10800	{$TimeDuration = "3 hours"; Break}
						Default	{$TimeDuration = "Unable to determine Complete in seconds: $($RDSSchedule.CompleteRebootInSecs)"; Break}
					}
				}
				Else
				{
					$TimeDuration = ""
				}
				
				If(validObject $RDSSchedule ForceRebootAfterSecs)
				{
					Switch ($RDSSchedule.ForceRebootAfterSecs)
					{
						900		{$ForceRebootTime = "15 minutes"; Break}
						1800	{$ForceRebootTime = "30 minutes"; Break}
						2700	{$ForceRebootTime = "45 minutes"; Break}
						3600	{$ForceRebootTime = "1 hour"; Break}
						7200	{$ForceRebootTime = "2 hours"; Break}
						10800	{$ForceRebootTime = "3 hours"; Break}
						21600	{$ForceRebootTime = "6 hours"; Break}
						43200	{$ForceRebootTime = "12 hours"; Break}
						86400	{$ForceRebootTime = "1 day"; Break}
						Default	{$ForceRebootTime = "Unable to determine Force reboot after seconds: $($RDSSchedule.ForceRebootAfterSecs)"; Break}
					}
				}
				Else
				{
					$ForceRebootTime = ""
				}
			}
			
			Switch ($RDSSchedule.Repeat)
			{
				Never			{$Repeat = "Never "; Break}
				EveryDay		{$Repeat = "Every day"; Break}
				EveryWeek		{$Repeat = "Every week"; Break}
				Every2Weeks		{$Repeat = "Every 2 weeks"; Break}
				EveryMonth		{$Repeat = "Every month"; Break}
				EveryYear		{$Repeat = "Every year"; Break}
				SpecificDays	{$Repeat = "Every $($RDSSchedule.SpecificDays)"; Break}
				Default			{$Repeat = "Unable to determine the Repeat: $($RDSSchedule.Repeat)"; Break}
			}
			
			$Target = @()
			If($RDSSchedule.TargetType -eq "Server")
			{
				ForEach($Item in $RDSSchedule.TargetIds)
				{
					$Result = Get-RASRDS -Id $Item -EA 0 4>$Null
					
					If($? -and $Null -ne $Result)
					{
						$Target += $Result.Server
					}
					Else
					{
						Target += "Unable to find RDS Server for ID $($Item)"
					}
				}
			}
			ElseIf($RDSSchedule.TargetType -eq "ServerGroup")
			{
				ForEach($Item in $RDSSchedule.TargetIds)
				{
					$Result = Get-RASRDSGroup -Id $Item -EA 0 4>$Null
					
					If($? -and $Null -ne $Result)
					{
						$Target += $Result.Name
					}
					Else
					{
						Target += "Unable to find RDS Server Group for ID $($Item)"
					}
				}
			}
			Else
			{
				Target += "Unable to determine Target for TargetType: $($RDSSchedule.TargetType)"
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Schedule Name $($RDSSchedule.Name)"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $RDSSchedule.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Action"; Value = $Action; }) > $Null
				
				$cnt=-1
				ForEach($Item in $Target)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Target"; Value = $Item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				
				$ScriptInformation.Add(@{Data = "Start"; Value = $RDSSchedule.StartDateTime; }) > $Null
				$ScriptInformation.Add(@{Data = "Repeat"; Value = $Repeat; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $RDSSchedule.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $RDSSchedule.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $RDSSchedule.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $RDSSchedule.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $RDSSchedule.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "ID"; Value = $RDSSchedule.Id.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "Name`t`t`t: " $RDSSchedule.Name
				Line 2 "Action`t`t`t: " $Action
				
				$cnt=-1
				ForEach($Item in $Target)
				{
					$cnt++
					If($cnt -eq 0)
					{
						Line 2 "Target`t`t`t: " $Item
					}
					Else
					{
						Line 6 "  " $Item
					}
				}
				
				Line 2 "Start`t`t`t: " $RDSSchedule.StartDateTime
				Line 2 "Repeat`t`t`t: " $Repeat
				Line 2 "Description`t`t: " $RDSSchedule.Description
				Line 2 "Last modification by`t: " $RDSSchedule.AdminLastMod
				Line 2 "Modified on`t`t: " $RDSSchedule.TimeLastMod.ToString()
				Line 2 "Created by`t`t: " $RDSSchedule.AdminCreate
				Line 2 "Created on`t`t: " $RDSSchedule.TimeCreate.ToString()
				Line 2 "ID`t`t`t: " $RDSSchedule.Id.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Schedule Name $($RDSSchedule.Name)"
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$RDSSchedule.Name,$htmlwhite)
				$rowdata += @(,("Action",($Script:htmlsb),$Action,$htmlwhite))
				
				$cnt=-1
				ForEach($Item in $Target)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$rowdata += @(,("Target",($Script:htmlsb),$Item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				
				$rowdata += @(,("Start",($Script:htmlsb),$RDSSchedule.StartDateTime,$htmlwhite))
				$rowdata += @(,("Repeat",($Script:htmlsb),$Repeat,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$RDSSchedule.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb),$RDSSchedule.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb),$RDSSchedule.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb),$RDSSchedule.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb),$RDSSchedule.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("ID",($Script:htmlsb),$RDSSchedule.Id.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			#Properties
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 2 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable Schedule"; Value = $RDSSchedule.Enabled.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Name"; Value = $RDSSchedule.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Action"; Value = $Action; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $RDSSchedule.Description; }) > $Null
				
				$cnt=-1
				ForEach($Item in $Target)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Target"; Value = $Item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Enable Schedule`t`t`t: " $RDSSchedule.Enabled.ToString()
				Line 3 "Name`t`t`t`t: " $RDSSchedule.Name
				Line 3 "Action`t`t`t`t: " $Action
				Line 3 "Description`t`t`t: " $RDSSchedule.Description
				
				$cnt=-1
				ForEach($Item in $Target)
				{
					$cnt++
					If($cnt -eq 0)
					{
						Line 3 "Target`t`t`t`t: " $Item
					}
					Else
					{
						Line 7 "  " $Item
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable schedule",($Script:htmlsb),$RDSSchedule.Enabled.ToString(),$htmlwhite)
				$rowdata += @(,("Name",($Script:htmlsb),$RDSSchedule.Name,$htmlwhite))
				$rowdata += @(,("Action",($Script:htmlsb),$Action,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$RDSSchedule.Description,$htmlwhite))
				
				$cnt=-1
				ForEach($Item in $Target)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$rowdata += @(,("Target",($Script:htmlsb),$Item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				
				$msg = "General"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Trigger
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Trigger"
			}
			If($Text)
			{
				Line 2 "Trigger"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Date"; Value = $RDSSchedule.StartDateTime.ToShortDateString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Start"; Value = $RDSSchedule.StartDateTime.ToShortTimeString(); }) > $Null
				If($Action -eq "Reboot - Drain Mode")
				{
					$ScriptInformation.Add(@{Data = "Complete in"; Value = $TimeDuration  ; }) > $Null
				}
				ElseIf($Action -eq "Disable")
				{
					$ScriptInformation.Add(@{Data = "Duration"; Value = $TimeDuration; }) > $Null
				}
				$ScriptInformation.Add(@{Data = "Recur"; Value = $Repeat; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Date`t`t`t`t: " $RDSSchedule.StartDateTime.ToShortDateString()
				Line 3 "Start`t`t`t`t: " $RDSSchedule.StartDateTime.ToShortTimeString()
				If($Action -eq "Reboot - Drain Mode")
				{
					Line 3 "Complete in`t`t`t: " $TimeDuration
				}
				ElseIf($Action -eq "Disable")
				{
					Line 3 "Duration`t`t`t: " $TimeDuration
				}
				Line 3 "Recur`t`t`t`t: " $Repeat
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Date",($Script:htmlsb),$RDSSchedule.StartDateTime.ToShortDateString(),$htmlwhite)
				$rowdata += @(,("Start",($Script:htmlsb),$RDSSchedule.StartDateTime.ToShortTimeString(),$htmlwhite))
				If($Action -eq "Reboot - Drain Mode")
				{
					$rowdata += @(,("Complete in",($Script:htmlsb),$TimeDuration,$htmlwhite))
				}
				ElseIf($Action -eq "Disable")
				{
					$rowdata += @(,("Duration",($Script:htmlsb),$TimeDuration,$htmlwhite))
				}
				$rowdata += @(,("Recur",($Script:htmlsb),$Repeat,$htmlwhite))

				$msg = "Trigger"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Options
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Options"
			}
			If($Text)
			{
				Line 2 "Options"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Send message before schedule is triggered"; Value = ""; }) > $Null

				If($RDSSChedule.Messages.Count -gt 0)
				{
					ForEach($Item in $RDSSChedule.Messages)
					{
						Switch ($Item.SendMsgSecs)
						{
							900		{$MsgTime = "15 minutes $($Item.SendMsgWhen)"; Break}
							1800	{$MsgTime = "30 minutes $($Item.SendMsgWhen)"; Break}
							2700	{$MsgTime = "45 minutes $($Item.SendMsgWhen)"; Break}
							3600	{$MsgTime = "1 hour $($Item.SendMsgWhen)"; Break}
							7200	{$MsgTime = "2 hours $($Item.SendMsgWhen)"; Break}
							10800	{$MsgTime = "3 hours $($Item.SendMsgWhen)"; Break}
							Default	{$MsgTime = "Unable to determine scheduled message Time: $($Item.SendMsgSecs)"; Break}
						}
						
						$ScriptInformation.Add(@{Data = "Enabled"; Value = $Item.Enabled.ToString(); }) > $Null
						$ScriptInformation.Add(@{Data = "Body"; Value = $Item.Message; }) > $Null
						$ScriptInformation.Add(@{Data = "Title"; Value = $Item.MessageTitle; }) > $Null
						$ScriptInformation.Add(@{Data = "Time"; Value = $MsgTime; }) > $Null
					}
				}

				If($Action -ne "Disable")
				{
					$ScriptInformation.Add(@{Data = "Enable Drain Mode"; Value = $RDSSchedule.DrainMode.ToString(); }) > $Null
				}
				If($Action -eq "Reboot - Drain Mode")
				{
					$ScriptInformation.Add(@{Data = "Force server reboot after"; Value = $ForceRebootTime; }) > $Null
				}
				If($Action -like "Reboot*")
				{
					$ScriptInformation.Add(@{Data = "Enforce schedule for currently inactive RD Session Host"; Value = $RDSSchedule.EnforceOnInactive.ToString(); }) > $Null
				}
				If($Action -eq "Disable")
				{
					$ScriptInformation.Add(@{Data = "On disable"; Value = $OnDisable; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Send message before schedule is triggered"
				
				If($RDSSChedule.Messages.Count -gt 0)
				{
					ForEach($Item in $RDSSChedule.Messages)
					{
						Switch ($Item.SendMsgSecs)
						{
							900		{$MsgTime = "15 minutes $($Item.SendMsgWhen)"; Break}
							1800	{$MsgTime = "30 minutes $($Item.SendMsgWhen)"; Break}
							2700	{$MsgTime = "45 minutes $($Item.SendMsgWhen)"; Break}
							3600	{$MsgTime = "1 hour $($Item.SendMsgWhen)"; Break}
							7200	{$MsgTime = "2 hours $($Item.SendMsgWhen)"; Break}
							10800	{$MsgTime = "3 hours $($Item.SendMsgWhen)"; Break}
							Default	{$MsgTime = "Unable to determine scheduled message Time: $($Item.SendMsgSecs)"; Break}
						}
						
						Line 3 "Enabled`t`t`t`t: " $Item.Enabled.ToString()
						Line 3 "Body`t`t`t`t: " $Item.Message
						Line 3 "Title`t`t`t`t: " $Item.MessageTitle
						Line 3 "Time`t`t`t`t: " $MsgTime
					}
				}

				If($Action -ne "Disable")
				{
					Line 3 "Enable Drain Mode`t`t: " $RDSSchedule.DrainMode.ToString()
				}
				If($Action -eq "Reboot - Drain Mode")
				{
					Line 3 "Force server reboot after`t: " $ForceRebootTime
				}
				If($Action -like "Reboot*")
				{
					Line 3 "Enforce schedule for currently"
					Line 3 "inactive RD Session Host`t: " $RDSSchedule.EnforceOnInactive.ToString()
				}
				If($Action -eq "Disable")
				{
					Line 3 "On disable`t`t`t: " $OnDisable
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Send message before schedule is triggered",($Script:htmlsb),"",$htmlwhite)
				
				If($RDSSChedule.Messages.Count -gt 0)
				{
					ForEach($Item in $RDSSChedule.Messages)
					{
						Switch ($Item.SendMsgSecs)
						{
							900		{$MsgTime = "15 minutes $($Item.SendMsgWhen)"; Break}
							1800	{$MsgTime = "30 minutes $($Item.SendMsgWhen)"; Break}
							2700	{$MsgTime = "45 minutes $($Item.SendMsgWhen)"; Break}
							3600	{$MsgTime = "1 hour $($Item.SendMsgWhen)"; Break}
							7200	{$MsgTime = "2 hours $($Item.SendMsgWhen)"; Break}
							10800	{$MsgTime = "3 hours $($Item.SendMsgWhen)"; Break}
							Default	{$MsgTime = "Unable to determine scheduled message Time: $($Item.SendMsgSecs)"; Break}
						}
						
						$rowdata += @(,("Enabled",($Script:htmlsb),$Item.Enabled.ToString(),$htmlwhite))
						$rowdata += @(,("Body",($Script:htmlsb),$Item.Message,$htmlwhite))
						$rowdata += @(,("Title",($Script:htmlsb),$Item.MessageTitle,$htmlwhite))
						$rowdata += @(,("Time",($Script:htmlsb),$MsgTime,$htmlwhite))
					}
				}

				If($Action -ne "Disable")
				{
					$rowdata += @(,("Enable Drain Mode",($Script:htmlsb),$RDSSchedule.DrainMode.ToString(),$htmlwhite))
				}
				If($Action -eq "Reboot - Drain Mode")
				{
					$rowdata += @(,("Force server reboot after",($Script:htmlsb),$ForceRebootTime,$htmlwhite))
				}
				If($Action -like "Reboot*")
				{
					$rowdata += @(,("Enforce schedule for currently inactive RD Session Host",($Script:htmlsb),$RDSSchedule.EnforceOnInactive.ToString(),$htmlwhite))
				}
				If($Action -eq "Disable")
				{
					$rowdata += @(,("On disable",($Script:htmlsb),$OnDisable,$htmlwhite))
				}

				$msg = "Options"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}

	#VDI
	Write-Verbose "$(Get-Date -Format G): Output VDI"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "VDI"
	}
	If($Text)
	{
		Line 1 "VDI"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "VDI"
	}

	$VDIHosts = Get-RASProvider -SiteId $Site.Id -EA 0 4>$Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve VDI for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve VDI for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve VDI for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve VDI for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $VDIHosts)
	{
		Write-Host "
	No VDI retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No VDI retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No VDI retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No VDI retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): `tOutput VDI Pools"
		#Pools
		
		If($MSWord -or $PDF)
		{
			$VDIPools = Get-RASVDIPool -SiteId $Site.Id -EA 0 4>$Null
			If($? -and $Null -ne $VDIPools)
			{
				ForEach($VDIPool in $VDIPools)
				{
					WriteWordLine 3 0 "Pool $($VDIPool.Name)"

					$VDIPoolMembers = Get-RASVDIPoolMember -SiteId $Site.Id -VDIPoolName $VDIPool.Name -EA 0 4>$Null 
					
					If($? -and $Null -ne $VDIPoolMembers)
					{
						$VDIPoolMember = $VDIPoolMembers[0]
						Switch($VDIPoolMember.Type)
						{
							"ALLGUESTINHOST"		{$MemberType = "All desktops in Provider"; Break}
							"AllDesktopsInProvider"	{$MemberType = "All desktops in Provider"; Break}
							"Desktop"				{$MemberType = "Guest"; Break}
							"GUEST"					{$MemberType = "Guest"; Break}
							"NATIVEPOOL"			{$MemberType = "Native Pool"; Break}
							"TEMPLATEDesktop"		{$MemberType = "Template Desktop"; Break}
							"TEMPLATEGUEST"			{$MemberType = "Template Desktop"; Break}
							"UNKNOWN"				{$MemberType = "Unknown"; Break}
							Default					{$MemberType = "Unable to determine Pool Member Type: $($VDIPoolMember.Type)"; Break}
						}
					}
					Else
					{
						$MemberType = ""
					}

					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Name"; Value = $VDIPool.Name; }) > $Null
					$ScriptInformation.Add(@{Data = "Enabled"; Value = $VDIPool.Enabled.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Description"; Value = $VDIPool.Description; }) > $Null
					$ScriptInformation.Add(@{Data = "Members type"; Value = $MemberType; }) > $Null
					$ScriptInformation.Add(@{Data = "Last modification by"; Value = $VDIPool.AdminLastMod; }) > $Null
					$ScriptInformation.Add(@{Data = "Modified on"; Value = $VDIPool.TimeLastMod.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Created by"; Value = $VDIPool.AdminCreate; }) > $Null
					$ScriptInformation.Add(@{Data = "Created on"; Value = $VDIPool.TimeCreate.ToString(); }) > $Null
					
					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
					
					#General
					
					WriteWordLine 4 0 "General"

					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Enable pool in site"; Value = $VDIPool.Enabled.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Name"; Value = $VDIPool.Name; }) > $Null
					$ScriptInformation.Add(@{Data = "Description"; Value = $VDIPool.Description; }) > $Null
					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
					
					#Members
					
					WriteWordLine 4 0 "Members"

					$ScriptInformation = New-Object System.Collections.ArrayList
					If($VDIPool.Members.Count -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Members"; Value = "There are no pool members"; }) > $Null
					}
					Else
					{
						ForEach($Item in $VDIPool.Members)
						{
							$VDIPoolMembers = Get-RASVDIPoolMember -SiteId $Site.Id -VDIPoolName $VDIPool.Name -EA 0 4>$Null
							
							If($? -and $Null -ne $VDIPoolMembers)
							{
								ForEach($VDIPoolMember in $VDIPoolMembers)
								{
									Switch($VDIPoolMember.Type)
									{
										"ALLGUESTINHOST"		{$MemberType = "All desktops in Provider"; Break}
										"AllDesktopsInProvider"	{$MemberType = "All desktops in Provider"; Break}
										"Desktop"				{$MemberType = "Guest"; Break}
										"GUEST"					{$MemberType = "Guest"; Break}
										"NATIVEPOOL"			{$MemberType = "Native Pool"; Break}
										"TEMPLATEDesktop"		{$MemberType = "Template Desktop"; Break}
										"TEMPLATEGUEST"			{$MemberType = "Template Desktop"; Break}
										"UNKNOWN"				{$MemberType = "Unknown"; Break}
										Default					{$MemberType = "Unable to determine Pool Member Type: $($VDIPoolMember.Type)"; Break}
									}
									$ScriptInformation.Add(@{Data = "Name: $($VDIPoolMember.Name)"; Value = "Type: $MemberType"; }) > $Null
								}
							}
							ElseIf($? -and $Null -eq $VDIPoolMembers)
							{
								$ScriptInformation.Add(@{Data = "Members"; Value = "None found"; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = "Members"; Value = "Unable to retrieve"; }) > $Null
							}
						}
					}

					$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "WildCard"; Value = $VDIPool.WildCard; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
			}
			ElseIf($? -and $Null -eq $VDIPools)
			{
				WriteWordLine 0 0 "No VDI Pools found for Site $($Site.Name)"
			}
			Else
			{
				WriteWordLine 0 0 "Unable to retrieve VDI Pools for Site $($Site.Name)"
			}
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			$VDIPools = Get-RASVDIPool -SiteId $Site.Id -EA 0 4>$Null
			If($? -and $Null -ne $VDIPools)
			{
				ForEach($VDIPool in $VDIPools)
				{
					Line 2 "Pool $($VDIPool.Name)"
					
					$VDIPoolMembers = Get-RASVDIPoolMember -SiteId $Site.Id -VDIPoolName $VDIPool.Name -EA 0 4>$Null 
					
					If($? -and $Null -ne $VDIPoolMembers)
					{
						$VDIPoolMember = $VDIPoolMembers[0]
						Switch($VDIPoolMember.Type)
						{
							"ALLGUESTINHOST"		{$MemberType = "All desktops in Provider"; Break}
							"AllDesktopsInProvider"	{$MemberType = "All desktops in Provider"; Break}
							"Desktop"				{$MemberType = "Guest"; Break}
							"GUEST"					{$MemberType = "Guest"; Break}
							"NATIVEPOOL"			{$MemberType = "Native Pool"; Break}
							"TEMPLATEDesktop"		{$MemberType = "Template Desktop"; Break}
							"TEMPLATEGUEST"			{$MemberType = "Template Desktop"; Break}
							"UNKNOWN"				{$MemberType = "Unknown"; Break}
							Default					{$MemberType = "Unable to determine Pool Member Type: $($VDIPoolMember.Type)"; Break}
						}
					}
					Else
					{
						$MemberType = ""
					}

					Line 3 "Name`t`t`t: " $VDIPool.Name
					Line 3 "Enabled`t`t`t: " $VDIPool.Enabled.ToString()
					Line 3 "Description`t`t: " $VDIPool.Description
					Line 3 "Members type`t`t: " $MemberType
					Line 3 "Last modification by`t: " $VDIPool.AdminLastMod
					Line 3 "Modified on`t`t: " $VDIPool.TimeLastMod.ToString()
					Line 3 "Created by`t`t: " $VDIPool.AdminCreate
					Line 3 "Created on`t`t: " $VDIPool.TimeCreate.ToString()
					Line 0 ""
					
					#General
					Line 3 "General"
					Line 4 "Enable pool in site`t: " $VDIPool.Enabled.ToString()
					Line 4 "Name`t`t`t: " $VDIPool.Name
					Line 4 "Description`t`t: " $VDIPool.Description
					Line 0 ""
					
					#Members
					
					Line 3 "Members"
					If($VDIPool.Members.Count -eq 0)
					{
						Line 4 "Members: " "There are no pool members"
					}
					Else
					{
						ForEach($Item in $VDIPool.Members)
						{
							$VDIPoolMembers = Get-RASVDIPoolMember -SiteId $Site.Id -VDIPoolName $VDIPool.Name -EA 0 4>$Null
							
							If($? -and $Null -ne $VDIPoolMembers)
							{
								ForEach($VDIPoolMember in $VDIPoolMembers)
								{
									Switch($VDIPoolMember.Type)
									{
										"ALLGUESTINHOST"		{$MemberType = "All desktops in Provider"; Break}
										"AllDesktopsInProvider"	{$MemberType = "All desktops in Provider"; Break}
										"Desktop"				{$MemberType = "Guest"; Break}
										"GUEST"					{$MemberType = "Guest"; Break}
										"NATIVEPOOL"			{$MemberType = "Native Pool"; Break}
										"TEMPLATEDesktop"		{$MemberType = "Template Desktop"; Break}
										"TEMPLATEGUEST"			{$MemberType = "Template Desktop"; Break}
										"UNKNOWN"				{$MemberType = "Unknown"; Break}
										Default					{$MemberType = "Unable to determine Pool Member Type: $($VDIPoolMember.Type)"; Break}
									}
									Line 4 "Name: $($VDIPoolMember.Name) " "Type: $MemberType"
								}
							}
							ElseIf($? -and $Null -eq $VDIPoolMembers)
							{
								Line 4 "Members: " "None found"
							}
							Else
							{
								Line 4 "Members: " "Unable to retrieve"
							}
						}
					}
					Line 0 ""
					Line 4 "WildCard: " $VDIPool.WildCard
					Line 0 ""
				}
				Line 0 ""
			}
			ElseIf($? -and $Null -eq $VDIPools)
			{
				Line 0 "No VDI Pools found for Site $($Site.Name)"
			}
			Else
			{
				Line 0 "Unable to retrieve VDI Pools for Site $($Site.Name)"
			}
			Line 0 ""
		}
		If($HTML)
		{
			$VDIPools = Get-RASVDIPool -SiteId $Site.Id -EA 0 4>$Null
			If($? -and $Null -ne $VDIPools)
			{
				ForEach($VDIPool in $VDIPools)
				{
					WriteHTMLLine 3 0 "Pool $($VDIPool.Name)"
		
					$VDIPoolMembers = Get-RASVDIPoolMember -SiteId $Site.Id -VDIPoolName $VDIPool.Name -EA 0 4>$Null 
					
					If($? -and $Null -ne $VDIPoolMembers)
					{
						$VDIPoolMember = $VDIPoolMembers[0]
						Switch($VDIPoolMember.Type)
						{
							"ALLGUESTINHOST"		{$MemberType = "All desktops in Provider"; Break}
							"AllDesktopsInProvider"	{$MemberType = "All desktops in Provider"; Break}
							"Desktop"				{$MemberType = "Guest"; Break}
							"GUEST"					{$MemberType = "Guest"; Break}
							"NATIVEPOOL"			{$MemberType = "Native Pool"; Break}
							"TEMPLATEDesktop"		{$MemberType = "Template Desktop"; Break}
							"TEMPLATEGUEST"			{$MemberType = "Template Desktop"; Break}
							"UNKNOWN"				{$MemberType = "Unknown"; Break}
							Default					{$MemberType = "Unable to determine Pool Member Type: $($VDIPoolMember.Type)"; Break}
						}
					}
					Else
					{
						$MemberType = ""
					}

					$rowdata = @()
					$columnHeaders = @("Name",($Script:htmlsb),$VDIPool.Name,$htmlwhite)
					$rowdata += @(,("Enabled",($Script:htmlsb),$VDIPool.Enabled.ToString(),$htmlwhite))
					$rowdata += @(,("Description",($Script:htmlsb),$VDIPool.Description,$htmlwhite))
					$rowdata += @(,("Members type: ",($Script:htmlsb),$MemberType,$htmlwhite))
					$rowdata += @(,("Last modification by",($Script:htmlsb), $VDIPool.AdminLastMod,$htmlwhite))
					$rowdata += @(,("Modified on",($Script:htmlsb), $VDIPool.TimeLastMod.ToString(),$htmlwhite))
					$rowdata += @(,("Created by",($Script:htmlsb), $VDIPool.AdminCreate,$htmlwhite))
					$rowdata += @(,("Created on",($Script:htmlsb), $VDIPool.TimeCreate.ToString(),$htmlwhite))
					
					ForEach($Item in $VDIPool.Members)
					{
						$VDIPoolMembers = Get-RASVDIPoolMember -SiteId $Site.Id -VDIPoolName $VDIPool.Name -EA 0 4>$Null
						
						If($? -and $Null -ne $VDIPoolMembers)
						{
							$cnt = -1
							ForEach($VDIPoolMember in $VDIPoolMembers)
							{
								Switch($VDIPoolMember.Type)
								{
									"ALLGUESTINHOST"		{$MemberType = "All desktops in Provider"; Break}
									"AllDesktopsInProvider"	{$MemberType = "All desktops in Provider"; Break}
									"Desktop"				{$MemberType = "Guest"; Break}
									"GUEST"					{$MemberType = "Guest"; Break}
									"NATIVEPOOL"			{$MemberType = "Native Pool"; Break}
									"TEMPLATEDesktop"		{$MemberType = "Template Desktop"; Break}
									"TEMPLATEGUEST"			{$MemberType = "Template Desktop"; Break}
									"UNKNOWN"				{$MemberType = "Unknown"; Break}
									Default					{$MemberType = "Unable to determine Pool Member Type: $($VDIPoolMember.Type)"; Break}
								}
								$cnt++
								If($cnt -eq 0)
								{
									$rowdata += @(,("    Members",($Script:htmlsb),"Name: $($VDIPoolMember.Name) Type: $MemberType",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb),"Name: $($VDIPoolMember.Name) Type: $MemberType",$htmlwhite))
								}
							}
						}
						ElseIf($? -and $Null -eq $VDIPoolMembers)
						{
							$rowdata += @(,("    Members",($Script:htmlsb),"None found",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("    Members",($Script:htmlsb),"Unable to retrieve",$htmlwhite))
						}
					}

					$msg = ""
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""

					#General
				
					$rowdata = @()
					$columnHeaders = @("Enable pool in site",($Script:htmlsb),$VDIPool.Enabled.ToString(),$htmlwhite)
					$rowdata += @(,("Name",($Script:htmlsb),$VDIPool.Name,$htmlwhite))
					$rowdata += @(,("Description",($Script:htmlsb),$VDIPool.Description,$htmlwhite))
					
					$msg = "General"
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""

					#Members
			
					$rowdata = @()
					If($VDIPool.Members.Count -eq 0)
					{
						$columnHeaders = @("Members",($Script:htmlsb),"There are no pool members",$htmlwhite)
					}
					Else
					{
						ForEach($Item in $VDIPool.Members)
						{
							$VDIPoolMembers = Get-RASVDIPoolMember -SiteId $Site.Id -VDIPoolName $VDIPool.Name -EA 0 4>$Null
							
							If($? -and $Null -ne $VDIPoolMembers)
							{
								$cnt = -1
								ForEach($VDIPoolMember in $VDIPoolMembers)
								{
									Switch($VDIPoolMember.Type)
									{
										"ALLGUESTINHOST"		{$MemberType = "All desktops in Provider"; Break}
										"AllDesktopsInProvider"	{$MemberType = "All desktops in Provider"; Break}
										"Desktop"				{$MemberType = "Guest"; Break}
										"GUEST"					{$MemberType = "Guest"; Break}
										"NATIVEPOOL"			{$MemberType = "Native Pool"; Break}
										"TEMPLATEDesktop"		{$MemberType = "Template Desktop"; Break}
										"TEMPLATEGUEST"			{$MemberType = "Template Desktop"; Break}
										"UNKNOWN"				{$MemberType = "Unknown"; Break}
										Default					{$MemberType = "Unable to determine Pool Member Type: $($VDIPoolMember.Type)"; Break}
									}
									$cnt++
									If($cnt -eq 0)
									{
										$columnHeaders = @("Name: $($VDIPoolMember.Name)",($Script:htmlsb),"Type: $MemberType",$htmlwhite)
									}
									Else
									{
										$rowdata += @(,("Name: $($VDIPoolMember.Name)",($Script:htmlsb),"Type: $MemberType",$htmlwhite))
									}
								}
							}
							ElseIf($? -and $Null -eq $VDIPoolMembers)
							{
								$rowdata += @(,("Members",($Script:htmlsb),"None found",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("Members",($Script:htmlsb),"Unable to retrieve",$htmlwhite))
							}
						}
					}
					
					$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("WildCard",($Script:htmlsb),$VDIPool.WildCard,$htmlwhite))

					$msg = "Members"
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
			ElseIf($? -and $Null -eq $VDIPools)
			{
				WriteHTMLLine 0 0 "No VDI Pools found for Site $($Site.Name)"
			}
			Else
			{
				WriteHTMLLine 0 0 "Unable to retrieve VDI Pools for Site $($Site.Name)"
			}
			WriteHTMLLine 0 0 ""
		}
		
		Write-Verbose "$(Get-Date -Format G): `tOutput VDI Templates"
		#Templates
		
		$VDITemplates = Get-RASVDITemplate -SiteId $Site.Id -EA 0 4>$Null | Where-Object {$_.TemplateType -eq "VDIDesktop"}
		If(!$?)
		{
			Write-Warning "
			`n
			Unable to retrieve VDI Templates for Site $($Site.Name)`
			"
			If($MSWord -or $PDF)
			{
				WriteWordLine 0 0 "Unable to retrieve VDI Templates for Site $($Site.Name)"
			}
			If($Text)
			{
				Line 0 "Unable to retrieve VDI Templates for Site $($Site.Name)"
			}
			If($HTML)
			{
				WriteHTMLLine 0 0 "Unable to retrieve VDI Templates for Site $($Site.Name)"
			}
		}
		ElseIf($? -and $Null -eq $VDITemplates)
		{
			Write-Host "
	No VDI Templates retrieved for Site $($Site.Name).`
			" -ForegroundColor White
			If($MSWord -or $PDF)
			{
				WriteWordLine 0 0 "No VDI Templates retrieved for Site $($Site.Name)"
			}
			If($Text)
			{
				Line 0 "No VDI Templates retrieved for Site $($Site.Name)"
			}
			If($HTML)
			{
				WriteHTMLLine 0 0 "No VDI Templates retrieved for Site $($Site.Name)"
			}
		}
		Else
		{
			ForEach($VDITemplate in $VDITemplates)
			{
				If($MSWord -or $PDF)
				{
					WriteWordLine 3 0 "Template $($VDITemplate.Name)"
				}
				If($Text)
				{
					Line 2 "Template $($VDITemplate.Name)"
				}
				If($HTML)
				{
					WriteHTMLLine 3 0 "Template $($VDITemplate.Name)"
				}
				
				$TemplateProvider = Get-RASProvider -Id $RDSTemplate.ProviderId -EA 0 4>$Null
				
				If($? -and $Null -ne $TemplateProvider)
				{
					$TemplateProviderName = $TemplateProvider.Server
					$TemplateProviderType = GetVDIType $TemplateProvider.Type
				}
				Else
				{
					$TemplateProviderName = ""
					$TemplateProviderType = ""
				}
				
				$TemplateVM = Get-RASVM -Id $VDITemplate.VMId -ProviderId $VDITemplate.ProviderId -EA 0 4>$Null
				
				If($? -and $Null -ne $TemplateVM)
				{
					<#
						Values	        Description
						Unknown	        The VM is in the 'Unknown' state
						On	            The VM is powered on.
						Off	            The VM is powered off
						Paused	        The VM is already, or in the process of being, suspended
						CloningFailed	Failed to clone the VM.
						CloningCanceled	VM cloning was cancelled
					#>
					Switch($TemplateVM.State)
					{
						"Unknown"			{$TemplatePowerState = "Unknown"; Break}
						"On"				{$TemplatePowerState = "Powered on"; Break}
						"Off"				{$TemplatePowerState = "Powered off"; Break}
						"Paused"			{$TemplatePowerState = "Paused"; Break}
						"CloningFailed"		{$TemplatePowerState = "Cloning failed"; Break}
						"CloningCanceled"	{$TemplatePowerState = "Cloning canceled"; Break}
						Default				{$TemplatePowerState = "Unable to determine template VM power state: $($TemplateVM.State)"; Break}
					}
				}
				Else
				{
					$TemplatePowerState = "Unknown"
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Name"; Value = $VDITemplate.Name; }) > $Null
					#$ScriptInformation.Add(@{Data = "Status"; Value = "Can't find"; }) > $Null
					$ScriptInformation.Add(@{Data = "Power state"; Value = $TemplatePowerState; }) > $Null
					#$ScriptInformation.Add(@{Data = "Agent status"; Value = "Can't find"; }) > $Null
					#$ScriptInformation.Add(@{Data = "Distribution"; Value = "Can't find"; }) > $Null
					$ScriptInformation.Add(@{Data = "Provider"; Value = $TemplateProviderName; }) > $Null
					$ScriptInformation.Add(@{Data = "Provider type"; Value = $TemplateProviderType; }) > $Null
					$ScriptInformation.Add(@{Data = "Last modification by"; Value = $VDITemplate.AdminLastMod; }) > $Null
					$ScriptInformation.Add(@{Data = "Modified on"; Value = $VDITemplate.TimeLastMod.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Created by"; Value = $VDITemplate.AdminCreate; }) > $Null
					$ScriptInformation.Add(@{Data = "Created on"; Value = $VDITemplate.TimeCreate.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "ID"; Value = $VDITemplate.Id.ToString(); }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 3 "Name: " $VDITemplate.Name
					#Line 3 "Status`t`t`t: " "Can't find"
					Line 3 "Power state`t`t: " $TemplatePowerState
					#Line 3 "Agent status`t`t: " "Can't find"
					#Line 3 "Distribution`t`t: " "Can't find"
					Line 3 "Provider`t`t: " $TemplateProviderName
					Line 3 "Provider type`t`t: " $TemplateProviderType
					Line 3 "Last modification by`t: " $VDITemplate.AdminLastMod
					Line 3 "Modified on`t`t: " $VDITemplate.TimeLastMod.ToString()
					Line 3 "Created by`t`t: " $VDITemplate.AdminCreate
					Line 3 "Created on`t`t: " $VDITemplate.TimeCreate.ToString()
					Line 3 "ID`t`t`t: " $VDITemplate.Id.ToString()
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Name",($Script:htmlsb),$VDITemplate.Name,$htmlwhite)
					#$rowdata += @(,("Status",($Script:htmlsb),"Can't find",$htmlwhite))
					$rowdata += @(,("Power state",($Script:htmlsb),$TemplatePowerState,$htmlwhite))
					#$rowdata += @(,("Agent status",($Script:htmlsb),"Can't find",$htmlwhite))
					#$rowdata += @(,("Distribution",($Script:htmlsb),"Can't find",$htmlwhite))
					$rowdata += @(,("Provider",($Script:htmlsb),$TemplateProviderName,$htmlwhite))
					$rowdata += @(,("Provider type",($Script:htmlsb),$TemplateProviderType,$htmlwhite))
					$rowdata += @(,("Last modification by",($Script:htmlsb), $VDITemplate.AdminLastMod,$htmlwhite))
					$rowdata += @(,("Modified on",($Script:htmlsb), $VDITemplate.TimeLastMod.ToString(),$htmlwhite))
					$rowdata += @(,("Created by",($Script:htmlsb), $VDITemplate.AdminCreate,$htmlwhite))
					$rowdata += @(,("Created on",($Script:htmlsb), $VDITemplate.TimeCreate.ToString(),$htmlwhite))
					$rowdata += @(,("Id",($Script:htmlsb),$VDITemplate.Id.ToString(),$htmlwhite))

					$msg = ""
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				#Properties
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "General"
				}
				If($Text)
				{
					Line 3 "General"
				}
				If($HTML)
				{
					#Nothing
				}
				
				Switch ($VDITemplate.UnusedVMDurationMins)
				{
					0		{$DeleteVMTime = "Never"; Break}
					5		{$DeleteVMTime = "5 minutes"; Break}
					30		{$DeleteVMTime = "30 minutes"; Break}
					60		{$DeleteVMTime = "1 hour"; Break}
					1440	{$DeleteVMTime = "1 day"; Break}
					10080	{$DeleteVMTime = "1 week"; Break}
					43200	{$DeleteVMTime = "30 days"; Break}
					Default	{$DeleteVMTime = "Unable to determine Delete unused VMs after: $($VDITemplate.UnusedVMDurationMins)"; Break}
				}
				
				Switch($VDITemplate.CloneMethod)
				{
					"LinkedClone"	{$CloneMethod = "Create a linked clone"; Break}
					"FullClone"		{$CloneMethod = "Create a full clone"; Break}
					Default			{$CloneMethod = "Unable to determine Clone method: $($VDITemplate.CloneMethod)"; Break}
				}

				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Template name"; Value = $VDITemplate.Name; }) > $Null
					$ScriptInformation.Add(@{Data = "Maximum guest VMs"; Value = $VDITemplate.MaxVMs.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Keep available buffer"; Value = $VDITemplate.PreCreatedVMs.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Guest VM name"; Value = $VDITemplate.VMNameFormat; }) > $Null
					$ScriptInformation.Add(@{Data = "Guest VM state after the preparation"; Value = "Can't find"; }) > $Null
					$ScriptInformation.Add(@{Data = "Delete unused guest VMs after"; Value = $DeleteVMTime; }) > $Null
					$ScriptInformation.Add(@{Data = "Clone method"; Value = $CloneMethod; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 4 "Template name`t`t`t: " $VDITemplate.Name
					Line 4 "Maximum guest VMs`t`t: " $VDITemplate.MaxVMs.ToString()
					Line 4 "Keep available buffer`t`t: " $VDITemplate.PreCreatedVMs.ToString()
					Line 4 "Guest VM state after the preparation`t: " "Can't find"
					Line 4 "Guest VM name`t`t`t: " $VDITemplate.VMNameFormat
					Line 4 "Delete unused guest VMs after`t: " $DeleteVMTime
					Line 4 "Clone method`t`t`t: " $CloneMethod
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Template name",($Script:htmlsb),$VDITemplate.Name,$htmlwhite)
					$rowdata += @(,("Maximum guest VMs",($Script:htmlsb),$VDITemplate.MaxVMs.ToString(),$htmlwhite))
					$rowdata += @(,("Keep available buffer",($Script:htmlsb),$VDITemplate.PreCreatedVMs.ToString(),$htmlwhite))
					$rowdata += @(,("Guest VM name",($Script:htmlsb),$VDITemplate.VMNameFormat,$htmlwhite))
					$rowdata += @(,("Guest VM state after the preparation",($Script:htmlsb),"Can't find",$htmlwhite))
					$rowdata += @(,("Delete unused guest VMs after",($Script:htmlsb),$DeleteVMTime,$htmlwhite))
					$rowdata += @(,("Clone method",($Script:htmlsb),$CloneMethod,$htmlwhite))

					$msg = "Properties"
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
				
				#Advanced
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "Advanced"
				}
				If($Text)
				{
					Line 3 "Advanced"
				}
				If($HTML)
				{
					#Nothing
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Folder"; Value = $VDITemplate.FolderName; }) > $Null
					$ScriptInformation.Add(@{Data = "Resource pool"; Value = $VDITemplate.NativePoolName; }) > $Null
					$ScriptInformation.Add(@{Data = "Physical Host"; Value = $VDITemplate.PhysicalHostName; }) > $Null
					$ScriptInformation.Add(@{Data = "Enable hardware acceleration graphics licensing support"; Value = $VDITemplate.HWGPU.ToString(); }) > $Null
					#$ScriptInformation.Add(@{Data = "Use a separate network interface for LAN access"; Value = "Can't find"; }) > $Null
					#$ScriptInformation.Add(@{Data = "Specify management network details"; Value = ""; }) > $Null
					#$ScriptInformation.Add(@{Data = "     Address"; Value = ""; }) > $Null
					#$ScriptInformation.Add(@{Data = "     Subnet mask"; Value = ""; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 4 "Folder`t`t`t`t: " $VDITemplate.FolderName
					Line 4 "Resource pool`t`t`t: " $VDITemplate.NativePoolName
					Line 4 "Physical Host`t`t`t: " $VDITemplate.PhysicalHostName
					Line 4 "Enable hardware acceleration "
					Line 4 "graphics licensing support`t: " $VDITemplate.HWGPU.ToString()
					#Line 4 "Use a separate network interface for LAN access: " "Can't find"
					#Line 4 "Specify management network details:"
					#Line 5 "Address`t`t`t: " $DeleteVMTime
					#Line 6 "Subnet mask`t`t: " $CloneMethod
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Folder",($Script:htmlsb),$VDITemplate.FolderName,$htmlwhite)
					$rowdata += @(,("Resource pool",($Script:htmlsb),$VDITemplate.NativePoolName,$htmlwhite))
					$rowdata += @(,("Physical Host",($Script:htmlsb),$VDITemplate.PhysicalHostName,$htmlwhite))
					$rowdata += @(,("Enable hardware acceleration graphics licensing support",($Script:htmlsb),$VDITemplate.HWGPU.ToString(),$htmlwhite))
					#$rowdata += @(,("Use a separate network interface for LAN access",($Script:htmlsb),"Can't find",$htmlwhite))
					#$rowdata += @(,("Specify management network details",($Script:htmlsb),"",$htmlwhite))
					#$rowdata += @(,("     Address",($Script:htmlsb),"",$htmlwhite))
					#$rowdata += @(,("     Subnet mask",($Script:htmlsb),"",$htmlwhite))

					$msg = "Advanced"
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
				
				#Preparation
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "Preparation"
				}
				If($Text)
				{
					Line 3 "Preparation"
				}
				If($HTML)
				{
					#Nothing
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Image preparation tool"; Value = $VDITemplate.ImagePrepTool.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Computer name"; Value = $VDITemplate.ComputerName; }) > $Null
					$ScriptInformation.Add(@{Data = "Owner name"; Value = $VDITemplate.OwnerName; }) > $Null
					$ScriptInformation.Add(@{Data = "Organization"; Value = $VDITemplate.Organization; }) > $Null
					$ScriptInformation.Add(@{Data = "Active Directory domain"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Domain"; Value = $VDITemplate.Domain; }) > $Null
					$ScriptInformation.Add(@{Data = "     Administrator"; Value = $VDITemplate.Administrator; }) > $Null
					$ScriptInformation.Add(@{Data = "     Target OU"; Value = $VDITemplate.DomainOrgUnit; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 4 "Image preparation tool`t: " $VDITemplate.ImagePrepTool.ToString()
					Line 4 "Computer name`t`t: " $VDITemplate.ComputerName
					Line 4 "Owner name`t`t: " $VDITemplate.OwnerName
					Line 4 "Organization`t`t: " $VDITemplate.Organization
					Line 4 "Active Directory domain"
					Line 5 "Domain`t`t: " $VDITemplate.Domain
					Line 5 "Administrator`t: " $VDITemplate.Administrator
					Line 5 "Target OU`t: " $VDITemplate.DomainOrgUnit
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Image preparation tool",($Script:htmlsb),$VDITemplate.ImagePrepTool.ToString(),$htmlwhite)
					$rowdata += @(,("Computer name",($Script:htmlsb),$VDITemplate.ComputerName,$htmlwhite))
					$rowdata += @(,("Owner name",($Script:htmlsb),$VDITemplate.OwnerName,$htmlwhite))
					$rowdata += @(,("Organization",($Script:htmlsb),$VDITemplate.Organization,$htmlwhite))
					$rowdata += @(,("Active Directory domain",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("     Domain",($Script:htmlsb),$VDITemplate.Domain,$htmlwhite))
					$rowdata += @(,("     Administrator",($Script:htmlsb),$VDITemplate.Administrator,$htmlwhite))
					$rowdata += @(,("     Target OU",($Script:htmlsb),$VDITemplate.DomainOrgUnit,$htmlwhite))

					$msg = "Preparation"
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				#User Profile
			
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "User profile"
				}
				If($Text)
				{
					Line 3 "User profile"
				}
				If($HTML)
				{
					#Nothing
				}

				If($VDITemplate.InheritDefaultUserProfileSettings)
				{
					#do we inherit site defaults?
					#yes we do, get the default settings for the Site
					#use the Site default settings
					
					#Template technology settings do not include UPD, only FSLogix
					$TemplateDefaults = Get-RASVDIDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
					
					If($? -and $Null -ne $TemplateDefaults)
					{
						Switch ($TemplateDefaults.Technology)
						{
							"DoNotManage"				{$TemplateTechnology = "Do not manage by RAS"; Break}
							"FSLogixProfileContainer"	{$TemplateTechnology = "FSLogix"; Break}
							Default						{$TemplateTechnology = "Unable to determine Technology State: $($TemplateDefaults.Technology)"; Break}
						}
						
						$FSLogixSettings           = $TemplateDefaults.FSLogix.ProfileContainer
						$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
						
						Switch($FSLogixDeploymentSettings.InstallType)
						{
							"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
							"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
							"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
							"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
							Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
						}
						
						$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
						$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
						$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
						#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate

						Switch ($FSLogixSettings.LocationType)
						{
							"SMBLocation"	
							{
								$FSLogixLocationType = "SMB Location"
								$FSLogixLocationOfProfileDisks = $FSLogixSettings.VHDLocations
								Break
							}
							"CloudCache"	
							{
								$FSLogixLocationType = "Cloud Cache"
								$FSLogixLocationOfProfileDisks = $FSLogixSettings.CCDLocations
								Break
							}
							Default 		
							{
								$FSLogixLocationType = "Unable to determine FSLogix Location type: $($FSLogixSettings.LocationType)"
								$FSLogixLocationOfProfileDisks = @()
								Break
							}
						}
						
						Switch ($FSLogixSettings.ProfileDiskFormat)
						{
							"VHD"	{$FSLogixProfileDiskFormat = "VHD"; Break}
							"VHDX"	{$FSLogixProfileDiskFormat = "VHDX"; Break}
							Default	{$FSLogixProfileDiskFormat = "Unable to determine FSLogix Profile disk format: $($FSLogixSettings.ProfileDiskFormat)"; Break}
						}
						
						Switch ($FSLogixSettings.AllocationType)
						{
							"Dynamic"	{$FSLogixAllocationType = "Dynamic"; Break}
							"Full"		{$FSLogixAllocationType = "Full"; Break}
							Default		{$FSLogixAllocationType = "Unable to determine FSLogix Allocation type: $($FSLogixSettings.AllocationType)"; Break}
						}
						
						$FSLogixDefaultSize = $FSLogixSettings.DefaultSize.ToString()
							
						#FSLogix Additional settings
						#Users and Groups tab
						If($FSLogixSettings.UserInclusionList.Count -eq 0)
						{
							$FSLogixSettingsUserInclusionList = @("Everyone")
						}
						Else
						{
							$FSLogixSettingsUserInclusionList = $FSLogixSettings.UserInclusionList
						}
						$FSLogixSettingsUserExclusionList       = $FSLogixSettings.UserExclusionList
							
						#Folders tab
						$FSLogixSettingsCustomizeProfileFolders = $FSLogixSettings.CustomizeProfileFolders
						$FSLogixSettingsExcludeCommonFolders    = $FSLogixSettings | Select-Object -ExpandProperty ExcludeCommonFolders
						$ExcludedCommonFolders                  = @()
						$FSLogixSettingsFolderInclusionList     = $FSLogixSettings.FolderInclusionList
						$FSLogixSettingsFolderExclusionList     = $FSLogixSettings.FolderExclusionList

						If($FSLogixSettingsCustomizeProfileFolders)
						{
							#####################################################################################
							#MANY thanks to Guy Leech for helping me figure out how to process and use this Enum#
							#####################################################################################

							#this is cumulative
							#Contacts, Desktop, Documents, Links, MusicPodcasts, PicturesVideos, FoldersLowIntegProcesses
							If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Contacts)
							{
								$ExcludedCommonFolders += "Contacts"
							}
							If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Desktop)
							{
								$ExcludedCommonFolders += "Desktop"
							}
							If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Documents)
							{
								$ExcludedCommonFolders += "Documents"
							}
							If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Links)
							{
								$ExcludedCommonFolders += "Links"
							}
							If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::MusicPodcasts)
							{
								$ExcludedCommonFolders += 'Music & Podcasts'
							}
							If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::PicturesVideos)
							{
								$ExcludedCommonFolders += 'Pictures & Videos'
							}
							If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::FoldersLowIntegProcesses)
							{
								$ExcludedCommonFolders += "Folders used by Low Integrity processes"
							}
						}
							
						#Advanced tab
						$FSLogixAS = $FSLogixSettings.AdvancedSettings
						
						Switch($FSLogixAS.AccessNetworkAsComputerObject)
						{
							"Enable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Enable"; Break}
							"Disable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Disable"; Break}
							Default		{$FSLogixAS_AccessNetworkAsComputerObject = "Unknown: $($FSLogixAS.AccessNetworkAsComputerObject)"; Break}
						}
						
						$FSLogixAS_AttachVHDSDDL = $FSLogixAS.AttachVHDSDDL
						
						Switch($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)
						{
							"Enable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Enable"; Break}
							"Disable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"; Break}
							Default		{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Unknown: $($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)"; Break}
						}

						$FSLogixAS_DiffDiskParentFolderPath = $FSLogixAS.DiffDiskParentFolderPath  

						Switch($FSLogixAS.FlipFlopProfileDirectoryName)
						{
							"Enable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Enable"; Break}
							"Disable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Disable"; Break}
							Default		{$FSLogixAS_FlipFlopProfileDirectoryName = "Unknown: $($FSLogixAS.FlipFlopProfileDirectoryName)"; Break}
						}
						
						Switch($FSLogixAS.KeepLocalDir)
						{
							"Enable"	{$FSLogixAS_KeepLocalDir = "Enable"; Break}
							"Disable"	{$FSLogixAS_KeepLocalDir = "Disable"; Break}
							Default		{$FSLogixAS_KeepLocalDir = "Unknown: $($FSLogixAS.KeepLocalDir)"; Break}
						}

						$FSLogixAS_LockedRetryCount    = $FSLogixAS.LockedRetryCount                       
						$FSLogixAS_LockedRetryInterval = $FSLogixAS.LockedRetryInterval     
						
						Switch($FSLogixAS.NoProfileContainingFolder)
						{
							"Enable"	{$FSLogixAS_NoProfileContainingFolder = "Enable"; Break}
							"Disable"	{$FSLogixAS_NoProfileContainingFolder = "Disable"; Break}
							Default		{$FSLogixAS_NoProfileContainingFolder = "Unknown: $($FSLogixAS.NoProfileContainingFolder)"; Break}
						}

						Switch($FSLogixAS.OutlookCachedMode)
						{
							"Enable"	{$FSLogixAS_OutlookCachedMode = "Enable"; Break}
							"Disable"	{$FSLogixAS_OutlookCachedMode = "Disable"; Break}
							Default		{$FSLogixAS_OutlookCachedMode = "Unknown: $($FSLogixAS.OutlookCachedMode)"; Break}
						}

						Switch($FSLogixAS.PreventLoginWithFailure)
						{
							"Enable"	{$FSLogixAS_PreventLoginWithFailure = "Enable"; Break}
							"Disable"	{$FSLogixAS_PreventLoginWithFailure = "Disable"; Break}
							Default		{$FSLogixAS_PreventLoginWithFailure = "Unknown: $($FSLogixAS.PreventLoginWithFailure)"; Break}
						}

						Switch($FSLogixAS.PreventLoginWithTempProfile)
						{
							"Enable"	{$FSLogixAS_PreventLoginWithTempProfile = "Enable"; Break}
							"Disable"	{$FSLogixAS_PreventLoginWithTempProfile = "Disable"; Break}
							Default		{$FSLogixAS_PreventLoginWithTempProfile = "Unknown: $($FSLogixAS.PreventLoginWithTempProfile)"; Break}
						}

						$FSLogixAS_ProfileDirSDDL = $FSLogixAS.ProfileDirSDDL

						Switch($FSLogixAS.ProfileType)
						{
							"NormalProfile"	{$FSLogixAS_ProfileType = "Normal profile"; Break}
							"OnlyRWProfile"	{$FSLogixAS_ProfileType = "Only RW profile"; Break}
							"OnlyROProfile"	{$FSLogixAS_ProfileType = "Only RO profile"; Break}
							"RWROProfile"	{$FSLogixAS_ProfileType = "RW/RO profile"; Break}
							Default			{$FSLogixAS_ProfileType = "Unknown: $($FSLogixAS.ProfileType)"; Break}
						}

						$FSLogixAS_ReAttachIntervalSeconds = $FSLogixAS.ReAttachIntervalSeconds                
						$FSLogixAS_ReAttachRetryCount      = $FSLogixAS.ReAttachRetryCount                     

						Switch($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)
						{
							"Enable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Enable"; Break}
							"Disable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Disable"; Break}
							Default		{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Unknown: $($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)"; Break}
						}

						Switch($FSLogixAS.RoamSearch)
						{
							"Enable"	{$FSLogixAS_RoamSearch = "Enable"; Break}
							"Disable"	{$FSLogixAS_RoamSearch = "Disable"; Break}
							Default		{$FSLogixAS_RoamSearch = "Unknown: $($FSLogixAS.RoamSearch)"; Break}
						}

						Switch($FSLogixAS.SetTempToLocalPath)
						{
							"TakeNoAction"					{$FSLogixAS_SetTempToLocalPath = "Take no action"; Break}
							"RedirectTempAndTmp"			{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP and TMP"; Break}
							"RedirectINetCache"				{$FSLogixAS_SetTempToLocalPath = "Redirect INetCache"; Break}
							"RedirectTempTmpAndINetCache"	{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP, TMP, and INetCache"; Break}
							Default							{$FSLogixAS_SetTempToLocalPath = "Unknown: $($FSLogixAS.SetTempToLocalPath)"; Break}
						}

						$FSLogixAS_SIDDirNameMatch   = $FSLogixAS.SIDDirNameMatch                        
						$FSLogixAS_SIDDirNamePattern = $FSLogixAS.SIDDirNamePattern                      
						$FSLogixAS_SIDDirSDDL        = $FSLogixAS.SIDDirSDDL
						$FSLogixAS_VHDNameMatch      = $FSLogixAS.VHDNameMatch                           
						$FSLogixAS_VHDNamePattern    = $FSLogixAS.VHDNamePattern                         

						Switch($FSLogixAS.VHDXSectorSize)
						{
							0		{$FSLogixAS_VHDXSectorSize = "System default"; Break}
							512		{$FSLogixAS_VHDXSectorSize = "512"; Break}
							4096	{$FSLogixAS_VHDXSectorSize = "4096"; Break}
							Default	{$FSLogixAS_VHDXSectorSize = "Unknown: $($FSLogixAS.VHDXSectorSize)"; Break}
						}

						$FSLogixAS_VolumeWaitTimeMS = $FSLogixAS.VolumeWaitTimeMS                       					
					}
					Else
					{
						#unable to retrieve default, use built-in default values
						$TemplateTechnology                             = "Do not manage by RAS"
						$FSLogixDeploymentSettingsDeploymentMethod      = "None"
						$FSLogixDeploymentSettingsInstallOnlineURL      = "None"
						$FSLogixDeploymentSettingsNetworkDrivePath      = "None"
						$FSLogixDeploymentSettingsInstallerFileName     = "None"
						#$FSLogixDeploymentSettingsReplicate             = $False
						$FSLogixLocationType                            = "None"
						$FSLogixLocationOfProfileDisks                  = @()
						$FSLogixProfileDiskFormat                       = "None"
						$FSLogixAllocationType                          = "None"
						$FSLogixDefaultSize                             = "0"
						$FSLogixSettingsUserInclusionList               = @("Everyone")
						$FSLogixSettingsUserExclusionList               = @()
						$FSLogixSettingsCustomizeProfileFolders         = $False
						$FSLogixSettingsExcludeCommonFolders            = "None"
						$ExcludedCommonFolders                          = @()
						$FSLogixSettingsFolderInclusionList             = @()
						$FSLogixSettingsFolderExclusionList             = @()
						$FSLogixAS_AccessNetworkAsComputerObject        = "Disable"
						$FSLogixAS_AttachVHDSDDL                        = "None"
						$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"
						$FSLogixAS_DiffDiskParentFolderPath             = "%TEMP"
						$FSLogixAS_FlipFlopProfileDirectoryName         = "Disable"
						$FSLogixAS_KeepLocalDir                         = "Disable"
						$FSLogixAS_LockedRetryCount                     = 12
						$FSLogixAS_LockedRetryInterval                  = 5
						$FSLogixAS_NoProfileContainingFolder            = "Disable"
						$FSLogixAS_OutlookCachedMode                    = "Disable"
						$FSLogixAS_PreventLoginWithFailure              = "Disable"
						$FSLogixAS_PreventLoginWithTempProfile          = "Disable"
						$FSLogixAS_ProfileDirSDDL                       = "None"
						$FSLogixAS_ProfileType                          = "Normal profile"
						$FSLogixAS_ReAttachIntervalSeconds              = 10
						$FSLogixAS_ReAttachRetryCount                   = 60
						$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff       = "Enable"
						$FSLogixAS_RoamSearch                           = "Disable"
						$FSLogixAS_SetTempToLocalPath                   = "Redirect TEMP, TMP, and INetCache"
						$FSLogixAS_SIDDirNameMatch                      = "%sid%_%username%"
						$FSLogixAS_SIDDirNamePattern                    = "%sid%_%username%"
						$FSLogixAS_SIDDirSDDL                           = "None"
						$FSLogixAS_VHDNameMatch                         = "Profile*"
						$FSLogixAS_VHDNamePattern                       = "Profile_%username%"
						$FSLogixAS_VHDXSectorSize                       = "System default"
						$FSLogixAS_VolumeWaitTimeMS                     = 20000
					}
				}
				Else
				{
					#we don't inherit
					#get the settings for the template

					Switch ($VDITemplate.Technology)
					{
						"DoNotManage"				{$TemplateTechnology = "Do not manage by RAS"; Break}
						"FSLogixProfileContainer"	{$TemplateTechnology = "FSLogix"; Break}
						Default						{$TemplateTechnology = "Unable to determine Technology State: $($VDITemplate.Technology)"; Break}
					}
							
					$FSLogixSettings           = $VDITemplate.FSLogix.ProfileContainer
					$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
					
					Switch($FSLogixDeploymentSettings.InstallType)
					{
						"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
						"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
						"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
						"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
						Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
					}
					
					$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
					$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
					$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
					#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate
					
					Switch ($FSLogixSettings.LocationType)
					{
						"SMBLocation"	
						{
							$FSLogixLocationType = "SMB Location"
							$FSLogixLocationOfProfileDisks = $FSLogixSettings.VHDLocations
							Break
						}
						"CloudCache"	
						{
							$FSLogixLocationType = "Cloud Cache"
							$FSLogixLocationOfProfileDisks = $FSLogixSettings.CCDLocations
							Break
						}
						Default 		
						{
							$FSLogixLocationType = "Unable to determine FSLogix Location type: $($FSLogixSettings.LocationType)"
							$FSLogixLocationOfProfileDisks = @()
							Break
						}
					}
					
					Switch ($FSLogixSettings.ProfileDiskFormat)
					{
						"VHD"	{$FSLogixProfileDiskFormat = "VHD"; Break}
						"VHDX"	{$FSLogixProfileDiskFormat = "VHDX"; Break}
						Default	{$FSLogixProfileDiskFormat = "Unable to determine FSLogix Profile disk format: $($FSLogixSettings.ProfileDiskFormat)"; Break}
					}
					
					Switch ($FSLogixSettings.AllocationType)
					{
						"Dynamic"	{$FSLogixAllocationType = "Dynamic"; Break}
						"Full"		{$FSLogixAllocationType = "Full"; Break}
						Default		{$FSLogixAllocationType = "Unable to determine FSLogix Allocation type: $($FSLogixSettings.AllocationType)"; Break}
					}
					
					$FSLogixDefaultSize = $FSLogixSettings.DefaultSize.ToString()
							
					#FSLogix Additional settings
					#Users and Groups tab
					If($FSLogixSettings.UserInclusionList.Count -eq 0)
					{
						$FSLogixSettingsUserInclusionList = @("Everyone")
					}
					Else
					{
						$FSLogixSettingsUserInclusionList = $FSLogixSettings.UserInclusionList
					}
					$FSLogixSettingsUserExclusionList       = $FSLogixSettings.UserExclusionList
							
					#Folders tab
					$FSLogixSettingsCustomizeProfileFolders = $FSLogixSettings.CustomizeProfileFolders
					$FSLogixSettingsExcludeCommonFolders    = $FSLogixSettings | Select-Object -ExpandProperty ExcludeCommonFolders
					$ExcludedCommonFolders                  = @()
					$FSLogixSettingsFolderInclusionList     = $FSLogixSettings.FolderInclusionList
					$FSLogixSettingsFolderExclusionList     = $FSLogixSettings.FolderExclusionList

					If($FSLogixSettingsCustomizeProfileFolders)
					{
						#####################################################################################
						#MANY thanks to Guy Leech for helping me figure out how to process and use this Enum#
						#####################################################################################

						#this is cumulative
						#Contacts, Desktop, Documents, Links, MusicPodcasts, PicturesVideos, FoldersLowIntegProcesses
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Contacts)
						{
							$ExcludedCommonFolders += "Contacts"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Desktop)
						{
							$ExcludedCommonFolders += "Desktop"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Documents)
						{
							$ExcludedCommonFolders += "Documents"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::Links)
						{
							$ExcludedCommonFolders += "Links"
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::MusicPodcasts)
						{
							$ExcludedCommonFolders += 'Music & Podcasts'
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::PicturesVideos)
						{
							$ExcludedCommonFolders += 'Pictures & Videos'
						}
						If($FSLogixSettingsExcludeCommonFolders -band [RASAdminEngine.Core.OutputModels.UserProfile.FSLogix.ExcludeCommonFolders]::FoldersLowIntegProcesses)
						{
							$ExcludedCommonFolders += "Folders used by Low Integrity processes"
						}
					}
					
					#Advanced tab
					$FSLogixAS = $FSLogixSettings.AdvancedSettings
					
					Switch($FSLogixAS.AccessNetworkAsComputerObject)
					{
						"Enable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Enable"; Break}
						"Disable"	{$FSLogixAS_AccessNetworkAsComputerObject = "Disable"; Break}
						Default		{$FSLogixAS_AccessNetworkAsComputerObject = "Unknown: $($FSLogixAS.AccessNetworkAsComputerObject)"; Break}
					}
					
					$FSLogixAS_AttachVHDSDDL = $FSLogixAS.AttachVHDSDDL
					
					Switch($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)
					{
						"Enable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Enable"; Break}
						"Disable"	{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Disable"; Break}
						Default		{$FSLogixAS_DeleteLocalProfileWhenVHDShouldApply = "Unknown: $($FSLogixAS.DeleteLocalProfileWhenVHDShouldApply)"; Break}
					}

					$FSLogixAS_DiffDiskParentFolderPath = $FSLogixAS.DiffDiskParentFolderPath  

					Switch($FSLogixAS.FlipFlopProfileDirectoryName)
					{
						"Enable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Enable"; Break}
						"Disable"	{$FSLogixAS_FlipFlopProfileDirectoryName = "Disable"; Break}
						Default		{$FSLogixAS_FlipFlopProfileDirectoryName = "Unknown: $($FSLogixAS.FlipFlopProfileDirectoryName)"; Break}
					}
					
					Switch($FSLogixAS.KeepLocalDir)
					{
						"Enable"	{$FSLogixAS_KeepLocalDir = "Enable"; Break}
						"Disable"	{$FSLogixAS_KeepLocalDir = "Disable"; Break}
						Default		{$FSLogixAS_KeepLocalDir = "Unknown: $($FSLogixAS.KeepLocalDir)"; Break}
					}

					$FSLogixAS_LockedRetryCount    = $FSLogixAS.LockedRetryCount                       
					$FSLogixAS_LockedRetryInterval = $FSLogixAS.LockedRetryInterval     
					
					Switch($FSLogixAS.NoProfileContainingFolder)
					{
						"Enable"	{$FSLogixAS_NoProfileContainingFolder = "Enable"; Break}
						"Disable"	{$FSLogixAS_NoProfileContainingFolder = "Disable"; Break}
						Default		{$FSLogixAS_NoProfileContainingFolder = "Unknown: $($FSLogixAS.NoProfileContainingFolder)"; Break}
					}

					Switch($FSLogixAS.OutlookCachedMode)
					{
						"Enable"	{$FSLogixAS_OutlookCachedMode = "Enable"; Break}
						"Disable"	{$FSLogixAS_OutlookCachedMode = "Disable"; Break}
						Default		{$FSLogixAS_OutlookCachedMode = "Unknown: $($FSLogixAS.OutlookCachedMode)"; Break}
					}

					Switch($FSLogixAS.PreventLoginWithFailure)
					{
						"Enable"	{$FSLogixAS_PreventLoginWithFailure = "Enable"; Break}
						"Disable"	{$FSLogixAS_PreventLoginWithFailure = "Disable"; Break}
						Default		{$FSLogixAS_PreventLoginWithFailure = "Unknown: $($FSLogixAS.PreventLoginWithFailure)"; Break}
					}

					Switch($FSLogixAS.PreventLoginWithTempProfile)
					{
						"Enable"	{$FSLogixAS_PreventLoginWithTempProfile = "Enable"; Break}
						"Disable"	{$FSLogixAS_PreventLoginWithTempProfile = "Disable"; Break}
						Default		{$FSLogixAS_PreventLoginWithTempProfile = "Unknown: $($FSLogixAS.PreventLoginWithTempProfile)"; Break}
					}

					$FSLogixAS_ProfileDirSDDL = $FSLogixAS.ProfileDirSDDL

					Switch($FSLogixAS.ProfileType)
					{
						"NormalProfile"	{$FSLogixAS_ProfileType = "Normal profile"; Break}
						"OnlyRWProfile"	{$FSLogixAS_ProfileType = "Only RW profile"; Break}
						"OnlyROProfile"	{$FSLogixAS_ProfileType = "Only RO profile"; Break}
						"RWROProfile"	{$FSLogixAS_ProfileType = "RW/RO profile"; Break}
						Default		{$FSLogixAS_ProfileType = "Unknown: $($FSLogixAS.ProfileType)"; Break}
					}

					$FSLogixAS_ReAttachIntervalSeconds = $FSLogixAS.ReAttachIntervalSeconds                
					$FSLogixAS_ReAttachRetryCount      = $FSLogixAS.ReAttachRetryCount                     

					Switch($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)
					{
						"Enable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Enable"; Break}
						"Disable"	{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Disable"; Break}
						Default		{$FSLogixAS_RemoveOrphanedOSTFilesOnLogoff = "Unknown: $($FSLogixAS.RemoveOrphanedOSTFilesOnLogoff)"; Break}
					}

					Switch($FSLogixAS.RoamSearch)
					{
						"Enable"	{$FSLogixAS_RoamSearch = "Enable"; Break}
						"Disable"	{$FSLogixAS_RoamSearch = "Disable"; Break}
						Default		{$FSLogixAS_RoamSearch = "Unknown: $($FSLogixAS.RoamSearch)"; Break}
					}

					Switch($FSLogixAS.SetTempToLocalPath)
					{
						"TakeNoAction"					{$FSLogixAS_SetTempToLocalPath = "Take no action"; Break}
						"RedirectTempAndTmp"			{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP and TMP"; Break}
						"RedirectINetCache"				{$FSLogixAS_SetTempToLocalPath = "Redirect INetCache"; Break}
						"RedirectTempTmpAndINetCache"	{$FSLogixAS_SetTempToLocalPath = "Redirect TEMP, TMP, and INetCache"; Break}
						Default							{$FSLogixAS_SetTempToLocalPath = "Unknown: $($FSLogixAS.SetTempToLocalPath)"; Break}
					}

					$FSLogixAS_SIDDirNameMatch   = $FSLogixAS.SIDDirNameMatch                        
					$FSLogixAS_SIDDirNamePattern = $FSLogixAS.SIDDirNamePattern                      
					$FSLogixAS_SIDDirSDDL        = $FSLogixAS.SIDDirSDDL
					$FSLogixAS_VHDNameMatch      = $FSLogixAS.VHDNameMatch                           
					$FSLogixAS_VHDNamePattern    = $FSLogixAS.VHDNamePattern                         

					Switch($FSLogixAS.VHDXSectorSize)
					{
						0		{$FSLogixAS_VHDXSectorSize = "System default"; Break}
						512		{$FSLogixAS_VHDXSectorSize = "512"; Break}
						4096	{$FSLogixAS_VHDXSectorSize = "4096"; Break}
						Default	{$FSLogixAS_VHDXSectorSize = "Unknown: $($FSLogixAS.VHDXSectorSize)"; Break}
					}

					$FSLogixAS_VolumeWaitTimeMS = $FSLogixAS.VolumeWaitTimeMS                       					
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $VDITemplate.InheritDefaultUserProfileSettings.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Technology"; Value = $TemplateTechnology; }) > $Null

					If($TemplateTechnology -eq "Do not manage by RAS")
					{
						#do nothing
					}
					ElseIf($TemplateTechnology -eq "FSLogix")
					{
						$ScriptInformation.Add(@{Data = "Deployment method"; Value = $FSLogixDeploymentSettingsDeploymentMethod; }) > $Null
						If($FSLogixDeploymentSettings.InstallType -eq "Online")
						{
							$ScriptInformation.Add(@{Data = "URL"; Value = $FSLogixDeploymentSettingsInstallOnlineURL; }) > $Null
						}
						ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
						{
							$ScriptInformation.Add(@{Data = ""; Value = $FSLogixDeploymentSettingsNetworkDrivePath; }) > $Null
						}
						ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
						{
							$ScriptInformation.Add(@{Data = ""; Value = $FSLogixDeploymentSettingsInstallerFileName; }) > $Null
						}
						#$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $FSLogixDeploymentSettingsReplicate.ToString(); }) > $Null
						$ScriptInformation.Add(@{Data = "Settings"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "     Location type"; Value = $FSLogixLocationType; }) > $Null
						
						$cnt = -1
						ForEach($item in $FSLogixLocationOfProfileDisks)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     Location of profile disks"; Value = $item; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
							}
						}
						$ScriptInformation.Add(@{Data = "     Profile disk format"; Value = $FSLogixProfileDiskFormat; }) > $Null
						$ScriptInformation.Add(@{Data = "     Allocation type"; Value = $FSLogixAllocationType; }) > $Null
						$ScriptInformation.Add(@{Data = "     Default size"; Value = "$FSLogixDefaultSize GB"; }) > $Null
						$ScriptInformation.Add(@{Data = "Additional settings"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "     Users and Groups"; Value = ""; }) > $Null
						
						If($FSLogixSettingsUserInclusionList.Count -eq 0)
						{
							$ScriptInformation.Add(@{Data = "          User Inclusion List"; Value = "None"; }) > $Null
						}
						Else
						{
							$cnt = -1
							ForEach($item in $FSLogixSettingsUserInclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "          User Inclusion List"; Value = "User: $($item.Account)"; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = "User: $($item.Account)"; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
								}
							}
						}

						If($FSLogixSettingsUserExclusionList.Count -eq 0)
						{
							$ScriptInformation.Add(@{Data = "          User Exclusion List"; Value = ""; }) > $Null
						}
						Else
						{
							$cnt = -1
							ForEach($item in $FSLogixSettingsUserExclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									#$ScriptInformation.Add(@{Data = "          User Exclusion List"; Value = "User: $($item.Account)  Type: $($item.Type)"; }) > $Null
									$ScriptInformation.Add(@{Data = "          User Exclusion List"; Value = "User: $($item.Account)"; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = "User: $($item.Account)"; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = "Type: $($item.Type)"; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
								}
							}
						}
						$ScriptInformation.Add(@{Data = "     Folders"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "          Customize profile folders"; Value = $FSLogixSettingsCustomizeProfileFolders.ToString(); }) > $Null
						If($FSLogixSettingsCustomizeProfileFolders)
						{
							If($ExcludedCommonFolders.Count -gt 0)
							{
								$cnt = -1
								ForEach($item in $ExcludedCommonFolders)
								{
									$cnt++
									
									If($cnt -eq 0)
									{
										$ScriptInformation.Add(@{Data = "               Exclude Common Folders"; Value = $item; }) > $Null
									}
									Else
									{
										$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
									}
								}
							}
							Else
							{
								$ScriptInformation.Add(@{Data = "               Exclude Common Folders"; Value = "None"; }) > $Null
							}
						}

						If($FSLogixSettingsFolderInclusionList.Count -eq 0)
						{
							$ScriptInformation.Add(@{Data = "          Folder Inclusion List"; Value = "None"; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = "          Folder Inclusion List"; Value = ""; }) > $Null
							$cnt = -1
							ForEach($item in $FSLogixSettingsFolderInclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "               Folder"; Value = "$item"; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = "$item"; }) > $Null
								}
							}
						}

						If($FSLogixSettingsFolderExclusionList.Count -eq 0)
						{
							$ScriptInformation.Add(@{Data = "          Folder Exclusion List"; Value = "None"; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = "          Folder Exclusion List"; Value = ""; }) > $Null
							$cnt = -1
							ForEach($item in $FSLogixSettingsFolderExclusionList)
							{
								$cnt++
								
								Switch($item.ExcludeFolderCopy)
								{
									"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
									"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
									"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
									"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
									Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
								}
								
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "               Folder"; Value = "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"; }) > $Null
								}
							}
						}
						
						$ScriptInformation.Add(@{Data = "     Advanced"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "          FSLogix Setting:"; Value = "Value:"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Access network as computer object"; Value = "$($FSLogixAS_AccessNetworkAsComputerObject)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Custom SDDL for profile directory"; Value = "$($FSLogixAS_ProfileDirSDDL)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Delay between locked VHD(X) retries"; Value = "$($FSLogixAS_LockedRetryInterval)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Delete local profile when loading from VHD"; Value = "$($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Diff disk parent folder path"; Value = "$($FSLogixAS_DiffDiskParentFolderPath)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Do not create a folder for new profiles"; Value = "$($FSLogixAS_NoProfileContainingFolder)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Enable Cached mode for Outlook"; Value = "$($FSLogixAS_OutlookCachedMode)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Keep local profiles"; Value = "$($FSLogixAS_KeepLocalDir)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Naming pattern for new VHD(X) files"; Value = "$($FSLogixAS_VHDNamePattern)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Number of locked VHD(X) retries"; Value = "$($FSLogixAS_LockedRetryCount)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Prevent logons with failures"; Value = "$($FSLogixAS_PreventLoginWithFailure)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Prevent logons with temp profiles"; Value = "$($FSLogixAS_PreventLoginWithTempProfile)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Profile folder naming pattern"; Value = "$($FSLogixAS_SIDDirNameMatch)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Profile type"; Value = "$($FSLogixAS_ProfileType)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Profile VHD(X) file matching pattern"; Value = "$($FSLogixAS_VHDNameMatch)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Re-attach interval"; Value = "$($FSLogixAS_ReAttachIntervalSeconds)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Re-attach retry limit"; Value = "$($FSLogixAS_ReAttachRetryCount)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Remove duplicate OST files on logoff"; Value = "$($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          SDDL used when attaching the VHD"; Value = "$($FSLogixAS_AttachVHDSDDL)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Search roaming feature mode"; Value = "$($FSLogixAS_RoamSearch)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Swap SID and username in profile directory names"; Value = "$($FSLogixAS_FlipFlopProfileDirectoryName)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Temporary folders redirection mode"; Value = "$($FSLogixAS_SetTempToLocalPath)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Use SDDL on creation of SID containing folder"; Value = "$($FSLogixAS_SIDDirSDDL)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          User-to-Profile matching pattern"; Value = "$($FSLogixAS_SIDDirNamePattern)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          VHDX sector size"; Value = "$($FSLogixAS_VHDXSectorSize)"; }) > $Null
						$ScriptInformation.Add(@{Data = "          Volume wait time"; Value = "$($FSLogixAS_VolumeWaitTimeMS)"; }) > $Null
					}

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 250;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 3 "Inherit default settings`t`t`t`t: " $VDITemplate.InheritDefaultUserProfileSettings.ToString()
					Line 3 "Technology`t`t`t`t`t`t: " $TemplateTechnology

					If($TemplateTechnology -eq "Do not manage by RAS")
					{
						#do nothing
					}
					ElseIf($TemplateTechnology -eq "FSLogix")
					{
						Line 3 "Deployment method`t`t`t`t`t: " $FSLogixDeploymentSettingsDeploymentMethod
						If($FSLogixDeploymentSettings.InstallType -eq "Online")
						{
							Line 3 "URL`t`t`t`t`t`t`t: " $FSLogixDeploymentSettingsInstallOnlineURL
						}
						ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
						{
							Line 10 ": " $FSLogixDeploymentSettingsNetworkDrivePath
						}
						ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
						{
							Line 10 ": " $FSLogixDeploymentSettingsInstallerFileName
						}
						#Line 3 "Settings are replicated to all Sites`t`t`t: " $FSLogixDeploymentSettingsReplicate.ToString()
						Line 3 "Settings"
						Line 4 "Location type`t`t`t`t`t: " $FSLogixLocationType
						
						$cnt = -1
						ForEach($item in $FSLogixLocationOfProfileDisks)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								Line 4 "Location of profile disks`t`t`t: " $item
							}
							Else
							{
								Line 10 "  " $item
							}
						}
						Line 4 "Profile disk format`t`t`t`t: " $FSLogixProfileDiskFormat
						Line 4 "Allocation type`t`t`t`t`t: " $FSLogixAllocationType
						Line 4 "Default size`t`t`t`t`t: " "$FSLogixDefaultSize GB"
						Line 3 "Additional settings"
						Line 4 "Users and Groups"
						
						If($FSLogixSettingsUserInclusionList.Count -eq 0)
						{
							Line 5 "User Inclusion List`t`t`t: " "None"
						}
						Else
						{
							$cnt = -1
							ForEach($item in $FSLogixSettingsUserInclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									Line 5 "User Inclusion List`t`t`t: " "User: $($item.Account)  Type: $($item.Type)"
								}
								Else
								{
									Line 10 "  " "User: $($item.Account)  Type: $($item.Type)"
								}
							}
						}

						If($FSLogixSettingsUserExclusionList.Count -eq 0)
						{
							Line 5 "User Exclusion List`t`t`t: " "None"
						}
						Else
						{
							$cnt = -1
							ForEach($item in $FSLogixSettingsUserExclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									Line 5 "User Exclusion List`t`t`t: " "User: $($item.Account)  Type: $($item.Type)"
								}
								Else
								{
									Line 10 "  " "User: $($item.Account)  Type: $($item.Type)"
								}
							}
						}
						Line 4 "Folders"
						Line 5 "Customize profile folders`t`t: " $FSLogixSettingsCustomizeProfileFolders.ToString()
						If($FSLogixSettingsCustomizeProfileFolders)
						{
							If($ExcludedCommonFolders.Count -gt 0)
							{
								$cnt = -1
								ForEach($item in $ExcludedCommonFolders)
								{
									$cnt++
									
									If($cnt -eq 0)
									{
										Line 6 "Exclude Common Folders`t`t: " $item
									}
									Else
									{
										Line 10 "  " $item
									}
								}
							}
							Else
							{
								Line 6 "Exclude Common Folders`t`t: None"
							}
						}

						If($FSLogixSettingsFolderInclusionList.Count -eq 0)
						{
							Line 5 "Folder Inclusion List`t`t`t: " "None"
						}
						Else
						{
							Line 5 "Folder Inclusion List"
							$cnt = -1
							ForEach($item in $FSLogixSettingsFolderInclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									Line 6 "Folder`t`t`t`t: " $item
								}
								Else
								{
									Line 10 "  " $item
								}
							}
						}

						If($FSLogixSettingsFolderExclusionList.Count -eq 0)
						{
							Line 5 "Folder Exclusion List`t`t`t: " "None"
						}
						Else
						{
							Line 5 "Folder Exclusion List"
							$cnt = -1
							ForEach($item in $FSLogixSettingsFolderExclusionList)
							{
								$cnt++
								
								Switch($item.ExcludeFolderCopy)
								{
									"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
									"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
									"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
									"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
									Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
								}
								
								If($cnt -eq 0)
								{
									Line 6 "Folder`t`t`t`t: " "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"
								}
								Else
								{
									Line 10 "  " "$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack"
								}
							}
						}
						
						Line 4 "Advanced"
						Line 5 "FSLogix Setting                                      Value"
						Line 5 "======================================================================================"
						#      "Swap SID and username in profile directory names     Redirect TEMP, TMP, and INetCache"
						Line 5 "Access network as computer object                    $($FSLogixAS_AccessNetworkAsComputerObject)"
						Line 5 "Custom SDDL for profile directory                    $($FSLogixAS_ProfileDirSDDL)"
						Line 5 "Delay between locked VHD(X) retries                  $($FSLogixAS_LockedRetryInterval)"
						Line 5 "Delete local profile when loading from VHD           $($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)"
						Line 5 "Diff disk parent folder path                         $($FSLogixAS_DiffDiskParentFolderPath)"
						Line 5 "Do not create a folder for new profiles              $($FSLogixAS_NoProfileContainingFolder)"
						Line 5 "Enable Cached mode for Outlook                       $($FSLogixAS_OutlookCachedMode)"
						Line 5 "Keep local profiles                                  $($FSLogixAS_KeepLocalDir)"
						Line 5 "Naming pattern for new VHD(X) files                  $($FSLogixAS_VHDNamePattern)"
						Line 5 "Number of locked VHD(X) retries                      $($FSLogixAS_LockedRetryCount)"
						Line 5 "Prevent logons with failures                         $($FSLogixAS_PreventLoginWithFailure)"
						Line 5 "Prevent logons with temp profiles                    $($FSLogixAS_PreventLoginWithTempProfile)"
						Line 5 "Profile folder naming pattern                        $($FSLogixAS_SIDDirNameMatch)"
						Line 5 "Profile type                                         $($FSLogixAS_ProfileType)"
						Line 5 "Profile VHD(X) file matching pattern                 $($FSLogixAS_VHDNameMatch)"
						Line 5 "Re-attach interval                                   $($FSLogixAS_ReAttachIntervalSeconds)"
						Line 5 "Re-attach retry limit                                $($FSLogixAS_ReAttachRetryCount)"
						Line 5 "Remove duplicate OST files on logoff                 $($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)"
						Line 5 "SDDL used when attaching the VHD                     $($FSLogixAS_AttachVHDSDDL)"
						Line 5 "Search roaming feature mode                          $($FSLogixAS_RoamSearch)"
						Line 5 "Swap SID and username in profile directory names     $($FSLogixAS_FlipFlopProfileDirectoryName)"
						Line 5 "Temporary folders redirection mode                   $($FSLogixAS_SetTempToLocalPath)"
						Line 5 "Use SDDL on creation of SID containing folder        $($FSLogixAS_SIDDirSDDL)"
						Line 5 "User-to-Profile matching pattern                     $($FSLogixAS_SIDDirNamePattern)"
						Line 5 "VHDX sector size                                     $($FSLogixAS_VHDXSectorSize)"
						Line 5 "Volume wait time                                     $($FSLogixAS_VolumeWaitTimeMS)"
					}

					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Inherit default settings",($Script:htmlsb),$VDITemplate.InheritDefaultUserProfileSettings.ToString(),$htmlwhite)
					$rowdata += @(,("Technology",($Script:htmlsb),$TemplateTechnology,$htmlwhite))

					If($TemplateTechnology -eq "Do not manage by RAS")
					{
						#do nothing
					}
					ElseIf($TemplateTechnology -eq "FSLogix")
					{
						$rowdata += @(,("Deployment method",($Script:htmlsb),$FSLogixDeploymentSettingsDeploymentMethod,$htmlwhite))
						If($FSLogixDeploymentSettings.InstallType -eq "Online")
						{
							$rowdata += @(,("URL",($Script:htmlsb),$FSLogixDeploymentSettingsInstallOnlineURL,$htmlwhite))
						}
						ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
						{
							$rowdata += @(,("",($Script:htmlsb),$FSLogixDeploymentSettingsNetworkDrivePath,$htmlwhite))
						}
						ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
						{
							$rowdata += @(,("",($Script:htmlsb),$FSLogixDeploymentSettingsInstallerFileName,$htmlwhite))
						}
						#$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$FSLogixDeploymentSettingsReplicate.ToString(),$htmlwhite))
						$rowdata += @(,("Settings",($Script:htmlsb),"",$htmlwhite))
						$rowdata += @(,("     Location type",($Script:htmlsb),$FSLogixLocationType,$htmlwhite))
						
						$cnt = -1
						ForEach($item in $FSLogixLocationOfProfileDisks)
						{
							$cnt++
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("     Location of profile disks",($Script:htmlsb),$item,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
							}
						}
						$rowdata += @(,("     Profile disk format",($Script:htmlsb),$FSLogixProfileDiskFormat,$htmlwhite))
						$rowdata += @(,("     Allocation type",($Script:htmlsb),$FSLogixAllocationType,$htmlwhite))
						$rowdata += @(,("     Default size",($Script:htmlsb),"$FSLogixDefaultSize GB",$htmlwhite))
						$rowdata += @(,("Additional settings",($Script:htmlsb),"",$htmlwhite))
						$rowdata += @(,("     Users and Groups",($Script:htmlsb),"",$htmlwhite))
						
						If($FSLogixSettingsUserInclusionList.Count -eq 0)
						{
							$rowdata += @(,("          User Inclusion List",($Script:htmlsb),"None",$htmlwhite))
						}
						Else
						{
							$cnt = -1
							ForEach($item in $FSLogixSettingsUserInclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$rowdata += @(,("          User Inclusion List",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
								}
							}
						}

						If($FSLogixSettingsUserExclusionList.Count -eq 0)
						{
							$rowdata += @(,("          User Exclusion List",($Script:htmlsb),"None",$htmlwhite))
						}
						Else
						{
							$cnt = -1
							ForEach($item in $FSLogixSettingsUserExclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$rowdata += @(,("          User Exclusion List",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb),"User: $($item.Account)",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"Type: $($item.Type)",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
								}
							}
						}
						$rowdata += @(,("     Folders",($Script:htmlsb),"",$htmlwhite))
						$rowdata += @(,("          Customize profile folders",($Script:htmlsb),$FSLogixSettingsCustomizeProfileFolders.ToString(),$htmlwhite))
						If($FSLogixSettingsCustomizeProfileFolders)
						{
							If($ExcludedCommonFolders.Count -gt 0)
							{
								$cnt = -1
								ForEach($item in $ExcludedCommonFolders)
								{
									$cnt++
									
									If($cnt -eq 0)
									{
										$rowdata += @(,("               Exclude Common Folders",($Script:htmlsb),$item,$htmlwhite))
									}
									Else
									{
										$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
									}
								}
							}
							Else
							{
								$rowdata += @(,("               Exclude Common Folders",($Script:htmlsb),"None",$htmlwhite))
							}
						}

						If($FSLogixSettingsFolderInclusionList.Count -eq 0)
						{
							$rowdata += @(,("          Folder Inclusion List",($Script:htmlsb),"None",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("          Folder Inclusion List",($Script:htmlsb),"",$htmlwhite))
							$cnt = -1
							ForEach($item in $FSLogixSettingsFolderInclusionList)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$rowdata += @(,("               Folder",($Script:htmlsb),"$item",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb),"$item",$htmlwhite))
								}
							}
						}

						If($FSLogixSettingsFolderExclusionList.Count -eq 0)
						{
							$rowdata += @(,("          Folder Exclusion List",($Script:htmlsb),"None",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("          Folder Exclusion List",($Script:htmlsb),"",$htmlwhite))
							$cnt = -1
							ForEach($item in $FSLogixSettingsFolderExclusionList)
							{
								$cnt++
								
								Switch($item.ExcludeFolderCopy)
								{
									"None"					{$CopyBase = "No "; $CopyBack = "No "; Break}
									"CopyBack"				{$CopyBase = "No "; $CopyBack = "Yes"; Break}
									"CopyBase"				{$CopyBase = "Yes"; $CopyBack = "No "; Break}
									"CopyBase, CopyBack"	{$CopyBase = "Yes"; $CopyBack = "Yes"; Break}
									Default					{$CopyBase = "Unknown"; $CopyBack = "Unknown"; Break}
								}
								
								If($cnt -eq 0)
								{
									$rowdata += @(,("               Folder",($Script:htmlsb),"$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb),"$($item.Folder) Copy base: $CopyBase Copy back: $CopyBack",$htmlwhite))
								}
							}
						}

						$rowdata += @(,("     Advanced",($Script:htmlsb),"",$htmlwhite))
						$rowdata += @(,("          FSLogix Setting:",($Script:htmlsb),"Value:",$htmlwhite))
						$rowdata += @(,("          Access network as computer object",($Script:htmlsb),"$($FSLogixAS_AccessNetworkAsComputerObject)",$htmlwhite))
						$rowdata += @(,("          Custom SDDL for profile directory",($Script:htmlsb),"$($FSLogixAS_ProfileDirSDDL)",$htmlwhite))
						$rowdata += @(,("          Delay between locked VHD(X) retries",($Script:htmlsb),"$($FSLogixAS_LockedRetryInterval)",$htmlwhite))
						$rowdata += @(,("          Delete local profile when loading from VHD",($Script:htmlsb),"$($FSLogixAS_DeleteLocalProfileWhenVHDShouldApply)",$htmlwhite))
						$rowdata += @(,("          Diff disk parent folder path",($Script:htmlsb),"$($FSLogixAS_DiffDiskParentFolderPath)",$htmlwhite))
						$rowdata += @(,("          Do not create a folder for new profiles",($Script:htmlsb),"$($FSLogixAS_NoProfileContainingFolder)",$htmlwhite))
						$rowdata += @(,("          Enable Cached mode for Outlook",($Script:htmlsb),"$($FSLogixAS_OutlookCachedMode)",$htmlwhite))
						$rowdata += @(,("          Keep local profiles",($Script:htmlsb),"$($FSLogixAS_KeepLocalDir)",$htmlwhite))
						$rowdata += @(,("          Naming pattern for new VHD(X) files",($Script:htmlsb),"$($FSLogixAS_VHDNamePattern)",$htmlwhite))
						$rowdata += @(,("          Number of locked VHD(X) retries",($Script:htmlsb),"$($FSLogixAS_LockedRetryCount)",$htmlwhite))
						$rowdata += @(,("          Prevent logons with failures",($Script:htmlsb),"$($FSLogixAS_PreventLoginWithFailure)",$htmlwhite))
						$rowdata += @(,("          Prevent logons with temp profiles",($Script:htmlsb),"$($FSLogixAS_PreventLoginWithTempProfile)",$htmlwhite))
						$rowdata += @(,("          Profile folder naming pattern",($Script:htmlsb),"$($FSLogixAS_SIDDirNameMatch)",$htmlwhite))
						$rowdata += @(,("          Profile type",($Script:htmlsb),"$($FSLogixAS_ProfileType)",$htmlwhite))
						$rowdata += @(,("          Profile VHD(X) file matching pattern",($Script:htmlsb),"$($FSLogixAS_VHDNameMatch)",$htmlwhite))
						$rowdata += @(,("          Re-attach interval",($Script:htmlsb),"$($FSLogixAS_ReAttachIntervalSeconds)",$htmlwhite))
						$rowdata += @(,("          Re-attach retry limit",($Script:htmlsb),"$($FSLogixAS_ReAttachRetryCount)",$htmlwhite))
						$rowdata += @(,("          Remove duplicate OST files on logoff",($Script:htmlsb),"$($FSLogixAS_RemoveOrphanedOSTFilesOnLogoff)",$htmlwhite))
						$rowdata += @(,("          SDDL used when attaching the VHD",($Script:htmlsb),"$($FSLogixAS_AttachVHDSDDL)",$htmlwhite))
						$rowdata += @(,("          Search roaming feature mode",($Script:htmlsb),"$($FSLogixAS_RoamSearch)",$htmlwhite))
						$rowdata += @(,("          Swap SID and username in profile directory names",($Script:htmlsb),"$($FSLogixAS_FlipFlopProfileDirectoryName)",$htmlwhite))
						$rowdata += @(,("          Temporary folders redirection mode",($Script:htmlsb),"$($FSLogixAS_SetTempToLocalPath)",$htmlwhite))
						$rowdata += @(,("          Use SDDL on creation of SID containing folder",($Script:htmlsb),"$($FSLogixAS_SIDDirSDDL)",$htmlwhite))
						$rowdata += @(,("          User-to-Profile matching pattern",($Script:htmlsb),"$($FSLogixAS_SIDDirNamePattern)",$htmlwhite))
						$rowdata += @(,("          VHDX sector size",($Script:htmlsb),"$($FSLogixAS_VHDXSectorSize)",$htmlwhite))
						$rowdata += @(,("          Volume wait time",($Script:htmlsb),"$($FSLogixAS_VolumeWaitTimeMS)",$htmlwhite))
					}

					$msg = "User profile"
					$columnWidths = @("350","325")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
				#>

				#Optimization
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "Optimization"
				}
				If($Text)
				{
					Line 2 "Optimization"
				}
				If($HTML)
				{
					#Nothing
				}

				If($VDITemplate.InheritDefaultOptimizationSettings)
				{
					#do we inherit site defaults?
					#http://woshub.com/hot-to-convert-sid-to-username-and-vice-versa/
					#for translating the User SID to the AD user name
					#yes we do, get the default settings for the Site
					#use the Site default settings
					$VDIDefaults = Get-RASVDIDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
					
					If($? -and $Null -ne $VDIDefaults)
					{
						$OPTEnableOptimization            = $VDIDefaults.Optimization.EnableOptimization.ToString()
						$OPTOptimizationType              = $VDIDefaults.Optimization.OptimizationType.ToString()
						$OPTWindowsDefenderATPEnabled     = $VDIDefaults.Optimization.WindowsDefenderATPEnabled.ToString()    
						$OPTWindowsComponentsEnabled      = $VDIDefaults.Optimization.WindowsComponentsEnabled.ToString()
						$OPTWindowsServicesEnabled        = $VDIDefaults.Optimization.WindowsServicesEnabled.ToString()
						$OPTWinodwsScheduledTasksEnabled  = $VDIDefaults.Optimization.WindowsScheduledTasksEnabled.ToString()
						$OPTWindowsAdvancedOptionsEnabled = $VDIDefaults.Optimization.WindowsAdvancedOptionsEnabled.ToString()
						$OPTNetworkPerformanceEnabled     = $VDIDefaults.Optimization.NetworkPerformanceEnabled.ToString()
						$OPTRegistryEnabled               = $VDIDefaults.Optimization.RegistryEnabled.ToString()
						$OPTVisualEffectsEnabled          = $VDIDefaults.Optimization.VisualEffectsEnabled.ToString()   
						$OPTDiskCleanupEnabled            = $VDIDefaults.Optimization.DiskCleanupEnabled.ToString()
						$OPTCustomScriptEnabled           = $VDIDefaults.Optimization.CustomScriptEnabled.ToString()
					}
					Else
					{
						#unable to retrieve default, use built-in default values
						$OPTEnableOptimization            = "False"
						$OPTOptimizationType              = ""
						$OPTWindowsDefenderATPEnabled     = "False"
						$OPTWindowsComponentsEnabled      = "False"
						$OPTWindowsServicesEnabled        = "False"
						$OPTWinodwsScheduledTasksEnabled  = "False"
						$OPTWindowsAdvancedOptionsEnabled = "False"
						$OPTNetworkPerformanceEnabled     = "False"
						$OPTRegistryEnabled               = "False"
						$OPTVisualEffectsEnabled          = "False"
						$OPTDiskCleanupEnabled            = "False"
						$OPTCustomScriptEnabled           = "False"
					}
				}
				Else
				{
					#we don't inherit
					#get the settings for the template
					
					$OPTEnableOptimization            = $VDITemplate.Optimization.EnableOptimization.ToString()
					$OPTOptimizationType              = $VDITemplate.Optimization.OptimizationType.ToString()
					$OPTWindowsDefenderATPEnabled     = $VDITemplate.Optimization.WindowsDefenderATPEnabled.ToString()    
					$OPTWindowsComponentsEnabled      = $VDITemplate.Optimization.WindowsComponentsEnabled.ToString()
					$OPTWindowsServicesEnabled        = $VDITemplate.Optimization.WindowsServicesEnabled.ToString()
					$OPTWinodwsScheduledTasksEnabled  = $VDITemplate.Optimization.WindowsScheduledTasksEnabled.ToString()
					$OPTWindowsAdvancedOptionsEnabled = $VDITemplate.Optimization.WindowsAdvancedOptionsEnabled.ToString()
					$OPTNetworkPerformanceEnabled     = $VDITemplate.Optimization.NetworkPerformanceEnabled.ToString()
					$OPTRegistryEnabled               = $VDITemplate.Optimization.RegistryEnabled.ToString()
					$OPTVisualEffectsEnabled          = $VDITemplate.Optimization.VisualEffectsEnabled.ToString()   
					$OPTDiskCleanupEnabled            = $VDITemplate.Optimization.DiskCleanupEnabled.ToString()
					$OPTCustomScriptEnabled           = $VDITemplate.Optimization.CustomScriptEnabled.ToString()
				}

				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $VDITemplate.InheritDefaultUserProfileSettings.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Enable optimization"; Value = $OPTEnableOptimization; }) > $Null
					$ScriptInformation.Add(@{Data = "Optimization type"; Value = $OPTOptimizationType; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 250;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""

					WriteWordLine 5 0 "Windows Defender ATP:" $OPTWindowsDefenderATPEnabled
					If($OPTWindowsDefenderATPEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Windows Defender ATP Optimizations"; Value = ""; }) > $Null

						If($VDITemplate.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
						{
							$ScriptInformation.Add(@{Data = "     Turn off Windows Defender ATP (I use my own ATP solution)"; Value = ""; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = "     Turn on Windows Defender ATP and set process and folder exclusions"; Value = ""; }) > $Null
							$ScriptInformation.Add(@{Data = "     Disable real-time protection"; Value = $VDITemplate.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString(); }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							
							$cnt = -1
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeFolders)
							{
								$cnt++
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "     Exclude files and folders"; Value = $item; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
								}
							}

							$cnt = -1
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeProcesses)
							{
								$cnt++
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "     Exclude processes"; Value = $item; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
								}
							}
							
							$cnt = -1
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeExtension)
							{
								$cnt++
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "     Exclude extensions"; Value = $item; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
								}
							}
						}

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 250;
						$Table.Columns.Item(2).Width = 250;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}

					WriteWordLine 5 0 "Windows Components:" $OPTWindowsComponentsEnabled
					If($OPTWindowsComponentsEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Windows Components Optimizations"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "Disable (remove) components:"; Value = ""; }) > $Null

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 15;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""

						$ScriptInformation = New-Object System.Collections.ArrayList
						$OptimizationTable = @()
			
						ForEach($item in $VDITemplate.Optimization.WindowsComponents.WindowsComponentsList)
						{
								If($Null -eq $item.DisplayName)
								{
									$DisplayName = ""
								}
								Else
								{
									$DisplayName = $item.DisplayName
								}
								If($Null -eq $item.ComponentName)
								{
									$ComponentName = ""
								}
								Else
								{
									$ComponentName = $item.ComponentName
								}
							$OptimizationTable += @{
								DisplayName = $DisplayName
								ComponentName = $ComponentName
							}
						}

						If($OptimizationTable.Count -gt 0)
						{
							$Table = AddWordTable -Hashtable $OptimizationTable `
							-Columns DisplayName, ComponentName `
							-Headers "Display name", "Component" `
							-Format $wdTableGrid `
							-AutoFit $wdAutoFitFixed;

							SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

							$Table.Columns.Item(1).Width = 200;
							$Table.Columns.Item(2).Width = 200;
							
							$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

							FindWordDocumentEnd
							$Table = $Null
							WriteWordLine 0 0 ""
						}
					}

					WriteWordLine 5 0 "Windows Services: " $OPTWindowsServicesEnabled       
					If($OPTWindowsServicesEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Windows Services Optimizations"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "Disable services:"; Value = ""; }) > $Null

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 15;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""

						$ScriptInformation = New-Object System.Collections.ArrayList
						$OptimizationTable = @()
			
						ForEach($item in $VDITemplate.Optimization.WindowsServices.WindowsServicesList)
						{
								If($Null -eq $item.DisplayName)
								{
									$DisplayName = ""
								}
								Else
								{
									$DisplayName = $item.DisplayName
								}
								If($Null -eq $item.ServiceName)
								{
									$Service = ""
								}
								Else
								{
									$Service = $item.ServiceName
								}
								If($Null -eq $item.Aliases)
								{
									$Aliases = ""
								}
								Else
								{
									$Aliases = $item.Aliases
								}
							$OptimizationTable += @{
								DisplayName = $DisplayName
								Service     = $Service
								Aliases     = $Aliases
							}
						}

						If($OptimizationTable.Count -gt 0)
						{
							$Table = AddWordTable -Hashtable $OptimizationTable `
							-Columns DisplayName, Service, Aliases `
							-Headers "Display name", "Service", "Aliases" `
							-Format $wdTableGrid `
							-AutoFit $wdAutoFitFixed;

							SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

							$Table.Columns.Item(1).Width = 200;
							$Table.Columns.Item(2).Width = 100;
							$Table.Columns.Item(3).Width = 50;
							
							$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

							FindWordDocumentEnd
							$Table = $Null
							WriteWordLine 0 0 ""
						}
					}
					
					WriteWordLine 5 0 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled 
					If($OPTWinodwsScheduledTasksEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Windows Scheduled Tasks Optimizations"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "Disable tasks:"; Value = ""; }) > $Null

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 15;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""

						$ScriptInformation = New-Object System.Collections.ArrayList
						$OptimizationTable = @()
			
						ForEach($item in $VDITemplate.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
						{
								If($Null -eq $item.Task)
								{
									$Task = ""
								}
								Else
								{
									$Task = $item.Task
								}
								If($Null -eq $item.Type)
								{
									$Type = ""
								}
								Else
								{
									$Type = $item.Type.ToString()
								}
								If($Null -eq $item.Location)
								{
									$Location = ""
								}
								Else
								{
									$Location = $item.Location
								}
							$OptimizationTable += @{
								Task     = $Task
								Type     = $Type
								Location = $Location
							}
						}

						If($OptimizationTable.Count -gt 0)
						{
							$Table = AddWordTable -Hashtable $OptimizationTable `
							-Columns Task, Type, Location `
							-Headers "Task", "Type", "Location" `
							-Format $wdTableGrid `
							-AutoFit $wdAutoFitFixed;

							SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

							$Table.Columns.Item(1).Width = 200;
							$Table.Columns.Item(2).Width = 50;
							$Table.Columns.Item(3).Width = 250;
							
							$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

							FindWordDocumentEnd
							$Table = $Null
							WriteWordLine 0 0 ""
						}
					}
					
					WriteWordLine 5 0 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
					If($OPTWindowsAdvancedOptionsEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Windows Advanced Options"; Value = ""; }) > $Null

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 15;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""

						$ScriptInformation = New-Object System.Collections.ArrayList
						$OptimizationTable = @()
			
						$OptimizationTable += @{
							Setting = "Disable Hibernate"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.Hibernate.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Disable Telemetry collection"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.TeleCollection.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Disable System Restore"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.SystemRestore.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Disable error reporting to send additional data"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Disable Tiles"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.Tiles.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Disable Cortana digital assistant"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.Cortana.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Turn off Microsoft consumer experience"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Do not show Windows tips"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.WindowsTips.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Remove Common program groups from the Start Menu"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Partial Start Menu layout"
							Enabled = $VDITemplate.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString()
							Value   = $VDITemplate.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent
						}

						If($OptimizationTable.Count -gt 0)
						{
							$Table = AddWordTable -Hashtable $OptimizationTable `
							-Columns Setting, Enabled, Value `
							-Headers "Setting", "Enabled", "Value" `
							-Format $wdTableGrid `
							-AutoFit $wdAutoFitFixed;

							SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

							$Table.Columns.Item(1).Width = 275;
							$Table.Columns.Item(2).Width = 50;
							$Table.Columns.Item(3).Width = 175;
							
							$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

							FindWordDocumentEnd
							$Table = $Null
							WriteWordLine 0 0 ""
						}
					}
					
					WriteWordLine 5 0 "Network performance: " $OPTNetworkPerformanceEnabled
					If($OPTNetworkPerformanceEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Network Performance Optimizations"; Value = ""; }) > $Null

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 15;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""

						$ScriptInformation = New-Object System.Collections.ArrayList
						$OptimizationTable = @()
			
						$OptimizationTable += @{
							Setting = "FileInfoCacheEntriesMax"
							Enabled = $VDITemplate.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString()
							Value   = $VDITemplate.Optimization.NetworkPerformance.FileInfoCache
						}

						$OptimizationTable += @{
							Setting = "DirectoryCacheEntriesMax"
							Enabled = $VDITemplate.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString()
							Value   = $VDITemplate.Optimization.NetworkPerformance.DirCacheMax
						}

						$OptimizationTable += @{
							Setting = "FileNotFoundCacheEntriesMax"
							Enabled = $VDITemplate.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString()
							Value   = $VDITemplate.Optimization.NetworkPerformance.FileNotFoundCache
						}

						$OptimizationTable += @{
							Setting = "DormantFileLimit"
							Enabled = $VDITemplate.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString()
							Value   = $VDITemplate.Optimization.NetworkPerformance.DormantFileLimit
						}

						$OptimizationTable += @{
							Setting = "Disable TCP/IP Task Offload"
							Enabled = $VDITemplate.Optimization.NetworkPerformance.DisableTCP.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Disable IPv6 Components"
							Enabled = $VDITemplate.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Disable IPv6 to IPv4"
							Enabled = $VDITemplate.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString()
							Value   = ""
						}

						$OptimizationTable += @{
							Setting = "Disables isatap for IPv6"
							Enabled = $VDITemplate.Optimization.NetworkPerformance.DisableIsaTap.ToString()
							Value   = ""
						}

						If($OptimizationTable.Count -gt 0)
						{
							$Table = AddWordTable -Hashtable $OptimizationTable `
							-Columns Setting, Enabled, Value `
							-Headers "Setting", "Enabled", "Value" `
							-Format $wdTableGrid `
							-AutoFit $wdAutoFitFixed;

							SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

							$Table.Columns.Item(1).Width = 150;
							$Table.Columns.Item(2).Width = 50;
							$Table.Columns.Item(3).Width = 50;
							
							$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

							FindWordDocumentEnd
							$Table = $Null
							WriteWordLine 0 0 ""
						}
					}

					WriteWordLine 5 0 "Registry: " $OPTRegistryEnabled
					If($OPTRegistryEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Registry Optimizations"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null

						ForEach($item in $VDITemplate.Optimization.Registry.RegistryList)
						{
							If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
							{
								$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
								$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
								$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
								$ScriptInformation.Add(@{Data = "Type"; Value = $item.RegType.ToString(); }) > $Null
								$ScriptInformation.Add(@{Data = "Data"; Value = $item.StringValue; }) > $Null
								$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
							ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
							{
								$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
								$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
								$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
								$ScriptInformation.Add(@{Data = "Type"; Value = $item.RegType.ToString(); }) > $Null
								$ScriptInformation.Add(@{Data = "Data"; Value = $item.DWORDValue; }) > $Null
								$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
							ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
							{
								$ScriptInformation.Add(@{Data = "Registry"; Value = $item.DisplayName; }) > $Null
								$ScriptInformation.Add(@{Data = "Action"; Value = $item.Action; }) > $Null
								$ScriptInformation.Add(@{Data = "Value"; Value = $item.RegistryName; }) > $Null
								$ScriptInformation.Add(@{Data = "Type"; Value = $item.RegType.ToString(); }) > $Null
								$cnt = -1
								$TmpArray = $item.StringValue.Split("`r")
								ForEach($SubItem in $TmpArray)
								{
									$cnt++
									
									If($cnt -eq 0)
									{
										$ScriptInformation.Add(@{Data = "Type"; Value = $SubItem; }) > $Null
									}
									Else
									{
										$ScriptInformation.Add(@{Data = ""; Value = $SubItem; }) > $Null
									}
								}
								$ScriptInformation.Add(@{Data = "Path"; Value = "$($item.HiveType)\$($item.Path)"; }) > $Null
								$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
							}
						}

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 125;
						$Table.Columns.Item(2).Width = 375;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
					
					WriteWordLine 5 0 "Visual Effects: " $OPTVisualEffectsEnabled
					If($OPTVisualEffectsEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Visual Effects Optimizations"; Value = ""; }) > $Null

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 15;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""

						$ScriptInformation = New-Object System.Collections.ArrayList
						$OptimizationTable = @()
			
						$OptimizationTable += @{
							Setting = "Animate controls and elements inside windows"
							Enabled = $VDITemplate.Optimization.VisualEffects.AnimateControlSelectElements.ToString()
						}

						$OptimizationTable += @{
							Setting = "Animate windows when minimizing and maximizing"
							Enabled = $VDITemplate.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString()
						}

						$OptimizationTable += @{
							Setting = "Animations in the taskbar"
							Enabled = $VDITemplate.Optimization.VisualEffects.AnimateTaskbar.ToString()
						}

						$OptimizationTable += @{
							Setting = "Enable Peek"
							Enabled = $VDITemplate.Optimization.VisualEffects.EnablePeek.ToString()
						}

						$OptimizationTable += @{
							Setting = "Fade or slide menus into view"
							Enabled = $VDITemplate.Optimization.VisualEffects.FadeSlideMenus.ToString()
						}

						$OptimizationTable += @{
							Setting = "Fade or slide Tooltips into view"
							Enabled = $VDITemplate.Optimization.VisualEffects.FadeSlideToolTips.ToString()
						}

						$OptimizationTable += @{
							Setting = "Fade out menu items after clicking"
							Enabled = $VDITemplate.Optimization.VisualEffects.FadeOutMenuItems.ToString()
						}

						$OptimizationTable += @{
							Setting = "Save taskbar thumbnail previews"
							Enabled = $VDITemplate.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString()
						}

						$OptimizationTable += @{
							Setting = "Show shadows under mouse pointer"
							Enabled = $VDITemplate.Optimization.VisualEffects.ShowShadowUnderMouse.ToString()
						}

						$OptimizationTable += @{
							Setting = "Show shadows under windows"
							Enabled = $VDITemplate.Optimization.VisualEffects.ShadowUnderWindows.ToString()
						}

						$OptimizationTable += @{
							Setting = "Show thumbnails instead of icons"
							Enabled = $VDITemplate.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString()
						}

						$OptimizationTable += @{
							Setting = "Show translucent selection rectangle"
							Enabled = $VDITemplate.Optimization.VisualEffects.ShowTranslucentSelection.ToString()
						}

						$OptimizationTable += @{
							Setting = "Show window contents while dragging"
							Enabled = $VDITemplate.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString()
						}

						$OptimizationTable += @{
							Setting = "Slide open combo boxes"
							Enabled = $VDITemplate.Optimization.VisualEffects.SlideOpenComboBoxes.ToString()
						}

						$OptimizationTable += @{
							Setting = "Smooth edges of screen fonts"
							Enabled = $VDITemplate.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString()
						}

						$OptimizationTable += @{
							Setting = "Smooth-scroll list boxes"
							Enabled = $VDITemplate.Optimization.VisualEffects.SmoothScrollListBoxes.ToString()
						}

						$OptimizationTable += @{
							Setting = "Use drop shadows for icon labels on the desktop"
							Enabled = $VDITemplate.Optimization.VisualEffects.DropShadowsIcon.ToString()
						}

						If($OptimizationTable.Count -gt 0)
						{
							$Table = AddWordTable -Hashtable $OptimizationTable `
							-Columns Setting, Enabled `
							-Headers "Setting", "Enabled" `
							-Format $wdTableGrid `
							-AutoFit $wdAutoFitFixed;

							SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

							$Table.Columns.Item(1).Width = 250;
							$Table.Columns.Item(2).Width = 50;
							
							$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

							FindWordDocumentEnd
							$Table = $Null
							WriteWordLine 0 0 ""
						}
					}
					
					WriteWordLine 5 0 "Disk cleanup: " $OPTDiskCleanupEnabled
					If($OPTDiskCleanupEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Disk Cleanup Optimizations"; Value = ""; }) > $Null

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 200;
						$Table.Columns.Item(2).Width = 15;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""

						$ScriptInformation = New-Object System.Collections.ArrayList
						$OptimizationTable = @()
			
						$OptimizationTable += @{
							Setting = "Clean up redundant system files"
							Enabled = $VDITemplate.Optimization.DiskCleanup.CleanupSystemFiles.ToString()
						}

						$OptimizationTable += @{
							Setting = "Clean up the WinSxS Folder"
							Enabled = $VDITemplate.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString()
						}

						$OptimizationTable += @{
							Setting = "Clean up temporary files and logs"
							Enabled = $VDITemplate.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString()
						}

						$OptimizationTable += @{
							Setting = "Remove OneDrive"
							Enabled = $VDITemplate.Optimization.DiskCleanup.RemoveOneDrive.ToString()
						}

						$OptimizationTable += @{
							Setting = "Delete users' profiles"
							Enabled = $VDITemplate.Optimization.DiskCleanup.DeleteUserProfiles.ToString()
						}

						If($OptimizationTable.Count -gt 0)
						{
							$Table = AddWordTable -Hashtable $OptimizationTable `
							-Columns Setting, Enabled `
							-Headers "Setting", "Enabled" `
							-Format $wdTableGrid `
							-AutoFit $wdAutoFitFixed;

							SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

							$Table.Columns.Item(1).Width = 175;
							$Table.Columns.Item(2).Width = 50;
							
							$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

							FindWordDocumentEnd
							$Table = $Null
							WriteWordLine 0 0 ""
						}
					}

					WriteWordLine 5 0 "Custom script: " $OPTCustomScriptEnabled
					If($OPTCustomScriptEnabled -eq "True")
					{
						$ScriptInformation = New-Object System.Collections.ArrayList
						$ScriptInformation.Add(@{Data = "Custom Script"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "     Command"; Value = $VDITemplate.Optimization.CustomScript.Command; }) > $Null
						$ScriptInformation.Add(@{Data = "     Arguments"; Value = $VDITemplate.Optimization.CustomScript.Arguments; }) > $Null
						$ScriptInformation.Add(@{Data = "     Initial directory"; Value = $VDITemplate.Optimization.CustomScript.InitDir; }) > $Null
						$ScriptInformation.Add(@{Data = "     Username"; Value = $VDITemplate.Optimization.CustomScript.User; }) > $Null

						$Table = AddWordTable -Hashtable $ScriptInformation `
						-Columns Data,Value `
						-List `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 100;
						$Table.Columns.Item(2).Width = 200;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				If($Text)
				{
					Line 3 "Inherit default settings`t: " $VDITemplate.InheritDefaultOptimizationSettings.ToString()
					Line 3 "Enable optimization`t`t: " $OPTEnableOptimization
					Line 3 "Optimization type`t`t: " $OPTOptimizationType
					Line 3 "Category"
					
					Line 4 "Windows Defender ATP: " $OPTWindowsDefenderATPEnabled
					If($OPTWindowsDefenderATPEnabled -eq "True")
					{
						Line 5 "Windows Defender ATP Optimizations"
						If($VDITemplate.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
						{
							Line 6 "Turn off Windows Defender ATP (I use my own ATP solution)"
						}
						Else
						{
							Line 6 "Turn on Windows Defender ATP and set process and folder exclusions"
							Line 6 "Disable real-time protection: " $VDITemplate.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString()
							Line 0 ""
							Line 6 "Exclude files and folders:"
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeFolders)
							{
								Line 7 $item
							}

							Line 6 "Exclude processes:"
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeProcesses)
							{
								Line 7 $item
							}
							
							Line 6 "Exclude extensions:"
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeExtension)
							{
								Line 7 $item
							}
						}
						
						Line 0 ""
					}
					
					Line 4 "Windows Components: " $OPTWindowsComponentsEnabled
					If($OPTWindowsComponentsEnabled -eq "True")
					{
						Line 5 "Windows Components Optimizations"
						Line 6 "Disable (remove) components:"
						Line 0 ""
						Line 6 "Display name                                        Component                                         "
						Line 6 "======================================================================================================"
						#		12345678901234567890123456789012345678901234567890SS12345678901234567890123456789012345678901234567890
						#		Printing-XPSServices-Features                       SMB 1.0/CIFS File sharing support component
						ForEach($item in $VDITemplate.Optimization.WindowsComponents.WindowsComponentsList)
						{
							Line 6 ( "{0,-50}  {1,-50}" -f $item.DisplayName, $item.ComponentName)
						}
						Line 0 ""
					}
					
					Line 4 "Windows Services: " $OPTWindowsServicesEnabled       
					If($OPTWindowsServicesEnabled -eq "True")
					{
						Line 5 "Windows Services Optimizations"
						Line 6 "Disable services:"
						Line 0 ""
						Line 6 "Display name                                        Service                         Aliases             "
						Line 6 "========================================================================================================"
						#		12345678901234567890123456789012345678901234567890SS123456789012345678901234567890SS12345678901234567890
						#		Windows Media Player Network Sharing Service        TabletInputService              Superfecth
						ForEach($item in $VDITemplate.Optimization.WindowsServices.WindowsServicesList)
						{
							Line 6 ( "{0,-50}  {1,-30}  {2,-20}" -f $item.DisplayName, $item.ServiceName, $item.Aliases)
						}
						Line 0 ""
					}
					
					Line 4 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled 
					If($OPTWinodwsScheduledTasksEnabled -eq "True")
					{
						Line 5 "Windows Scheduled Tasks Optimizations"
						Line 6 "Disable tasks:"
						Line 0 ""
						Line 6 "Task                                                Type    Location                                          "
						Line 6 "=============================================================================================================="
						#		12345678901234567890123456789012345678901234567890SS123456SS12345678901234567890123456789012345678901234567890
						#		MNO Metadata Parser                                 Folder  \Microsoft\Windows\Mobile Broadband Accounts\
						ForEach($item in $VDITemplate.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
						{
							Line 6 ( "{0,-50}  {1,-6}  {2,-50}" -f $item.Task, $item.Type.ToString(), $item.Location)
						}
						Line 0 ""
					}

					Line 4 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
					If($OPTWindowsAdvancedOptionsEnabled -eq "True")
					{
						Line 5 "Windows Advanced Options"
						Line 0 ""
						Line 6 "Setting                                           Enabled  Value                                             "
						Line 6 "============================================================================================================="
						#		123456789012345678901234567890123456789012345678SS1234567SS12345678901234567890123456789012345678901234567890
						#		Remove Common program groups from the start menu  False    SomeConfigFile.xml
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Disable Hibernate", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.Hibernate.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Disable Telemetry collection", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.TeleCollection.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Disable System Restore", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.SystemRestore.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Disable error reporting to send additional data", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Disable Tiles", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.Tiles.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Disable Cortana digital assistant", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.Cortana.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Turn off Microsoft consumer experience", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Do not show Windows tips", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.WindowsTips.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Remove Common program groups from the Start Menu", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString(), `
						"")
						
						Line 6 ( "{0,-48}  {1,-7}  {2,-50}" -f `
						"Partial Start Menu layout", `
						$VDITemplate.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString(), `
						$VDITemplate.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent)
						
						Line 0 ""
					}

					Line 4 "Network performance: " $OPTNetworkPerformanceEnabled
					If($OPTNetworkPerformanceEnabled -eq "True")
					{
						Line 5 "Network Performance Optimizations"
						Line 0 ""
						Line 6 "Setting                      Enabled  Value"
						Line 6 "==========================================="
						#		123456789012345678901234567SS1234567SS12345
						#		FileNotFoundCacheEntriesMax  False    32768
						Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
						"FileInfoCacheEntriesMax", `
						$VDITemplate.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString(), `
						$VDITemplate.Optimization.NetworkPerformance.FileInfoCache)
						
						Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
						"DirectoryCacheEntriesMax", `
						$VDITemplate.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString(), `
						$VDITemplate.Optimization.NetworkPerformance.DirCacheMax)
						
						Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
						"FileNotFoundCacheEntriesMax", `
						$VDITemplate.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString(), `
						$VDITemplate.Optimization.NetworkPerformance.FileNotFoundCache)
						
						Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
						"DormantFileLimit", `
						$VDITemplate.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString(), `
						$VDITemplate.Optimization.NetworkPerformance.DormantFileLimit)
						
						Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
						"Disable TCP/IP Task Offload", `
						$VDITemplate.Optimization.NetworkPerformance.DisableTCP.ToString(), `
						"")
						
						Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
						"Disable IPv6 Components", `
						$VDITemplate.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString(), `
						"")
						
						Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
						"Disable IPv6 to IPv4", `
						$VDITemplate.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString(), `
						"")
						
						Line 6 ( "{0,-27}  {1,-7}  {2,-5}" -f `
						"Disables isatap for IPv6", `
						$VDITemplate.Optimization.NetworkPerformance.DisableIsaTap.ToString(), `
						"")
						
						Line 0 ""
					}

					Line 4 "Registry: " $OPTRegistryEnabled
					If($OPTRegistryEnabled -eq "True")
					{
						Line 5 "Registry Optimizations"
						Line 0 ""
						#		123456789012345678901234567SS1234567SS12345
						#		FileNotFoundCacheEntriesMax  False    32768
						Line 6 "Registry                                  Action  Value                 Type           Data                  Path                                                        "
						Line 6 "========================================================================================================================================================================="
						#		1234567890123456789012345678901234567890SS123456SS12345678901234567890SS1234567890123SS12345678901234567890SS123456789012345678901234567890123456789012345678901234567890
						#		Increase service startup timeouts         Modify  99999999999999999999  REG_EXPAND_SZ  99999999999999999999  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Disk
						ForEach($item in $RDSHost.Optimization.Registry.RegistryList)
						{
							If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
							{
								Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
								$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.StringValue, "$($item.HiveType)\$($item.Path)")
							}
							ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
							{
								Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
								$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.DWORDValue, "$($item.HiveType)\$($item.Path)")
							}
							ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
							{
								#If($item.StringValue.Count -eq 1)
								#{
								#	Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
								#	$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $item.StringValue.ToString(), "$($item.HiveType)\$($item.Path)")
								#}
								#Else
								#{
									$cnt = -1
									$TmpArray = $item.StringValue.Split("`r")
									ForEach($SubItem in $TmpArray)
									{
										$cnt++
										
										If($cnt -eq 0)
										{
											Line 7 ( "{0,-40}  {1,-6}  {2,-20}  {3,-13}  {4,-20}  {5,-60}" -f `
											$item.DisplayName, $item.Action, $item.RegistryName, $item.RegType.ToString(), $SubItem, "$($item.HiveType)\$($item.Path)")
										}
										Else
										{
											Line 17 "       " $SubItem
										}
									}
								#}
							}
						}
						Line 0 ""
					}

					Line 4 "Visual Effects: " $OPTVisualEffectsEnabled
					If($OPTVisualEffectsEnabled -eq "True")
					{
						Line 5 "Visual Effects Optimizations"
						Line 0 ""
						
						Switch ($VDITemplate.Optimization.VisualEffects.VisualEffectsTypes)
						{
							"LetWindowsChooseWhatsBest"	{$VisualEffectsType = "Let Windows choose what's best"; Break}
							"AdjustForBestAppearnce"	{$VisualEffectsType = "Adjust for best appearance"; Break} #misspelled in the PoSH output and the docs
							"AdjustForBestPerformance"	{$VisualEffectsType = "Adjust for best performance"; Break}
							"Custom"					{$VisualEffectsType = "Custom"; Break}
							Default						{$VisualEffectsType = "Unable to determine Visual Effects Optimization type: $($VDITemplate.Optimization.VisualEffects.VisualEffectsTypes)"; Break}
						}
						Line 6 $VisualEffectsType
						Line 0 ""
						Line 6 "Setting                                             Enabled"
						Line 6 "==========================================================="
						#		12345678901234567890123456789012345678901234567890SS1234567
						#		Use drop shadows for icon labels on the desktop     False  
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Animate controls and elements inside windows", `
						$VDITemplate.Optimization.VisualEffects.AnimateControlSelectElements.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Animate windows when minimizing and maximizing", `
						$VDITemplate.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Animations in the taskbar", `
						$VDITemplate.Optimization.VisualEffects.AnimateTaskbar.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Enable Peek", `
						$VDITemplate.Optimization.VisualEffects.EnablePeek.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Fade or slide menus into view", `
						$VDITemplate.Optimization.VisualEffects.FadeSlideMenus.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Fade or slide Tooltips into view", `
						$VDITemplate.Optimization.VisualEffects.FadeSlideToolTips.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Fade out menu items after clicking", `
						$VDITemplate.Optimization.VisualEffects.FadeOutMenuItems.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Save taskbar thumbnail previews", `
						$VDITemplate.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Show shadows under mouse pointer", `
						$VDITemplate.Optimization.VisualEffects.ShowShadowUnderMouse.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Show shadows under windows", `
						$VDITemplate.Optimization.VisualEffects.ShadowUnderWindows.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Show thumbnails instead of icons", `
						$VDITemplate.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Show translucent selection rectangle", `
						$VDITemplate.Optimization.VisualEffects.ShowTranslucentSelection.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Show window contents while dragging", `
						$VDITemplate.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Slide open combo boxes", `
						$VDITemplate.Optimization.VisualEffects.SlideOpenComboBoxes.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Smooth edges of screen fonts", `
						$VDITemplate.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Smooth-scroll list boxes", `
						$VDITemplate.Optimization.VisualEffects.SmoothScrollListBoxes.ToString())
						
						Line 6 ( "{0,-50}  {1,-7}" -f `
						"Use drop shadows for icon labels on the desktop", `
						$VDITemplate.Optimization.VisualEffects.DropShadowsIcon.ToString())
						
						Line 0 ""
					}

					Line 4 "Disk cleanup: " $OPTDiskCleanupEnabled
					If($OPTDiskCleanupEnabled -eq "True")
					{
						Line 5 "Disk Cleanup Optimizations"
						Line 0 ""
						
						Line 6 "Setting                            Enabled"
						Line 6 "=========================================="
						#		123456789012345678901234567890123SS1234567
						#		Clean up temporary files and logs  False  
						Line 6 ( "{0,-33}  {1,-7}" -f `
						"Clean up redundant system files", `
						$VDITemplate.Optimization.DiskCleanup.CleanupSystemFiles.ToString())
						
						Line 6 ( "{0,-33}  {1,-7}" -f `
						"Clean up the WinSxS Folder", `
						$VDITemplate.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString())
						
						Line 6 ( "{0,-33}  {1,-7}" -f `
						"Clean up temporary files and logs", `
						$VDITemplate.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString())
						
						Line 6 ( "{0,-33}  {1,-7}" -f `
						"Remove OneDrive", `
						$VDITemplate.Optimization.DiskCleanup.RemoveOneDrive.ToString())
						
						Line 6 ( "{0,-33}  {1,-7}" -f `
						"Delete users' profiles", `
						$VDITemplate.Optimization.DiskCleanup.DeleteUserProfiles.ToString())
						
						Line 0 ""
					}

					Line 4 "Custom script: " $OPTCustomScriptEnabled
					If($OPTCustomScriptEnabled  -eq "True")
					{
						Line 5 "Custom Script"
						Line 0 ""
						
						Line 6 "Command`t`t : " $VDITemplate.Optimization.CustomScript.Command
						Line 6 "Arguments`t : " $VDITemplate.Optimization.CustomScript.Arguments
						Line 6 "Initial directory: " $VDITemplate.Optimization.CustomScript.InitDir
						Line 6 "Username`t : " $VDITemplate.Optimization.CustomScript.User
						Line 0 ""
					}
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Inherit default settings:",($Script:htmlsb),$VDITemplate.InheritDefaultOptimizationSettings.ToString(),$htmlwhite)
					$rowdata += @(,("Enable optimization:",($Script:htmlsb), $OPTEnableOptimization,$htmlwhite))
					$rowdata += @(,("Optimization type:",($Script:htmlsb), $OPTOptimizationType,$htmlwhite))

					$msg = "Optimization"
					$columnWidths = @("300","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""

					WriteHTMLLine 4 0 "Windows Defender ATP: " $OPTWindowsDefenderATPEnabled
					If($OPTWindowsDefenderATPEnabled -eq "True")
					{
						$rowdata = @()
						$columnHeaders = @("Windows Defender ATP Optimizations",($Script:htmlsb),"",$htmlwhite)

						If($VDITemplate.Optimization.WindowsDefenderATP.WinDefATPTurnOffOn.ToString() -eq "TurnOffWindowsDefenderATP")
						{
							$rowdata += @(,("     Turn off Windows Defender ATP (I use my own ATP solution)",($Script:htmlsb), "",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("     Turn on Windows Defender ATP and set process and folder exclusions",($Script:htmlsb), "",$htmlwhite))
							$rowdata += @(,("     Disable real-time protection",($Script:htmlsb), $VDITemplate.Optimization.WindowsDefenderATP.DisableRealTimeProtection.ToString(),$htmlwhite))
							$rowdata += @(,("",($Script:htmlsb), "",$htmlwhite))
							
							$cnt = -1
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeFolders)
							{
								$cnt++
								If($cnt -eq 0)
								{
									$rowdata += @(,("     Exclude files and folders",($Script:htmlsb), $item,$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
								}
							}

							$cnt = -1
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeProcesses)
							{
								$cnt++
								If($cnt -eq 0)
								{
									$rowdata += @(,("     Exclude processes",($Script:htmlsb), $item,$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
								}
							}
							
							$cnt = -1
							ForEach($item in $VDITemplate.Optimization.WindowsDefenderATP.ExcludeExtension)
							{
								$cnt++
								If($cnt -eq 0)
								{
									$rowdata += @(,("     Exclude extensions",($Script:htmlsb), $item,$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb), $item,$htmlwhite))
								}
							}
						}


						$msg = ""
						$columnWidths = @("300","275")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Windows Components: " $OPTWindowsComponentsEnabled
					If($OPTWindowsComponentsEnabled -eq "True")
					{
						WriteHTMLLine 0 0 "Windows Components Optimizations"

						$rowdata = @()

						ForEach($item in $VDITemplate.Optimization.WindowsComponents.WindowsComponentsList)
						{
							$rowdata += @(,(
								$item.DisplayName,$htmlwhite,
								$item.ComponentName,$htmlwhite)
							)
						}

						$columnHeaders = @(
							"Display Name",($Script:htmlsb),
							"Component",($Script:htmlsb)
						)

						$msg = "Disable (remove) components:"
						$columnWidths = @("200","200")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Windows Services: " $OPTWindowsServicesEnabled       
					If($OPTWindowsServicesEnabled -eq "True")
					{
						WriteHTMLLine 0 0 "Windows Services Optimizations"

						$rowdata = @()

						ForEach($item in $VDITemplate.Optimization.WindowsServices.WindowsServicesList)
						{
							$rowdata += @(,(
								$item.DisplayName,$htmlwhite,
								$item.ServiceName,$htmlwhite,
								$item.Aliases,$htmlwhite)
							)
						}

						$columnHeaders = @(
							"Display Name",($Script:htmlsb),
							"Service",($Script:htmlsb),
							"Aliases",($Script:htmlsb)
						)

						$msg = "Disable services:"
						$columnWidths = @("200","100","50")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Windows Scheduled Tasks: " $OPTWinodwsScheduledTasksEnabled
					If($OPTWinodwsScheduledTasksEnabled -eq "True")
					{
						WriteHTMLLine 0 0 "Windows Scheduled Tasks Optimizations"

						$rowdata = @()

						ForEach($item in $VDITemplate.Optimization.WindowsScheduledTasks.WindowsScheduledTasksList)
						{
							$rowdata += @(,(
								$item.Task,$htmlwhite,
								$item.Type.Tostring(),$htmlwhite,
								$item.Location,$htmlwhite)
							)
						}

						$columnHeaders = @(
							"Task",($Script:htmlsb),
							"Type",($Script:htmlsb),
							"Location",($Script:htmlsb)
						)

						$msg = "Disable tasks:"
						$columnWidths = @("200","50","250")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Windows advanced options: " $OPTWindowsAdvancedOptionsEnabled
					If($OPTWindowsAdvancedOptionsEnabled -eq "True")
					{
						WriteHTMLLine 0 0 "Windows Advanced Options"

						$rowdata = @()

						$rowdata += @(,(
							"Disable Hibernate",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.Hibernate.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Disable Telemetry collection",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.TeleCollection.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Disable System Restore",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.SystemRestore.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Disable error reporting to send additional data",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.AdditionalErrorReport.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Disable Tiles",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.Tiles.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Disable Cortana digital assistant",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.Cortana.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Turn off Microsoft consumer experience",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.MicrosoftConsumerExperience.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Do not show Windows tips",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.WindowsTips.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Remove Common program groups from the Start Menu",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.CommonProgramGroups.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Partial Start Menu layout",$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.PartialStartMenu.ToString(),$htmlwhite,
							$VDITemplate.Optimization.WindowsAdvancedOptions.PartialStartLayoutContent,$htmlwhite)
						)

						$columnHeaders = @(
							"Setting",($Script:htmlsb),
							"Enabled",($Script:htmlsb),
							"Value",($Script:htmlsb)
						)

						$msg = ""
						$columnWidths = @("300","50","200")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Network performance: " $OPTNetworkPerformanceEnabled
					If($OPTWindowsAdvancedOptionsEnabled -eq "True")
					{
						WriteHTMLLine 0 0 "Network Performance Optimizations"

						$rowdata = @()

						$rowdata += @(,(
							"FileInfoCacheEntriesMax",$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.FileInfoCacheEnable.ToString(),$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.FileInfoCache,$htmlwhite)
						)

						$rowdata += @(,(
							"DirectoryCacheEntriesMax",$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.DirectoryCacheEnable.ToString(),$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.DirCacheMax,$htmlwhite)
						)

						$rowdata += @(,(
							"FileNotFoundCacheEntriesMax",$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.FileNotFoundCacheEnable.ToString(),$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.FileNotFoundCache,$htmlwhite)
						)

						$rowdata += @(,(
							"DormantFileLimit",$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.DormantFileLimitEnable.ToString(),$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.DormantFileLimit,$htmlwhite)
						)

						$rowdata += @(,(
							"Disable TCP/IP Task Offload",$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.DisableTCP.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Disable IPv6 Components",$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.DisableIPv6CompEnable.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Disable IPv6 to IPv4",$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.DisableIPv6ToIPv4.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$rowdata += @(,(
							"Disables isatap for IPv6",$htmlwhite,
							$VDITemplate.Optimization.NetworkPerformance.DisableIsaTap.ToString(),$htmlwhite,
							"",$htmlwhite)
						)

						$columnHeaders = @(
							"Setting",($Script:htmlsb),
							"Enabled",($Script:htmlsb),
							"Value",($Script:htmlsb)
						)

						$msg = ""
						$columnWidths = @("170","50","50")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Registry: " $OPTRegistryEnabled       
					If($OPTRegistryEnabled -eq "True")
					{
						WriteHTMLLine 0 0 "Registry Optimizations"

						$rowdata = @()

						ForEach($item in $VDITemplate.Optimization.Registry.RegistryList)
						{
							If($item.RegType.ToString() -eq "REG_SZ" -or $item.RegType.ToString() -eq "REG_EXPAND_SZ")
							{
								$rowdata += @(,(
									$item.DisplayName,$htmlwhite,
									$item.Action,$htmlwhite,
									$item.RegistryName,$htmlwhite,
									$item.RegType.ToString(),$htmlwhite,
									$item.StringValue,$htmlwhite,
									"$($item.HiveType)\$($item.Path)",$htmlwhite)
								)
							}
							ElseIf($item.RegType.ToString() -eq "REG_DWORD" -or $item.RegType.ToString() -eq "REG_QWORD")
							{
								$rowdata += @(,(
									$item.DisplayName,$htmlwhite,
									$item.Action,$htmlwhite,
									$item.RegistryName,$htmlwhite,
									$item.RegType.ToString(),$htmlwhite,
									$item.DWORDValue,$htmlwhite,
									"$($item.HiveType)\$($item.Path)",$htmlwhite)
								)
							}
							ElseIf($item.RegType.ToString() -eq "REG_MULTI_SZ")
							{
								$rowdata += @(,(
									$item.DisplayName,$htmlwhite,
									$item.Action,$htmlwhite,
									$item.RegistryName,$htmlwhite,
									$item.RegType.ToString(),$htmlwhite,
									$item.StringValue.ToString(),$htmlwhite,
									"$($item.HiveType)\$($item.Path)",$htmlwhite)
								)
							}
						}

						$columnHeaders = @(
							"Registry",($Script:htmlsb),
							"Action",($Script:htmlsb),
							"Value",($Script:htmlsb),
							"Type",($Script:htmlsb),
							"Data",($Script:htmlsb),
							"Path",($Script:htmlsb)
						)

						$msg = ""
						$columnWidths = @("200","50","100","100","100","200")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Visual Effects: " $OPTVisualEffectsEnabled
					If($OPTVisualEffectsEnabled -eq "True")
					{
						WriteHTMLLine 0 0 "Visual Effects Optimizations"

						$rowdata = @()

						$rowdata += @(,(
							"Animate controls and elements inside windows",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.AnimateControlSelectElements.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Animate windows when minimizing and maximizing",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.AnimateWindowsWhenMinimizingMaximizing.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Animations in the taskbar",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.AnimateTaskbar.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Enable Peek",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.EnablePeek.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Fade or slide menus into view",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.FadeSlideMenus.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Fade or slide Tooltips into view",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.FadeSlideToolTips.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Fade out menu items after clicking",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.FadeOutMenuItems.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Save taskbar thumbnail previews",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.SaveTaskbarThumbnail.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Show shadows under mouse pointer",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.ShowShadowUnderMouse.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Show shadows under windows",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.ShadowUnderWindows.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Show thumbnails instead of icons",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.ThumbnailsInsteadOfIcons.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Show translucent selection rectangle",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.ShowTranslucentSelection.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Show window contents while dragging",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.ShowWindowsContentWhilstDragging.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Slide open combo boxes",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.SlideOpenComboBoxes.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Smooth edges of screen fonts",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.SmoothEdgesScreenFonts.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Smooth-scroll list boxes",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.SmoothScrollListBoxes.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Use drop shadows for icon labels on the desktop",$htmlwhite,
							$VDITemplate.Optimization.VisualEffects.DropShadowsIcon.ToString(),$htmlwhite)
						)

						$columnHeaders = @(
							"Setting",($Script:htmlsb),
							"Enabled",($Script:htmlsb)
						)

						$msg = ""
						$columnWidths = @("275","50")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Disk cleanup: " $OPTDiskCleanupEnabled
					If($OPTDiskCleanupEnabled -eq "True")
					{
						WriteHTMLLine 0 0 "Disk Cleanup Optimizations"

						$rowdata = @()

						$rowdata += @(,(
							"Clean up redundant system files",$htmlwhite,
							$VDITemplate.Optimization.DiskCleanup.CleanupSystemFiles.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Clean up the WinSxS Folder",$htmlwhite,
							$VDITemplate.Optimization.DiskCleanup.CleanupWinSxSFolder.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Clean up temporary files and logs",$htmlwhite,
							$VDITemplate.Optimization.DiskCleanup.CleanupTemporaryFileLogs.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Remove OneDrive",$htmlwhite,
							$VDITemplate.Optimization.DiskCleanup.RemoveOneDrive.ToString(),$htmlwhite)
						)

						$rowdata += @(,(
							"Delete users' profiles",$htmlwhite,
							$VDITemplate.Optimization.DiskCleanup.DeleteUserProfiles.ToString(),$htmlwhite)
						)

						$columnHeaders = @(
							"Setting",($Script:htmlsb),
							"Enabled",($Script:htmlsb)
						)

						$msg = ""
						$columnWidths = @("200","50")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}

					WriteHTMLLine 4 0 "Custom script: " $OPTCustomScriptEnabled
					If($OPTCustomScriptEnabled -eq "True")
					{
						$rowdata = @()
						$columnHeaders = @("Custom Script",($Script:htmlsb),"",$htmlwhite)
						$rowdata += @(,("     Command",($Script:htmlsb), $VDITemplate.Optimization.CustomScript.Command,$htmlwhite))
						$rowdata += @(,("     Arguments",($Script:htmlsb), $VDITemplate.Optimization.CustomScript.Arguments,$htmlwhite))
						$rowdata += @(,("     Initial directory",($Script:htmlsb), $VDITemplate.Optimization.CustomScript.InitDir,$htmlwhite))
						$rowdata += @(,("     Username",($Script:htmlsb), $VDITemplate.Optimization.CustomScript.User,$htmlwhite))

						$msg = ""
						$columnWidths = @("125","200")
						FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
						WriteHTMLLine 0 0 ""
					}
				}

				#License Keys
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "License Keys"
				}
				If($Text)
				{
					Line 3 "License Keys"
				}
				If($HTML)
				{
					#Nothing
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					
					If($VDITemplate.LicenseKeyType.ToString() -eq "KMS")
					{
						$ScriptInformation.Add(@{Data = "License key management type"; Value = "Key Management Service (KMS)"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "License key management type"; Value = "Multple Activation Key (MAK)"; }) > $Null
						
						$LicenseKeys = Get-RASVDITemplateLicenseKey -Id $VDITemplate.Id -EA 0 4>$Null
						
						ForEach($Item in $LicenseKeys)
						{
							$ScriptInformation.Add(@{Data = "License Key"; Value = $Item.LicenseKey; }) > $Null
							$ScriptInformation.Add(@{Data = "Key Limit"; Value = $Item.KeyLimit; }) > $Null
						}
					}

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					If($VDITemplate.LicenseKeyType.ToString() -eq "KMS")
					{
						Line 4 "License key management type: " "Key Management Service (KMS)"
					}
					Else
					{
						Line 4 "License key management type: " "Multple Activation Key (MAK)"
						
						$LicenseKeys = Get-RASVDITemplateLicenseKey -Id $VDITemplate.Id -EA 0 4>$Null

						ForEach($Item in $LicenseKeys)
						{
							Line 4 "License Key`t: " $Item.LicenseKey
							Line 4 "Key Limit`t: " $Item.KeyLimit
						}
					}
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					If($VDITemplate.LicenseKeyType.ToString() -eq "KMS")
					{
						$columnHeaders = @("License key management type",($Script:htmlsb),"Key Management Service (KMS)",$htmlwhite)
					}
					Else
					{
						$columnHeaders = @("License key management type",($Script:htmlsb),"Multple Activation Key (MAK)",$htmlwhite)
						
						$LicenseKeys = Get-RASVDITemplateLicenseKey -Id $VDITemplate.Id -EA 0 4>$Null

						$cnt = -1
						ForEach($Item in $LicenseKeys)
						{
							$rowdata += @(,("License Key",($Script:htmlsb),$Item.LicenseKey,$htmlwhite))
							$rowdata += @(,("Key Limit",($Script:htmlsb),$Item.KeyLimit,$htmlwhite))
						}
					}

					$msg = "License Keys"
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
				
				#Settings
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "Settings"
				}
				If($Text)
				{
					Line 3 "Settings"
				}
				If($HTML)
				{
					#Nothing
				}
				
				If($VDITemplate.InheritDefaultVDIActionSettings)
				{
					#do we inherit site defaults?
					#yes we do, get the default settings for the Site
					#use the Site default settings

					$VDIDefaults = Get-RASVDIDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
					
					If($? -and $Null -ne $VDIDefaults)
					{
						Switch ($VDIDefaults.SessionResetTimeoutSec)
						{
							0		{$VDITemplateLogoffActiveSessionAfter = "Never"; Break}
							1		{$VDITemplateLogoffActiveSessionAfter = "Immediate"; Break}
							25		{$VDITemplateLogoffActiveSessionAfter = "25 seconds"; Break}
							60		{$VDITemplateLogoffActiveSessionAfter = "1 minute"; Break}
							300		{$VDITemplateLogoffActiveSessionAfter = "5 minutes"; Break}
							3600	{$VDITemplateLogoffActiveSessionAfter = "1 hour"; Break}
							7200	{$VDITemplateLogoffActiveSessionAfter = "2 hours"; Break}
							Default	{$VDITemplateLogoffActiveSessionAfter = "Unable to determine Logoff active session after: $($VDIDefaults.SessionResetTimeoutSec)"; Break}
						}
						
						Switch ($VDIDefaults.PerformActionAfterSec)
						{
							0		{$VDITemplateActionsAfter = "Never"; Break}
							1		{$VDITemplateActionsAfter = "Immediate"; Break}
							25		{$VDITemplateActionsAfter = "25 seconds"; Break}
							60		{$VDITemplateActionsAfter = "1 minute"; Break}
							300		{$VDITemplateActionsAfter = "5 minutes"; Break}
							3600	{$VDITemplateActionsAfter = "1 hour"; Break}
							7200	{$VDITemplateActionsAfter = "2 hours"; Break}
							Default	{$VDITemplateActionsAfter = "Unable to determine Actions After: $($VDIDefaults.PerformActionAfterSec)"; Break}
						}
						$VDITemplateActionsOnSession         = $VDIDefaults.SessionAction.ToString()
						$VDITemplateActionsPerformAction     = $VDIDefaults.PerformAction.ToString()
					}
					Else
					{
						#unable to retrieve default, use built-in default values
						$VDITemplateLogoffActiveSessionAfter = "Never"
						$VDITemplateActionsOnSession         = "Disconnect"
						$VDITemplateActionsPerformAction     = "Do nothing"
						$VDITemplateActionsAfter             = "Never"
					}
				}
				Else
				{
					#No, we don't use the VDI Template settings
					Switch ($VDITemplate.SessionResetTimeoutSec)
					{
						0		{$VDITemplateLogoffActiveSessionAfter = "Never"; Break}
						1		{$VDITemplateLogoffActiveSessionAfter = "Immediate"; Break}
						25		{$VDITemplateLogoffActiveSessionAfter = "25 seconds"; Break}
						60		{$VDITemplateLogoffActiveSessionAfter = "1 minute"; Break}
						300		{$VDITemplateLogoffActiveSessionAfter = "5 minutes"; Break}
						3600	{$VDITemplateLogoffActiveSessionAfter = "1 hour"; Break}
						7200	{$VDITemplateLogoffActiveSessionAfter = "2 hours"; Break}
						Default	{$VDITemplateLogoffActiveSessionAfter = "Unable to determine Logoff active session after: $($VDITemplate.SessionResetTimeoutSec)"; Break}
					}
					
					Switch ($VDITemplate.PerformActionAfterSec)
					{
						0		{$VDITemplateActionsAfter = "Never"; Break}
						1		{$VDITemplateActionsAfter = "Immediate"; Break}
						25		{$VDITemplateActionsAfter = "25 seconds"; Break}
						60		{$VDITemplateActionsAfter = "1 minute"; Break}
						300		{$VDITemplateActionsAfter = "5 minutes"; Break}
						3600	{$VDITemplateActionsAfter = "1 hour"; Break}
						7200	{$VDITemplateActionsAfter = "2 hours"; Break}
						Default	{$VDITemplateActionsAfter = "Unable to determine Actions After: $($VDITemplate.PerformActionAfterSec)"; Break}
					}
					$VDITemplateActionsOnSession         = $VDITemplate.SessionAction.ToString()
					$VDITemplateActionsPerformAction     = $VDITemplate.PerformAction.ToString()
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $VDITemplate.InheritDefaultVDIActionSettings.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Application session lingering"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Logoff active session after"; Value = $VDITemplateLogoffActiveSessionAfter; }) > $Null
					$ScriptInformation.Add(@{Data = "Actions"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     On session"; Value = $VDITemplateActionsOnSession; }) > $Null
					$ScriptInformation.Add(@{Data = "     Perform action"; Value = $VDITemplateActionsPerformAction; }) > $Null
					$ScriptInformation.Add(@{Data = "     After"; Value = $VDITemplateActionsAfter; }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 4 "Inherit default settings`t`t: " $VDITemplate.InheritDefaultVDIActionSettings.ToString()
					Line 4 "Application session lingering"
					Line 5 "Logoff active session after`t: " $VDITemplateLogoffActiveSessionAfter
					Line 4 "Actions"
					Line 5 "On session`t`t`t: " $VDITemplateActionsOnSession
					Line 5 "Perform action`t`t`t: " $VDITemplateActionsPerformAction
					Line 5 "After`t`t`t`t: " $VDITemplateActionsAfter
					Line 0 ""
				}
				If($HTML)
				{

					$rowdata = @()
					$columnHeaders = @("Inherit default settings",($Script:htmlsb),$VDITemplate.InheritDefaultVDIActionSettings.ToString(),$htmlwhite)
					$rowdata += @(,("Application session lingering",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,( "     Logoff active session after",($Script:htmlsb),$VDITemplateLogoffActiveSessionAfter,$htmlwhite))
					$rowdata += @(,( "Actions",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,( "     On session",($Script:htmlsb),$VDITemplateActionsOnSession,$htmlwhite))
					$rowdata += @(,( "     Perform action",($Script:htmlsb),$VDITemplateActionsPerformAction,$htmlwhite))
					$rowdata += @(,( "     After",($Script:htmlsb),$VDITemplateActionsAfter,$htmlwhite))

					$msg = "Settings"
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}

				#Security
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "Security"
				}
				If($Text)
				{
					Line 3 "Security"
				}
				If($HTML)
				{
					#Nothing
				}
				
				If($VDITemplate.InheritDefaultVDISecuritySettings)
				{
					#do we inherit site defaults?
					#yes we do, get the default settings for the Site
					#use the Site default settings

					$VDIDefaults = Get-RASVDIDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
					
					If($? -and $Null -ne $VDIDefaults)
					{
						$VDITemplateGrantPermissions  = $VDIDefaults.IsUsersGrantedRDPermissions.ToString()
						If($VDIDefaults.GroupType -eq "Administrators")
						{
							$VDITemplateSecurityGroup = "Administrators"
						}
						Else
						{
							$VDITemplateSecurityGroup = "Remote Desktop Users group"
						}
					}
					Else
					{
						#unable to retrieve default, use built-in default values
						$VDITemplateGrantPermissions = "False"
						$VDITemplateSecurityGroup    = ""
					}
				}
				Else
				{
					#No, we don't use the VDI Template settings
					$VDITemplateGrantPermissions  = $VDITemplate.IsUsersGrantedRDPermissions.ToString()
					If($VDITemplate.GroupType -eq "Administrators")
					{
						$VDITemplateSecurityGroup = "Administrators"
					}
					Else
					{
						$VDITemplateSecurityGroup = "Remote Desktop Users group"
					}
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $VDITemplate.InheritDefaultVDISecuritySettings.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Grant users Remote Desktop connection permissions"; Value = $VDITemplateGrantPermissions; }) > $Null
					If($VDITemplateGrantPermissions -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Local security group"; Value = $VDITemplateSecurityGroup; }) > $Null
					}

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 4 "Inherit default settings`t`t`t : " $VDITemplate.InheritDefaultVDISecuritySettings.ToString()
					Line 4 "Grant users Remote Desktop connection permissions: " $VDITemplateGrantPermissions
					If($VDITemplateGrantPermissions -eq "True")
					{
						Line 5 "Local security group`t`t`t : " $VDITemplateSecurityGroup
					}
					Line 0 ""
				}
				If($HTML)
				{

					$rowdata = @()
					$columnHeaders = @("Inherit default settings",($Script:htmlsb),$VDITemplate.InheritDefaultVDISecuritySettings.ToString(),$htmlwhite)
					$rowdata += @(,( "Grant users Remote Desktop connection permissions",($Script:htmlsb),$VDITemplateGrantPermissions,$htmlwhite))
					If($VDITemplateGrantPermissions -eq "True")
					{
						$rowdata += @(,( "Local security group",($Script:htmlsb),$VDITemplateSecurityGroup,$htmlwhite))
					}

					$msg = "Security"
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}

		}
		
		#Write-Verbose "$(Get-Date -Format G): `tOutput VDI Desktops"
		#Desktops
		###ADD LATER
		
		#Write-Verbose "$(Get-Date -Format G): `tOutput VDI Scheduler"
		#Scheduler
		#not in PoSH
	}

	#Remote PCs are not in PoSH
	
	#Providers
	Write-Verbose "$(Get-Date -Format G): Output Providers"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Providers"
	}
	If($Text)
	{
		Line 1 "Providers"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Providers"
	}

	$Providers = Get-RASProvider -SiteId $Site.Id -EA 0 4>$Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Providers for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Providers for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Providers for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Providers for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $Providers)
	{
		Write-Host "
	No Providers retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Providers retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Providers retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Providers retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($Provider in $Providers)
		{
			$ProviderStatus = Get-RASProviderStatus -Id $Provider.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve Provider Status for Provider $($Provider.Id)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve Provider Status for Provider $($Provider.Id)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve Provider Status for Provider $($Provider.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve Provider Status for Provider $($Provider.Id)"
				}
			}
			ElseIf($? -and $Null -eq $ProviderStatus)
			{
				Write-Host "
				No Provider Status retrieved for Provider $($Provider.Id)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No Provider Status retrieved for Provider $($Provider.Id)"
				}
				If($Text)
				{
					Line 0 "No Provider Status retrieved for Provider $($Provider.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No Provider Status retrieved for Provider $($Provider.Id)"
				}
			}
			Else
			{
				$FullProviderStatus = GetRASStatus $ProviderStatus.AgentState

				If($MSWord -or $PDF)
				{
					WriteWordLine 3 0 "Provider $($Provider.Name)"
				}
				If($Text)
				{
					Line 2 "Provider $($Provider.Name)"
				}
				If($HTML)
				{
					WriteHTMLLine 3 0 "Provider $($Provider.Name)"
				}

				$VDIType = GetVDIType $Provider.Type
				
				Switch($ProviderStatus.HighAvailabilityState)
				{
					"Off"		{$HAMode = "Off"; Break}
					"On_Pref"	{$HAMode = "On (Preferred)"; Break}
					"On_Auto"	{$HAMode = "On (Auto)"; Break}
					Default		{$HAMode = "Unable to determine High Availability mode: $($ProviderStatus.HighAvailabilityState)"; Break}
				}
				
				If($MSWord -or $PDF)
				{
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Name"; Value = $Provider.Name; }) > $Null
					$ScriptInformation.Add(@{Data = "Enabled"; Value = $Provider.Enabled.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Status"; Value = $FullProviderStatus; }) > $Null
					$ScriptInformation.Add(@{Data = "Type"; Value = $VDIType; }) > $Null
					$ScriptInformation.Add(@{Data = "Description"; Value = $Provider.Description; }) > $Null
					$ScriptInformation.Add(@{Data = "Provider Agent"; Value = $Provider.VDIAgent; }) > $Null
					$ScriptInformation.Add(@{Data = "High availability"; Value = $HAMode; }) > $Null
					If($VDIType -like "*azure*")
					{
						$ScriptInformation.Add(@{Data = "Tenant ID"; Value = $Provider.VDIAzureCloudInfo.TenantID; }) > $Null
						$ScriptInformation.Add(@{Data = "Subscription ID"; Value = $Provider.VDIAzureCloudInfo.SubscriptionID; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "Tenant ID"; Value = ""; }) > $Null
						$ScriptInformation.Add(@{Data = "Subscription ID"; Value = ""; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "Application ID"; Value = $Provider.VDIUsername; }) > $Null
					$ScriptInformation.Add(@{Data = "Log level"; Value = $ProviderStatus.LogLevel; }) > $Null
					$ScriptInformation.Add(@{Data = "Last modification by"; Value = $Provider.AdminLastMod; }) > $Null
					$ScriptInformation.Add(@{Data = "Modified on"; Value = $Provider.TimeLastMod.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Created by"; Value = $Provider.AdminCreate; }) > $Null
					$ScriptInformation.Add(@{Data = "Created on"; Value = $Provider.TimeCreate.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "ID"; Value = $Provider.Id.ToString(); }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 3 "Name`t`t`t: " $Provider.Name
					Line 3 "Enabled`t`t`t: " $Provider.Enabled.ToString()
					Line 3 "Status`t`t`t: " $FullProviderStatus
					Line 3 "Type`t`t`t: " $VDIType
					Line 3 "Description`t`t: " $Provider.Description
					Line 3 "Provider Agent`t`t: " $Provider.VDIAgent
					Line 3 "High availability`t: " $HAMode
					If($VDIType -like "*azure*")
					{
						Line 3 "Tenant ID`t`t: " $Provider.VDIAzureCloudInfo.TenantID
						Line 3 "Subscription ID`t`t: " $Provider.VDIAzureCloudInfo.SubscriptionID
					}
					Else
					{
						Line 3 "Tenant ID`t`t: "
						Line 3 "Subscription ID`t`t: "
					}
					Line 3 "Application ID`t`t: " $Provider.VDIUsername
					Line 3 "Log level`t`t: " $ProviderStatus.LogLevel
					Line 3 "Last modification by`t: " $Provider.AdminLastMod
					Line 3 "Modified on`t`t: " $Provider.TimeLastMod.ToString()
					Line 3 "Created by`t`t: " $Provider.AdminCreate
					Line 3 "Created on`t`t: " $Provider.TimeCreate.ToString()
					Line 3 "ID`t`t`t: " $Provider.Id.ToString()
					Line 0 ""
				}
				If($HTML)
				{
					$rowdata = @()
					$columnHeaders = @("Name",($Script:htmlsb),$Provider.Name,$htmlwhite)
					$rowdata += @(,("Enabled",($Script:htmlsb),$Provider.Enabled.ToString(),$htmlwhite))
					$rowdata += @(,("Status",($Script:htmlsb),$FullProviderStatus,$htmlwhite))
					$rowdata += @(,("Type",($Script:htmlsb),$VDIType,$htmlwhite))
					$rowdata += @(,("Description",($Script:htmlsb),$Provider.Description,$htmlwhite))
					$rowdata += @(,("Provider Agent",($Script:htmlsb),$Provider.VDIAgent,$htmlwhite))
					If($VDIType -like "*azure*")
					{
						$rowdata += @(,("Tenant ID",($Script:htmlsb),$Provider.VDIAzureCloudInfo.TenantID,$htmlwhite))
						$rowdata += @(,("Subscription ID",($Script:htmlsb),$Provider.VDIAzureCloudInfo.SubscriptionID,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Tenant ID",($Script:htmlsb),"",$htmlwhite))
						$rowdata += @(,("Subscription ID",($Script:htmlsb),"",$htmlwhite))
					}
					$rowdata += @(,("Application ID",($Script:htmlsb),$Provider.VDIUsername,$htmlwhite))
					$rowdata += @(,("Log level",($Script:htmlsb),$ProviderStatus.LogLevel,$htmlwhite))
					$rowdata += @(,("Last modification by",($Script:htmlsb), $Provider.AdminLastMod,$htmlwhite))
					$rowdata += @(,("Modified on",($Script:htmlsb), $Provider.TimeLastMod.ToString(),$htmlwhite))
					$rowdata += @(,("Created by",($Script:htmlsb), $Provider.AdminCreate,$htmlwhite))
					$rowdata += @(,("Created on",($Script:htmlsb), $Provider.TimeCreate.ToString(),$htmlwhite))
					$rowdata += @(,("Id",($Script:htmlsb),$Provider.Id.ToString(),$htmlwhite))

					$msg = ""
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
			
			#General
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 3 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If(validobject $Provider PreferredBrokerId)
			{
				$HostPA = Get-RASBroker -Id $Provider.PreferredBrokerId -EA 0 4>$Null
			}
			Else
			{
				$HostPA = $Null
				$DedicatedVDIAgent = $False
			}
			
			If($? -and -$Null -ne $HostPA)
			{
				If(validobject $HostPA Server)
				{
					If($Provider.VDIAgent -eq $HostPa.Server)
					{
						$DedicatedVDIAgent = $False
					}
					Else
					{
						$DedicatedVDIAgent = $True
					}
				}
				Else
				{
					$DedicatedVDIAgent = $False
				}
			}
			ElseIf($? -and $Null -eq $HostPA)
			{
				$DedicatedVDIAgent = $False
			}
			Else
			{
				$DedicatedVDIAgent = $False
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable provider in site"; Value = $Provider.Enabled.ToString(); }) > $Null
				If($VDIType -eq "Azure")
				{
					$ScriptInformation.Add(@{Data = "Type"; Value = $VDIType; }) > $Null
					$ScriptInformation.Add(@{Data = "Name"; Value = $Provider.Name; }) > $Null
					$ScriptInformation.Add(@{Data = "Description"; Value = $Provider.Description; }) > $Null
					$ScriptInformation.Add(@{Data = "Subscription details"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Authentication URL"; Value = $Provider.VDIAzureCloudInfo.AuthenticationURL; }) > $Null
					$ScriptInformation.Add(@{Data = "     Management URL"; Value = $Provider.VDIAzureCloudInfo.ManagementURL; }) > $Null
					$ScriptInformation.Add(@{Data = "     Resource URI"; Value = $Provider.VDIAzureCloudInfo.ResourceURI; }) > $Null
					$ScriptInformation.Add(@{Data = "Tenant ID"; Value = $Provider.VDIAzureCloudInfo.TenantID; }) > $Null
					$ScriptInformation.Add(@{Data = "Subscription ID"; Value = $Provider.VDIAzureCloudInfo.SubscriptionID; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Name"; Value = $Provider.Name; }) > $Null
					$ScriptInformation.Add(@{Data = "Description"; Value = $Provider.Description; }) > $Null
					$ScriptInformation.Add(@{Data = "Type"; Value = $VDIType; }) > $Null
					$ScriptInformation.Add(@{Data = "Host"; Value = $Provider.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "Port"; Value = $Provider.VDIPort.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Resource pool"; Value = $Provider.ResourcePool; }) > $Null
				}
				$ScriptInformation.Add(@{Data = "Dedicated Provider Agent"; Value = $DedicatedVDIAgent.ToString(); }) > $Null
				If($DedicatedVDIAgent)
				{
					$ScriptInformation.Add(@{Data = "Agent address"; Value = $Provider.VDIAgent; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 4 "Enable provider in site`t`t: " $Provider.Enabled.ToString()
				If($VDIType -eq "Azure")
				{
					Line 4 "Type`t`t`t`t: " $VDIType
					Line 4 "Name`t`t`t`t: " $Provider.Name
					Line 4 "Description`t`t`t: " $Provider.Description
					Line 4 "Subscription details`t`t: " 
					Line 5 "Authentication URL: " $Provider.VDIAzureCloudInfo.AuthenticationURL
					Line 5 "Management URL`t  : " $Provider.VDIAzureCloudInfo.ManagementURL
					Line 5 "Resource URI`t  : " $Provider.VDIAzureCloudInfo.ResourceURI
					Line 4 "Tenant ID`t`t`t: " $Provider.VDIAzureCloudInfo.TenantID
					Line 4 "Subscription ID`t`t`t: " $Provider.VDIAzureCloudInfo.SubscriptionID
				}
				Else
				{
					Line 4 "Name`t`t`t`t: " $Provider.Name
					Line 4 "Description`t`t`t: " $Provider.Description
					Line 4 "Type`t`t`t`t: " $VDIType
					Line 4 "Host`t`t`t`t: " $Provider.Server
					Line 4 "Port`t`t`t`t: " $Provider.VDIPort.ToString()
					Line 4 "Description`t`t`t: " $Provider.Description
					Line 4 "Resource pool`t`t`t: " $Provider.ResourcePool
				}
				Line 4 "Dedicated Provider Agent`t: " $DedicatedVDIAgent.ToString()
				If($DedicatedVDIAgent)
				{
					Line 4 "Agent address`t`t`t: " $Provider.VDIAgent
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable provider in site",($Script:htmlsb),$Provider.Enabled.ToString(),$htmlwhite)
				If($VDIType -eq "Azure")
				{
					$rowdata += @(,("Type",($Script:htmlsb),$VDIType,$htmlwhite))
					$rowdata += @(,("Name",($Script:htmlsb), $Provider.Name,$htmlwhite))
					$rowdata += @(,("Description",($Script:htmlsb), $Provider.Description,$htmlwhite))
					$rowdata += @(,("Subscription details",($Script:htmlsb), "",$htmlwhite))
					$rowdata += @(,("     Authentication URL",($Script:htmlsb), $Provider.VDIAzureCloudInfo.AuthenticationURL,$htmlwhite))
					$rowdata += @(,("     Management URL",($Script:htmlsb), $Provider.VDIAzureCloudInfo.ManagementURL,$htmlwhite))
					$rowdata += @(,("     Resource URI",($Script:htmlsb), $Provider.VDIAzureCloudInfo.ResourceURI,$htmlwhite))
					$rowdata += @(,("Tenant ID",($Script:htmlsb), $Provider.VDIAzureCloudInfo.TenantID,$htmlwhite))
					$rowdata += @(,("Subscription ID",($Script:htmlsb), $Provider.VDIAzureCloudInfo.SubscriptionID,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Name",($Script:htmlsb), $Provider.Name,$htmlwhite))
					$rowdata += @(,("Description",($Script:htmlsb), $Provider.Description,$htmlwhite))
					$rowdata += @(,("Type",($Script:htmlsb),$VDIType,$htmlwhite))
					$rowdata += @(,("Host",($Script:htmlsb),$Provider.Server,$htmlwhite))
					$rowdata += @(,("Port",($Script:htmlsb),$Provider.VDIPort.ToString(),$htmlwhite))
					$rowdata += @(,("Description",($Script:htmlsb),$Provider.Description,$htmlwhite))
					$rowdata += @(,("Resource pool",($Script:htmlsb),$Provider.ResourcePool,$htmlwhite))
				}
				$rowdata += @(,("Dedicated Provider Agent",($Script:htmlsb),$DedicatedVDIAgent.ToString(),$htmlwhite))
				If($DedicatedVDIAgent)
				{
					$rowdata += @(,("Agent address",($Script:htmlsb),$Provider.VDIAgent,$htmlwhite))
				}

				$msg = "General"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			#Credentials
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Credentials"
			}
			If($Text)
			{
				Line 3 "Credentials"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				If($VDIType -eq "Azure")
				{
					$ScriptInformation.Add(@{Data = "Application ID"; Value = $Provider.VDIUsername; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Username"; Value = $Provider.VDIUsername; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				If($VDIType -eq "Azure")
				{
					Line 4 "Application ID: " $Provider.VDIUsername
				}
				Else
				{
					Line 4 "Username`t`t`t: " $Provider.VDIUsername
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				If($VDIType -eq "Azure")
				{
					$columnHeaders = @("Application ID",($Script:htmlsb),$Provider.VDIUsername,$htmlwhite)
				}
				Else
				{
					$columnHeaders = @("Username",($Script:htmlsb),$Provider.VDIUsername,$htmlwhite)
				}

				$msg = "Credentials"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Agent Settings
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Agent settings"
			}
			If($Text)
			{
				Line 3 "Agent settings"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If(validObject $Provider DragAndDropMode)
			{
				Switch ($Provider.DragAndDropMode)
				{
					"Bidirectional"		{$VDIDragAndDrop = "Bidirectional"; 
					$VDIAllowDragAndDrop = "True";
					Break}
					"Disabled"			{$VDIDragAndDrop = "Disabled"; 
					$VDIAllowDragAndDrop = "False";
					Break}
					"ClientToServer"	{$VDIDragAndDrop = "Client to server only"; 
					$VDIAllowDragAndDrop = "True";
					Break}
					"ServerToClient"	{$VDIDragAndDrop = "Server to client only"; 
					$VDIAllowDragAndDrop = "True";
					Break}
					Default				{$VDIDragAndDrop = "Unable to determine Drag and drop: $($Provider.DragAndDropMode)"; 
					$VDIAllowDragAndDrop = "False";
					Break}
				}
			}
			Else
			{
				$VDIDragAndDrop = ""
				$VDIAllowDragAndDrop = ""
			}

			If(validobject $Provider AllowURLAndMailRedirection)
			{
				Switch($Provider.AllowURLAndMailRedirection)
				{
					"Enabled"						{$VDIAllowClientURLMailRedirection = "Enabled"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
					"Disabled"						{$VDIAllowClientURLMailRedirection = "Disabled"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
					"EnabledWithAppRegistration"	{$VDIAllowClientURLMailRedirection = "Enabled";
													 $ReplaceRegisteredApplication = "True";
													 Break}
					Default 						{$VDIAllowClientURLMailRedirection = "Unable to determine Allow CLient URL/Mail Redirection: $($Provider.AllowURLAndMailRedirection)"; 
													 $ReplaceRegisteredApplication = "False";
													 Break}
				}
			}
			Else
			{
				$VDIAllowClientURLMailRedirection = ""
				$ReplaceRegisteredApplication = "";
			}
			
			If(validobject $Provider FileTransferMode)
			{
				Switch ($Provider.FileTransferMode)
				{
					"Bidirectional"		{$ProviderFileTransferMode = "Bidirectional"; Break}
					"Disabled"			{$ProviderFileTransferMode = "Disabled"; Break}
					"ClientToServer"	{$ProviderFileTransferMode = "Client to server only"; Break}
					"ServerToClient"	{$ProviderFileTransferMode = "Server to client only"; Break}
					Default				{$ProviderFileTransferMode = "Unable to determine File Transfer mode: $($Provider.FileTransferMode)"; Break}
				}
			}
			Else
			{
				$ProviderFileTransferMode = ""
			}

			If(validobject $Provider FileTransferLocation)
			{
				If($Provider.FileTransferLocation -eq "")
				{
					$ProviderFileTransferLocation = "Default download location"
				}
				Else
				{
					$ProviderFileTransferLocation = $ProviderHost.FileTransferLocation
				}
			}
			Else
			{
				$ProviderFileTransferLocation = ""
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Preferred Connection Broker"; Value = $Provider.VDIAgent; }) > $Null
				$ScriptInformation.Add(@{Data = "Allow Client URL/Mail Redirection"; Value = $VDIAllowClientURLMailRedirection; }) > $Null
				$ScriptInformation.Add(@{Data = "     Replace registered application"; Value = $ReplaceRegisteredApplication; }) > $Null
				If(validobject $Provider SupportShellURLNamespaceObjects)
				{
					$ScriptInformation.Add(@{Data = "     Support Windows Shell URL namespace objects"; Value = $Provider.SupportShellURLNamespaceObjects.ToString(); }) > $Null
				}
				$ScriptInformation.Add(@{Data = "Enable Drag and drop"; Value = $VDIAllowDragAndDrop; }) > $Null
				$ScriptInformation.Add(@{Data = "     Direction"; Value = $VDIDragAndDrop; }) > $Null
				If(validobject $Provider AllowFileTransfer)
				{
					$ScriptInformation.Add(@{Data = "Allow file transfer command (Web (HTML5) and Chrome clients)"; Value = $Provider.AllowFileTransfer.ToString(); }) > $Null
				}
				$ScriptInformation.Add(@{Data = "     Configure File Transfer"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "          Direction"; Value = $ProviderFileTransferMode; }) > $Null
				$ScriptInformation.Add(@{Data = "          Location"; Value = $ProviderFileTransferLocation; }) > $Null
				If(validobject $Provider FileTransferLockLocation)
				{
					$ScriptInformation.Add(@{Data = "          Do not allow to change location"; Value = $Provider.FileTransferLockLocation.ToString(); }) > $Null
				}
				If(validobject $Provider EnableDriveRedirectionCache)
				{
					$ScriptInformation.Add(@{Data = "Enable drive redirection cache"; Value = $Provider.EnableDriveRedirectionCache.ToString(); }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 4 "Preferred Connection Broker`t`t`t`t`t: " $Provider.VDIAgent
				Line 4 "Allow Client URL/Mail Redirection`t`t`t`t: " $VDIAllowClientURLMailRedirection
				Line 5 "Replace registered application`t`t`t`t: " $ReplaceRegisteredApplication
				If(validobject $Provider SupportShellURLNamespaceObjects)
				{
					Line 5 "Support Windows Shell URL namespace objects`t`t: " $Provider.SupportShellURLNamespaceObjects.ToString()
				}
				Line 4 "Enable Drag and drop`t`t`t`t`t`t: " $VDIAllowDragandDrop
				Line 5 "Direction`t`t`t`t`t`t: " $VDIDragAndDrop
				If(validobject $Provider AllowFileTransfer)
				{
					Line 4 "Allow file transfer command (Web (HTML5) and Chrome clients)`t: " $Provider.AllowFileTransfer.ToString()
				}
				Line 5 "Configure File Transfer"
				Line 6 "Direction`t`t`t: " $ProviderFileTransferMode
				Line 6 "Location`t`t`t: " $ProviderFileTransferLocation
				If(validobject $Provider FileTransferLockLocation)
				{
					Line 6 "Do not allow to change location : " $Provider.FileTransferLockLocation.ToString()
				}
				If(validobject $Provider EnableDriveRedirectionCache)
				{
					Line 4 "Enable drive redirection cache`t`t`t`t`t: " $Provider.EnableDriveRedirectionCache.ToString()
				}
				
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Preferred Connection Broker",($Script:htmlsb),$Provider.VDIAgent,$htmlwhite)
				$rowdata += @(,("Allow Client URL/Mail Redirection",($Script:htmlsb),$VDIAllowClientURLMailRedirection,$htmlwhite))
				$rowdata += @(,("     Replace registered application",($Script:htmlsb),$ReplaceRegisteredApplication,$htmlwhite))
				If(validobject $Provider SupportShellURLNamespaceObjects)
				{
					$rowdata += @(,("     Support Windows Shell URL namespace objects",($Script:htmlsb),$Provider.SupportShellURLNamespaceObjects.ToString(),$htmlwhite))
				}
				$rowdata += @(,("Enable Drag and drop",($Script:htmlsb),$VDIAllowDragAndDrop,$htmlwhite))
				$rowdata += @(,("     Directon",($Script:htmlsb),$VDIDragAndDrop,$htmlwhite))
				If(validobject $Provider AllowFileTransfer)
				{
					$rowdata += @(,("Allow file transfer command (Web (HTML5) and Chrome clients)",($Script:htmlsb),$Provider.AllowFileTransfer.ToString(),$htmlwhite))
				}
				$rowdata += @(,("     Configure File Transfer",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("          Direction",($Script:htmlsb),$ProviderFileTransferMode,$htmlwhite))
				$rowdata += @(,("          Location",($Script:htmlsb),$ProviderFileTransferLocation,$htmlwhite))
				If(validobject $Provider FileTransferLockLocation)
				{
					$rowdata += @(,("          Do not allow to change location",($Script:htmlsb),$Provider.FileTransferLockLocation.ToString(),$htmlwhite))
				}
				If(validobject $Provider EnableDriveRedirectionCache)
				{
					$rowdata += @(,("Enable drive redirection cache",($Script:htmlsb),$Provider.EnableDriveRedirectionCache.ToString(),$htmlwhite))
				}
				

				$msg = "Agent settings"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#RDP Printer
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "RDP printer"
			}
			If($Text)
			{
				Line 3 "RDP printer"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If(validobject $Provider PrinterNameFormat)
			{
				Switch ($Provider.PrinterNameFormat)
				{
					"PrnFormat_PRN_CMP_SES"	{$ProviderPrinterNameFormat = "Printername (from Computername) in Session no."; Break}
					"PrnFormat_SES_CMP_PRN"	{$ProviderPrinterNameFormat = "Session no. (Computername from) Printername"; Break}
					"PrnFormat_PRN_REDSES"	{$ProviderPrinterNameFormat = "Printername (redirected Session no.)"; Break}
					Default					{$ProviderPrinterNameFormat = "Unable to determine RDP Printer Name Format: $($Provider.PrinterNameFormat)"; Break}
				}
			}
			Else
			{
				$ProviderPrinterNameFormat = ""
			}
			
			If(validobject $Provider RemoveSessionNumberFromPrinterName)
			{
				$ProviderRemoveSessionNumberFromPrinter = $Provider.RemoveSessionNumberFromPrinterName.ToString()
			}
			Else
			{
				$ProviderRemoveSessionNumberFromPrinter = ""
			}

			If(validobject $Provider RemoveClientNameFromPrinterName)
			{
				$ProviderRemoveClientNameFromPrinter = $Provider.RemoveClientNameFromPrinterName.ToString()
			}
			Else
			{
				$ProviderRemoveClientNameFromPrinter = ""
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "RDP Printer Name Format"; Value = $ProviderPrinterNameFormat; }) > $Null
				$ScriptInformation.Add(@{Data = "Remove session number from printer name"; Value = $ProviderRemoveSessionNumberFromPrinter; }) > $Null
				If($Provider.RemoveSessionNumberFromPrinterName)
				{
					$ScriptInformation.Add(@{Data = "Remove client name from printer name"; Value = $ProviderRemoveClientNameFromPrinter; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 4 "RDP Printer Name Format`t`t`t`t: " $ProviderPrinterNameFormat
				Line 4 "Remove session number from printer name`t`t: " $ProviderRemoveSessionNumberFromPrinter
				If($Provider.RemoveSessionNumberFromPrinterName)
				{
					Line 4 "Remove client name from printer name`t`t`t: " $ProviderRemoveClientNameFromPrinter
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("RDP Printer Name Format",($Script:htmlsb),$ProviderPrinterNameFormat,$htmlwhite)
				$rowdata += @(,("Remove session number from printer name",($Script:htmlsb),$ProviderRemoveSessionNumberFromPrinter,$htmlwhite))
				If($Provider.RemoveSessionNumberFromPrinterName)
				{
					$rowdata += @(,("Remove client name from printer name",($Script:htmlsb),$ProviderRemoveClientNameFromPrinter,$htmlwhite))
				}

				$msg = "RDP printer"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}
	
	#Remote PCs are not in PoSH
	
	Write-Verbose "$(Get-Date -Format G): Output Secure Gateways"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Secure Gateways"
	}
	If($Text)
	{
		Line 1 "Secure Gateways"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Secure Gateways"
	}

	$SecureGateways = Get-RASGateway -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Secure Gateways for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Secure Gateways for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Secure Gateways for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Secure Gateways for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $SecureGateways)
	{
		Write-Host "
	No Secure Gateways retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Secure Gateways retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Secure Gateways retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Secure Gateways retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($SecureGateway in $SecureGateways)
		{
			$SecureGatewayStatus = Get-RASGatewayStatus -Id $SecureGateway.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve Secure Gateway Status for Gateway $($SecureGateway.Id)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve Secure Gateway Status for Gateway $($SecureGateway.Id)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve Secure Gateway Status for Gateway $($SecureGateway.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve Secure Gateway Status for Gateway $($SecureGateway.Id)"
				}
				#unable to retrieve
				$SecureGatewayEnableHSTS            = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayEnableSSL             = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayEnableSSLOnPort       = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayAcceptedSSLVersions   = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayCipherStrength        = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayCipher                = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayCertificates          = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayHSTSMaxage            = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayHSTSIncludeSubdomains = "Unable to retrieve Secure Gateway Status"
				$SecureGatewayHSTSPreload           = "Unable to retrieve Secure Gateway Status"
			}
			ElseIf($? -and $Null -eq $SecureGatewayStatus)
			{
				Write-Host "
				No Secure Gateway Status retrieved for Secure Gateway $($SecureGateway.Id)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No Secure Gateway Status found for Secure Gateway $($SecureGateway.Id)"
				}
				If($Text)
				{
					Line 0 "No Secure Gateway Status found for Secure Gateway $($SecureGateway.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No Secure Gateway Status found for Secure Gateway $($SecureGateway.Id)"
				}
				#set all to blank
				$SecureGatewayEnableHSTS            = ""
				$SecureGatewayEnableSSL             = ""
				$SecureGatewayEnableSSLOnPort       = ""
				$SecureGatewayAcceptedSSLVersions   = ""
				$SecureGatewayCipherStrength        = ""
				$SecureGatewayCipher                = ""
				$SecureGatewayCertificates          = ""
				$SecureGatewayHSTSMaxage            = ""
				$SecureGatewayHSTSIncludeSubdomains = ""
				$SecureGatewayHSTSPreload           = ""
			}
			Else
			{
				If($SecureGateway.InheritDefaultSslTlsSettings)
				{
					#do we inherit site defaults?
					#yes we do, get the default settings for the Site
					#use the Site default settings

					$SecureGatewayDefaults = Get-RASGatewayDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
					
					If($? -and $Null -ne $SecureGatewayDefaults)
					{
						If($SecureGatewayDefaults.EnableHSTS)
						{
							$SecureGatewayEnableHSTS            = $SecureGatewayDefaults.EnableHSTS.ToString()
							$SecureGatewayHSTSMaxage            = $SecureGatewayDefaults.HSTSMaxAge.ToString()
							$SecureGatewayHSTSIncludeSubdomains = $SecureGatewayDefaults.HSTSIncludeSubdomains.ToString()
							$SecureGatewayHSTSPreload           = $SecureGatewayDefaults.HSTSPreload.ToString()
						}
						Else
						{
							$SecureGatewayEnableHSTS = $SecureGatewayDefaults.EnableHSTS.ToString()
						}
						$SecureGatewayEnableSSL       = $SecureGatewayDefaults.EnableSSL.ToString()
						$SecureGatewayEnableSSLOnPort = $SecureGatewayDefaults.SSLPort.ToString()
						
						Switch ($SecureGatewayDefaults.MinSSLVersion)
						{
							"SSLv2"		{$SecureGatewayAcceptedSSLVersions = "SSL v2 - TLS v1.2 (Weak)"; Break}
							"SSLv3"		{$SecureGatewayAcceptedSSLVersions = "SSL v3 - TLS v1.2"; Break}
							"TLSv1"		{$SecureGatewayAcceptedSSLVersions = "TLS v1 - TLS v1.2"; Break}
							"TLSv1_1"	{$SecureGatewayAcceptedSSLVersions = "TLS v1.1 - TLS v1.2"; Break}
							"TLSv1_2"	{$SecureGatewayAcceptedSSLVersions = "TLS v1.2 only (Strong)"; Break}
							Default		{$SecureGatewayAcceptedSSLVersions = "Unable to determine Minimum SSL Version: $($SecureGatewayDefaults.MinSSLVersion)"; Break}
						}
						
						$SecureGatewayCipherStrength = $SecureGatewayDefaults.CipherStrength.ToString()
						$SecureGatewayCipher         = $SecureGatewayDefaults.Cipher
						
						If($SecureGatewayDefaults.CertificateId -eq 0)
						{
							$SecureGatewayCertificates = "All matching usage"
						}
						Else
						{
							$Results = Get-RASCertificate -Id $SecureGatewayDefaults.CertificateId -EA 0 4>$Null
							
							If($? -and $Null -ne $Results)
							{
								$SecureGatewayCertificates = $Results.Name
							}
							Else
							{
								$SecureGatewayCertificates = "Unable to determin Gateway Certificate: $($SecureGatewayDefaults.CertificateId)"
							}
						}
					}
					Else
					{
						#unable to retrieve default, use built-in default values
						$SecureGatewayEnableHSTS          = "False"
						$SecureGatewayEnableSSL           = "True"
						$SecureGatewayEnableSSLOnPort     = "443"
						$SecureGatewayAcceptedSSLVersions = "TLS v1 - TLS v1.2"
						$SecureGatewayCipherStrength      = "High"
						$SecureGatewayCipher              = "EECDH:!SSLv2:!SSLv3:!aNULL:!RC4:!ADH:!eNULL:!LOW:!MEDIUM:!EXP:+HIGH"
						$SecureGatewayCertificates        = "All matching usage"
					}
				}
				Else
				{
					#we don't inherit settings
					#get the settings configured for this GW
					If($SecureGateway.EnableHSTS)
					{
						$SecureGatewayEnableHSTS            = $SecureGateway.EnableHSTS.ToString()
						$SecureGatewayHSTSMaxage            = $SecureGateway.HSTSMaxAge.ToString()
						$SecureGatewayHSTSIncludeSubdomains = $SecureGateway.HSTSIncludeSubdomains.ToString()
						$SecureGatewayHSTSPreload           = $SecureGateway.HSTSPreload.ToString()
					}
					Else
					{
						$SecureGatewayEnableHSTS = $SecureGateway.EnableHSTS.ToString()
					}
					$SecureGatewayEnableSSL       = $SecureGateway.EnableSSL.ToString()
					$SecureGatewayEnableSSLOnPort = $SecureGateway.SSLPort.ToString()
					
					Switch ($SecureGateway.MinSSLVersion)
					{
						"SSLv2"		{$SecureGatewayAcceptedSSLVersions = "SSL v2 - TLS v1.2 (Weak)"; Break}
						"SSLv3"		{$SecureGatewayAcceptedSSLVersions = "SSL v3 - TLS v1.2"; Break}
						"TLSv1"		{$SecureGatewayAcceptedSSLVersions = "TLS v1 - TLS v1.2"; Break}
						"TLSv1_1"	{$SecureGatewayAcceptedSSLVersions = "TLS v1.1 - TLS v1.2"; Break}
						"TLSv1_2"	{$SecureGatewayAcceptedSSLVersions = "TLS v1.2 only (Strong)"; Break}
						Default		{$SecureGatewayAcceptedSSLVersions = "Unable to determine Minimum SSL Version: $($SecureGateway.MinSSLVersion)"; Break}
					}
					
					$SecureGatewayCipherStrength = $SecureGateway.CipherStrength.ToString()
					$SecureGatewayCipher         = $SecureGateway.Cipher
					
					If($SecureGateway.CertificateId -eq 0)
					{
						$SecureGatewayCertificates = "All matching usage"
					}
					Else
					{
						$Results = Get-RASCertificate -Id $SecureGateway.CertificateId -EA 0 4>$Null
						
						If($? -and $Null -ne $Results)
						{
							#double replace to remove the < and > from the cert name so it doesn't mess up HTML output
							$SecureGatewayCertificates = $Results.Name.Replace("<","").Replace(">","")	
						}
						Else
						{
							$SecureGatewayCertificates = "Unable to determine Gateway Certificate: $($SecureGateway.CertificateId)"
						}
					}
				}
				
				$SecureGatewayStatusAgentState = GetRASStatus $SecureGatewayStatus.AgentState
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 3 0 "Secure Gateway $($SecureGateway.Server)"
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Server"; Value = $SecureGateway.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "Mode"; Value = $SecureGateway.Mode; }) > $Null
					$ScriptInformation.Add(@{Data = "Status"; Value = $SecureGatewayStatusAgentState; }) > $Null
					$ScriptInformation.Add(@{Data = "Description"; Value = $SecureGateway.Description; }) > $Null
					$ScriptInformation.Add(@{Data = "Certificate"; Value = $SecureGatewayCertificates; }) > $Null
					$ScriptInformation.Add(@{Data = "Log level"; Value = $SecureGatewayStatus.LogLevel; }) > $Null
					$ScriptInformation.Add(@{Data = "Last modification by"; Value = $SecureGateway.AdminLastMod; }) > $Null
					$ScriptInformation.Add(@{Data = "Modified on"; Value = $SecureGateway.TimeLastMod.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Created by"; Value = $SecureGateway.AdminCreate.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Created on"; Value = $SecureGateway.TimeCreate.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "ID"; Value = $SecureGateway.Id.ToString(); }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 2 "Secure Gateway $($SecureGateway.Server)"
					Line 3 "Server`t`t`t: " $SecureGateway.Server
					Line 3 "Mode`t`t`t: " $SecureGateway.Mode
					Line 3 "Status`t`t`t: " $SecureGatewayStatusAgentState
					Line 3 "Description`t`t: " $SecureGateway.Description
					Line 3 "Certificate`t`t: " $SecureGatewayCertificates
					Line 3 "Log level`t`t: " $SecureGatewayStatus.LogLevel
					Line 3 "Last modification by`t: " $SecureGateway.AdminLastMod
					Line 3 "Modified on`t`t: " $SecureGateway.TimeLastMod.ToString()
					Line 3 "Created by`t`t: " $SecureGateway.AdminCreate.ToString()
					Line 3 "Created on`t`t: " $SecureGateway.TimeCreate.ToString()
					Line 3 "ID`t`t`t: " $SecureGateway.Id.ToString()
					Line 0 ""
				}
				If($HTML)
				{
					WriteHTMLLine 3 0 "Secure Gateway $($SecureGateway.Server)"
					$rowdata = @()
					$columnHeaders = @("Server",($Script:htmlsb),$SecureGateway.Server,$htmlwhite)
					$rowdata += @(,("Mode",($Script:htmlsb),$SecureGateway.Mode.ToString(),$htmlwhite))
					$rowdata += @(,("Status",($Script:htmlsb),$SecureGatewayStatusAgentState.ToString(),$htmlwhite))
					$rowdata += @(,("Description",($Script:htmlsb),$SecureGateway.Description,$htmlwhite))
					$rowdata += @(,("Certificate",($Script:htmlsb),$SecureGatewayCertificates,$htmlwhite))
					$rowdata += @(,("Log level",($Script:htmlsb),$SecureGatewayStatus.LogLevel,$htmlwhite))
					$rowdata += @(,("Last modification by",($Script:htmlsb), $SecureGateway.AdminLastMod,$htmlwhite))
					$rowdata += @(,("Modified on",($Script:htmlsb), $SecureGateway.TimeLastMod.ToString(),$htmlwhite))
					$rowdata += @(,("Created by",($Script:htmlsb), $SecureGateway.AdminCreate.ToString(),$htmlwhite))
					$rowdata += @(,("Created on",($Script:htmlsb), $SecureGateway.TimeCreate.ToString(),$htmlwhite))
					$rowdata += @(,("ID",($Script:htmlsb),$SecureGateway.Id.ToString(),$htmlwhite))

					$msg = ""
					$columnWidths = @("300","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 2 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			Switch ($SecureGateway.IPVersion)
			{
				"Version4"		{$IPVersion = "Version 4"; Break}
				"Version6"		{$IPVersion = "Version 6"; Break}
				"BothVersions"	{$IPVersion = "Both version 4 & 6"; Break}
				Default			{$IPVersion = "Unable to determine IP version: $($SecureGateway.IPVersion)"; Break}
			}
			
			$SecureGatewayIPs = $SecureGateway.IPs.Split(";")
			
			If($SecureGateway.BindV4Addresses -eq "")
			{
				$SecureGatewayBindV4Addresses = "All available addresses"
			}
			Else
			{
				$SecureGatewayBindV4Addresses = $SecureGateway.BindV4Addresses
			}

			If($SecureGateway.OptimizeConnectionIPv4 -eq "<All>")
			{
				$SecureGatewayOptimizeV4 = "All available addresses"
			}
			ElseIf($SecureGateway.OptimizeConnectionIPv4 -eq "<None>")
			{
				$SecureGatewayOptimizeV4 = "None from the available"
			}
			Else
			{
				$SecureGatewayOptimizeV4 = $SecureGateway.OptimizeConnectionIPv4
			}

			If($SecureGateway.BindV6Addresses -eq "")
			{
				$SecureGatewayBindV6Addresses = "All available addresses"
			}
			Else
			{
				$SecureGatewayBindV6Addresses = $SecureGateway.BindV6Addresses
			}

			If($SecureGateway.OptimizeConnectionIPv6 -eq "<All>")
			{
				$SecureGatewayOptimizeV6 = "All available addresses"
			}
			ElseIf($SecureGateway.OptimizeConnectionIPv6 -eq "<None>")
			{
				$SecureGatewayOptimizeV6 = "None from the available"
			}
			Else
			{
				$SecureGatewayOptimizeV6 = $SecureGateway.OptimizeConnectionIPv6
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable Secure Gateway in Site"; Value = $SecureGateway.Enabled.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Server"; Value = $SecureGateway.Server; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $SecureGateway.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "IP version"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Use IP version"; Value = $IPVersion; }) > $Null
				
				$cnt = -1
				ForEach($Item in $SecureGatewayIPs)
				{
					$cnt++
					If($cnt -eq 0 )
					{
						$ScriptInformation.Add(@{Data = "     IP(s)"; Value = $Item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				
				$ScriptInformation.Add(@{Data = "Bind to IP"; Value = ""; }) > $Null
				If($SecureGateway.IPVersion -ne "Version6")
				{
					$ScriptInformation.Add(@{Data = "     Bind to the following IPv4"; Value = $SecureGatewayBindV4Addresses; }) > $Null
					$ScriptInformation.Add(@{Data = "     Remove system buffers for"; Value = $SecureGatewayOptimizeV4; }) > $Null
				}
				If($SecureGateway.IPVersion -ne "Version4")
				{
					$ScriptInformation.Add(@{Data = "     Bind to the following IPv6"; Value = $SecureGatewayBindV6Addresses; }) > $Null
					$ScriptInformation.Add(@{Data = "     Remove system buffers for"; Value = $SecureGatewayOptimizeV6; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Enable Secure Gateway in Site: " $SecureGateway.Enabled.ToString()
				Line 3 "Server`t`t`t`t`t: " $SecureGateway.Server
				Line 3 "Description`t`t`t`t: " $SecureGateway.Description
				Line 3 "IP version" ""
				Line 4 "Use IP version`t`t`t: " $IPVersion
				
				$cnt = -1
				ForEach($Item in $SecureGatewayIPs)
				{
					$cnt++
					If($cnt -eq 0 )
					{
						Line 4 "IP(s)`t`t`t`t: " $Item
					}
					Else
					{
						Line 8 "  " $Item
					}
				}
				
				Line 3 "Bind to IP" ""
				If($SecureGateway.IPVersion -ne "Version6")
				{
					Line 4 "Bind to the following IPv4`t: " $SecureGatewayBindV4Addresses
					Line 4 "Remove system buffers for`t: " $SecureGatewayOptimizeV4
				}
				If($SecureGateway.IPVersion -ne "Version4")
				{
					Line 4 "Bind to the following IPv6`t: " $SecureGatewayBindV6Addresses
					Line 4 "Remove system buffers for`t: " $SecureGatewayOptimizeV6
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable Secure Gateway in Site",($Script:htmlsb),$SecureGateway.Enabled.ToString(),$htmlwhite)
				$rowdata += @(,("Server",($Script:htmlsb),$SecureGateway.Server,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$SecureGateway.Description,$htmlwhite))
				$rowdata += @(,("IP version",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Use IP version",($Script:htmlsb),$IPVersion,$htmlwhite))
				
				$cnt = -1
				ForEach($Item in $SecureGatewayIPs)
				{
					$cnt++
					If($cnt -eq 0 )
					{
						$rowdata += @(,("     IP(s)",($Script:htmlsb),$Item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				
				$rowdata += @(,("Bind to IP",($Script:htmlsb),"",$htmlwhite))
				If($SecureGateway.IPVersion -ne "Version6")
				{
					$rowdata += @(,("     Bind to the following IPv4",($Script:htmlsb),$SecureGatewayBindV4Addresses,$htmlwhite))
					$rowdata += @(,("     Remove system buffers for",($Script:htmlsb),$SecureGatewayOptimizeV4,$htmlwhite))
				}
				If($SecureGateway.IPVersion -ne "Version4")
				{
					$rowdata += @(,("     Bind to the following IPv6",($Script:htmlsb),$SecureGatewayBindV6Addresses,$htmlwhite))
					$rowdata += @(,("     Remove system buffers for",($Script:htmlsb),$SecureGatewayOptimizeV6,$htmlwhite))
				}

				$msg = "General"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			#Mode
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Mode"
			}
			If($Text)
			{
				Line 2 "Mode"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($SecureGateway.InheritDefaultModeSettings)
			{
				#do we inherit site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings

				$SecureGatewayDefaults = Get-RASGatewayDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $SecureGatewayDefaults)
				{
					$SecureGatewayMode = $SecureGatewayDefaults.Mode.ToString()
					$SecureGatewayForwardRequests = $SecureGatewayDefaults.NormalModeForwarding.ToString()
					If($SecureGatewayMode -eq "Normal")
					{
						$SecureGatewayServers = $SecureGatewayDefaults.ForwardHttpServers.Split(";")
					}
					Else
					{
						$SecureGatewayServers = $SecureGatewayDefaults.ForwardGatewayServers.Split(";")
					}
				
					If($SecureGatewayDefaults.PreferredBrokerId -eq 0)
					{
						$SecureGatewayPreferredConnectionBroker = "Automatic"
					}
					Else
					{
						$SecureGatewayPreferredConnectionBroker = (Get-RASBroker -Id $SecureGatewayDefaults.PreferredBrokerId -EA 0 4>$Null).Server
					}
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$SecureGatewayMode = "Normal"
					$SecureGatewayForwardRequests = "False"
					$SecureGatewayServers = @("localhost:81")
					$SecureGatewayPreferredConnectionBroker = "Automatic"
				}
			}
			Else
			{
				#we don't inherit settings
				#get the settings configured for this GW
				$SecureGatewayMode = $SecureGateway.Mode.ToString()
				$SecureGatewayForwardRequests = $SecureGateway.NormalModeForwarding.ToString()
				If($SecureGatewayMode -eq "Normal")
				{
					$SecureGatewayServers = $SecureGateway.ForwardHttpServers.Split(";")
				}
				Else
				{
					$SecureGatewayServers = $SecureGateway.ForwardGatewayServers.Split(";")
				}
			
				If($SecureGateway.PreferredBrokerId -eq 0)
				{
					$SecureGatewayPreferredConnectionBroker = "Automatic"
				}
				Else
				{
					$SecureGatewayPreferredConnectionBroker = (Get-RASBroker -Id $SecureGateway.PreferredBrokerId -EA 0 4>$Null).Server
				}
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $SecureGateway.InheritDefaultModeSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Gateway mode"; Value = $SecureGatewayMode; }) > $Null
				
				If($SecureGatewayMode -eq "Normal")
				{
					If($SecureGatewayForwardRequests -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Forward requests to HTTP Server"; Value = $SecureGatewayForwardRequests; }) > $Null
						
						$cnt = -1
						ForEach($Item in $SecureGatewayServers)
						{
							$cnt++
							$tmparray = $Item.Split(":")
							$tmpserver = $tmparray[0]
							$tmpport = $tmparray[1]
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "Server(s)"; Value = "Server: $($tmpserver)  Port: $($tmpport)"; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "Server: $($tmpserver)  Port: $($tmpport)"; }) > $Null
							}
						}
					}
					
					$ScriptInformation.Add(@{Data = "Preferred Connection Broker"; Value = $SecureGatewayPreferredConnectionBroker; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Forward requests to next Secure Gateway in chain (cascaded firewall)"; Value = $SecureGatewayForwardRequests; }) > $Null
					
					$ScriptInformation.Add(@{Data = "Forwarding Secure Gateway(s)"; Value = ""; }) > $Null
					If($SecureGatewayForwardRequests -eq "True")
					{
						$cnt = -1
						ForEach($Item in $SecureGatewayServers)
						{
							$cnt++
							$tmparray = $Item.Split(":")
							$tmpserver = $tmparray[0]
							$tmpport = $tmparray[1]
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "Server(s)"; Value = "Server: $($tmpserver)  Port: $($tmpport)"; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "Server: $($tmpserver)  Port: $($tmpport)"; }) > $Null
							}
						}
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t: " $SecureGateway.InheritDefaultModeSettings.ToString()
				Line 3 "Gateway mode`t`t`t`t: " $SecureGatewayMode
				If($SecureGatewayMode -eq "Normal")
				{
					Line 3 "Forward requests to HTTP Server`t`t: " $SecureGatewayForwardRequests
					
					$cnt = -1
					ForEach($Item in $SecureGatewayServers)
					{
						$cnt++
						$tmparray = $Item.Split(":")
						$tmpserver = $tmparray[0]
						$tmpport = $tmparray[1]
						If($cnt -eq 0)
						{
							Line 3 "Server(s)`t`t`t`t: " "Server: $($tmpserver)`tPort: $($tmpport)"
						}
						Else
						{
							Line 8 "  " "Server: $($tmpserver)`tPort: $($tmpport)"
						}
					}
					
					Line 3 "Preferred Connection Broker`t`t: " $SecureGatewayPreferredConnectionBroker
				}
				Else
				{
					Line 3 "Forward requests to next "
					Line 3 "Secure Gateway"
					Line 3 "in chain (cascaded firewall)`t`t: " $SecureGatewayForwardRequests
					
					Line 3 "Forwarding Secure Gateway(s)"
					If($SecureGatewayForwardRequests -eq "True")
					{
						$cnt = -1
						ForEach($Item in $SecureGatewayServers)
						{
							$cnt++
							$tmparray = $Item.Split(":")
							$tmpserver = $tmparray[0]
							$tmpport = $tmparray[1]
							If($cnt -eq 0)
							{
								Line 3 "Server(s)`t`t`t`t: " "Server: $($tmpserver)`tPort: $($tmpport)"
							}
							Else
							{
								Line 8 "  " "Server: $($tmpserver)`tPort: $($tmpport)"
							}
						}
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$SecureGateway.InheritDefaultModeSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Gateway mode",($Script:htmlsb),$SecureGatewayMode,$htmlwhite))
				If($SecureGatewayMode -eq "Normal")
				{
					$rowdata += @(,("Forward requests to HTTP Server",($Script:htmlsb),$SecureGatewayForwardRequests,$htmlwhite))
					
					$cnt = -1
					ForEach($Item in $SecureGatewayServers)
					{
						$cnt++
						$tmparray = $Item.Split(":")
						$tmpserver = $tmparray[0]
						$tmpport = $tmparray[1]
						If($cnt -eq 0)
						{
							$rowdata += @(,("Server(s)",($Script:htmlsb),"Server: $($tmpserver)  Port: $($tmpport)",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),"Server: $($tmpserver)  Port: $($tmpport)",$htmlwhite))
						}
					}
					
					$rowdata += @(,("Preferred Connection Broker",($Script:htmlsb),$SecureGatewayPreferredConnectionBroker,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Forward requests to next RAS Secure Client Gateway in chain (cascaded firewall)",($Script:htmlsb),$SecureGatewayForwardRequests,$htmlwhite))
					
					$rowdata += @(,("Forwarding Secure Gateway(s)",($Script:htmlsb),"",$htmlwhite))
					If($SecureGatewayForwardRequests -eq "True")
					{
						$cnt = -1
						ForEach($Item in $SecureGatewayServers)
						{
							$cnt++
							$tmparray = $Item.Split(":")
							$tmpserver = $tmparray[0]
							$tmpport = $tmparray[1]
							If($cnt -eq 0)
							{
								$rowdata += @(,("Server(s)",($Script:htmlsb),"Server: $($tmpserver)  Port: $($tmpport)",$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"Server: $($tmpserver)  Port: $($tmpport)",$htmlwhite))
							}
						}
					}
				}

				$msg = "Mode"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Network
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Network"
			}
			If($Text)
			{
				Line 2 "Network"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($SecureGateway.InheritDefaultNetworkSettings)
			{
				#do we inherit site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings

				$SecureGatewayDefaults = Get-RASGatewayDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $SecureGatewayDefaults)
				{
					$SecureGatewayEnableRASSecureClientGatewayPort             = $SecureGatewayDefaults.EnableGatewayPort.ToString()
					$SecureGatewayRASSecureClientGatewayPort                   = $SecureGatewayDefaults.GatewayPort.ToString()
					$SecureGatewayOnlyAllowLetsEncryptVerification             = $SecureGatewayDefaults.OnlyAllowAcmeHttp.ToString()
					$SecureGatewayEnableRDPPort                                = $SecureGatewayDefaults.EnableRDP.ToString()
					$SecureGatewayRDPPort                                      = $SecureGatewayDefaults.RDPPort.ToString()
					$SecureGatewayEnableBroadcastRASSecureClientGatewayAddress = $SecureGatewayDefaults.Broadcast.ToString()
					$SecureGatewayEnableRDPUPDDataTunneling                    = $SecureGatewayDefaults.EnableRDPUDP.ToString()
					$SecureGatewayEnableDeviceManagerPort                      = $SecureGatewayDefaults.EnableDeviceManagerPort.ToString()
					$SecureGatewayDeviceManagerPort                            = "20009"
					$SecureGatewayEnableRDPDOSAttackFilter                     = $SecureGatewayDefaults.DOSPro.ToString()
					$SecureGatewayCipherPreference                             = $SecureGatewayDefaults.CipherPreference.ToString()
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$SecureGatewayEnableRASSecureClientGatewayPort             = "True"
					$SecureGatewayRASSecureClientGatewayPort                   = "80"
					$SecureGatewayOnlyAllowLetsEncryptVerification             = "False"
					$SecureGatewayEnableRDPPort                                = "False"
					$SecureGatewayEnableBroadcastRASSecureClientGatewayAddress = "True"
					$SecureGatewayEnableRDPUPDDataTunneling                    = "True"
					$SecureGatewayEnableDeviceManagerPort                      = "True"
					$SecureGatewayDeviceManagerPort                            = "20009"
					$SecureGatewayEnableRDPDOSAttackFilter                     = "True"
					$SecureGatewayCipherPreference                             = "True"
				}
			}
			Else
			{
				#we don't inherit settings
				#get the settings configured for this GW
				$SecureGatewayEnableRASSecureClientGatewayPort             = $SecureGateway.EnableGatewayPort.ToString()
				$SecureGatewayRASSecureClientGatewayPort                   = $SecureGateway.GatewayPort.ToString()
				$SecureGatewayOnlyAllowLetsEncryptVerification             = $SecureGateway.OnlyAllowAcmeHttp.ToString()
				$SecureGatewayEnableRDPPort                                = $SecureGateway.EnableRDP.ToString()
				$SecureGatewayRDPPort                                      = $SecureGateway.RDPPort.ToString()
				$SecureGatewayEnableBroadcastRASSecureClientGatewayAddress = $SecureGateway.Broadcast.ToString()
				$SecureGatewayEnableRDPUPDDataTunneling                    = $SecureGateway.EnableRDPUDP.ToString()
				$SecureGatewayEnableDeviceManagerPort                      = $SecureGateway.EnableDeviceManagerPort.ToString()
				$SecureGatewayDeviceManagerPort                            = "20009"
				$SecureGatewayEnableRDPDOSAttackFilter                     = $SecureGateway.DOSPro.ToString()
				$SecureGatewayCipherPreference                             = $SecureGateway.CipherPreference.ToString()
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $SecureGateway.InheritDefaultNetworkSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Enable Secure Gateway Port"; Value = $SecureGatewayEnableRASSecureClientGatewayPort; }) > $Null
				$ScriptInformation.Add(@{Data = "Secure Gateway Port"; Value = $SecureGatewayRASSecureClientGatewayPort; }) > $Null
				$ScriptInformation.Add(@{Data = "Only allow Let's Encrypt verification"; Value = $SecureGatewayOnlyAllowLetsEncryptVerification; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable RDP Port"; Value = $SecureGatewayEnableRDPPort; }) > $Null
				$ScriptInformation.Add(@{Data = "RDP Port"; Value = $SecureGatewayRDPPort; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable Broadcast RAS Secure Client Gateway Address"; Value = $SecureGatewayEnableBroadcastRASSecureClientGatewayAddress; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable RDP UDP Data Tunneling"; Value = $SecureGatewayEnableRDPUPDDataTunneling; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable Device Manager Port"; Value = $SecureGatewayEnableDeviceManagerPort; }) > $Null
				$ScriptInformation.Add(@{Data = "Device Manager Port"; Value = $SecureGatewayDeviceManagerPort; }) > $Null
				$ScriptInformation.Add(@{Data = "Enable RDP DOS Attack Filter"; Value = $SecureGatewayEnableRDPDOSAttackFilter; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t: " $SecureGateway.InheritDefaultNetworkSettings.ToString()
				Line 3 "Enable Secure Gateway Port`t`t: " $SecureGatewayEnableRASSecureClientGatewayPort
				Line 3 "Secure Gateway Port`t`t`t: " $SecureGatewayRASSecureClientGatewayPort
				Line 3 "Only allow Let's Encrypt verification`t: " $SecureGatewayOnlyAllowLetsEncryptVerification
				Line 3 "Enable RDP Port`t`t`t`t: " $SecureGatewayEnableRDPPort
				Line 3 "RDP Port`t`t`t`t: " $SecureGatewayRDPPort
				Line 3 "Enable Broadcast Secure Gateway Address`t: " $SecureGatewayEnableBroadcastRASSecureClientGatewayAddress
				Line 3 "Enable RDP UDP Data Tunneling`t`t: " $SecureGatewayEnableRDPUPDDataTunneling
				Line 3 "Enable Device Manager Port`t`t: " $SecureGatewayEnableDeviceManagerPort
				Line 3 "Device Manager Port`t`t`t: " $SecureGatewayDeviceManagerPort
				Line 3 "Enable RDP DOS Attack Filter`t`t: " $SecureGatewayEnableRDPDOSAttackFilter
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$SecureGateway.InheritDefaultNetworkSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Enable Secure Gateway Port",($Script:htmlsb),$SecureGatewayEnableRASSecureClientGatewayPort,$htmlwhite))
				$rowdata += @(,("Secure Gateway Port",($Script:htmlsb),$SecureGatewayRASSecureClientGatewayPort,$htmlwhite))
				$rowdata += @(,("Only allow Let's Encrypt verification",($Script:htmlsb),$SecureGatewayOnlyAllowLetsEncryptVerification,$htmlwhite))
				$rowdata += @(,("Enable RDP Port",($Script:htmlsb),$SecureGatewayEnableRDPPort,$htmlwhite))
				$rowdata += @(,("RDP Port",($Script:htmlsb),$SecureGatewayRDPPort,$htmlwhite))
				$rowdata += @(,("Enable Broadcast RAS Secure Client Gateway Address",($Script:htmlsb),$SecureGatewayEnableBroadcastRASSecureClientGatewayAddress,$htmlwhite))
				$rowdata += @(,("Enable RDP UDP Data Tunneling",($Script:htmlsb),$SecureGatewayEnableRDPUPDDataTunneling,$htmlwhite))
				$rowdata += @(,("Enable Device Manager Port",($Script:htmlsb),$SecureGatewayEnableDeviceManagerPort,$htmlwhite))
				$rowdata += @(,("Device Manager Port",($Script:htmlsb),$SecureGatewayDeviceManagerPort,$htmlwhite))
				$rowdata += @(,("Enable RDP DOS Attack Filter",($Script:htmlsb),$SecureGatewayEnableRDPDOSAttackFilter,$htmlwhite))

				$msg = "Network"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#SSL/TLS
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "SSL/TLS"
			}
			If($Text)
			{
				Line 2 "SSL/TLS"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $SecureGateway.InheritDefaultSslTlsSettings.ToString(); }) > $Null

				If($SecureGatewayEnableHSTS -eq "False")
				{
					$ScriptInformation.Add(@{Data = "HSTS is off"; Value = ""; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "HSTS is on"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "Enforce HTTP strict transport security (HSTS)"; Value = $SecureGatewayEnableHSTS; }) > $Null
					$ScriptInformation.Add(@{Data = "Browser caache time"; Value = "$SecureGatewayHSTSMaxage months"; }) > $Null
					$ScriptInformation.Add(@{Data = "Include subdomains"; Value = $SecureGatewayHSTSIncludeSubdomains; }) > $Null
					$ScriptInformation.Add(@{Data = "Preload"; Value = $SecureGatewayHSTSPreload; }) > $Null
				}

				$ScriptInformation.Add(@{Data = "Enable SSL"; Value = $SecureGatewayEnableSSL; }) > $Null
				$ScriptInformation.Add(@{Data = "on Port"; Value = $SecureGatewayEnableSSLOnPort; }) > $Null
				$ScriptInformation.Add(@{Data = "Accepted SSL Versions"; Value = $SecureGatewayAcceptedSSLVersions; }) > $Null
				$ScriptInformation.Add(@{Data = "Cipher Strength"; Value = $SecureGatewayCipherStrength; }) > $Null
				$ScriptInformation.Add(@{Data = "Cipher"; Value = $SecureGatewayCipher; }) > $Null
				$ScriptInformation.Add(@{Data = "Use ciphers according to server preference"; Value = $SecureGatewayCipherPreference; }) > $Null
				$ScriptInformation.Add(@{Data = "Certificates"; Value = $SecureGatewayCertificates; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t  : " $SecureGateway.InheritDefaultSslTlsSettings.ToString()

				If($SecureGatewayEnableHSTS -eq "False")
				{
					Line 3 "HSTS is off"
				}
				Else
				{
					Line 3 "HSTS is on"
					Line 3 "Enforce HTTP strict transport security`t  : " $SecureGatewayEnableHSTS
					Line 3 "Browser caache time`t`t`t  : " "$SecureGatewayHSTSMaxage months"
					Line 3 "Include subdomains`t`t`t  : " $SecureGatewayHSTSIncludeSubdomains
					Line 3 "Preload`t`t`t`t`t  : " $SecureGatewayHSTSPreload
				}

				Line 3 "Enable SSL`t`t`t`t  : " $SecureGatewayEnableSSL
				Line 3 "on Port`t`t`t`t`t  : " $SecureGatewayEnableSSLOnPort
				Line 3 "Accepted SSL Versions`t`t`t  : " $SecureGatewayAcceptedSSLVersions
				Line 3 "Cipher Strength`t`t`t`t  : " $SecureGatewayCipherStrength
				Line 3 "Cipher`t`t`t`t`t  : " $SecureGatewayCipher
				Line 3 "Use ciphers according to server preference: " $SecureGatewayCipherPreference
				Line 3 "Certificates`t`t`t`t  : " $SecureGatewayCertificates
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$SecureGateway.InheritDefaultSslTlsSettings.ToString(),$htmlwhite)

				If($SecureGatewayEnableHSTS -eq "False")
				{
					$rowdata += @(,("HSTS is off",($Script:htmlsb),"",$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("HSTS is on",($Script:htmlsb),,$htmlwhite))
					$rowdata += @(,("Enforce HTTP strict transport security (HSTS)",($Script:htmlsb),$SecureGatewayEnableHSTS,$htmlwhite))
					$rowdata += @(,("Browser caache time",($Script:htmlsb),"$SecureGatewayHSTSMaxage months",$htmlwhite))
					$rowdata += @(,("Include subdomains",($Script:htmlsb),$SecureGatewayHSTSIncludeSubdomains,$htmlwhite))
					$rowdata += @(,("Preload",($Script:htmlsb),$SecureGatewayHSTSPreload,$htmlwhite))
				}

				$rowdata += @(,("Enable SSL",($Script:htmlsb),$SecureGatewayEnableSSL,$htmlwhite))
				$rowdata += @(,("on Port",($Script:htmlsb),$SecureGatewayEnableSSLOnPort,$htmlwhite))
				$rowdata += @(,("Accepted SSL Versions",($Script:htmlsb),$SecureGatewayAcceptedSSLVersions,$htmlwhite))
				$rowdata += @(,("Cipher Strength",($Script:htmlsb),$SecureGatewayCipherStrength,$htmlwhite))
				$rowdata += @(,("Cipher",($Script:htmlsb),$SecureGatewayCipher,$htmlwhite))
				$rowdata += @(,("Use ciphers according to server preference",($Script:htmlsb),$SecureGatewayCipherPreference,$htmlwhite))
				$rowdata += @(,("Certificates",($Script:htmlsb),$SecureGatewayCertificates,$htmlwhite))

				$msg = "SSL/TLS"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#HTML5
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal"
			}
			If($Text)
			{
				Line 2 "User Portal"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($SecureGateway.InheritDefaultUserPortalSettings)
			{
				#do we inherit site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings

				$SecureGatewayDefaults = Get-RASGatewayDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $SecureGatewayDefaults)
				{
					$SecureGatewayEnableUserPortalClient = $SecureGatewayDefaults.EnableUserPortal.ToString()
					
					Switch($SecureGatewayDefaults.LaunchMethod)
					{
						"ParallelsClientAndWebClient"	{$SecureGatewayLaunchSessionsUsing = "Parallels Client with fallback to Browser"; Break}
						"ParallelsClient"				{$SecureGatewayLaunchSessionsUsing = "Parallels Client only"; Break}
						"WebClient"						{$SecureGatewayLaunchSessionsUsing = "Browser Only"; Break}
						Default							{$SecureGatewayLaunchSessionsUsing = "Unable to determine Launch sessions using: $($SecureGatewayDefaults.LaunchMethod)"; Break}
					}
					
					Switch ($SecureGatewayDefaults.FileTransferMode)
					{
						"Bidirectional"		{$SecureGatewayFileTransferMode = "Bidirectional"; Break}
						"Disabled"			{$SecureGatewayFileTransferMode = "Disabled"; Break}
						"ClientToServer"	{$SecureGatewayFileTransferMode = "Client to server only"; Break}
						"ServerToClient"	{$SecureGatewayFileTransferMode = "Server to client only"; Break}
						Default				{$SecureGatewayFileTransferMode = "Unable to determine File Transfer mode: $($SecureGatewayDefaults.FileTransferMode)"; Break}
					}

					Switch ($SecureGatewayDefaults.ClipboardDirection)
					{
						"Bidirectional"		{$SecureGatewayClipboardTransferMode = "Bidirectional"; Break}
						"Disabled"			{$SecureGatewayClipboardTransferMode = "Disabled"; Break}
						"ClientToServer"	{$SecureGatewayClipboardTransferMode = "Client to server only"; Break}
						"ServerToClient"	{$SecureGatewayClipboardTransferMode = "Server to client only"; Break}
						Default				{$SecureGatewayClipboardTransferMode = "Unable to determine Clipboard mode: $($SecureGatewayDefaults.ClipboardDirection)"; Break}
					}

					$SecureGatewayAllowLaunchMethod          = $SecureGatewayDefaults.AllowLaunchMethod.ToString()
					$SecureGatewayAllowAppsInNewTab          = $SecureGatewayDefaults.AllowAppsInNewTab.ToString()
					$SecureGatewayUsePreWin2000LoginFormat   = $SecureGatewayDefaults.UsePreWin2000LoginFormat.ToString()
					$SecureGatewayAllowEmbed                 = $SecureGatewayDefaults.AllowEmbed.ToString()
					$SecureGatewayAllowFileTransfer          = $SecureGatewayDefaults.AllowFileTransfer.ToString()
					$SecureGatewayAllowClipboard             = $SecureGatewayDefaults.AllowClipboard.ToString()
					$SecureGatewayAllowCORS                  = $SecureGatewayDefaults.AllowCORS
					$SecureGatewayAllowedDomainsForCORS      = $SecureGatewayDefaults.AllowedDomainsForCORS
					$SecureGatewayBrowserCacheTimeInMonths   = $SecureGatewayDefaults.BrowserCacheTimeInMonths
					$SecureGatewayEnableAlternateNLBHostname = $SecureGatewayDefaults.EnableAlternateNLBHost.ToString()
					$SecureGatewayAlternameNLBHostname       = $SecureGatewayDefaults.AlternateNLBHost
					$SecureGatewayEnableAlternateNLBPort     = $SecureGatewayDefaults.EnableAlternateNLBPort.ToString()
					$SecureGatewayAlternateNLBPort           = $SecureGatewayDefaults.AlternateNLBPort.ToString()
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$SecureGatewayEnableUserPortalClient     = "True"
					$SecureGatewayLaunchSessionsUsing        = "Parallels Client with gallback to Browser"
					$SecureGatewayAllowLaunchMethod          = "True"
					$SecureGatewayAllowAppsInNewTab          = "False"
					$SecureGatewayUsePreWin2000LoginFormat   = "True"
					$SecureGatewayAllowEmbed                 = "False"
					$SecureGatewayAllowFileTransfer          = "True"
					$SecureGatewayAllowClipboard             = "True"
					$SecureGatewayAllowCORS                  = "False"
					$SecureGatewayAllowedDomainsForCORS      = @()
					$SecureGatewayBrowserCacheTimeInMonths   = 12
					$SecureGatewayEnableAlternateNLBHostname = "False"
					$SecureGatewayAlternameNLBHostname       = ""
					$SecureGatewayEnableAlternateNLBPort     = "False"
					$SecureGatewayAlternateNLBPort           = "8443"
					$SecureGatewayClipboardTransferMode      = "Bidirectional"
				}
			}
			Else
			{
				#we don't inherit settings
				#get the settings configured for this GW
				$SecureGatewayEnableUserPortalClient = $SecureGateway.EnableUserPortal.ToString()
				
				Switch($SecureGatewayDefaults.LaunchMethod)
				{
					"ParallelsClientAndWebClient"	{$SecureGatewayLaunchSessionsUsing = "Parallels Client with fallback to Browser"; Break}
					"ParallelsClient"				{$SecureGatewayLaunchSessionsUsing = "Parallels Client only"; Break}
					"WebClient"						{$SecureGatewayLaunchSessionsUsing = "Browser Only"; Break}
					Default							{$SecureGatewayLaunchSessionsUsing = "Unable to determine Launch sessions using: $($SecureGatewayDefaults.LaunchMethod)"; Break}
				}
				
				Switch ($SecureGatewayDefaults.FileTransferMode)
				{
					"Bidirectional"		{$SecureGatewayFileTransferMode = "Bidirectional"; Break}
					"Disabled"			{$SecureGatewayFileTransferMode = "Disabled"; Break}
					"ClientToServer"	{$SecureGatewayFileTransferMode = "Client to server only"; Break}
					"ServerToClient"	{$SecureGatewayFileTransferMode = "Server to client only"; Break}
					Default				{$SecureGatewayFileTransferMode = "Unable to determine File Transfer mode: $($SecureGatewayDefaults.FileTransferMode)"; Break}
				}

				Switch ($SecureGatewayDefaults.ClipboardDirection)
				{
					"Bidirectional"		{$SecureGatewayClipboardTransferMode = "Bidirectional"; Break}
					"Disabled"			{$SecureGatewayClipboardTransferMode = "Disabled"; Break}
					"ClientToServer"	{$SecureGatewayClipboardTransferMode = "Client to server only"; Break}
					"ServerToClient"	{$SecureGatewayClipboardTransferMode = "Server to client only"; Break}
					Default				{$SecureGatewayClipboardTransferMode = "Unable to determine Clipboard mode: $($SecureGatewayDefaults.ClipboardDirection)"; Break}
				}

				$SecureGatewayAllowLaunchMethod          = $SecureGateway.AllowLaunchMethod.ToString()
				$SecureGatewayAllowAppsInNewTab          = $SecureGateway.AllowAppsInNewTab.ToString()
				$SecureGatewayUsePreWin2000LoginFormat   = $SecureGateway.UsePreWin2000LoginFormat.ToString()
				$SecureGatewayAllowEmbed                 = $SecureGateway.AllowEmbed.ToString()
				$SecureGatewayAllowFileTransfer          = $SecureGateway.AllowFileTransfer
				$SecureGatewayAllowClipboard             = $SecureGateway.AllowClipboard
				$SecureGatewayAllowCORS                  = $SecureGateway.AllowCORS
				$SecureGatewayAllowedDomainsForCORS      = $SecureGateway.AllowedDomainsForCORS
				$SecureGatewayBrowserCacheTimeInMonths   = $SecureGateway.BrowserCacheTimeInMonths
				$SecureGatewayEnableAlternateNLBHostname = $SecureGateway.EnableAlternateNLBHost.ToString()
				$SecureGatewayAlternameNLBHostname       = $SecureGateway.AlternateNLBHost
				$SecureGatewayEnableAlternateNLBPort     = $SecureGateway.EnableAlternateNLBPort.ToString()
				$SecureGatewayAlternateNLBPort           = $SecureGateway.AlternateNLBPort.ToString()
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $SecureGateway.InheritDefaultUserPortalSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Enable User Portal"; Value = $SecureGatewayEnableUserPortalClient; }) > $Null
				$ScriptInformation.Add(@{Data = "Client"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Launch sessions using"; Value = $SecureGatewayLaunchSessionsUsing; }) > $Null
				$ScriptInformation.Add(@{Data = "     Allow user to select a launch method"; Value = $SecureGatewayAllowLaunchMethod; }) > $Null
				$ScriptInformation.Add(@{Data = "     Allow opening applications in a new tab"; Value = $SecureGatewayAllowAppsInNewTab; }) > $Null
				$ScriptInformation.Add(@{Data = "     Use Pre Windows 2000 login format"; Value = $SecureGatewayUsePreWin2000LoginFormat; }) > $Null
				$ScriptInformation.Add(@{Data = "     Allow embedding of User Portal into other web pages"; Value = $SecureGatewayAllowEmbed; }) > $Null
				$ScriptInformation.Add(@{Data = "     Allow file transfer command"; Value = $SecureGatewayAllowFileTransfer.ToString(); }) > $Null
				If($SecureGatewayAllowFileTransfer)
				{
					$ScriptInformation.Add(@{Data = "          Direction"; Value = $SecureGatewayFileTransferMode; }) > $Null
				}
				$ScriptInformation.Add(@{Data = "     Allow clipboard command"; Value = $SecureGatewayAllowClipboard.ToString(); }) > $Null
				If($SecureGatewayAllowClipboard)
				{
					$ScriptInformation.Add(@{Data = "          Clipboard Redirection"; Value = $SecureGatewayClipboardTransferMode; }) > $Null
				}
				$ScriptInformation.Add(@{Data = "     Allow cross-origin resource sharing"; Value = $SecureGatewayAllowCORS.ToString(); }) > $Null
				If($SecureGatewayAllowCORS)
				{
					$cnt=-1
					ForEach($Domain in $SecureGatewayAllowedDomainsForCORS)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "     Allow domains"; Value = $Domain; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $Domain; }) > $Null
						}
					}
					$ScriptInformation.Add(@{Data = "     Browser cache time"; Value = "$($SecureGatewayBrowserCacheTimeInMonths.ToString()) months"; }) > $Null
				}

				$ScriptInformation.Add(@{Data = "Network Load Balancer access"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Use alternate hostname"; Value = $SecureGatewayEnableAlternateNLBHostname; }) > $Null
				If($SecureGatewayEnableAlternateNLBHostname -eq "True")
				{
					$ScriptInformation.Add(@{Data = ""; Value = $SecureGatewayAlternameNLBHostname; }) > $Null
				}
				$ScriptInformation.Add(@{Data = "     Use alternate port"; Value = $SecureGatewayEnableAlternateNLBPort; }) > $Null
				If($SecureGatewayEnableAlternateNLBPort -eq "True")
				{
					$ScriptInformation.Add(@{Data = ""; Value = $SecureGatewayAlternateNLBPort; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t`t: " $SecureGateway.InheritDefaultUserPortalSettings.ToString()
				Line 3 "Enable User Portal`t`t`t`t: " $SecureGatewayEnableUserPortalClient
				Line 3 "Client" ""
				Line 4 "Launch sessions using`t`t`t: " $SecureGatewayLaunchSessionsUsing
				Line 4 "Allow user to select a launch method`t: " $SecureGatewayAllowLaunchMethod
				Line 4 "Allow opening applications in a new tab`t: " $SecureGatewayAllowAppsInNewTab
				Line 4 "Use Pre Windows 2000 login format`t: " $SecureGatewayUsePreWin2000LoginFormat
				Line 4 "Allow embedding of User Portal"
				Line 4 "into other web pages`t`t`t: " $SecureGatewayAllowEmbed

				Line 4 "Allow file transfer command`t`t: " $SecureGatewayAllowFileTransfer.ToString()
				If($SecureGateway.AllowFileTransfer)
				{
					Line 5 "Direction`t`t`t: " $SecureGatewayFileTransferMode
				}

				Line 4 "Allow clipboard command`t`t`t: " $SecureGatewayAllowClipboard.ToString()
				If($SecureGateway.AllowClipboard)
				{
					Line 5 "Clipboard Redirection`t`t: " $SecureGatewayClipboardTransferMode
				}

				Line 4 "Allow cross-origin resource sharing`t: " $SecureGatewayAllowCORS.ToString()
				If($SecureGatewayAllowCORS)
				{
					$cnt=-1
					ForEach($Domain in $SecureGatewayAllowedDomainsForCORS)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							Line 7 "Allow domains   : " $Domain
						}
						Else
						{
							Line 9 "  " $Domain
						}
					}
					Line 6 "Browser cache time      : " "$($SecureGatewayBrowserCacheTimeInMonths.ToString()) months"
				}

				Line 3 "Network Load Balancer access" ""
				Line 4 "Use alternate hostname`t`t: " $SecureGatewayEnableAlternateNLBHostname
				If($SecureGatewayEnableAlternateNLBHostname -eq "True")
				{
					Line 8 $SecureGatewayAlternameNLBHostname
				}
				Line 4 "Use alternate port`t`t: " $SecureGatewayEnableAlternateNLBPort
				If($SecureGatewayEnableAlternateNLBPort -eq "True")
				{
					Line 8 $SecureGatewayAlternateNLBPort
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$SecureGateway.InheritDefaultUserPortalSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Enable User Portal",($Script:htmlsb),$SecureGatewayEnableUserPortalClient,$htmlwhite))
				$rowdata += @(,("Client",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Launch sessions using",($Script:htmlsb),$SecureGatewayLaunchSessionsUsing,$htmlwhite))
				$rowdata += @(,("     Allow user to select a launch method",($Script:htmlsb),$SecureGatewayAllowLaunchMethod,$htmlwhite))
				$rowdata += @(,("     Allow opening applications in a new tab",($Script:htmlsb),$SecureGatewayAllowAppsInNewTab,$htmlwhite))
				$rowdata += @(,("     Use Pre Windows 2000 login format",($Script:htmlsb),$SecureGatewayUsePreWin2000LoginFormat,$htmlwhite))
				$rowdata += @(,("     Allow embedding of User Portal into other web pages",($Script:htmlsb),$SecureGatewayAllowEmbed,$htmlwhite))

				$rowdata += @(,("     Allow file transfer command",($Script:htmlsb),$SecureGatewayAllowFileTransfer.ToString(),$htmlwhite))
				If($SecureGateway.AllowFileTransfer)
				{
					$rowdata += @(,("          Direction",($Script:htmlsb),$SecureGatewayFileTransferMode,$htmlwhite))
				}

				$rowdata += @(,("     Allow clipboard command",($Script:htmlsb),$SecureGatewayAllowClipboard.ToString(),$htmlwhite))
				If($SecureGateway.AllowClipboard)
				{
					$rowdata += @(,("          Clipboard Redirection",($Script:htmlsb),$SecureGatewayClipboardTransferMode,$htmlwhite))
				}

				$rowdata += @(,("     Allow cross-origin resource sharing",($Script:htmlsb),$SecureGatewayAllowCORS.ToString(),$htmlwhite))
				If($SecureGatewayAllowCORS)
				{
					$cnt=-1
					ForEach($Domain in $SecureGatewayAllowedDomainsForCORS)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("     Allow domains",($Script:htmlsb),$Domain,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$Domain,$htmlwhite))
						}
					}
					$rowdata += @(,("     Browser cache time",($Script:htmlsb),"$($SecureGatewayBrowserCacheTimeInMonths.ToString()) months",$htmlwhite))
				}

				$rowdata += @(,("Network Load Balancer access",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Use alternate hostname",($Script:htmlsb),$SecureGatewayEnableAlternateNLBHostname,$htmlwhite))
				If($SecureGatewayEnableAlternateNLBHostname -eq "True")
				{
					$rowdata += @(,("",($Script:htmlsb),$SecureGatewayAlternameNLBHostname,$htmlwhite))
				}
				$rowdata += @(,("     Use alternate port",($Script:htmlsb),$SecureGatewayEnableAlternateNLBPort,$htmlwhite))
				If($SecureGatewayEnableAlternateNLBPort -eq "True")
				{
					$rowdata += @(,("",($Script:htmlsb),$SecureGatewayAlternateNLBPort,$htmlwhite))
				}

				$msg = "User Portal"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Wyse
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Wyse"
			}
			If($Text)
			{
				Line 2 "Wyse"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($SecureGateway.InheritDefaultWyseSettings)
			{
				#do we inherit site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings

				$SecureGatewayDefaults = Get-RASGatewayDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $SecureGatewayDefaults)
				{
					$SecureGatewayEnableWyse          = $SecureGatewayDefaults.EnableWyseSupport.ToString()
					$SecureGatewayDisableWyseCertWarn = $SecureGatewayDefaults.DisableWyseCertWarn.ToString()
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$SecureGatewayEnableWyse          = "True"
					$SecureGatewayDisableWyseCertWarn = "False"
				}
			}
			Else
			{
				#we don't inherit settings
				#get the settings configured for this GW
				$SecureGatewayEnableWyse          = $SecureGateway.EnableWyseSupport.ToString()
				$SecureGatewayDisableWyseCertWarn = $SecureGateway.DisableWyseCertWarn.ToString()
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $SecureGateway.InheritDefaultWyseSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Enable Wyse ThinOS Support"; Value = $SecureGatewayEnableWyse; }) > $Null
				$ScriptInformation.Add(@{Data = "Do not warn if server certificate is not verified"; Value = $SecureGatewayDisableWyseCertWarn; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t`t : " $SecureGateway.InheritDefaultWyseSettings.ToString()
				Line 3 "Enable Wyse ThinOS Support`t`t`t : " $SecureGatewayEnableWyse
				Line 3 "Do not warn if server certificate is not verified: " $SecureGatewayDisableWyseCertWarn
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$SecureGateway.InheritDefaultWyseSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Enable Wyse ThinOS Support",($Script:htmlsb),$SecureGatewayEnableWyse,$htmlwhite))
				$rowdata += @(,("Do not warn if server certificate is not verified",($Script:htmlsb),$SecureGatewayDisableWyseCertWarn,$htmlwhite))

				$msg = "Wyse"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Security
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Security"
			}
			If($Text)
			{
				Line 2 "Security"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($SecureGateway.InheritDefaultSecuritySettings)
			{
				#do we inherit site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings

				$SecureGatewayDefaults = Get-RASGatewayDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $SecureGatewayDefaults)
				{
					If($SecureGatewayDefaults.SecurityMode -eq "AllowAllExcept")
					{
						$SecureGatewayAllow = "AllowAllExcept"
						$MACAddresses = @()
						ForEach($Item in $SecureGatewayDefaults.MACAllowExcept)
						{
							$MACAddresses += $Item
						}
					}
					Else
					{
						$SecureGatewayAllow = "AllowOnly"
						$MACAddresses = @()
						ForEach($Item in $SecureGatewayDefaults.MACAllowOnly)
						{
							$MACAddresses += $Item
						}
					}
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$SecureGatewayAllow = "AllowAllExcept"
					$MACAddresses = @()
				}
			}
			Else
			{
				#we don't inherit settings
				#get the settings configured for this GW
				If($SecureGateway.SecurityMode -eq "AllowAllExcept")
				{
					$SecureGatewayAllow = "AllowAllExcept"
					$MACAddresses = @()
					ForEach($Item in $SecureGateway.MACAllowExcept)
					{
						$MACAddresses += $Item
					}
				}
				Else
				{
					$SecureGatewayAllow = "AllowOnly"
					$MACAddresses = @()
					ForEach($Item in $SecureGateway.MACAllowOnly)
					{
						$MACAddresses += $Item
					}
				}
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $SecureGateway.InheritDefaultSecuritySettings.ToString(); }) > $Null
				If($SecureGatewayAllow -eq "AllowAllExcept")
				{
					$ScriptInformation.Add(@{Data = "Allow all except"; Value = ""; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Allow only"; Value = ""; }) > $Null
				}
				$cnt =-1
				ForEach($Item in $MACAddresses)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "MAC Address"; Value = $Item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t: " $SecureGateway.InheritDefaultSecuritySettings.ToString()
				If($SecureGatewayAllow -eq "AllowAllExcept")
				{
					Line 3 "Allow all except"
				}
				Else
				{
					Line 3 "Allow only"
				}
				$cnt =-1
				ForEach($Item in $MACAddresses)
				{
					$cnt++
					If($cnt -eq 0)
					{
						Line 3 "MAC Address`t`t`t`t: " $Item
					}
					Else
					{
						Line 8 "  " $Item
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$SecureGateway.InheritDefaultSecuritySettings.ToString(),$htmlwhite)
				If($SecureGatewayAllow -eq "AllowAllExcept")
				{
					$rowdata += @(,("Allow all except",($Script:htmlsb),"",$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Allow only",($Script:htmlsb),"",$htmlwhite))
				}
				$cnt =-1
				ForEach($Item in $MACAddresses)
				{
					$cnt++
					If($cnt -eq 0)
					{
						$rowdata += @(,("MAC Address",($Script:htmlsb),$Item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}

				$msg = "Security"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Web
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Web"
			}
			If($Text)
			{
				Line 2 "Web"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($SecureGateway.InheritDefaultWebSettings)
			{
				#do we inherit site defaults?
				#yes we do, get the default settings for the Site
				#use the Site default settings

				$SecureGatewayDefaults = Get-RASGatewayDefaultSettings -SiteId $Site.Id -EA 0 4>$Null
				
				If($? -and $Null -ne $SecureGatewayDefaults)
				{
					$SecureGatewayDefaultURL = $SecureGatewayDefaults.WebRequestsURL
					$SecureGatewayWebCookie = $SecureGatewayDefaults.WebCookie
				}
				Else
				{
					#unable to retrieve default, use built-in default values
					$SecureGatewayDefaultURL = "https://%hostname%/RASHTML5Gateway"
					$SecureGatewayWebCookie = "ASP.NET_SessionId"
				}
			}
			Else
			{
				#we don't inherit settings
				#get the settings configured for this GW
				$SecureGatewayDefaultURL = $SecureGateway.WebRequestsURL
				$SecureGatewayWebCookie = $SecureGateway.WebCookie
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $SecureGateway.InheritDefaultWebSettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Default URL"; Value = $SecureGatewayDefaultURL; }) > $Null
				$ScriptInformation.Add(@{Data = "Web cookie"; Value = $SecureGatewayWebCookie; }) > $Null
				$ScriptInformation.Add(@{Data = "Use a secure web cookie"; Value = $SecureGateway.UseSecureWebCookie.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Inherit default settings`t`t: " $SecureGateway.InheritDefaultWebSettings.ToString()
				Line 3 "Default URL`t`t`t`t: " $SecureGatewayDefaultURL
				Line 3 "Web cookie`t`t`t`t: " $SecureGatewayWebCookie
				Line 3 "Use a secure web cookie`t`t`t: " $SecureGateway.UseSecureWebCookie.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$SecureGateway.InheritDefaultWebSettings.ToString(),$htmlwhite)
				$rowdata += @(,("Default URL",($Script:htmlsb),$SecureGatewayDefaultURL,$htmlwhite))
				$rowdata += @(,("Web cookie",($Script:htmlsb),$SecureGatewayWebCookie,$htmlwhite))
				$rowdata += @(,("Use a secure web cookie",($Script:htmlsb),$SecureGateway.UseSecureWebCookie.ToString(),$htmlwhite))

				$msg = "Web"
				$columnWidths = @("300","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}

	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Connection Brokers"
	}
	If($Text)
	{
		Line 1 "Connection Brokers"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Connection Brokers"
	}

	Write-Verbose "$(Get-Date -Format G): Output Connection Brokers"
	$ConnectionBrokers = Get-RASBroker -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Connection Brokers for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Connection Brokers for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Connection Brokers for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Connection Brokers for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $ConnectionBrokers)
	{
		Write-Host "
	No Connection Brokers retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Connection Brokers retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Connection Brokers retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Connection Brokers retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($ConnectionBroker in $ConnectionBrokers)
		{
			$ConnectionBrokerStatus = Get-RASBrokerStatus -Id $ConnectionBroker.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve Status for Connection Broker $($ConnectionBroker.Id)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve Status for Connection Broker $($ConnectionBroker.Id)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve Status for Connection Broker $($ConnectionBroker.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve Status for Connection Broker $($ConnectionBroker.Id)"
				}
			}
			ElseIf($? -and $Null -eq $ConnectionBrokerStatus)
			{
				Write-Host "
				No Status retrieved for Connection Broker $($ConnectionBroker.Id)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No Status retrieved for Connection Broker $($ConnectionBroker.Id)"
				}
				If($Text)
				{
					Line 0 "No Status retrieved for Connection Broker $($ConnectionBroker.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No Status retrieved for Connection Broker $($ConnectionBroker.Id)"
				}
			}
			Else
			{
				If($ConnectionBroker.Standby -eq $False)
				{
					$ConnectionBrokerPriority = "Master"
				}
				Else
				{
					$ConnectionBrokerPriority = "Standby"
				}

				$ConnectionBrokerStatusAgentState = GetRASStatus $ConnectionBrokerStatus.AgentState
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 3 0 "Connection Broker $($ConnectionBroker.Server)"
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Server"; Value = $ConnectionBroker.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "Enabled"; Value = $ConnectionBroker.Enabled.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Priority"; Value = $ConnectionBrokerPriority; }) > $Null
					$ScriptInformation.Add(@{Data = "Status"; Value = $ConnectionBrokerStatusAgentState; }) > $Null
					$ScriptInformation.Add(@{Data = "Log level"; Value = $ConnectionBrokerStatus.LogLevel; }) > $Null
					$ScriptInformation.Add(@{Data = "Last modification by"; Value = $ConnectionBroker.AdminLastMod; }) > $Null
					$ScriptInformation.Add(@{Data = "Modified on"; Value = $ConnectionBroker.TimeLastMod.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Created by"; Value = $ConnectionBroker.AdminCreate; }) > $Null
					$ScriptInformation.Add(@{Data = "Created on"; Value = $ConnectionBroker.TimeCreate.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "ID"; Value = $ConnectionBroker.Id.ToString(); }) > $Null

					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 2 "Connection Broker $($ConnectionBroker.Server)"
					Line 3 "Server`t`t`t: " $ConnectionBroker.Server
					Line 3 "Enabled`t`t`t: " $ConnectionBroker.Enabled.ToString()
					Line 3 "Priority`t`t: " $ConnectionBrokerPriority
					Line 3 "Status`t`t`t: " $ConnectionBrokerStatusAgentState
					Line 3 "Log level`t`t: " $ConnectionBrokerStatus.LogLevel
					Line 3 "Last modification by`t: " $ConnectionBroker.AdminLastMod
					Line 3 "Modified on`t`t: " $ConnectionBroker.TimeLastMod.ToString()
					Line 3 "Created by`t`t: " $ConnectionBroker.AdminCreate
					Line 3 "Created on`t`t: " $ConnectionBroker.TimeCreate.ToString()
					Line 3 "ID`t`t`t: " $ConnectionBroker.Id.ToString()
					Line 0 ""
				}
				If($HTML)
				{
					WriteHTMLLine 3 0 "Connection Broker $($ConnectionBroker.Server)"
					$rowdata = @()
					$columnHeaders = @("Server",($Script:htmlsb),$ConnectionBroker.Server,$htmlwhite)
					$rowdata += @(,("Enabled",($Script:htmlsb),$ConnectionBroker.Enabled.ToString(),$htmlwhite))
					$rowdata += @(,("Priority",($Script:htmlsb),$ConnectionBrokerPriority,$htmlwhite))
					$rowdata += @(,("Status",($Script:htmlsb),$ConnectionBrokerStatusAgentState,$htmlwhite))
					$rowdata += @(,("Log level",($Script:htmlsb),$ConnectionBrokerStatus.LogLevel,$htmlwhite))
					$rowdata += @(,("Last modification by",($Script:htmlsb), $ConnectionBroker.AdminLastMod,$htmlwhite))
					$rowdata += @(,("Modified on",($Script:htmlsb), $ConnectionBroker.TimeLastMod.ToString(),$htmlwhite))
					$rowdata += @(,("Created by",($Script:htmlsb), $ConnectionBroker.AdminCreate,$htmlwhite))
					$rowdata += @(,("Created on",($Script:htmlsb), $ConnectionBroker.TimeCreate.ToString(),$htmlwhite))
					$rowdata += @(,("ID",($Script:htmlsb),$ConnectionBroker.Id.ToString(),$htmlwhite))

					$msg = ""
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Properties"
			}
			If($Text)
			{
				Line 2 "Properties"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable Server in Site"; Value = $ConnectionBroker.Enabled.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Server"; Value = $ConnectionBroker.Server; }) > $Null
				$ScriptInformation.Add(@{Data = "IP"; Value = $ConnectionBroker.IP; }) > $Null
				$ScriptInformation.Add(@{Data = "Alternative IPs"; Value = $ConnectionBroker.AlternativeIPs; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $ConnectionBroker.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Standby"; Value = $ConnectionBroker.Standby.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Enable Server in Site`t: " $ConnectionBroker.Enabled.ToString()
				Line 3 "Server`t`t`t: " $ConnectionBroker.Server
				Line 3 "IP`t`t`t: " $ConnectionBroker.IP
				Line 3 "Alternative IPs`t`t: " $ConnectionBroker.AlternativeIPs
				Line 3 "Description`t`t: " $ConnectionBroker.Description
				Line 3 "Standby`t`t`t: " $ConnectionBroker.Standby.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable Server in Site",($Script:htmlsb),$ConnectionBroker.Enabled.ToString(),$htmlwhite)
				$rowdata += @(,("Server",($Script:htmlsb),$ConnectionBroker.Server,$htmlwhite))
				$rowdata += @(,("IP",($Script:htmlsb),$ConnectionBroker.IP,$htmlwhite))
				$rowdata += @(,("Alternative IPs",($Script:htmlsb),$ConnectionBroker.AlternativeIPs,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$ConnectionBroker.Description,$htmlwhite))
				$rowdata += @(,("Standby",($Script:htmlsb),$ConnectionBroker.Standby.ToString(),$htmlwhite))

				$msg = "Properties"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#Auto-promotion
			$ConnectionBrokerAutoPromotion = Get-RASBrokerAutoPromotionSettings -SiteId $Site.Id -EA 0 4>$Null
			
			If(!$?)
			{
				Write-Warning "
				`n
				Unable to retrieve Auto-promotion for Site $($Site.Id) for Site $($Site.Id)`
				"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "Unable to retrieve Auto-promotion for Site $($Site.Id)"
				}
				If($Text)
				{
					Line 0 "Unable to retrieve Auto-promotion for Site $($Site.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "Unable to retrieve Auto-promotion for Site $($Site.Id)"
				}
			}
			ElseIf($? -and $Null -eq $ConnectionBrokerStatus)
			{
				Write-Host "
				No data retrieved for Auto-promotion for Site $($Site.Id)`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No data retrieved for Auto-promotion for Site $($Site.Id)"
				}
				If($Text)
				{
					Line 0 "No data retrieved for Auto-promotion for Site $($Site.Id)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No data retrieved for Auto-promotion for Site $($Site.Id)"
				}
			}
			Else
			{
				If($MSWord -or $PDF)
				{
					WriteWordLine 3 0 "Auto-promotion"
					$ScriptInformation = New-Object System.Collections.ArrayList
					$ScriptInformation.Add(@{Data = "Auto-promotion Enabled"; Value = $ConnectionBrokerAutoPromotion.Enabled.ToString(); }) > $Null
					If($ConnectionBrokerAutoPromotion.Enabled)
					{
						$ScriptInformation.Add(@{Data = "Enable auto-promotion after (minutes)"; Value = $ConnectionBrokerAutoPromotion.AutoPromoteAfterMins.ToString(); }) > $Null
						$ScriptInformation.Add(@{Data = "Enable fallback"; Value = $ConnectionBrokerAutoPromotion.FailbackEnabled.ToString(); }) > $Null
						$ScriptInformation.Add(@{Data = "Replicate settings"; Value = $ConnectionBrokerAutoPromotion.Replicate.ToString(); }) > $Null
					}
					
					$Table = AddWordTable -Hashtable $ScriptInformation `
					-Columns Data,Value `
					-List `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				If($Text)
				{
					Line 2 "Auto-promotion"
					Line 3 "Auto-promotion Enabled: " $ConnectionBrokerAutoPromotion.Enabled.ToString()
					If($ConnectionBrokerAutoPromotion.Enabled)
					{
						Line 3 "Enable auto-promotion after (minutes): " $ConnectionBrokerAutoPromotion.AutoPromoteAfterMins.ToString()
						Line 3 "Enable fallback: " $ConnectionBrokerAutoPromotion.FailbackEnabled.ToString()
						Line 3 "Replicate settings: " $ConnectionBrokerAutoPromotion.Replicate.ToString()
					}
					Line 0 ""
				}
				If($HTML)
				{
					WriteHTMLLine 3 0 "Auto-promotion"
					$rowdata = @()
					$columnHeaders = @("Auto-promotion Enabled",($Script:htmlsb),$ConnectionBrokerAutoPromotion.Enabled.ToString(),$htmlwhite)
					If($ConnectionBrokerAutoPromotion.Enabled)
					{
						$rowdata += @(,("Enable auto-promotion after (minutes)",($Script:htmlsb),$ConnectionBrokerAutoPromotion.AutoPromoteAfterMins.ToString(),$htmlwhite))
						$rowdata += @(,("Enable fallback",($Script:htmlsb),$ConnectionBrokerAutoPromotion.FailbackEnabled.ToString(),$htmlwhite))
						$rowdata += @(,("Replicate settings",($Script:htmlsb),$ConnectionBrokerAutoPromotion.Replicate.ToString(),$htmlwhite))
					}
					$msg = ""
					$columnWidths = @("200","275")
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
					WriteHTMLLine 0 0 ""
				}
			}
		}
	}
	
	#Enrollment Servers
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Enrollment Servers"
	}
	If($Text)
	{
		Line 1 "Enrollment Servers"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Enrollment Servers"
	}

	Write-Verbose "$(Get-Date -Format G): Output Enrollment Servers"
	$EnrollmentServers = Get-RASEnrollmentServer -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Enrollment Servers for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Enrollment Servers for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Enrollment Servers for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Enrollment Servers for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $EnrollmentServers)
	{
		Write-Host "
	No Enrollment Servers retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Enrollment Servers retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Enrollment Servers retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Enrollment Servers retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($EnrollmentServer in $EnrollmentServers)
		{
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Enrollment Server $($EnrollmentServer.Server)"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $EnrollmentServer.Server; }) > $Null
				$ScriptInformation.Add(@{Data = "Enabled"; Value = $EnrollmentServer.Enabled.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Status"; Value = "Can't find"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $EnrollmentServer.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Log level"; Value = "Can't find"; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $EnrollmentServer.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $EnrollmentServer.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $EnrollmentServer.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $EnrollmentServer.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "ID"; Value = $EnrollmentServer.Id.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "Enrollment Server $($EnrollmentServer.Server)"
				Line 3 "Name`t`t`t: " $EnrollmentServer.Server
				Line 3 "Enabled`t`t`t: " $EnrollmentServer.Enabled.ToString()
				Line 3 "Status`t`t`t: " "Can't find"
				Line 3 "Description`t`t: " $EnrollmentServer.Description
				Line 3 "Log level`t`t: " "Can't find"
				Line 3 "Last modification by`t: " $EnrollmentServer.AdminLastMod
				Line 3 "Modified on`t`t: " $EnrollmentServer.TimeLastMod.ToString()
				Line 3 "Created by`t`t: " $EnrollmentServer.AdminCreate
				Line 3 "Created on`t`t: " $EnrollmentServer.TimeCreate.ToString()
				Line 3 "ID`t`t`t: " $EnrollmentServer.Id.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Enrollment Server $($EnrollmentServer.Server)"
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$EnrollmentServer.Server,$htmlwhite)
				$rowdata += @(,("Enabled",($Script:htmlsb),$EnrollmentServer.Enabled.ToString(),$htmlwhite))
				$rowdata += @(,("Status",($Script:htmlsb),"Can't find",$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$EnrollmentServer.Description,$htmlwhite))
				$rowdata += @(,("Log level",($Script:htmlsb),"Can't find",$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $EnrollmentServer.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $EnrollmentServer.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $EnrollmentServer.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $EnrollmentServer.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("ID",($Script:htmlsb),$EnrollmentServer.Id.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Properties"
			}
			If($Text)
			{
				Line 2 "Properties"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($EnrollmentServer.PreferredBrokerId -eq 0)
			{
				$EnrollmentServerPreferredConnectionBroker = "Automatic"
			}
			Else
			{
				$EnrollmentServerPreferredConnectionBroker = (Get-RASBroker -Id $EnrollmentServer.PreferredBrokerId -EA 0 4>$Null).Server
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable Enrollment Server"; Value = $EnrollmentServer.Enabled.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Server"; Value = $EnrollmentServer.Server; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $EnrollmentServer.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Preferred Connection Broker"; Value = $EnrollmentServerPreferredConnectionBroker; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Enable Enrollment Server`t: " $EnrollmentServer.Enabled.ToString()
				Line 3 "Server`t`t`t`t: " $EnrollmentServer.Server
				Line 3 "Description`t`t`t: " $EnrollmentServer.Description
				Line 3 "Preferred Connection Broker`t: " $EnrollmentServerPreferredConnectionBroker
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable Enrollment Server",($Script:htmlsb),$EnrollmentServer.Enabled.ToString(),$htmlwhite)
				$rowdata += @(,("Server",($Script:htmlsb),$EnrollmentServer.Server,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$EnrollmentServer.Description,$htmlwhite))
				$rowdata += @(,("Preferred Connection Broker",($Script:htmlsb),$EnrollmentServerPreferredConnectionBroker,$htmlwhite))

				$msg = "Properties"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}
	
	#HALB
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "HALB"
	}
	If($Text)
	{
		Line 1 "HALB"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "HALB"
	}

	Write-Verbose "$(Get-Date -Format G): Output HALB"
	$HALBs = Get-RASHALB -Siteid $Site.Id -EA 0 4> $Null 

	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve HALBs for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve HALBs for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve HALBs for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve HALBs for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $HALBs)
	{
		Write-Host "
	No HALBs retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No HALBs retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No HALBs retrieved for Site $($Site.Name)"
			Line 0 ""
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No HALBs retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): `tOutput Virtual Servers"
		ForEach($HALB in $HALBs)
		{
			$HALBStatusResult = Get-RASHALBStatus -Name $HALB.Name -EA 0 4> $Null 
			
			If($? -and $Null -ne $HALBStatusResult)
			{
				$HALBStatus = GetRASStatus $HALBStatusResult.AgentState
			}
			Else
			{
				$HALBStatus = "Unable to determine HALB status"
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "HALB $($HALB.Name)"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $HALB.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "IPv4"; Value = $HALB.VirtualIPV4; }) > $Null
				$ScriptInformation.Add(@{Data = "IPv6"; Value = $HALB.VirtualIPV6; }) > $Null
				$ScriptInformation.Add(@{Data = "Status"; Value = $HALBStatus; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $HALB.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Public Address"; Value = $HALB.PublicAddress; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $HALB.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $HALB.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $HALB.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $HALB.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "ID"; Value = $HALB.Id.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "HALB $($HALB.Name)"
				Line 3 "Name`t`t`t: " $HALB.Name
				Line 3 "IPv4`t`t`t: " $HALB.VirtualIPV4
				Line 3 "IPv6`t`t`t: " $HALB.VirtualIPV6
				Line 3 "Status`t`t`t: " $HALBStatus
				Line 3 "Description`t`t: " $HALB.Description
				Line 3 "Public Address`t`t: " $HALB.PublicAddress
				Line 3 "Last modification by`t: " $HALB.AdminLastMod
				Line 3 "Modified on`t`t: " $HALB.TimeLastMod.ToString()
				Line 3 "Created by`t`t: " $HALB.AdminCreate
				Line 3 "Created on`t`t: " $HALB.TimeCreate.ToString()
				Line 3 "ID`t`t`t: " $HALB.Id.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "HALB $($HALB.Name)"
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$HALB.Name,$htmlwhite)
				$rowdata += @(,("IPv4",($Script:htmlsb),$HALB.VirtualIPV4,$htmlwhite))
				$rowdata += @(,("IPv6",($Script:htmlsb),$HALB.VirtualIPV6,$htmlwhite))
				$rowdata += @(,("Status",($Script:htmlsb),$HALBStatus,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$HALB.Description,$htmlwhite))
				$rowdata += @(,("Public Address",($Script:htmlsb),$HALB.PublicAddress,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $HALB.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $HALB.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $HALB.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $HALB.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("ID",($Script:htmlsb),$HALB.Id.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 2 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			Switch($HALB.IPVersion)
			{
				"Version4"		{$HALBIPVersion = "Version 4"; Break}
				"Version6"		{$HALBIPVersion = "Version 6"; Break}
				"BothVersions"	{$HALBIPVersion = "Both version 4 & 6"; Break}
				Default			{$HALBIPVersion = "Unable to determine IP version: $($HALB.IPVersion)"; Break}
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable HALB"; Value = $HALB.EnableHALBInstance.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Name"; Value = $HALB.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $HALB.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Public address"; Value = $HALB.PublicAddress; }) > $Null
				$ScriptInformation.Add(@{Data = "Virtual IP"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Use IP version"; Value = $HALBIPVersion; }) > $Null
				$ScriptInformation.Add(@{Data = "     IPv4"; Value = $HALB.VirtualIPV4; }) > $Null
				$ScriptInformation.Add(@{Data = "     Subnet Mask"; Value = $HALB.SubNetMask; }) > $Null
				$ScriptInformation.Add(@{Data = "     IPv6"; Value = $HALB.VirtualIPV6; }) > $Null
				$ScriptInformation.Add(@{Data = "     Prefix"; Value = $HALB.PrefixIPV6; }) > $Null
				$ScriptInformation.Add(@{Data = "Settings"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     LB Gateway Payload"; Value = $HALB.EnableGatewayPayload.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "     LB SSL Payload"; Value = $HALB.EnableSSLPayload.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "     Device Management"; Value = $HALB.EnableDeviceManagement.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Enable HALB`t`t`t: " $HALB.EnableHALBInstance.ToString()
				Line 3 "Name`t`t`t`t: " $HALB.Name
				Line 3 "Description`t`t`t: " $HALB.Description
				Line 3 "Public address`t`t`t: " $HALB.PublicAddress
				Line 3 "Virtual IP"
				Line 4 "Use IP version`t`t: " $HALBIPVersion
				Line 4 "IPv4`t`t`t: " $HALB.VirtualIPV4
				Line 4 "Subnet Mask`t`t: " $HALB.SubNetMask
				Line 4 "IPv6`t`t`t: " $HALB.VirtualIPV6
				Line 4 "Prefix`t`t`t: " $HALB.PrefixIPV6
				Line 3 "Settings"
				Line 4 "LB Gateway Payload`t: " $HALB.EnableGatewayPayload.ToString()
				Line 4 "LB SSL Payload`t`t: " $HALB.EnableSSLPayload.ToString()
				Line 4 "Device Management`t: " $HALB.EnableDeviceManagement.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable HALB",($Script:htmlsb),$HALB.EnableHALBInstance.ToString(),$htmlwhite)
				$rowdata += @(,("Name",($Script:htmlsb),$HALB.Name,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$HALB.Description,$htmlwhite))
				$rowdata += @(,("Public address",($Script:htmlsb),$HALB.PublicAddress,$htmlwhite))
				$rowdata += @(,("Virtual IP",($Script:htmlsb), "",$htmlwhite))
				$rowdata += @(,("     Use IP version",($Script:htmlsb), $HALBIPVersion,$htmlwhite))
				$rowdata += @(,("     IPv4",($Script:htmlsb), $HALB.VirtualIPV4,$htmlwhite))
				$rowdata += @(,("     Subnet Mask",($Script:htmlsb), $HALB.SubNetMask,$htmlwhite))
				$rowdata += @(,("     IPv6",($Script:htmlsb), $HALB.VirtualIPV6,$htmlwhite))
				$rowdata += @(,("     Prefix",($Script:htmlsb), $HALB.PrefixIPV6,$htmlwhite))
				$rowdata += @(,("Settings",($Script:htmlsb), "",$htmlwhite))
				$rowdata += @(,("     LB Gateway Payload",($Script:htmlsb), $HALB.EnableGatewayPayload.ToString(),$htmlwhite))
				$rowdata += @(,("     LB SSL Payload",($Script:htmlsb), $HALB.EnableSSLPayload.ToString(),$htmlwhite))
				$rowdata += @(,("     Device Management",($Script:htmlsb), $HALB.EnableDeviceManagement.ToString(),$htmlwhite))

				$msg = "General"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "LB gateway payload"
			}
			If($Text)
			{
				Line 2 "LB gateway payload"
			}
			If($HTML)
			{
				WriteHTMLLine 4 0 "LB gateway payload"
			}
			
			$HALBGatewayPort = $HALB.GatewayConfig.Port.ToString()
			$HALBGateways    = $HALB.GatewayConfig.Gateways
			
			#First, get the port
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Port"; Value = $HALBGatewayPort; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Port: " $HALBGatewayPort
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Port",($Script:htmlsb),$HALBGatewayPort,$htmlwhite)
				#$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))

				$msg = ""
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#second, process the gateways
			#do output headers
			If($MSWord -or $PDF)
			{
				[System.Collections.Hashtable[]] $GatewaysWordTable = @();
			}
			If($Text)
			{
				Line 3 "Gateways                                                 Status                                  "
				Line 3 "================================================================================================="
				#       abcdefghijklmno.abcdefghijklmno.local (999.999.999.999)SS1234567890123456789012345678901234567890
				#       1234567890123456789012345678901234567890123456789012345
			}
			If($HTML)
			{
				$rowdata = @()
			}
			
			#process the gateways data
			ForEach($GatewayItem in $HALBGateways)
			{
				$ip = $GatewayItem.Keys
				$Results = [System.Net.Dns]::gethostentry($ip)
				$hostname = $Results.HostName
				$TempGW = Get-RASGatewayStatus -Server $hostname -EA 0 4> $Null
				$HALBGWStatus = GetRASStatus $TempGW.AgentState
				
				If($MSWord -or $PDF)
				{
					$GatewaysWordTableRowHash = @{
						Gateway       = "$hostname ($ip)";
						GatewayStatus = $HALBGWStatus;
					}
					$GatewaysWordTable += $GatewaysWordTableRowHash
				}
				If($Text)
				{
					Line 3 ( "{0,-55}  {1,-40}" -f "$hostname ($ip)", $HALBGWStatus)
				}
				If($HTML)
				{
					$rowdata += @(,(
					"$hostname ($ip)",$htmlwhite,
					$HALBGWStatus,$htmlwhite))
				}
			}
			
			#output the Word/PDF and HTML tables
			If($MSWord -or $PDF)
			{
				If($GatewaysWordTable.Count -gt 0)
				{
					$Table = AddWordTable -Hashtable $GatewaysWordTable `
					-Columns  Gateway,GatewayStatus `
					-Headers  "Gateways","Status"`
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
			}
			If($Text)
			{
				Line 0 ""
			}
			If($HTML)
			{
				$columnHeaders = @(
				"Gateways",($Script:htmlsb),
				"Status",($Script:htmlsb))

				$msg = ""
				$columnWidths = @("200","400")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
				WriteHTMLLine 0 0 ""
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "LB SSL payload"
			}
			If($Text)
			{
				Line 2 "LB SSL payload"
			}
			If($HTML)
			{
				#Nothing
			}
			
			$HALBSSLGatewayPort = $HALB.SSLConfig.GatewayConfig.Port.ToString()
			$HALBSSLGateways    = $HALB.SSLConfig.GatewayConfig.Gateways
			
			Switch($HALB.SSLConfig.SSLMode)
			{
				"SSLOffloading"		{$HALBSSLMode = "SSL Offloading"; Break}
				"SSLPassthrough"	{$HALBSSLMode = "Passthrough"; Break}
				Default				{$HALBSSLMode = "Unable to determine SSL Mode: $($HALB.SSLConfig.SSLMode)"; Break}
			}
			
			If($HALB.SSLConfig.SSLMode -eq "SSLOffloading")
			{
				Switch($HALB.SSLConfig.MinSSLVersion)
				{
					#"SSLv2"		{$HALBSSLAcceptedSSLVersions = "SSL v2 - TLS v1.2 (Weak)"; Break}
					"SSLv3"		{$HALBSSLAcceptedSSLVersions = "SSL v3 - TLS v1.2"; Break}
					"TLSv1"		{$HALBSSLAcceptedSSLVersions = "TLS v1.0 - TLS v1.2"; Break}
					"TLSv1_1"	{$HALBSSLAcceptedSSLVersions = "TLS v1.1 - TLS v1.2"; Break}
					"TLSv1_2"	{$HALBSSLAcceptedSSLVersions = "TLS v1.2 only (Strong)"; Break}
					Default		{$HALBSSLAcceptedSSLVersions = "Unable to determine Minimum SSL version: $($HALB.SSLConfig.MinSSLVersion)"; Break}
				}
				
				If($HALB.SSLConfig.SSLCipherStrength -eq "Custom")
				{
					$HALBSSLCipherStrength = "Custom"
					$HALBSSLCipher         = $HALB.SSLConfig.SSLCustomCipher
				}
				Else
				{
					$HALBSSLCipherStrength = $HALB.SSLConfig.SSLCipherStrength
					Switch($HALB.SSLConfig.SSLCipherStrength)
					{
						"Low"		{$HALBSSLCipher	= "All:!aNULL:!eNULL"; Break}
						"Medium"	{$HALBSSLCipher	= "ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM"; Break}
						"High"		{$HALBSSLCipher	= "EECDH:!SSLv2:!aNULL:!RC4:!ADH:!eNULL:!LOW:!MEDIUM:!EXP:+HIGH"; Break}
						Default		{$HALBSSLCipher = "Unable to determine SSL cipher strength: $($HALB.SSLConfig.SSLCipherStrength)"; Break}
					}
				}
				$HALBSSLUseServerPreference = $HALB.SSLConfig.SSLCipherPreference.ToString()
				If($HALB.SSLConfig.CertID -eq 0)
				{
					$HALBSSLCertificates = "All matching usage"
				}
				Else
				{
					$Results = Get-RASCertificate -Id $HALB.SSLConfig.CertID -EA 0 4> $Null
					
					If($? -and $Null -ne $Results)
					{
						$HALBSSLCertificates = $Results.Name
					}
					Else
					{
						$HALBSSLCertificates = "Unable to find certificate with an ID of $($HALB.SSLConfig.CertID)"
					}
				}
			}
			Else
			{
				$HALBSSLAcceptedSSLVersions = ""
				$HALBSSLCipherStrength      = ""
				$HALBSSLCipher              = ""
				$HALBSSLUseServerPreference = ""
				$HALBSSLCertificates        = ""
			}
			
			#First, get the port
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Port"; Value = $HALBSSLGatewayPort; }) > $Null
				$ScriptInformation.Add(@{Data = "Mode"; Value = $HALBSSLMode; }) > $Null
				If($HALB.SSLConfig.SSLMode -eq "SSLOffloading")
				{
					$ScriptInformation.Add(@{Data = "Security"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Accepted SSL Versions"; Value = $HALBSSLAcceptedSSLVersions; }) > $Null
					$ScriptInformation.Add(@{Data = "     Cipher Strength"; Value = $HALBSSLCipherStrength; }) > $Null
					$ScriptInformation.Add(@{Data = "     Cipher"; Value = $HALBSSLCipher; }) > $Null
					$ScriptInformation.Add(@{Data = "     Use ciphers according to server preference"; Value = $HALBSSLUseServerPreference; }) > $Null
					$ScriptInformation.Add(@{Data = "     Certificates"; Value = $HALBSSLCertificates; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Port: " $HALBSSLGatewayPort
				Line 3 "Mode: " $HALBSSLMode
				If($HALB.SSLConfig.SSLMode -eq "SSLOffloading")
				{
					Line 3 "Security"
					Line 4 "Accepted SSL Versions`t`t`t`t: " $HALBSSLAcceptedSSLVersions
					Line 4 "Cipher Strength`t`t`t`t`t: " $HALBSSLCipherStrength
					Line 4 "Cipher`t`t`t`t`t`t: " $HALBSSLCipher
					Line 4 "Use ciphers according to server preference`t: " $HALBSSLUseServerPreference
					Line 4 "Certificates`t`t`t`t`t: " $HALBSSLCertificates
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Port",($Script:htmlsb),$HALBSSLGatewayPort,$htmlwhite)
				$rowdata += @(,("Mode",($Script:htmlsb),$HALBSSLMode,$htmlwhite))
				If($HALB.SSLConfig.SSLMode -eq "SSLOffloading")
				{
					$rowdata += @(,( "Security",($Script:htmlsb), "",$htmlwhite))
					$rowdata += @(,( "     Accepted SSL Versions",($Script:htmlsb), $HALBSSLAcceptedSSLVersions,$htmlwhite))
					$rowdata += @(,( "     Cipher Strength",($Script:htmlsb), $HALBSSLCipherStrength,$htmlwhite))
					$rowdata += @(,( "     Cipher",($Script:htmlsb), $HALBSSLCipher,$htmlwhite))
					$rowdata += @(,( "     Use ciphers according to server preference",($Script:htmlsb), $HALBSSLUseServerPreference,$htmlwhite))
					$rowdata += @(,( "     Certificates",($Script:htmlsb), $HALBSSLCertificates,$htmlwhite))
				}

				$msg = ""
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			#second, process the gateways
			#do output headers
			If($MSWord -or $PDF)
			{
				[System.Collections.Hashtable[]] $GatewaysWordTable = @();
			}
			If($Text)
			{
				Line 3 "Gateways                                                 Status                                  "
				Line 3 "================================================================================================="
				#       abcdefghijklmno.abcdefghijklmno.local (999.999.999.999)SS1234567890123456789012345678901234567890
				#       1234567890123456789012345678901234567890123456789012345
			}
			If($HTML)
			{
				$rowdata = @()
			}
			
			#process the gateways data
			ForEach($GatewayItem in $HALBSSLGateways)
			{
				$ip = $GatewayItem.Keys
				$Results = [System.Net.Dns]::gethostentry($ip)
				$hostname = $Results.HostName
				$TempGW = Get-RASGatewayStatus -Server $hostname -EA 0 4> $Null
				$HALBGWStatus = GetRASStatus $TempGW.AgentState
				
				If($MSWord -or $PDF)
				{
					$GatewaysWordTableRowHash = @{
						Gateway       = "$hostname ($ip)";
						GatewayStatus = $HALBGWStatus;
					}
					$GatewaysWordTable += $GatewaysWordTableRowHash
				}
				If($Text)
				{
					Line 3 ( "{0,-55}  {1,-40}" -f "$hostname ($ip)", $HALBGWStatus)
				}
				If($HTML)
				{
					$rowdata += @(,(
					"$hostname ($ip)",$htmlwhite,
					$HALBGWStatus,$htmlwhite))
				}
			}
			
			#output the Word/PDF and HTML tables
			If($MSWord -or $PDF)
			{
				If($GatewaysWordTable.Count -gt 0)
				{
					$Table = AddWordTable -Hashtable $GatewaysWordTable `
					-Columns  Gateway,GatewayStatus `
					-Headers  "Gateways","Status"`
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 200;
					$Table.Columns.Item(2).Width = 250;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
			}
			If($Text)
			{
				Line 0 ""
			}
			If($HTML)
			{
				$columnHeaders = @(
				"Gateways",($Script:htmlsb),
				"Status",($Script:htmlsb))

				$msg = ""
				$columnWidths = @("200","400")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Device Manager"
			}
			If($Text)
			{
				Line 2 "Device Manager"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Port"; Value = "20009"; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Port: 20009"
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Port",($Script:htmlsb),"20009",$htmlwhite)
				$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))

				$msg = "Device Manager"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			Write-Verbose "$(Get-Date -Format G): `tOutput Devices"
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Devices"
			}
			If($Text)
			{
				Line 2 "Devices"
			}
			If($HTML)
			{
				#Nothing
			}
			
			$HALBDevices = Get-RASHALBDevice -HALBName $HALB.Name -EA 0 4> $Null
			
			If((!$?) -or ($? -and $Null -eq $HALBDevices))
			{
				Write-Host "
				No HALB Devices retrieved for HALB $($HALB.Name).`
				" -ForegroundColor White
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No HALB Devices retrieved for HALB $($HALB.Name)"
				}
				If($Text)
				{
					Line 0 "No HALB Devices retrieved for HALB $($HALB.Name)"
				}
				If($HTML)
				{
					WriteHTMLLine 0 0 "No HALB Devices retrieved for HALB $($HALB.Name)"
				}
			}
			Else
			{
				If($MSWord -or $PDF)
				{
					[System.Collections.Hashtable[]] $HALBDevicesWordTable = @();
				}
				If($Text)
				{
					Line 3 "Devices          ID"
					Line 3 "==================="
					#       999.999.999.999SS12
				}
				If($HTML)
				{
					$rowdata = @()
				}
				
				#process the gateways data
				ForEach($HALBDevice in $HALBDevices)
				{
					$ip = $HALBDevice.DeviceIP
					$ID = $HALBDevice.DeviceId
					
					If($MSWord -or $PDF)
					{
						$HALBDevicesWordTableRowHash = @{
							DeviceIP = $ip;
							DeviceID = $ID;
						}
						$HALBDevicesWordTable += $HALBDevicesWordTableRowHash
					}
					If($Text)
					{
						Line 3 ( "{0,-15}  {1,-2}" -f $ip, $ID)
					}
					If($HTML)
					{
						$rowdata += @(,(
						$ip,$htmlwhite,
						$ID,$htmlwhite))
					}
				}
				
				#output the Word/PDF and HTML tables
				If($MSWord -or $PDF)
				{
					If($HALBDevicesWordTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $HALBDevicesWordTable `
						-Columns  DeviceIP,DeviceID `
						-Headers  "Devices","ID" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 100;
						$Table.Columns.Item(2).Width = 50;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				If($Text)
				{
					Line 0 ""
				}
				If($HTML)
				{
					$columnHeaders = @(
					"Devices",($Script:htmlsb),
					"ID",($Script:htmlsb))

					$msg = ""
					$columnWidths = @("100","50")
					FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "150"
					WriteHTMLLine 0 0 ""
				}
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Advanced"
			}
			If($Text)
			{
				Line 2 "Advanced"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable RDP UPD tunneling"; Value = $HALB.EnableUDPTunneling.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Maximum TCP connections"; Value = $HALB.MaxTCPConnections.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Client inactivity timeout (s)"; Value = $HALB.ClientIdleTimeout.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Gateway connection timeout (s)"; Value = $HALB.GatewayConnectionTimeout.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Client connection queue timeout (s)"; Value = $HALB.ClientQueueTimeout.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Gateway inactivity timeout (s)"; Value = $HALB.GatewayIdleTimeout.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Amount of TCP connections per second"; Value = $HALB.SessionsRate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Gateways health check intervals (s)"; Value = $HALB.GatewayHealthCheckInterval.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "VRRP virtual router ID"; Value = $HALB.VirtualRouterID.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "VRRP authentication password"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "VRRP broadcast interval (m)"; Value = $HALB.VrrpBroadcastInterval.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "VRRP health check script interval (s)"; Value = $HALB.VrrpHealthCheckInterval.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "VRRP health check script timeout"; Value = $HALB.VrrpHealthCheckTimeout.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "VRRP advertisement interval (s)"; Value = $HALB.VrrpAdvertInterval.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Enable OS updates"; Value = $HALB.OSUpdate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Keep existing load balancing settings"; Value = $HALB.KeepLBProxyConfig.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Keep existing VRRP/keepalived settings"; Value = $HALB.KeepVRRPConfig.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Enable RDP UPD tunneling`t`t: " $HALB.EnableUDPTunneling.ToString()
				Line 3 "Maximum TCP connections`t`t`t: " $HALB.MaxTCPConnections.ToString()
				Line 3 "Client inactivity timeout (s)`t`t: " $HALB.ClientIdleTimeout.ToString()
				Line 3 "Gateway connection timeout (s)`t`t: " $HALB.GatewayConnectionTimeout.ToString()
				Line 3 "Client connection queue timeout (s)`t: " $HALB.ClientQueueTimeout.ToString()
				Line 3 "Gateway inactivity timeout (s)`t`t: " $HALB.GatewayIdleTimeout.ToString()
				Line 3 "Amount of TCP connections per second`t: " $HALB.SessionsRate.ToString()
				Line 3 "Gateways health check intervals (s)`t: " $HALB.GatewayHealthCheckInterval.ToString()
				Line 3 "VRRP virtual router ID`t`t`t: " $HALB.VirtualRouterID.ToString()
				Line 3 "VRRP authentication password`t`t: " 
				Line 3 "VRRP broadcast interval (m)`t`t: " $HALB.VrrpBroadcastInterval.ToString()
				Line 3 "VRRP health check script interval (s)`t: " $HALB.VrrpHealthCheckInterval.ToString()
				Line 3 "VRRP health check script timeout`t: " $HALB.VrrpHealthCheckTimeout.ToString()
				Line 3 "VRRP advertisement interval (s)`t`t: " $HALB.VrrpAdvertInterval.ToString()
				Line 3 "Enable OS updates`t`t`t: " $HALB.OSUpdate.ToString()
				Line 3 "Keep existing load balancing settings`t: " $HALB.KeepLBProxyConfig.ToString()
				Line 3 "Keep existing VRRP/keepalived settings`t: " $HALB.KeepVRRPConfig.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Enable RDP UPD tunneling",($Script:htmlsb),$HALB.EnableUDPTunneling.ToString(),$htmlwhite)
				$rowdata += @(,("Maximum TCP connections",($Script:htmlsb),$HALB.MaxTCPConnections.ToString(),$htmlwhite))
				$rowdata += @(,("Client inactivity timeout (s)",($Script:htmlsb),$HALB.ClientIdleTimeout.ToString(),$htmlwhite))
				$rowdata += @(,("Gateway connection timeout (s)",($Script:htmlsb),$HALB.GatewayConnectionTimeout.ToString(),$htmlwhite))
				$rowdata += @(,("Client connection queue timeout (s)",($Script:htmlsb),$HALB.ClientQueueTimeout.ToString(),$htmlwhite))
				$rowdata += @(,("Gateway inactivity timeout (s)",($Script:htmlsb),$HALB.GatewayIdleTimeout.ToString(),$htmlwhite))
				$rowdata += @(,("Amount of TCP connections per second",($Script:htmlsb),$HALB.SessionsRate.ToString(),$htmlwhite))
				$rowdata += @(,("Gateways health check intervals (s)",($Script:htmlsb),$HALB.GatewayHealthCheckInterval.ToString(),$htmlwhite))
				$rowdata += @(,("VRRP virtual router ID",($Script:htmlsb),$HALB.VirtualRouterID.ToString(),$htmlwhite))
				$rowdata += @(,("VRRP authentication password",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("VRRP broadcast interval (m)",($Script:htmlsb),$HALB.VrrpBroadcastInterval.ToString(),$htmlwhite))
				$rowdata += @(,("VRRP health check script interval (s)",($Script:htmlsb),$HALB.VrrpHealthCheckInterval.ToString(),$htmlwhite))
				$rowdata += @(,("VRRP health check script timeout",($Script:htmlsb),$HALB.VrrpHealthCheckTimeout.ToString(),$htmlwhite))
				$rowdata += @(,("VRRP advertisement interval (s)",($Script:htmlsb),$HALB.VrrpAdvertInterval.ToString(),$htmlwhite))
				$rowdata += @(,("Enable OS updates",($Script:htmlsb),$HALB.OSUpdate.ToString(),$htmlwhite))
				$rowdata += @(,("Keep existing load balancing settings",($Script:htmlsb),$HALB.KeepLBProxyConfig.ToString(),$htmlwhite))
				$rowdata += @(,("Keep existing VRRP/keepalived settings",($Script:htmlsb),$HALB.KeepVRRPConfig.ToString(),$htmlwhite))

				$msg = "Advanced"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}
	
	#Themes
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Themes"
	}
	If($Text)
	{
		Line 1 "Themes"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Themes"
	}

	Write-Verbose "$(Get-Date -Format G): Output Themes"
	$Themes = Get-RASTheme -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Themes for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Themes for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Themes for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Themes for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $Themes)
	{
		Write-Host "
	No Themes retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Themes retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Themes retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Themes retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($Theme in $Themes)
		{
			$ThemePostLogonMessage        = $Theme.PostLogonMessage.Split("`n")
			$ThemeUserPortalPrelogonMessage    = $Theme.UserPortal.Message.PreLogonMessage.Split("`n")
			$ThemeUserPortalPostlogonMessage   = $Theme.UserPortal.Message.UserPortalPostLogonMessage.Split("`n")
			$ThemeWindowsPostlogonMessage = $Theme.WindowsClient.Messages.WindowsClientPostLogonMessage.Split("`n")
			$ThemeUserPortalURL                = "https://FQDN/$($Theme.UserPortal.Url.LoginPageURLPath)"
			$ThemeShowDownloadURL         = $Theme.UserPortal.Url.ShowDownloadURL.ToString()
			$ThemeOverrideDownloadURL     = $Theme.UserPortal.Url.OverrideWindowsClientDownloadURL
			$ThemeFooterURLs              = @(Get-RASThemeFooterURL -Name $Theme.Name -EA 0) 4> $Null #fixed in 2.52 thanks to Thomas Krampe
			
			If(!$? -or $Null -eq $ThemeFooterURLs)
			{
				$ThemeFooterURLs = @()
			}
			
			#the Get-RASThemeImage cmdlet returns all four items as an array, but there is nothing that
			#specifies which array element is which branding image file
			#I get each image file separately to make sure each image file is correctly associated
			$ThemeCompanyLogo = Get-RASThemeImage -Name $Theme.name -ImageType CompanyLogo -EA 0 4>$Null
			
			If(!$?)
			{
				$ThemeCompanyLogo = ""
			}
			
			
			$ThemeFaviconIcon = Get-RASThemeImage -Name $Theme.name -ImageType FaviconIcon -EA 0 4>$Null
			
			If(!$?)
			{
				$ThemeFaviconIcon = ""
			}

			
			$ThemeConnectionBanner = Get-RASThemeImage -Name $Theme.name -ImageType ConnectionBanner -EA 0 4>$Null
			
			If(!$?)
			{
				$ThemeConnectionBanner = ""
			}

			
			$ThemeApplicationIcon = Get-RASThemeImage -Name $Theme.name -ImageType ApplicationIcon -EA 0 4>$Null
			
			If(!$?)
			{
				$ThemeApplicationIcon = ""
			}
			
			$ThemeUserPortalLaunchSessionsUsing = ""
			Switch($Theme.UserPortal.Gateway.LaunchMethod)
			{
				"Launch_Applications_with_Parallels_Client_Fallback_to_HTML_5"	
				{
					$ThemeUserPortalLaunchSessionsUsing = "Launch apps with Parallels Client & Fallback to HTML5"; Break
				}
				"Launch_Applications_with_Parallels_Client"						
				{
					$ThemeUserPortalLaunchSessionsUsing = "Launch apps with Parallels Client"; Break
				}
				"Launch_Applications_with_Browser_HTML5"						
				{
					$ThemeUserPortalLaunchSessionsUsing = "Launch apps in Browser only (HTML5 Only)"; Break
				}
				Default															
				{
					$ThemeUserPortalLaunchSessionsUsing = "Unable to determine Launch sessions using: $($Theme.UserPortal.Gateway.LaunchMethod)"; Break
				}
			}
			
			$ThemeHTMLFileTransfer = ""
			Switch($Theme.UserPortal.Gateway.FileTransferMode)
			{
				"Disabled"			{$ThemeHTMLFileTransfer = "Disabled"; Break}
				"ClientToServer"	{$ThemeHTMLFileTransfer = "Client to server only"; Break}
				"ServerToClient"	{$ThemeHTMLFileTransfer = "Server to client only"; Break}
				"Bidirectional"		{$ThemeHTMLFileTransfer = "Bidirectional"; Break}
				Default				{$ThemeHTMLFileTransfer = "Unable to determine File transfer mode: $($Theme.UserPortal.Gateway.FileTransferMode)"; Break}
			}
			
			$ThemeHTMLClipboardDirection = ""
			Switch($Theme.UserPortal.Gateway.ClipboardDirection)
			{
				"None"				{$ThemeHTMLClipboardDirection = "None"; Break}
				"ClientToServer"	{$ThemeHTMLClipboardDirection = "Client to server only"; Break}
				"ServerToClient"	{$ThemeHTMLClipboardDirection = "Server to client only"; Break}
				"Bidirectional"		{$ThemeHTMLClipboardDirection = "Bidirectional"; Break}
				Default				{$ThemeHTMLClipboardDirection = "Unable to determine Clipboard direction: $($Theme.UserPortal.Gateway.ClipboardDirection)"; Break}
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Theme $($Theme.Name)"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $Theme.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $Theme.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "HTML5 URL"; Value = $ThemeUserPortalURL; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $Theme.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $Theme.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $Theme.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $Theme.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "ID"; Value = $Theme.Id.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "Theme $($Theme.Name)"
				Line 3 "Name`t`t`t: " $Theme.Name
				Line 3 "Description`t`t: " $Theme.Description
				Line 3 "HTML5 URL`t`t: " $ThemeUserPortalURL
				Line 3 "Last modification by`t: " $Theme.AdminLastMod
				Line 3 "Modified on`t`t: " $Theme.TimeLastMod.ToString()
				Line 3 "Created by`t`t: " $Theme.AdminCreate
				Line 3 "Created on`t`t: " $Theme.TimeCreate.ToString()
				Line 3 "ID`t`t`t: " $Theme.Id.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$ThemeName = $Theme.Name.Replace("<","").Replace(">","")
				WriteHTMLLine 3 0 "Theme $ThemeName"
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$ThemeName,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$Theme.Description,$htmlwhite))
				$rowdata += @(,("HTML5 URL",($Script:htmlsb),$ThemeUserPortalURL,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $Theme.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $Theme.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $Theme.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $Theme.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("ID",($Script:htmlsb),$Theme.Id.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 2 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Enable Theme"; Value = $Theme.Enabled.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Name"; Value = $Theme.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $Theme.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Override authentication domain"; Value = $Theme.OverrideAuthenticationDomain.ToString(); }) > $Null
				If($Theme.OverrideAuthenticationDomain)
				{
					$ScriptInformation.Add(@{Data = "     Domain"; Value = $Theme.Domain; }) > $Null
				}
				$ScriptInformation.Add(@{Data = "Limit access to this theme to members of these AD groups"; Value = $Theme.GroupEnabled.ToString(); }) > $Null
				If($Theme.GroupEnabled)
				{
					ForEach($Group in $Theme.GroupFilters)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Group: $($Group.name) SID: $($Group.sid)"; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Enable Theme`t`t`t: " $Theme.Enabled.ToString()
				Line 3 "Name`t`t`t`t: " $Theme.Name
				Line 3 "Description`t`t`t: " $Theme.Description
				Line 0 ""
			}
			If($HTML)
			{
				$ThemeName = $Theme.Name.Replace("<","").Replace(">","")
				$rowdata = @()
				$columnHeaders = @("Enable Theme",($Script:htmlsb),$Theme.Enabled.ToString(),$htmlwhite)
				$rowdata += @(,("Name",($Script:htmlsb),$ThemeName,$htmlwhite))
				$rowdata += @(,("Description",($Script:htmlsb),$Theme.Description,$htmlwhite))

				$msg = "General"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Access"
			}
			If($Text)
			{
				Line 2 "Access"
			}
			If($HTML)
			{
				#Nothing
			}
			
			$Results = Get-RASMFA -Id $Theme.MFAId -EA 0 4>$Null
			
			If($? -and $Null -ne $Results)
			{
				$MFAProvider = $Results.Name
			}
			Else
			{
				$MFAProvider = "Unable to determine MFA provider"
			}
			
			$Results = Get-RASSAMLIDP -SiteId $Site.Id -EA 0 4>$Null | Where-Object {$_.ThemeId -eq $Theme.Id}
			
			If($? -and $Null -ne $Results)
			{
				$SAMLProvider = $Results.Name
			}
			Else
			{
				$SAMLProvider = ""
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Override authentication domain"; Value = $Theme.OverrideAuthenticationDomain.ToString(); }) > $Null
				If($Theme.OverrideAuthenticationDomain)
				{
					$ScriptInformation.Add(@{Data = "     Domain"; Value = $Theme.Domain; }) > $Null
				}
				$ScriptInformation.Add(@{Data = "Limit access to this theme to members of these AD groups"; Value = $Theme.GroupEnabled.ToString(); }) > $Null
				If($Theme.GroupEnabled)
				{
					ForEach($Group in $Theme.GroupFilters)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Group: $($Group.name) SID: $($Group.sid)"; }) > $Null
					}
				}
				$ScriptInformation.Add(@{Data = "MFA provider"; Value = $MFAProvider; }) > $Null
				$ScriptInformation.Add(@{Data = "SAML Single Sign-in IdP"; Value = $SAMLProvider; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Override authentication domain`t: " $Theme.OverrideAuthenticationDomain.ToString()
				If($Theme.OverrideAuthenticationDomain)
				{
					Line 6 "Domain  : " $Theme.Domain
				}
				Line 3 "Limit access to this theme to "
				Line 3 "members of these AD groups`t: " $Theme.GroupEnabled.ToString()
				If($Theme.GroupEnabled)
				{
					ForEach($Group in $Theme.GroupFilters)
					{
						Line 7 "  Group: $($Group.name) SID: $($Group.sid)"
					}
				}
				Line 3 "MFA provider`t`t`t: " $MFAProvider
				Line 3 "SAML Single Sign-in IdP`t`t: " $SAMLProvider
				Line 0 ""
			}
			If($HTML)
			{
				$ThemeName = $Theme.Name.Replace("<","").Replace(">","")
				$rowdata = @()
				$columnHeaders = @("Override authentication domain",($Script:htmlsb),$Theme.OverrideAuthenticationDomain.ToString(),$htmlwhite)
				If($Theme.OverrideAuthenticationDomain)
				{
					$rowdata += @(,("     Domain",($Script:htmlsb),$Theme.Domain,$htmlwhite))
				}
				$rowdata += @(,("Limit access to this theme to members of these AD groups",($Script:htmlsb),$Theme.GroupEnabled.ToString(),$htmlwhite))
				If($Theme.GroupEnabled)
				{
					ForEach($Group in $Theme.GroupFilters)
					{
						$rowdata += @(,("",($Script:htmlsb),"Group: $($Group.name) SID: $($Group.sid)",$htmlwhite))
					}
				}
				$rowdata += @(,("MFA provider",($Script:htmlsb),$MFAProvider,$htmlwhite))
				$rowdata += @(,("SAML Single Sign-in IdP",($Script:htmlsb),$SAMLProvider,$htmlwhite))
				
				$msg = "Access"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Messages"
			}
			If($Text)
			{
				Line 2 "Messages"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$cnt = -1
				ForEach($line in $ThemePostLogonMessage)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Post-logon message:"; Value = $line; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $line; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				$cnt = -1
				ForEach($line in $ThemePostLogonMessage)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						Line 3 "Post-logon message: " $line
					}
					Else
					{
						Line 5 "    " $line
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$cnt = -1
				ForEach($line in $ThemePostLogonMessage)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("Post-logon message:",($Script:htmlsb),$line,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$line,$htmlwhite))
					}
				}

				$msg = "Messages"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal (Web client)/URLs"
			}
			If($Text)
			{
				Line 2 "User Portal (Web client)/URLs"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Theme login page:"; Value = $ThemeUserPortalURL; }) > $Null
				$ScriptInformation.Add(@{Data = "Show Parallels Client download URL"; Value = $ThemeShowDownloadURL; }) > $Null
				$ScriptInformation.Add(@{Data = "Override download URL for branded Parallels Client (Windows)"; Value = $ThemeOverrideDownloadURL; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				If($ThemeFooterURLs -is [array] -and $ThemeFooterURLs.Count -gt 0) #don't process if array is empty
				{
					WriteWordLine 4 0 "Footer URLs:"
					[System.Collections.Hashtable[]] $URLWordTable = @();
					
					ForEach($FooterURL in $ThemeFooterURLs)
					{
						$URLTableRowHash = @{
						URL     = $FooterURL.URL;
						Text    = $FooterURL.Text;
						Tooltip = $FooterURL.Tooltip;
						}
						$URLWordTable += $URLTableRowHash;
					}

					If($URLWordTable.Count -gt 0)
					{
						$Table = AddWordTable -Hashtable $URLWordTable `
						-Columns  URL,Text,Tooltip `
						-Headers  "URL","Text","Tooltip"`
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 150;
						$Table.Columns.Item(2).Width = 150;
						$Table.Columns.Item(3).Width = 150;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
						WriteWordLine 0 0 ""
					}
				}
				Else
				{
					WriteWordLine 4 0 "Footer URLs:"
					WriteWordLine 0 0 "There are no Footer URLs"
					WriteWordLine 0 0 ""
				}	
			}
			If($Text)
			{
				Line 3 "Theme login page`t`t  : " $ThemeUserPortalURL
				Line 3 "Show Parallels Client download URL: " $ThemeShowDownloadURL
				Line 3 "Override download URL for branded "
				Line 3 "Parallels Client (Windows)`t  : " $ThemeOverrideDownloadURL
				Line 0 ""

				If($ThemeFooterURLs -is [array] -and $ThemeFooterURLs.Count -gt 0) #don't process if array is empty
				{
					Line 3 "Footer URLs:"
					Line 3 "URL                             Text                            Tooltip                       "
					Line 3 "=============================================================================================="
					#       123456789012345678901234567890SS123456789012345678901234567890SS123456789012345678901234567890

					ForEach($FooterURL in $ThemeFooterURLs)
					{
						Line 3 ( "{0,-30}  {1,-30}  {2,-30}" -f `
						$FooterURL.URL, $FooterURL.Text, $FooterURL.Tooltip)
					}
					
					Line 0 ""
				}
				Else
				{
					Line 3 "Footer URLs:"
					Line 3 "There are no Footer URLs"
					Line 0 ""
				}	
			}
			If($HTML)
			{
				$ThemeName = $Theme.Name.Replace("<","").Replace(">","")
				$rowdata = @()
				$columnHeaders = @("Theme login page:",($Script:htmlsb),$ThemeUserPortalURL,$htmlwhite)
				$rowdata += @(,("Show Parallels Client download URL",($Script:htmlsb),$ThemeShowDownloadURL,$htmlwhite))
				$rowdata += @(,("Override download URL for branded Parallels Client (Windows)",($Script:htmlsb),$ThemeOverrideDownloadURL,$htmlwhite))

				$msg = "User Portal (Web client)/URLs"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				If($ThemeFooterURLs -is [array] -and $ThemeFooterURLs.Count -gt 0) #don't process if array is empty
				{
					$rowdata = @()

					ForEach($FooterURL in $ThemeFooterURLs)
					{
						$rowdata += @(,(
						$FooterURL.URL,$htmlwhite,
						$FooterURL.Text,$htmlwhite,
						$FooterURL.Tooltip,$htmlwhite))
					}

					$columnHeaders = @(
					"URL",($Script:htmlsb),
					"Text",($Script:htmlsb),
					"Tooltip",($Script:htmlsb))

					$msg = "Footer URLs:"
					$columnWidths = @("150","150","150")
					FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"
					WriteHTMLLine 0 0 ""
				}
				Else
				{
					WriteHTMLLine 4 0 "Footer URLs:"
					WriteHTMLLine 0 0 "There are no Footer URLs"
					WriteHTMLLine 0 0 ""
				}	
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal (Web client)/Branding"
			}
			If($Text)
			{
				Line 2 "User Portal (Web client)/Branding"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Webpage title"; Value = $Theme.UserPortal.Branding.WebpageTitle; }) > $Null
				$ScriptInformation.Add(@{Data = "Login to"; Value = $Theme.UserPortal.Branding.LoginTo; }) > $Null
				$ScriptInformation.Add(@{Data = "Company logo"; Value = $ThemeCompanyLogo; }) > $Null
				$ScriptInformation.Add(@{Data = "Favicon icon"; Value = $ThemeFaviconIcon; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Webpage title`t: " $Theme.UserPortal.Branding.WebpageTitle
				Line 3 "Login to`t: " $Theme.UserPortal.Branding.LoginTo
				Line 3 "Company logo`t: " $ThemeCompanyLogo
				Line 3 "Favicon icon`t: " $ThemeFaviconIcon
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Webpage title",($Script:htmlsb),$Theme.UserPortal.Branding.WebpageTitle,$htmlwhite)
				$rowdata += @(,("Login to",($Script:htmlsb),$Theme.UserPortal.Branding.LoginTo,$htmlwhite))
				$rowdata += @(,("Company logo",($Script:htmlsb),$ThemeCompanyLogo,$htmlwhite))
				$rowdata += @(,("Favicon icon",($Script:htmlsb),$ThemeFaviconIcon,$htmlwhite))

				$msg = "User Portal (Web client)/Branding"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}


			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal (Web client)/Colors"
			}
			If($Text)
			{
				Line 2 "User Portal (Web client)/Colors"
			}
			If($HTML)
			{
				#Nothing
			}

			$HeaderBackgroundColor      = '{0:X}' -f $Theme.UserPortal.Color.HeaderBackgroundColor     
			$SubHeaderBackgroundColor   = '{0:X}' -f $Theme.UserPortal.Color.SubHeaderBackgroundColor  
			$SubHeaderTextColor         = '{0:X}' -f $Theme.UserPortal.Color.SubHeaderTextColor        
			$WorkAreaBackgroundColor    = '{0:X}' -f $Theme.UserPortal.Color.WorkAreaBackgroundColor   
			$WorkAreaTextColor          = '{0:X}' -f $Theme.UserPortal.Color.WorkAreaTextColor         
			$ButtonsBackgroundColor     = '{0:X}' -f $Theme.UserPortal.Color.ButtonsBackgroundColor    
			$ButtonsTextColor           = '{0:X}' -f $Theme.UserPortal.Color.ButtonsTextColor          
			$SelectionHighlightingColor = '{0:X}' -f $Theme.UserPortal.Color.SelectionHighlightingColor
			$AlertBackgroundColor       = '{0:X}' -f $Theme.UserPortal.Color.AlertBackgroundColor      
			$AlertTextColor             = '{0:X}' -f $Theme.UserPortal.Color.AlertTextColor            

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Header background" ; Value = $HeaderBackgroundColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Sub-header background" ; Value = $SubHeaderBackgroundColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Sub-header text" ; Value = $SubHeaderTextColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Work area background" ; Value = $WorkAreaBackgroundColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Work area text" ; Value = $WorkAreaTextColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Buttons background and links" ; Value = $ButtonsBackgroundColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Button text" ; Value = $ButtonsTextColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Selection highlighting" ; Value = $SelectionHighlightingColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Alert background" ; Value = $AlertBackgroundColor; }) > $Null
				$ScriptInformation.Add(@{Data = "Alert text" ; Value = $AlertTextColor; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Header background`t`t: " $HeaderBackgroundColor
				Line 3 "Sub-header background`t`t: " $SubHeaderBackgroundColor
				Line 3 "Sub-header text`t`t`t: " $SubHeaderTextColor
				Line 3 "Work area background`t`t: " $WorkAreaBackgroundColor
				Line 3 "Work area text`t`t`t: " $WorkAreaTextColor
				Line 3 "Buttons background and links`t: " $ButtonsBackgroundColor
				Line 3 "Button text`t`t`t: " $ButtonsTextColor
				Line 3 "Selection highlighting`t`t: " $SelectionHighlightingColor
				Line 3 "Alert background`t`t: " $AlertBackgroundColor
				Line 3 "Alert text`t`t`t: " $AlertTextColor
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Header background" ,($Script:htmlsb),$HeaderBackgroundColor,$htmlwhite)
				$rowdata += @(,("Sub-header background" ,($Script:htmlsb),$SubHeaderBackgroundColor,$htmlwhite))
				$rowdata += @(,("Sub-header text" ,($Script:htmlsb),$SubHeaderTextColor,$htmlwhite))
				$rowdata += @(,("Work area background" ,($Script:htmlsb),$WorkAreaBackgroundColor,$htmlwhite))
				$rowdata += @(,("Work area text" ,($Script:htmlsb),$WorkAreaTextColor,$htmlwhite))
				$rowdata += @(,("Buttons background and links",($Script:htmlsb),$ButtonsBackgroundColor,$htmlwhite))
				$rowdata += @(,("Button text" ,($Script:htmlsb),$ButtonsTextColor,$htmlwhite))
				$rowdata += @(,("Selection highlighting" ,($Script:htmlsb),$SelectionHighlightingColor,$htmlwhite))
				$rowdata += @(,("Alert background" ,($Script:htmlsb),$AlertBackgroundColor,$htmlwhite))
				$rowdata += @(,("Alert text" ,($Script:htmlsb),$AlertTextColor,$htmlwhite))

				$msg = "User Portal (Web client)/Colors"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal (Web client)/Language bar"
			}
			If($Text)
			{
				Line 2 "User Portal (Web client)/Language bar"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Default language"   ; Value = $Theme.UserPortal.LanguageBar.Default.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "English"            ; Value = $Theme.UserPortal.LanguageBar.en_US.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "German"             ; Value = $Theme.UserPortal.LanguageBar.de_DE.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Japanese"           ; Value = $Theme.UserPortal.LanguageBar.ja_JP.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Russian"            ; Value = $Theme.UserPortal.LanguageBar.ru_RU.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "French"             ; Value = $Theme.UserPortal.LanguageBar.fr_FR.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Spanish"            ; Value = $Theme.UserPortal.LanguageBar.es_ES.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Italian"            ; Value = $Theme.UserPortal.LanguageBar.it_IT.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Portuguese"         ; Value = $Theme.UserPortal.LanguageBar.pt_BR.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Chinese Simplified" ; Value = $Theme.UserPortal.LanguageBar.zh_CN.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Chinese Traditional"; Value = $Theme.UserPortal.LanguageBar.zh_TW.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Korean"             ; Value = $Theme.UserPortal.LanguageBar.ko_KR.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Dutch"              ; Value = $Theme.UserPortal.LanguageBar.nl_NL.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Default language`t: "    $Theme.UserPortal.LanguageBar.Default.ToString()
				Line 3 "English`t`t`t: "         $Theme.UserPortal.LanguageBar.en_US.ToString()
				Line 3 "German`t`t`t: "          $Theme.UserPortal.LanguageBar.de_DE.ToString()
				Line 3 "Japanese`t`t: "          $Theme.UserPortal.LanguageBar.ja_JP.ToString()
				Line 3 "Russian`t`t`t: "         $Theme.UserPortal.LanguageBar.ru_RU.ToString()
				Line 3 "French`t`t`t: "          $Theme.UserPortal.LanguageBar.fr_FR.ToString()
				Line 3 "Spanish`t`t`t: "         $Theme.UserPortal.LanguageBar.es_ES.ToString()
				Line 3 "Italian`t`t`t: "         $Theme.UserPortal.LanguageBar.it_IT.ToString()
				Line 3 "Portuguese`t`t: "        $Theme.UserPortal.LanguageBar.pt_BR.ToString()
				Line 3 "Chinese Simplified`t: "  $Theme.UserPortal.LanguageBar.zh_CN.ToString()
				Line 3 "Chinese Traditional`t: " $Theme.UserPortal.LanguageBar.zh_TW.ToString()
				Line 3 "Korean`t`t`t: "          $Theme.UserPortal.LanguageBar.ko_KR.ToString()
				Line 3 "Dutch`t`t`t: "           $Theme.UserPortal.LanguageBar.nl_NL.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Default language",($Script:htmlsb),$Theme.UserPortal.LanguageBar.Default.ToString(),$htmlwhite)
				$rowdata += @(,("English"            ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.en_US.ToString(),$htmlwhite))
				$rowdata += @(,("German"             ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.de_DE.ToString(),$htmlwhite))
				$rowdata += @(,("Japanese"           ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.ja_JP.ToString(),$htmlwhite))
				$rowdata += @(,("Russian"            ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.ru_RU.ToString(),$htmlwhite))
				$rowdata += @(,("French"             ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.fr_FR.ToString(),$htmlwhite))
				$rowdata += @(,("Spanish"            ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.es_ES.ToString(),$htmlwhite))
				$rowdata += @(,("Italian"            ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.it_IT.ToString(),$htmlwhite))
				$rowdata += @(,("Portuguese"         ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.pt_BR.ToString(),$htmlwhite))
				$rowdata += @(,("Chinese Simplified" ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.zh_CN.ToString(),$htmlwhite))
				$rowdata += @(,("Chinese Traditional",($Script:htmlsb),$Theme.UserPortal.LanguageBar.zh_TW.ToString(),$htmlwhite))
				$rowdata += @(,("Korean"             ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.ko_KR.ToString(),$htmlwhite))
				$rowdata += @(,("Dutch"              ,($Script:htmlsb),$Theme.UserPortal.LanguageBar.nl_NL.ToString(),$htmlwhite))

				$msg = "User Portal (Web client)/Language bar"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal (Web client)/Messages"
			}
			If($Text)
			{
				Line 2 "User Portal (Web client)/Messages"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$cnt = -1
				ForEach($line in $ThemeUserPortalPrelogonMessage)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Pre-logon message:"; Value = $line; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $line; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Override post-logon message"; Value = $Theme.UserPortal.Message.OverridePostLogonMessage.ToString(); }) > $Null
				If($Theme.UserPortal.Message.OverridePostLogonMessage)
				{
					ForEach($line in $ThemeUserPortalPostlogonMessage)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $line; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				$cnt = -1
				ForEach($line in $ThemeUserPortalPrelogonMessage)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						Line 3 "Pre-logon message: " $line
					}
					Else
					{
						Line 5 "    " $line
					}
				}
				Line 0 ""

				Line 3 "Override post-logon message: " $Theme.UserPortal.Message.OverridePostLogonMessage.ToString()
				If($Theme.UserPortal.Message.OverridePostLogonMessage)
				{
					ForEach($line in $ThemeUserPortalPostlogonMessage)
					{
						Line 5 "    " $line
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$cnt = -1
				ForEach($line in $ThemeUserPortalPrelogonMessage)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("Pre-logon message:",($Script:htmlsb),$line,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$line,$htmlwhite))
					}
				}

				$msg = "User Portal (Web client)/Messages"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				$rowdata = @()
				$columnHeaders = @("Override post-logon message",($Script:htmlsb),$Theme.UserPortal.Message.OverridePostLogonMessage.ToString(),$htmlwhite)
				If($Theme.UserPortal.Message.OverridePostLogonMessage)
				{
					ForEach($line in $ThemeUserPortalPostlogonMessage)
					{
						$rowdata += @(,("",($Script:htmlsb),$line,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal (Web client)/Input prompt"
			}
			If($Text)
			{
				Line 2 "User Portal (Web client)/Input prompt"
			}
			If($HTML)
			{
				#Nothing
			}
			
			$InputPromptTable = @()
			
			$InputPromptTable += @{
				Language = "German"
				LoginHint = $Theme.UserPortal.InputPrompt.de_DE.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.de_DE.PasswordHint
			}

			$InputPromptTable += @{
				Language = "English"
				LoginHint = $Theme.UserPortal.InputPrompt.en_US.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.en_US.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Japanese"
				LoginHint = $Theme.UserPortal.InputPrompt.ja_JP.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.ja_JP.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Russian"
				LoginHint = $Theme.UserPortal.InputPrompt.ru_RU.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.ru_RU.PasswordHint
			}

			$InputPromptTable += @{
				Language = "French"
				LoginHint = $Theme.UserPortal.InputPrompt.fr_FR.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.fr_FR.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Spanish"
				LoginHint = $Theme.UserPortal.InputPrompt.es_ES.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.es_ES.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Italian"
				LoginHint = $Theme.UserPortal.InputPrompt.it_IT.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.it_IT.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Portuguese"
				LoginHint = $Theme.UserPortal.InputPrompt.pt_BR.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.pt_BR.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Chinese Simplified"
				LoginHint = $Theme.UserPortal.InputPrompt.zh_CN.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.zh_CN.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Chinese Traditional"
				LoginHint = $Theme.UserPortal.InputPrompt.zh_TW.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.zh_TW.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Korean"
				LoginHint = $Theme.UserPortal.InputPrompt.ko_KR.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.ko_KR.PasswordHint
			}

			$InputPromptTable += @{
				Language = "Dutch"
				LoginHint = $Theme.UserPortal.InputPrompt.nl_NL.LoginHint
				PasswordHint = $Theme.UserPortal.InputPrompt.nl_NL.PasswordHint
			}

			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList

				If($InputPromptTable.Count -gt 0)
				{
					$Table = AddWordTable -Hashtable $InputPromptTable `
					-Columns Language, LoginHint, PasswordHint `
					-Headers "Language", "Login hint", "Password hint" `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 100;
					$Table.Columns.Item(2).Width = 100;
					$Table.Columns.Item(3).Width = 100;
					
					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
			}
			If($Text)
			{
				Line 3 "Language             Login hint           Password hint"
				Line 3 "======================================================="
				#       1234567890123456789SS1234567890123456789SS1234567890123
				#		Chinese Traditional  utilisateur@domaine  mot de passe
				#                            ユーザー@ドメイン

				ForEach($Item in $InputPromptTable)
				{
					Line 3 ( "{0,-19}  {1,-19}  {2,-13}" -f 
						$Item.Language, 
						$Item.LoginHint, 
						$Item.PasswordHint
					)
				}
				
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()

				ForEach($Item in $InputPromptTable)
				{
					$rowdata += @(,(
						$Item.Language,$htmlwhite,
						$Item.LoginHint,$htmlwhite,
						$Item.PasswordHint,$htmlwhite)
					)
				}
				
				$columnHeaders = @(
					"Language",($Script:htmlsb),
					"Login hint",($Script:htmlsb),
					"Pasword hint",($Script:htmlsb)
				)

				$msg = "User Portal (Web client)/Input prompt"
				$columnWidths = @("110","120","100")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal (Web client)/Secure Gateway"
			}
			If($Text)
			{
				Line 2 "User Portal (Web client)/Secure Gateway"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Override Secure Gateway settings for theme"; Value = $Theme.UserPortal.Gateway.OverrideGatewaySettings.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Client"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Launch sessions using"; Value = $ThemeUserPortalLaunchSessionsUsing; }) > $Null
				Switch($Theme.UserPortal.Gateway.LaunchMethod)
				{
					"Launch_Applications_with_Parallels_Client_Fallback_to_HTML_5"	
					{
						$ScriptInformation.Add(@{Data = "     Allow user to select a launch method"; Value = $Theme.UserPortal.Gateway.AllowLaunchMethod.ToString(); }) > $Null
						$ScriptInformation.Add(@{Data = "     Allow opening applications in a new tab"; Value = $Theme.UserPortal.Gateway.AllowAppsInNewTab.ToString(); }) > $Null
						Break
					}
					"Launch_Applications_with_Parallels_Client"						
					{
						Break
					}
					"Launch_Applications_with_Browser_HTML5"						
					{
						$ScriptInformation.Add(@{Data = "     Allow opening applications in a new tab"; Value = $Theme.UserPortal.Gateway.AllowAppsInNewTab.ToString(); }) > $Null
						Break
					}
				}
				$ScriptInformation.Add(@{Data = "     Use Pre Windows 2000 login format"; Value = $Theme.UserPortal.Gateway.Pre2000Cred.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "     Allow embedding of User Portal into other web pages"; Value = $Theme.UserPortal.Gateway.AllowEmbed.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "     Allow file transfer command"; Value = $ThemeHTMLFileTransfer; }) > $Null
				$ScriptInformation.Add(@{Data = "     Allow clipboard command"; Value = $ThemeHTMLClipboardDirection; }) > $Null
				$ScriptInformation.Add(@{Data = "     Allow cross-origin resource sharing"; Value = $Theme.UserPortal.Gateway.AllowCORS.ToString(); }) > $Null
				If($Theme.UserPortal.Gateway.AllowCORS)
				{
					$cnt=-1
					ForEach($Domain in $Theme.UserPortal.Gateway.AllowedDomainsForCORS)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Allow domains"; Value = $Domain; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $Domain; }) > $Null
						}
					}
					$ScriptInformation.Add(@{Data = "Browser cache time"; Value = "$($Theme.UserPortal.Gateway.BrowserCacheTimeInMonths.ToString()) months"; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Override Secure Gateway settings for theme: " $Theme.UserPortal.Gateway.OverrideGatewaySettings.ToString()
				Line 3 "Client"
				Line 4 "Launch sessions using`t`t`t: " $ThemeUserPortalLaunchSessionsUsing
				Switch($Theme.UserPortal.Gateway.LaunchMethod)
				{
					"Launch_Applications_with_Parallels_Client_Fallback_to_HTML_5"	
					{
						Line 4 "Allow user to select a launch method`t: " $Theme.UserPortal.Gateway.AllowLaunchMethod.ToString()
						Line 4 "Allow opening applications in a new tab`t: " $Theme.UserPortal.Gateway.AllowAppsInNewTab.ToString()
						Break
					}
					"Launch_Applications_with_Parallels_Client"						
					{
						Break
					}
					"Launch_Applications_with_Browser_HTML5"						
					{
						Line 4 "Allow opening applications in a new tab`t: " $Theme.UserPortal.Gateway.AllowAppsInNewTab.ToString()
						Break
					}
				}
				Line 4 "Use Pre Windows 2000 login format`t: " $Theme.UserPortal.Gateway.Pre2000Cred.ToString()
				Line 4 "Allow embedding of User Portal "
				Line 4 "Client into other web pages`t`t: " $Theme.UserPortal.Gateway.AllowEmbed.ToString()
				Line 4 "Allow file transfer command`t`t: " $ThemeHTMLFileTransfer
				Line 4 "Allow clipboard command`t`t`t: " $ThemeHTMLClipboardDirection
				Line 4 "Allow cross-origin resource sharing`t: " $Theme.UserPortal.Gateway.AllowCORS.ToString()
				If($Theme.UserPortal.Gateway.AllowCORS)
				{
					$cnt=-1
					ForEach($Domain in $Theme.UserPortal.Gateway.AllowedDomainsForCORS)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							Line 5 "Allow domains`t`t`t: " $Domain
						}
						Else
						{
							Line 9 "  " $Domain
						}
					}
					Line 5 "Browser cache time`t`t: "  "$($Theme.UserPortal.Gateway.BrowserCacheTimeInMonths.ToString()) months"
				}

				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Override Secure Gateway settings for theme",($Script:htmlsb),$Theme.UserPortal.Gateway.OverrideGatewaySettings.ToString(),$htmlwhite)
				$rowdata += @(,("Client",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Launch sessions using",($Script:htmlsb),$ThemeUserPortalLaunchSessionsUsing,$htmlwhite))
				Switch($Theme.UserPortal.Gateway.LaunchMethod)
				{
					"Launch_Applications_with_Parallels_Client_Fallback_to_HTML_5"	
					{
						$rowdata += @(,("     Allow user to select a launch method",($Script:htmlsb),$Theme.UserPortal.Gateway.AllowLaunchMethod.ToString(),$htmlwhite))
						$rowdata += @(,("     Allow opening applications in a new tab",($Script:htmlsb), $Theme.UserPortal.Gateway.AllowAppsInNewTab.ToString(),$htmlwhite))
						Break
					}
					"Launch_Applications_with_Parallels_Client"						
					{
						Break
					}
					"Launch_Applications_with_Browser_HTML5"						
					{
						$rowdata += @(,("     Allow opening applications in a new tab",($Script:htmlsb), $Theme.UserPortal.Gateway.AllowAppsInNewTab.ToString(),$htmlwhite))
						Break
					}
				}
				$rowdata += @(,("     Use Pre Windows 2000 login format",($Script:htmlsb), $Theme.UserPortal.Gateway.Pre2000Cred.ToString(),$htmlwhite))
				$rowdata += @(,("     Allow embedding of User Portal into other web pages",($Script:htmlsb), $Theme.UserPortal.Gateway.AllowEmbed.ToString(),$htmlwhite))
				$rowdata += @(,("     Allow file transfer command",($Script:htmlsb),$ThemeHTMLFileTransfer,$htmlwhite))
				$rowdata += @(,("     Allow clipboard command",($Script:htmlsb),$ThemeHTMLClipboardDirection,$htmlwhite))
				$rowdata += @(,("     Allow cross-origin resource sharing",($Script:htmlsb),$Theme.UserPortal.Gateway.AllowCORS.ToString(),$htmlwhite))
				If($Theme.UserPortal.Gateway.AllowCORS)
				{
					$cnt=-1
					ForEach($Domain in $Theme.UserPortal.Gateway.AllowedDomainsForCORS)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("Allow domains",($Script:htmlsb),$Domain,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$Domain,$htmlwhite))
						}
					}
					$rowdata += @(,("Browser cache time",($Script:htmlsb),"$($Theme.UserPortal.Gateway.BrowserCacheTimeInMonths.ToString()) months",$htmlwhite))
				}

				$msg = "User Portal (Web client)/Secure Gateway"
				$columnWidths = @("300","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "User Portal (Web client)/Legal policies"
			}
			If($Text)
			{
				Line 2 "User Portal (Web client)/Legal policies"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Cookie consent"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Enable cookie consent"; Value = $Theme.UserPortal.LegalPolicies.AllowCookieConsent.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "End User License Agreement"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "     Enable EULA"; Value = $Theme.UserPortal.LegalPolicies.AllowEULA.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Cookie consent" 
				Line 4 "Enable cookie consent`t: " $Theme.UserPortal.LegalPolicies.AllowCookieConsent.ToString()
				Line 3 "End User License Agreement" 
				Line 4 "Enable EULA`t`t: " $Theme.UserPortal.LegalPolicies.AllowEULA.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Cookie consent",($Script:htmlsb),"",$htmlwhite)
				$rowdata += @(,("     Enable cookie consent",($Script:htmlsb),$Theme.UserPortal.LegalPolicies.AllowCookieConsent.ToString(),$htmlwhite))
				$rowdata += @(,("End User License Agreement",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Enable EULA",($Script:htmlsb), $Theme.UserPortal.LegalPolicies.AllowEULA.ToString(),$htmlwhite))

				$msg = "User Portal (Web client)/Legal policies"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Windows client/Branding"
			}
			If($Text)
			{
				Line 2 "Windows client/Branding"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Company name"; Value = $Theme.WindowsClient.Branding.CompanyName; }) > $Null
				$ScriptInformation.Add(@{Data = "Application name"; Value = $Theme.WindowsClient.Branding.ApplicationName; }) > $Null
				$ScriptInformation.Add(@{Data = "Connection banner"; Value = $ThemeConnectionBanner; }) > $Null
				$ScriptInformation.Add(@{Data = "Application icon"; Value = $ThemeApplicationIcon; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Company name`t`t: " $Theme.WindowsClient.Branding.CompanyName
				Line 3 "Application name`t: " $Theme.WindowsClient.Branding.ApplicationName
				Line 3 "Connection banner`t: " $ThemeConnectionBanner
				Line 3 "Application icon`t: " $ThemeApplicationIcon
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Company name",($Script:htmlsb),$Theme.WindowsClient.Branding.CompanyName,$htmlwhite)
				$rowdata += @(,("Application name",($Script:htmlsb),$Theme.WindowsClient.Branding.ApplicationName,$htmlwhite))
				$rowdata += @(,("Connection banner",($Script:htmlsb),$ThemeConnectionBanner,$htmlwhite))
				$rowdata += @(,("Application icon",($Script:htmlsb),$ThemeApplicationIcon,$htmlwhite))

				$msg = "Windows client/Branding"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Windows client/Messages"
			}
			If($Text)
			{
				Line 2 "Windows client/Messages"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Override post-logon message"; Value = $Theme.WindowsClient.Messages.WindowsClientOverridePostLogonMessage.ToString(); }) > $Null
				If($Theme.WindowsClient.Messages.WindowsClientOverridePostLogonMessage)
				{
					ForEach($line in $ThemeWindowsPostlogonMessage)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $line; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Override post-logon message: " $Theme.WindowsClient.Messages.WindowsClientOverridePostLogonMessage.ToString()
				If($Theme.WindowsClient.Messages.WindowsClientOverridePostLogonMessage)
				{
					ForEach($line in $ThemeWindowsPostlogonMessage)
					{
						Line 5 "    " $line
					}
				}
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Override post-logon message",($Script:htmlsb),$Theme.WindowsClient.Messages.WindowsClientOverridePostLogonMessage.ToString(),$htmlwhite)
				If($Theme.WindowsClient.Messages.WindowsClientOverridePostLogonMessage)
				{
					ForEach($line in $ThemeWindowsPostlogonMessage)
					{
						$rowdata += @(,("",($Script:htmlsb),$line,$htmlwhite))
					}
				}

				$msg = "Windows client/Messages"
				$columnWidths = @("200","400")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Windows client/Custom menu"
			}
			If($Text)
			{
				Line 2 "Windows client/Custom menu"
			}
			If($HTML)
			{
				#Nothing
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Menu item"; Value = $Theme.WindowsClient.CustomMenu.MenuItem; }) > $Null
				$ScriptInformation.Add(@{Data = "Command"; Value = $Theme.WindowsClient.CustomMenu.Command; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Menu item: " $Theme.WindowsClient.CustomMenu.MenuItem
				Line 3 "Command`t : " $Theme.WindowsClient.CustomMenu.Command
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Menu item",($Script:htmlsb),$Theme.WindowsClient.CustomMenu.MenuItem,$htmlwhite)
				$rowdata += @(,("Command",($Script:htmlsb),$Theme.WindowsClient.CustomMenu.Command,$htmlwhite))

				$msg = "Windows client/Custom menu"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}

	#Certificates

	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Certificates"
	}
	If($Text)
	{
		Line 1 "Certificates"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Certificates"
	}

	Write-Verbose "$(Get-Date -Format G): Output Certificates"
	$Certs = Get-RASCertificate -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Certificates for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Certificates for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Certificates for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Certificates for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $Certs)
	{
		Write-Host "
	No Certificates retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Certificates retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Certificates retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Certificates retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		ForEach($Cert in $Certs)
		{
			Switch($Cert.Type)
			{
				"Imported"		{$CertType = "Imported"; Break}
				"LetsEncrypt"	{$CertType = "Let`'s Encrypt"; Break}
				"Request"		{$CertType = "Request"; Break}
				"SelfSigned"	{$CertType = "Sel-signed"; Break}
				Default			{$CertType = "Unable to determine certificate type: $($Cert.Type)"; Break}
			}
			
			Switch($Cert.Usage)
			{
				"Gateway, HALB"	{$CertUsage = "Secure Gateway, HALB "}
				"Gateway"		{$CertUsage = "Secure Gateway "}
				"HALB"			{$CertUsage = "HALB "}
				"None"			{$CertUsage = "None "}
				Default			{$CertUsage = "Unable to determine certificate usage: $($Cert.Usage)"; Break}
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Certificate $($Cert.Name)"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $Cert.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Type"; Value = $CertType; }) > $Null
				$ScriptInformation.Add(@{Data = "Status"; Value = $Cert.Status.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Expiration date"; Value = $Cert.ExpirationDate; }) > $Null
				$ScriptInformation.Add(@{Data = "Usage"; Value = $CertUsage; }) > $Null
				$ScriptInformation.Add(@{Data = "Common name"; Value = $Cert.CommonName; }) > $Null
				
				$cnt=-1
				ForEach($Item in $Cert.AlternateNames)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Alternate Names"; Value = $Item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $Cert.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $Cert.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $Cert.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $Cert.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "ID"; Value = $Cert.Id.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "Certificate $($Cert.Name)"
				Line 3 "Name`t`t`t: " $Cert.Name
				Line 3 "Type`t`t`t: " $CertType
				Line 3 "Status`t`t`t: " $Cert.Status.ToString()
				Line 3 "Expiration date`t`t: " $Cert.ExpirationDate
				Line 3 "Usage`t`t`t: " $CertUsage
				Line 3 "Common name`t`t: " $Cert.CommonName
				
				$cnt=-1
				ForEach($Item in $Cert.AlternateNames)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						Line 3 "Alternate Names`t`t: " $Item
					}
					Else
					{
						Line 6 "  " $Item
					}
				}
				
				Line 3 "Last modification by`t: " $Cert.AdminLastMod
				Line 3 "Modified on`t`t: " $Cert.TimeLastMod.ToString()
				Line 3 "Created by`t`t: " $Cert.AdminCreate
				Line 3 "Created on`t`t: " $Cert.TimeCreate.ToString()
				Line 3 "ID`t`t`t: " $Cert.Id.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				$CertName = $Cert.Name.Replace("<","").Replace(">","")
				WriteHTMLLine 3 0 "Certificate $CertName"
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$CertName,$htmlwhite)
				$rowdata += @(,("Type",($Script:htmlsb),$CertType,$htmlwhite))
				$rowdata += @(,("Status",($Script:htmlsb),$Cert.Status.ToString(),$htmlwhite))
				$rowdata += @(,("Expiration date",($Script:htmlsb),$Cert.ExpirationDate,$htmlwhite))
				$rowdata += @(,("Usage",($Script:htmlsb),$CertUsage,$htmlwhite))
				$rowdata += @(,("Common name",($Script:htmlsb),$Cert.CommonName,$htmlwhite))
				
				$cnt=-1
				ForEach($Item in $Cert.AlternateNames)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Alternate Names",($Script:htmlsb),$Item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				
				$rowdata += @(,("Last modification by",($Script:htmlsb), $Cert.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $Cert.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $Cert.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $Cert.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("ID",($Script:htmlsb),$Cert.Id.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "General"
			}
			If($Text)
			{
				Line 2 "General"
			}
			If($HTML)
			{
				#Nothing
			}
			
			Switch($Cert.KeySize)
			{
				"KeySize1024"		{$KeySize = "1024"; Break}
				"KeySize2048"		{$KeySize = "2048"; Break}
				"KeySize4096"		{$KeySize = "4096"; Break}
				"KeySize3072"		{$KeySize = "3072"; Break}
				"KeySize521"		{$KeySize = "521"; Break}
				"KeySizeUnknown"	{$KeySize = "Unknown"; Break}
				Default				{$KeySize = "Unable to determine certificate key size: $($Cert.KeySize)"; Break}
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $Cert.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $Cert.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Usage"; Value = $Cert.Usage; }) > $Null
				$ScriptInformation.Add(@{Data = "Type"; Value = $CertType; }) > $Null
				$ScriptInformation.Add(@{Data = "Status"; Value = $Cert.Status.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Key size"; Value = $KeySize; }) > $Null
				$ScriptInformation.Add(@{Data = "Expiration date"; Value = $Cert.ExpirationDate; }) > $Null
				$ScriptInformation.Add(@{Data = "Common name"; Value = $Cert.CommonName; }) > $Null
				
				$cnt=-1
				ForEach($Item in $Cert.AlternateNames)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Alternate Names"; Value = $Item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 3 "Name`t`t`t: " $Cert.Name
				Line 3 "Description`t`t: " $Cert.Description
				Line 3 "Usage`t`t`t: " $Cert.Usage
				Line 3 "Type`t`t`t: " $CertType
				Line 3 "Status`t`t`t: " $Cert.Status.ToString()
				Line 3 "Key size`t`t: " $KeySize
				Line 3 "Expiration date`t`t: " $Cert.ExpirationDate
				Line 3 "Common name`t`t: " $Cert.CommonName
				
				$cnt=-1
				ForEach($Item in $Cert.AlternateNames)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						Line 3 "Alternate Names`t`t: " $Item
					}
					Else
					{
						Line 6 "  " $Item
					}
				}
				
				Line 0 ""
			}
			If($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$Cert.Name.Replace("<","").Replace(">",""),$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$Cert.Description,$htmlwhite))
				$rowdata += @(,("Usage",($Script:htmlsb),$Cert.Usage,$htmlwhite))
				$rowdata += @(,("Type",($Script:htmlsb),$CertType,$htmlwhite))
				$rowdata += @(,("Status",($Script:htmlsb),$Cert.Status.ToString(),$htmlwhite))
				$rowdata += @(,("Key size",($Script:htmlsb),$KeySize,$htmlwhite))
				$rowdata += @(,("Expiration date",($Script:htmlsb),$Cert.ExpirationDate,$htmlwhite))
				$rowdata += @(,("Common name",($Script:htmlsb),$Cert.CommonName,$htmlwhite))
				
				$cnt=-1
				ForEach($Item in $Cert.AlternateNames)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Alternate Names",($Script:htmlsb),$Item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				
				$msg = "General"
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
	}

	#Settings
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Settings"
	}
	If($Text)
	{
		Line 1 "Settings"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Settings"
	}

	Write-Verbose "$(Get-Date -Format G): Output Settings"
	$FarmSettings = Get-RASFarmSettings -SiteId $Site.Id -ea 0 4>$Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve Settings for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Settings for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Settings for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Settings for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $FarmSettings)
	{
		Write-Host "
	No Settings retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Settings retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Settings retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Settings retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
	}
	
	#Auditing - not in PoSH

	#Global logging - not in PoSH

	<#RASFarmSettings	
		Dropped Properties	ExcludeDirectRDP
							ExcludeDirectRDPForVDI
							SendHDIcons
							ReplicateSendHDIcons
							EnableOverlayIcons
							ShowPasswordExpiry
							ReplicateURLRedirection
							URLBlackList
							TokenValidationTime
	#>
	Write-Verbose "$(Get-Date -Format G): `tOutput URL redirection"
	
	$URLRedirectionSettings = Get-RASURLRedirectionSettings -Siteid $Site.Id -EA 0 4> $Null
	
	If(!$?)
	{
		Write-Warning "
		`n
		Unable to retrieve URL Redirection settings for Site $($Site.Name)`
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve URL Redirection settings for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve URL Redirection settings for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve URL Redirection settings for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $Null -eq $URLRedirectionSettings)
	{
		Write-Host "
	No URL Redirection settings retrieved for Site $($Site.Name).`
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No URL Redirection settings retrieved for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No URL Redirection settings retrieved for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No URL Redirection settings retrieved for Site $($Site.Name)"
		}
	}
	Else
	{
		If($URLRedirectionSettings.URLs.Count -eq 0)
		{
			If($URLRedirectionSettings.DefaultAction -eq "Redirect")
			{
				$URLAction = "Redirect"
			}
			Else
			{
				$URLAction = "Do not redirect"
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "URL redirection"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "URL"; Value = "*"; }) > $Null
				$ScriptInformation.Add(@{Data = "Enabled"; Value = "True"; }) > $Null
				$ScriptInformation.Add(@{Data = "Action"; Value = $URLAction; }) > $Null
				$ScriptInformation.Add(@{Data = "ID"; Value = "0"; }) > $Null
				$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $URLRedirectionSettings.Replicate.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "URL redirection"
				Line 3 "URL: " "*"
				Line 3 "Enabled: " "True"
				Line 3 "Action: " $URLAction
				Line 3 "ID: " "0"
				Line 3 "Settings are replicated to all Sites: " $URLRedirectionSettings.Replicate.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "URL redirection"
				$rowdata = @()
				$columnHeaders = @("URL",($Script:htmlsb),"*",$htmlwhite)
				$rowdata += @(,("URL",($Script:htmlsb), "*",$htmlwhite))
				$rowdata += @(,("Enabled",($Script:htmlsb), "True",$htmlwhite))
				$rowdata += @(,("Action",($Script:htmlsb), $URLAction,$htmlwhite))
				$rowdata += @(,("ID",($Script:htmlsb), "0",$htmlwhite))
				$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb), $URLRedirectionSettings.Replicate.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","275")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths

				WriteHTMLLine 0 0 ""
			}
		}
		Else
		{
			If($URLRedirectionSettings.DefaultAction -eq "Redirect")
			{
				$URLAction = "Redirect"
			}
			Else
			{
				$URLAction = "Do not redirect"
			}

			$URLList = New-Object System.Collections.ArrayList
			
			$obj = [PSCustomObject]@{	
				URL      = "*"
				Enabled  = "True"
				Priority = "4294967295"
				Action   = $URLAction
				ID       = "0"
			}			
			$Null = $URLList.Add($obj)
			
			ForEach($item in $URLRedirectionSettings.URLs)
			{
				$Result = Get-RASURLRedirectionEntry -Siteid $Site.Id -Id $item.Id -EA 0 4> $Null
				
				If($item.Action -eq "Redirect")
				{
					$URLAction = "Redirect"
				}
				Else
				{
					$URLAction = "Do not redirect"
				}

				$obj = [PSCustomObject]@{	
					URL      = $item.URL
					Enabled  = $item.Enabled.ToString()
					Priority = $item.Priority.ToString()
					Action   = $URLAction
					ID       = $item.Id.ToString()
				}			
				$Null = $URLList.Add($obj)
			}
			
			$URLList = $URLList | Sort-Object Priority
			
			If($MSWord -or $PDF)
			{
				[System.Collections.Hashtable[]] $URLListWordTable = @();
				ForEach($URL in $URLList)
				{
					$URLListWordTable += @{
						URL      = $URL.URL;
						Enabled  = $URL.Enabled;
						Priority = $URL.Priority;
						Action   = $URL.Action;
						ID       = $URL.Id;
					}						
				}
				
				WriteWordLine 3 0 "URL redirection"
				$Table = AddWordTable -Hashtable $URLListWordTable `
				-Columns URL, Enabled, Action, ID `
				-Headers "URL", "Enabled", "Action", "ID" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 50;
				$Table.Columns.Item(3).Width = 100;
				$Table.Columns.Item(4).Width = 50;
				
				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $URLRedirectionSettings.Replicate.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 50;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "URL redirection"
				Line 0 ""
				Line 2 "URL                                                 Enabled  Action           ID "
				Line 2 "================================================================================="
				#		https://www.somereallylongurl.com/somelongsitename  False    Do not redirect  999
				#		12345678901234567890123456789012345678901234567890SS1234567SS123456789012345SS123
				ForEach($item in $URLList)
				{
					Line 2 ( "{0,-50}  {1,-7}  {2,-15}  {3,-3}" -f $item.URL, $item.Enabled, $item.Action, $item.ID)
				}
				Line 0 ""
				Line 2 "Settings are replicated to all Sites: " $URLRedirectionSettings.Replicate.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "URL redirection"
				$rowdata = @()
				ForEach($item in $URLList)
				{
					$rowdata += @(,(
						$item.URL,$htmlwhite,
						$item.Enabled,$htmlwhite,
						$item.Action,$htmlwhite,
						$item.ID,$htmlwhite
						))
				}

				$columnHeaders = @(
				"URL",($Script:htmlsb),
				"Enabled",($Script:htmlsb),
				"Action",($Script:htmlsb),
				"ID",($Script:htmlsb))

				$msg = ""
				$columnWidths = @("250","50","100","50")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				$rowdata = @()
				$columnHeaders = @("Settings are replicated to all Sites",($Script:htmlsb),$URLRedirectionSettings.Replicate.ToString(),$htmlwhite)

				$msg = ""
				$columnWidths = @("250","50")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths

				WriteHTMLLine 0 0 ""
			}
		}
	}


	$RASNotificationHandlers = Get-RASNotification -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve notification handlers information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve notification handlers information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve notification handlers information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve notification handlers information"
		}
	}
	ElseIf($? -and $null -eq $RASNotificationHandlers)
	{
		Write-Host "
		No notification handlers information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No notification handlers information was found"
		}
		If($Text)
		{
			Line 0 "No notification handlers information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No notification handlers information was found"
		}
	}
	Else
	{
		OutputRASNotifications $RASNotificationHandlers
	}
	
	$RASNotificationScripts = Get-RASNotificationScript -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve notification scripts information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve notification scripts information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve notification scripts information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve notification scripts information"
		}
	}
	ElseIf($? -and $null -eq $RASNotificationScripts)
	{
		Write-Host "
		No notification scripts information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No notification scripts information was found"
		}
		If($Text)
		{
			Line 0 "No notification scripts information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No notification scripts information was found"
		}
	}
	Else
	{
		OutputRASNotificationScripts $RASNotificationScripts
	}
	
	$RASClientSettings = Get-RASClientSettings -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve CLient Settings information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve CLient Settings information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve CLient Settings information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve CLient Settings information"
		}
	}
	ElseIf($? -and $null -eq $RASClientSettings)
	{
		Write-Host "
		No CLient Settings information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No CLient Settings information was found"
		}
		If($Text)
		{
			Line 0 "No CLient Settings information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No CLient Settings information was found"
		}
	}
	Else
	{
		OutputRASClientSettings $RASClientSettings
	}

	$FSLogixDeploymentSettings = Get-RASFSLogixSettings -EA 0 4>$Null | Where-Object{ $_.SiteId -eq $Site.Id}
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve FSLogix Settings information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve FSLogix Settings information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve FSLogix Settings information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve FSLogix Settings information"
		}
	}
	ElseIf($? -and $null -eq $FSLogixDeploymentSettings)
	{
		Write-Host "
		No FSLogix Settings information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No FSLogix Settings information was found"
		}
		If($Text)
		{
			Line 0 "No FSLogix Settings information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No FSLogix Settings information was found"
		}
	}
	Else
	{
		Switch($FSLogixDeploymentSettings.InstallType)
		{
			"Manually"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install manually"; Break}
			"Online"		{$FSLogixDeploymentSettingsDeploymentMethod = "Install online"; Break}
			"NetworkDrive"	{$FSLogixDeploymentSettingsDeploymentMethod = "Install from a network share"; Break}
			"UploadInstall"	{$FSLogixDeploymentSettingsDeploymentMethod = "Push from RAS Publishing Agent"; Break}
			Default			{$FSLogixDeploymentSettingsDeploymentMethod = "Unable to determine FSLogix Deployment method: $($FSLogixDeploymentSettings.InstallType)"; Break}
		}
		
		$FSLogixDeploymentSettingsInstallOnlineURL  = $FSLogixDeploymentSettings.InstallOnlineURL
		$FSLogixDeploymentSettingsNetworkDrivePath  = $FSLogixDeploymentSettings.NetworkDrivePath
		$FSLogixDeploymentSettingsInstallerFileName = $FSLogixDeploymentSettings.InstallerFileName
		#$FSLogixDeploymentSettingsReplicate         = $FSLogixDeploymentSettings.Replicate
		
		If($MSWord -or $PDF)
		{
			WriteWordLine 3 0 "Features"
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "FSLogix"; Value = ""; }) > $Null
			$ScriptInformation.Add(@{Data = "     Deployment method"; Value = $FSLogixDeploymentSettingsDeploymentMethod; }) > $Null
			If($FSLogixDeploymentSettings.InstallType -eq "Online")
			{
				$ScriptInformation.Add(@{Data = "     URL"; Value = $FSLogixDeploymentSettingsInstallOnlineURL; }) > $Null
			}
			ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
			{
				$ScriptInformation.Add(@{Data = "     Install from a network share"; Value = $FSLogixDeploymentSettingsNetworkDrivePath; }) > $Null
			}
			ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
			{
				$ScriptInformation.Add(@{Data = "     Push from a Connection Broker"; Value = $FSLogixDeploymentSettingsInstallerFileName; }) > $Null
			}
			#not available yet
			#$ScriptInformation.Add(@{Data = "Azure Virtual Desktop"; Value = ""; }) > $Null
			#$ScriptInformation.Add(@{Data = "     Enable Azure Virtual Desktop management"; Value = "Can't find"; }) > $Null
			#$ScriptInformation.Add(@{Data = "     Client feature set"; Value = "Can't find"; }) > $Null
			#$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $FSLogixDeploymentSettingsReplicate.ToString(); }) > $Null
			
			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 2 "Features"
			Line 3 "FSLogix"
			Line 4 "Deployment method`t`t`t: " $FSLogixDeploymentSettingsDeploymentMethod
			If($FSLogixDeploymentSettings.InstallType -eq "Online")
			{
				Line 4 "URL`t`t`t`t`t: " $FSLogixDeploymentSettingsInstallOnlineURL
			}
			ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
			{
				Line 4 "Install from a network share`t`t: " $FSLogixDeploymentSettingsNetworkDrivePath
			}
			ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
			{
				Line 4 "Push from a Connection Broker`t`t: " $FSLogixDeploymentSettingsInstallerFileName
			}
			#not available yet
			#Line 3 "Azure Virtual Desktop"
			#Line 4 "Enable Azure Virtual Desktop management`t: " "Can't find"
			#Line 4 "Client feature set`t`t`t: " "Can't find"
			#Line 3 "Settings are replicated to all Sites`t`t: " $FSLogixDeploymentSettingsReplicate.ToString()
			Line 0 ""
		}
		If($HTML)
		{
			WriteHTMLLine 3 0 "Features"
			$rowdata = @()
			$columnHeaders = @("FSLogix",($Script:htmlsb),"",$htmlwhite)
			$rowdata += @(,("     Deployment method",($Script:htmlsb),$FSLogixDeploymentSettingsDeploymentMethod,$htmlwhite))
			If($FSLogixDeploymentSettings.InstallType -eq "Online")
			{
				$rowdata += @(,("     URL",($Script:htmlsb),$FSLogixDeploymentSettingsInstallOnlineURL,$htmlwhite))
			}
			ElseIf($FSLogixDeploymentSettings.InstallType -eq "NetworkDrive")
			{
				$rowdata += @(,("     Install from a network share",($Script:htmlsb),$FSLogixDeploymentSettingsNetworkDrivePath,$htmlwhite))
			}
			ElseIf($FSLogixDeploymentSettings.InstallType -eq "UploadInstall")
			{
				$rowdata += @(,("     Push from a Connection Broker",($Script:htmlsb),$FSLogixDeploymentSettingsInstallerFileName,$htmlwhite))
			}
			#not available yet
			#$rowdata += @(,("Azure Virtual Desktop",($Script:htmlsb),"",$htmlwhite))
			#$rowdata += @(,("     Enable Azure Virtual Desktop management",($Script:htmlsb),"Can't find",$htmlwhite))
			#$rowdata += @(,("     Client feature set",($Script:htmlsb),"Can't find",$htmlwhite))
			#$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$FSLogixDeploymentSettingsReplicate.ToString(),$htmlwhite))
					
			$msg = ""
			$columnWidths = @("250","225")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
	}
}
#endregion

#region process load balancing
Function ProcessLoadBalancing
{
	Param([object]$Site)
	
	Write-Verbose "$(Get-Date -Format G): Processing Load Balancing"
	
	OutputLoadBalancingSectionPage
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Load Balancing"
	
	$results = Get-RASLBSettings -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Load Balancing information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Load Balancing information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Load Balancing information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Load Balancing information"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Host "
		No Load Balancing information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Load Balancing information was found"
		}
		If($Text)
		{
			Line 0 "No Load Balancing information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Load Balancing information was found"
		}
	}
	Else
	{
		OutputRASLBSettings $results
	}
	
	$results = Get-RASCPUOptimizationSettings -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
	Write-Warning "
	`n
	Unable to retrieve CPU Optimization information
	"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve CPU Optimization information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve CPU Optimization information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve CPU Optimization information"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Host "
		No CPU Optimization information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No CPU Optimization information was found"
		}
		If($Text)
		{
			Line 0 "No CPU Optimization information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No CPU Optimization information was found"
		}
	}
	Else
	{
		OutputCPUOptimizationSettings $results
	}
}

Function OutputLoadBalancingSectionPage
{
	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "Load Balancing"
	}
	If($Text)
	{
		Line 0 "Load Balancing"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "Load Balancing"
	}
}

Function OutputRASLBSettings
{
	Param([object] $RASLBSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Load Balancing"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Load Balancing"
	}
	If($Text)
	{
		Line 1 "Load Balancing"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Load Balancing"
	}
	
	Switch ($RASLBSettings.Method)
	{
		"ResourceBased"	{$RASLBSettingsMethod = "Resource Based"; Break}
		"RoundRobin"	{$RASLBSettingsMethod = "Round Robin"; Break}
		Default			{$RASLBSettingsMethod = "Unable to determine Load balancing method: $($RASLBSettings.Method)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Method"; Value = $RASLBSettingsMethod; }) > $Null
		$ScriptInformation.Add(@{Data = "Counters"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     User Sessions"; Value = $RASLBSettings.SessionsCounter; }) > $Null
		$ScriptInformation.Add(@{Data = "     Memory"; Value = $RASLBSettings.MemoryCounter; }) > $Null
		$ScriptInformation.Add(@{Data = "     CPU"; Value = $RASLBSettings.CPUCounter; }) > $Null
		$ScriptInformation.Add(@{Data = "Reconnect to disconnected sessions"; Value = $RASLBSettings.ReconnectDisconnect; }) > $Null
		$ScriptInformation.Add(@{Data = "Reconnect sessions using client's IP address only"; Value = $RASLBSettings.ReconnectUsingIPOnly; }) > $Null
		$ScriptInformation.Add(@{Data = "Limit each user to one session per desktop"; Value = $RASLBSettings.ReconnectUser; }) > $Null
		$ScriptInformation.Add(@{Data = "Disable Microsoft RD Connection Broker"; Value = $RASLBSettings.DisableRDSLB; }) > $Null
		$ScriptInformation.Add(@{Data = "Declare Agent dead if not responding for"; Value = "$($RASLBSettings.DeadTimeout) seconds"; }) > $Null
		$ScriptInformation.Add(@{Data = "Agent Refresh Time"; Value = "$($RASLBSettings.RefreshTimeout) seconds"; }) > $Null
		$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $RASLBSettings.Replicate.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 275;
		$Table.Columns.Item(2).Width = 150;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 2 "Method`t`t`t: " $RASLBSettingsMethod
		Line 2 "Counters"
		Line 3 "User Sessions`t: " $RASLBSettings.SessionsCounter
		Line 3 "Memory`t`t: " $RASLBSettings.MemoryCounter
		Line 3 "CPU`t`t: " $RASLBSettings.CPUCounter
		Line 2 "Reconnect to disconnected sessions`t`t`t: " $RASLBSettings.ReconnectDisconnect
		Line 2 "Reconnect sessions using client's IP address only`t: " $RASLBSettings.ReconnectUsingIPOnly
		Line 2 "Limit each user to one session per desktop`t`t: " $RASLBSettings.ReconnectUser
		Line 2 "Disable Microsoft RD Connection Broker`t`t`t: " $RASLBSettings.DisableRDSLB
		Line 2 "Declare Agent dead if not responding for`t`t: " "$($RASLBSettings.DeadTimeout) seconds"
		Line 2 "Agent Refresh Time`t`t`t`t`t: " "$($RASLBSettings.RefreshTimeout) seconds"
		Line 2 "Settings are replicated to all Sites`t`t`t: " $RASLBSettings.Replicate.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Method",($Script:htmlsb),$RASLBSettingsMethod,$htmlwhite)
		$rowdata += @(,("Counters",($Script:htmlsb),"",$htmlwhite))
		$rowdata += @(,("     User Sessions",($Script:htmlsb),$RASLBSettings.SessionsCounter.ToString(),$htmlwhite))
		$rowdata += @(,("     Memory",($Script:htmlsb),$RASLBSettings.MemoryCounter.ToString(),$htmlwhite))
		$rowdata += @(,("     CPU",($Script:htmlsb),$RASLBSettings.CPUCounter.ToString(),$htmlwhite))
		$rowdata += @(,("Reconnect to disconnected sessions",($Script:htmlsb),$RASLBSettings.ReconnectDisconnect.ToString(),$htmlwhite))
		$rowdata += @(,("Reconnect sessions using client's IP address only",($Script:htmlsb),$RASLBSettings.ReconnectUsingIPOnly.ToString(),$htmlwhite))
		$rowdata += @(,("Limit each user to one session per desktop",($Script:htmlsb),$RASLBSettings.ReconnectUser.ToString(),$htmlwhite))
		$rowdata += @(,("Disable Microsoft RD Connection Broker",($Script:htmlsb),$RASLBSettings.DisableRDSLB.ToString(),$htmlwhite))
		$rowdata += @(,("Declare Agent dead if not responding for",($Script:htmlsb),"$($RASLBSettings.DeadTimeout) seconds",$htmlwhite))
		$rowdata += @(,("Agent Refresh Time",($Script:htmlsb),"$($RASLBSettings.RefreshTimeout) seconds",$htmlwhite))
		$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$RASLBSettings.Replicate.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("300","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputCPUOptimizationSettings
{
	Param([object] $RASCPUSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput CPU Optimization"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "CPU Optimization"
	}
	If($Text)
	{
		Line 1 "CPU Optimization"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "CPU Optimization"
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Enable CPU Optimization"; Value = $RASCPUSettings.EnableCPUOptimization.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = "Start"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     Total CPU usage exceeds"; Value = "$($RASCPUSettings.StartUsage) %"; }) > $Null
		$ScriptInformation.Add(@{Data = "CPU Conditions"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     Critical - CPU usage by process exceeds"; Value = "$($RASCPUSettings.CriticalUsage) %"; }) > $Null
		$ScriptInformation.Add(@{Data = "     Idle - CPU usage by process exceeds"; Value = "$($RASCPUSettings.IdleUsage) %"; }) > $Null
		$ScriptInformation.Add(@{Data = "Exclusions"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     Processes that will be excluded from CPU Optimization"; Value = ""; }) > $Null
		
		If($RASCPUSettings.CPUExcludeList.Count -eq 0)
		{
			$ScriptInformation.Add(@{Data = "          Processes to exclude"; Value = "None"; }) > $Null
		}
		Else
		{
			$cnt = -1
			
			ForEach($item in $RASCPUSettings.CPUExcludeList)
			{
				$cnt++
				
				If($cnt -eq 0)
				{
					$ScriptInformation.Add(@{Data = "          Processes to exclude"; Value = $item; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
				}
			}
		}

		$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $RASCPUSettings.Replicate.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 275;
		$Table.Columns.Item(2).Width = 150;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 2 "Enable CPU Optimization`t`t`t`t`t: " $RASCPUSettings.EnableCPUOptimization.ToString()
		Line 2 "Start"
		Line 3 "Total CPU usage exceeds`t`t`t`t: " "$($RASCPUSettings.StartUsage) %"
		Line 2 "CPU Conditions"
		Line 3 "Critical - CPU usage by process exceeds`t`t: " "$($RASCPUSettings.CriticalUsage) %"
		Line 3 "Idle - CPU usage by process exceeds`t`t: " "$($RASCPUSettings.IdleUsage) %"
		Line 2 "Exclusions"
		Line 3 "Processes that will be excluded from CPU Optimization"
		
		If($RASCPUSettings.CPUExcludeList.Count -eq 0)
		{
			Line 4 "Processes to exclude`t`t`t: None"
		}
		Else
		{
			$cnt = -1
			
			ForEach($item in $RASCPUSettings.CPUExcludeList)
			{
				$cnt++
				
				If($cnt -eq 0)
				{
					Line 4 "Processes to exclude`t`t`t: " $item
				}
				Else
				{
					Line 9 "  " $item
				}
			}
		}

		Line 2 "Settings are replicated to all Sites`t`t`t: " $RASCPUSettings.Replicate.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Enable CPU Optimization",($Script:htmlsb),$RASCPUSettings.EnableCPUOptimization.ToString(),$htmlwhite)
		$rowdata += @(,("Start",($Script:htmlsb),"",$htmlwhite))
		$rowdata += @(,("     Total CPU usage exceeds",($Script:htmlsb),"$($RASCPUSettings.StartUsage) %",$htmlwhite))
		$rowdata += @(,("CPU Conditions",($Script:htmlsb),"",$htmlwhite))
		$rowdata += @(,("     Critical - CPU usage by process exceeds",($Script:htmlsb),"$($RASCPUSettings.CriticalUsage) %",$htmlwhite))
		$rowdata += @(,("     Idle - CPU usage by process exceeds",($Script:htmlsb),"$($RASCPUSettings.IdleUsage) %",$htmlwhite))
		$rowdata += @(,("Exclusions",($Script:htmlsb),"",$htmlwhite))
		$rowdata += @(,("     Processes that will be excluded from CPU Optimization",($Script:htmlsb),"",$htmlwhite))
		
		If($RASCPUSettings.CPUExcludeList.Count -eq 0)
		{
			$rowdata += @(,("          Processes to exclude",($Script:htmlsb),"None",$htmlwhite))
		}
		Else
		{
			$cnt = -1
			
			ForEach($item in $RASCPUSettings.CPUExcludeList)
			{
				$cnt++
				
				If($cnt -eq 0)
				{
					$rowdata += @(,("          Processes to exclude",($Script:htmlsb),$item,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
				}
			}
		}

		$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$RASCPUSettings.Replicate.ToString(),$htmlwhite))
		$msg = ""
		$columnWidths = @("300","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}
#endregion

#region process publishing
Function ListFolder($folder, $spaces) 
{
	#function provided 23-July-2020 by Ian Sant of Parallels
	#list published items in the order they appear in the console
	#modified 24-July-2020 by Webster to make it work with this script
	$prevId = 0

	Do
	{
		$item = $Script:AllItems | Where-Object {($_.ParentId -eq $folder) -and ($_.PreviousId -eq $prevId)}
		If ($Null -eq $item) {
			Return
		}

		#Write-Host $spaces $item.Name
		$Script:OrderedItems.Add($item) >$Null
		If ($item.Type -eq "Folder") {
			$newspaces = $spaces + "   "
			ListFolder $item.Id $newspaces
		}
		$prevId = $item.Id
	} While ($true) 
}

Function ProcessPublishing
{
	Param([object]$Site)
	
	Write-Verbose "$(Get-Date -Format G): Processing Publishing"
	
	OutputPublishingSectionPage $Site.Name
			
	Write-Verbose "$(Get-Date -Format G): `tProcessing Publishing"
	
	$results = Get-RASPubItem -SiteId $Site.Id -EA 0 4>$Null
		
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Publishing information for Site $($Site.Name)
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Publishing information for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Publishing information for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Publishing information for Site $($Site.Name)"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Host "
		No Publishing information was found for Site $($Site.Name)
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 2 0 "No Publishing information was found for Site $($Site.Name)"
		}
		If($Text)
		{
			Line 0 "No Publishing information was found for Site $($Site.Name)"
		}
		If($HTML)
		{
			WriteHTMLLine 2 0 "No Publishing information was found for Site $($Site.Name)"
		}
	}
	Else
	{
		$Script:OrderedItems = New-Object System.Collections.ArrayList
		$Script:AllItems = $results
		ListFolder 0 ""
		OutputPublishingSettings $Script:OrderedItems $Site.Id $Site.Name
	}
}

Function OutputPublishingSectionPage
{
	Param([string] $SiteName)
	
	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "Publishing for Site $($SiteName)"
	}
	If($Text)
	{
		Line 0 "Publishing for Site $($SiteName)"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "Publishing for Site $($SiteName)"
	}
}

Function OutputPublishingSettings
{
	Param([object] $PubItems, [uint32] $SiteId, [string] $xSiteName)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Publishing"
	
	<#
	Folder
	PCApp
	PCDesktop
	RDSApp
	RDSDesktop
	VDIApp
	VDIDesktop
	WVDApp and AVDApp
	WVDDesktop and AVDDesktop
	#>

	#Get the published items default settings
	Write-Verbose "$(Get-Date -Format G): `t`t`tRetrieve Publishing Default Site Settings for Site $xSiteName"
	$results = Get-RASPubDefaultSettings -SiteId $SiteId -EA 0 4>$Null
	
	If(!$?)
	{
		Write-Host "
		Unable to retrieve Publishing Default Site Settings for Site $xSiteName, using built-in defaults
		" -ForegroundColor White
		<#
		StartPath                     : RAS Remote Desktops & Applications\%Groups%
		CreateShortcutOnDesktop       : False
		CreateShortcutInStartFolder   : True
		CreateShortcutInStartUpFolder : False
		ReplicateShortcutSettings     : False
		ReplicateDisplaySettings      : False
		WaitForPrinters               : False
		StartMaximized                : True
		WaitForPrintersTimeout        : 20
		ColorDepth                    : ClientSpecified
		DisableSessionSharing         : False
		OneInstancePerUser            : False
		ConCurrentLicenses            : 0
		LicenseLimitNotify            : WarnUserAndNoStart
		ReplicateLicenseSettings      : False
		#>
		
		#Shortcuts tab
		$DefaultCreateShortcutOnDesktop       = "False"
		$DefaultCreateShortcutInStartFolder   = "True"
		$DefaultStartPath                     = "RAS Remote Desktops & Applications\%Groups%"
		$DefaultCreateShortcutInStartUpFolder = "False"
		$DefaultReplicateShortcutSettings     = "False"
		
		#License tab
		$DefaultDisableSessionSharing         = "False"
		$DefaultOneInstancePerUser            = "False"
		$DefaultConCurrentLicenses            = "Unlimited"
		$DefaultLicenseLimitNotify            = "Warn user and do not start"
		$DefaultReplicateLicenseSettings      = "False"

		#Display tab
		$DefaultWaitForPrinters               = "False"
		$DefaultWaitForPrintersTimeout        = "20"
		$DefaultColorDepth                    = "Client Specified"
		$DefaultStartMaximized                = "True"
		$DefaultReplicateDisplaySettings      = "False"

		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Publishing Default Site Settings for Site $xSiteName, using built-in defaults"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Publishing Default Site Settings for Site $xSiteName, using built-in defaults"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Publishing Default Site Settings for Site $xSiteName, using built-in defaults"
		}
	}
	Else
	{
		#Shortcuts tab
		$DefaultCreateShortcutOnDesktop       = $results.CreateShortcutOnDesktop.ToString()      
		$DefaultCreateShortcutInStartFolder   = $results.CreateShortcutInStartFolder.ToString()
		$DefaultStartPath                     = $results.StartPath                    
		$DefaultCreateShortcutInStartUpFolder = $results.CreateShortcutInStartUpFolder.ToString()
		$DefaultReplicateShortcutSettings     = $results.ReplicateShortcutSettings.ToString()

		#License tab
		$DefaultDisableSessionSharing         = $results.DisableSessionSharing.ToString()    
		$DefaultOneInstancePerUser            = $results.OneInstancePerUser.ToString()
		If($results.ConCurrentLicenses -eq 0)
		{
			$DefaultConCurrentLicenses        = "Unlimited"
		}
		Else
		{
			$DefaultConCurrentLicenses        = $results.ConCurrentLicenses.ToString()    
		}
		 
		Switch ($results.LicenseLimitNotify)
		{
			"WarnUserAndNoStart"		{$DefaultLicenseLimitNotify = "Warn user and do not start"; Break}
			"WarnUserAndStart"			{$DefaultLicenseLimitNotify = "Warn user and start"; Break}
			"NotifyAdminAndStart"		{$DefaultLicenseLimitNotify = "Notify administrator and start"; Break}
			"NotifyUserAdminAndStart"	{$DefaultLicenseLimitNotify = "Notify user, administrator and start"; Break}
			"NotifyUserAdminAndNoStart"	{$DefaultLicenseLimitNotify = "Notify user, administrator and do not start"; Break}
			Default						{$DefaultLicenseLimitNotify = "Unable to determine If limit is eceeded: $($results.LicenseLimitNotify)"; Break}
		}
		
		$DefaultReplicateLicenseSettings      = $results.ReplicateLicenseSettings.ToString()

		#Display tab
		$DefaultWaitForPrinters               = $results.WaitForPrinters.ToString()
		$DefaultWaitForPrintersTimeout        = $results.WaitForPrintersTimeout.ToString()
		Switch ($results.ColorDepth)
		{
			"Colors8Bit"		{$DefaultColorDepth = "256 Colors"; Break}
			"Colors15Bit"		{$DefaultColorDepth = "High Color (15 bit)"; Break}
			"Colors16Bit"		{$DefaultColorDepth = "High Color (16 bit)"; Break}
			"Colors24Bit"		{$DefaultColorDepth = "True Color (24 bit)"; Break}
			"Colors32Bit"		{$DefaultColorDepth = "Highest Quality (32 bit)"; Break}
			"ClientSpecified"	{$DefaultColorDepth = "Client Specified"; Break}
			Default				{$DefaultColorDepth = "Unable to determine Color Depth: $($PubItem.ColorDepth)"; Break}
		}
		$DefaultStartMaximized                = $results.StartMaximized.ToString()   
		$DefaultReplicateDisplaySettings      = $results.ReplicateDisplaySettings.ToString()
	}
	
	ForEach($PubItem in $PubItems)
	{
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tOutput $($PubItem.Name)"

		If(ValidObject $PubItem WinType)
		{
			Switch ($PubItem.WinType)
			{
				"Normal"	{$WinType = "Normal Window"; Break}
				"Maximized"	{$WinType = "Maximized"; Break}
				"Minimized"	{$WinType = "Minimized"; Break}
				Default		{$WinType = "Unable to determine window Run type: $($PubItem.WinType)"; Break}
			}
		}

		If($MSWord -or $PDF)
		{
			WriteWordLine 2 0 $PubItem.Name
		}
		If($Text)
		{
			Line 1 $PubItem.Name
		}
		If($HTML)
		{
			WriteHTMLLine 2 0 $PubItem.Name
		}
	
		If($PubItem.Type -eq "Folder")
		{
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
			}
			If($Text)
			{
				Line 2 "Information"
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
			}
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Folder"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				
				If($PubItem.AdminOnly -eq $True)
				{
					$ScriptInformation.Add(@{Data = "Use for administrative purposes"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				If($PubItem.PreferredRoutingEnabled)
				{
					$Results = Get-RASPubItemPreferredRoute -Id $PubItem.Id -EA 0 4> $Null
					
					If($? -and $Null -ne $Results)
					{
						$cnt =-1
						ForEach($PrefRoute in $Results)
						{
							$CustomRoute = Get-RASCustomRoute -Id $PrefRoute.Id -EA 0 4>$Null
							
							If($? -and $Null -ne $CustomRoute)
							{
								$cnt++
								If($cnt -eq 0)
								{
									$ScriptInformation.Add(@{Data = "Preferred routing is enabled"; Value = ""; }) > $Null
									$ScriptInformation.Add(@{Data = ""; Value = "$($CustomRoute.Name), custom route on IP $($CustomRoute.PublicAddress)"; }) > $Null
								}
								Else
								{
									$ScriptInformation.Add(@{Data = ""; Value = "$($CustomRoute.Name), custom route on IP $($CustomRoute.PublicAddress)"; }) > $Null
								}
							}
						}
					}
				}
		
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Folder"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Folder Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Use for administrative purposes"; Value = $PubItem.AdminOnly.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				OutputPubItemFilters $PubItem "MSWordPDF"
			}
			If($Text)
			{
				Line 3 "Folder`t`t`t`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				
				If($PubItem.AdminOnly -eq $True)
				{
					Line 3 "Use for administrative purposes"
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s)`t`t`t`t`t: " $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}

				If($PubItem.PreferredRoutingEnabled)
				{
					$Results = Get-RASPubItemPreferredRoute -Id $PubItem.Id -EA 0 4> $Null
					
					If($? -and $Null -ne $Results)
					{
						$cnt =-1
						ForEach($PrefRoute in $Results)
						{
							$CustomRoute = Get-RASCustomRoute -Id $PrefRoute.Id -EA 0 4>$Null
							
							If($? -and $Null -ne $CustomRoute)
							{
								$cnt++
								If($cnt -eq 0)
								{
									Line 3 "Preferred routing is enabled"
									Line 7 "$($CustomRoute.Name), custom route on IP $($CustomRoute.PublicAddress)"
								}
								Else
								{
									Line 7 "$($CustomRoute.Name), custom route on IP $($CustomRoute.PublicAddress)"
								}
							}
						}
					}
				}
				Line 0 ""

				Line 2 Sites
				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "This published item will be available from the following Sites: " $SiteName
					}
					Else
					{
						Line 10 "  " $SiteName
					}
				}
				
				Line 2 "Folder"
				Line 3 "Folder Name`t`t`t`t`t`t: " $PubItem.Name
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Use for administrative purposest`t`t`t: " $PubItem.AdminOnly.ToString()
				Line 0 ""
				
				OutputPubItemFilters $PubItem "Text"
			}
			If($HTML)
			{
				$rowdata = @()

				$columnHeaders = @("Folder",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				
				If($PubItem.AdminOnly -eq $True)
				{
					$rowdata += @(,("Use for administrative purposes",($Script:htmlsb), "",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				If($PubItem.PreferredRoutingEnabled)
				{
					$Results = Get-RASPubItemPreferredRoute -Id $PubItem.Id -EA 0 4> $Null
					
					If($? -and $Null -ne $Results)
					{
						$cnt =-1
						ForEach($PrefRoute in $Results)
						{
							$CustomRoute = Get-RASCustomRoute -Id $PrefRoute.Id -EA 0 4>$Null
							
							If($? -and $Null -ne $CustomRoute)
							{
								$cnt++
								If($cnt -eq 0)
								{
									$rowdata += @(,("Preferred routing is enabled",($Script:htmlsb),"",$htmlwhite))
									$rowdata += @(,("",($Script:htmlsb),"$($CustomRoute.Name), custom route on IP $($CustomRoute.PublicAddress)",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($Script:htmlsb),"$($CustomRoute.Name), custom route on IP $($CustomRoute.PublicAddress)",$htmlwhite))
								}
							}
						}
					}
				}
				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Folder"
				$rowdata = @()

				$columnHeaders = @("Folder",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Use for administrative purposes",($Script:htmlsb),$PubItem.AdminOnly.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				OutputPubItemFilters $PubItem "HTML"
			}
		}
		ElseIf($PubItem.Type -eq "PCApp")
		{
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Remote PC Application"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Target"; Value = $PubItem.Target; }) > $Null
				$ScriptInformation.Add(@{Data = "Start In"; Value = $PubItem.StartIn; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					$ScriptInformation.Add(@{Data = "Parameters"; Value = $PubItem.Parameters; }) > $Null
				}
				
				$ScriptInformation.Add(@{Data = "Settings for Site $xSiteName"; Value = ""; }) > $Null
				
				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($DefaultStartPath)'"; }) > $Null
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($PubItem.StartPath)'"; }) > $Null
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Remote PC Application"
				WriteWordLine 4 0 "Application"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Run"; Value = $WinType; }) > $Null
				$ScriptInformation.Add(@{Data = "Target"; Value = $PubItem.Target; }) > $Null
				$ScriptInformation.Add(@{Data = "Start In"; Value = $PubItem.StartIn; }) > $Null
				$ScriptInformation.Add(@{Data = "Parameters"; Value = $PubItem.Parameters; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				OutputPubItemFilters $PubItem "MSWordPDF"
				
				OutputPubItemShortcuts $PubItem "MSWordPDF" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($Text)
			{
				Line 2 "Information"
				Line 3 "Remote PC Application`t`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				Line 3 "Target`t`t`t`t`t`t`t: " $PubItem.Target
				Line 3 "Start In`t`t`t`t`t`t: " $PubItem.StartIn
				Line 3 "Start automatically when user logs on`t`t`t: " $PubItem.StartOnLogon.ToString()
				
				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					Line 3 "Parameters`t`t`t`t`t`t: " $PubItem.Parameters
				}
				
				Line 3 "Settings for Site $xSiteName"

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						Line 3 "Create shortcut on desktop"
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						Line 3 "Create shortcut in Start Menu under " "'$($DefaultStartPath)'"
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						Line 3 "Create shortcut on desktop"
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						Line 3 "Create shortcut in Start Menu under " "'$($PubItem.StartPath)'"
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s)`t`t`t`t`t: " $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}
				Line 0 ""

				Line 2 "Sites"
				Line 3 "This published item will be available from the following Sites"
				ForEach($Site in $PubItem.PublishToSite)
				{
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					Line 10 $SiteName
				}
				Line 0 ""

				Line 2 "Remote PC Application"
				Line 3 "Application"
				Line 4 "Name`t`t`t`t`t`t: " $PubItem.Name
				Line 4 "Description`t`t`t`t`t: " $PubItem.Description
				Line 4 "Run`t`t`t`t`t`t: " $WinType
				Line 4 "Target`t`t`t`t`t`t: " $PubItem.Target
				Line 4 "Start In`t`t`t`t`t: " $PubItem.StartIn
				Line 4 "Parameters`t`t`t`t`t: " $PubItem.Parameters
				Line 4 "Start automatically when user logs on`t`t: " $PubItem.StartOnLogon.ToString()
				Line 0 ""
				
				OutputPubItemFilters $PubItem "Text"
				
				OutputPubItemShortcuts $PubItem "Text" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
				$rowdata = @()

				$columnHeaders = @("Remote PC Application",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Target",($Script:htmlsb),$PubItem.Target,$htmlwhite))
				$rowdata += @(,("Start In",($Script:htmlsb),$PubItem.StartIn,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))
				
				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					$rowdata += @(,("Parameters",($Script:htmlsb),$PubItem.Parameters,$htmlwhite))
				}
				
				$rowdata += @(,("Settings for Site $xSiteName",($Script:htmlsb),"",$htmlwhite))
				
				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($DefaultStartPath)'",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($PubItem.StartPath)'",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}
			
				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Sites"
				$rowdata = @()

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("This published item will be available from the following Sites",($Script:htmlsb),$SiteName,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Remote PC Application"
				$rowdata = @()

				$columnHeaders = @("Name",($Script:htmlsb),$PubItem.Name,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Run",($Script:htmlsb),$WinType,$htmlwhite))
				$rowdata += @(,("Target",($Script:htmlsb),$PubItem.Target,$htmlwhite))
				$rowdata += @(,("Start In",($Script:htmlsb),$PubItem.StartIn,$htmlwhite))
				$rowdata += @(,("Parameters",($Script:htmlsb),$PubItem.Parameters,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))

				$msg = "Application"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				
				OutputPubItemFilters $PubItem "HTML"
				
				OutputPubItemShortcuts $PubItem "HTML" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
		}
		ElseIf($PubItem.Type -eq "PCDesktop")
		{
			$DesktopSize = "Unable to determine"
			If($PubItem.DesktopSize -eq "FullScreen")
			{
				$DesktopSize = "Full Screen"
			}
			ElseIf($PubItem.DesktopSize -eq "UseAvailableArea")
			{
				$DesktopSize = "Use available area"
			}
			Else
			{
				$DesktopSize = "$($PubItem.Width.ToString())x$($PubItem.Height.ToString())"
			}
			
			If($PubItem.AllowMultiMonitor -eq "UseClientSettings")
			{
				$AllowMultiMonitor = "Use Client Settings"
			}
			Else
			{
				$AllowMultiMonitor = $PubItem.AllowMultiMonitor.ToString()
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
				
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Remote PC Desktop"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Desktop Size"; Value = $DesktopSize; }) > $Null
				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($DefaultStartPath)'"; }) > $Null
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($PubItem.StartPath)'"; }) > $Null
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Remote PC Desktop"
				WriteWordLine 4 0 "Remote PC Desktop"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 4 0 "Properties"
				$ScriptInformation = New-Object System.Collections.ArrayList
				#$ScriptInformation.Add(@{Data = "Select Remote PC"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "Desktop Size"; Value = $DesktopSize; }) > $Null
				$ScriptInformation.Add(@{Data = "Multi-Monitor"; Value = $AllowMultiMonitor; }) > $Null
				
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				OutputPubItemFilters $PubItem "MSWordPDF"

				OutputPubItemShortcuts $PubItem "MSWordPDF" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($Text)
			{
				Line 2 "Information"
				Line 3 "Remote PC Desktop`t`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				Line 3 "Desktop Size`t`t`t`t`t`t: " $DesktopSize

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						Line 3 "Create shortcut on desktop"
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						Line 3 "Create shortcut in Start Menu under " "'$($DefaultStartPath)'"
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						Line 3 "Create shortcut on desktop"
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						Line 3 "Create shortcut in Start Menu under " "'$($PubItem.StartPath)'"
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s):`t`t`t`t`t" $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}
				Line 0 ""

				Line 2 "Sites"
				Line 3 "This published item will be available from the following Sites"
				ForEach($Site in $PubItem.PublishToSite)
				{
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					Line 10 $SiteName
				}
				Line 0 ""

				Line 2 "Remote PC Desktop"
				Line 3 "Remote PC Desktop"
				Line 4 "Name`t`t`t`t`t`t: " $PubItem.Name
				Line 4 "Description`t`t`t`t`t: " $PubItem.Description
				Line 4 "Start automatically when user logs on`t`t: " $PubItem.StartOnLogon.ToString()
				Line 0 ""
				Line 3 "Properties"
				Line 4 "Desktop Size`t`t`t`t`t: " $DesktopSize
				Line 4 "Multi-Monitor`t`t`t`t`t: " $AllowMultiMonitor
				Line 0 ""

				OutputPubItemFilters $PubItem "Text"
				
				OutputPubItemShortcuts $PubItem "Text" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
				$rowdata = @()

				$columnHeaders = @("Remote PC Desktop",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Desktop Size",($Script:htmlsb),$DesktopSize,$htmlwhite))
				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($DefaultStartPath)'",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($PubItem.StartPath)'",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Sites"
				$rowdata = @()

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("This published item will be available from the following Sites",($Script:htmlsb),$SiteName,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Remote PC Desktop"
				$rowdata = @()
				$columnHeaders = @("Name",($Script:htmlsb),$PubItem.Name,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 4 0 "Properties"
				$rowdata = @()
				$columnHeaders = @("Select Remote PC",($Script:htmlsb),"",$htmlwhite)
				$rowdata += @(,("Desktop Size",($Script:htmlsb),$DesktopSize,$htmlwhite))
				$rowdata += @(,("Multi-Monitor",($Script:htmlsb),$AllowMultiMonitor,$htmlwhite))
				
				$msg = "Remote PC Desktop"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				OutputPubItemFilters $PubItem "HTML"

				OutputPubItemShortcuts $PubItem "HTML" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
		}
		ElseIf($PubItem.Type -eq "RDSApp")
		{
			Switch ($PubItem.ConCurrentLicenses)
			{
				0 		{$ConCurrentLicenses = "Unlimited"; Break}
				Default	{$ConCurrentLicenses = $PubItem.ConCurrentLicenses.ToString(); Break} 
			}
			
			Switch ($PubItem.DisableSessionSharing)
			{
				$False	{$SessionSharing = "Enabled"; Break}
				$True	{$SessionSharing = "Disabled"; Break}
				Default	{$SessionSharing = "Unable to determine Session Sharing state: $($PubItem.DisableSessionSharing)"; Break}
			}
			
			Switch ($PubItem.PublishFrom)
			{
				"All"		{$PublishedFrom = "All Servers in Site"; Break}
				"Group"		{$PublishedFrom = "Server Groups:"; Break}
				"Server"	{$PublishedFrom = "Individual Servers:"; Break}
				Default		{$PublishedFrom = "Unable to determine Published From: $($PubItem.PublishFrom)"; Break}
			}
			
			Switch ($PubItem.LicenseLimitNotify)
			{
				"WarnUserAndNoStart"		{$LicenseLimitNotify ="Warn user and do not start"; Break}
				"WarnUserAndStart"			{$LicenseLimitNotify ="Warn user and start"; Break}
				"NotifyAdminAndStart"		{$LicenseLimitNotify ="Notify administrator and start"; Break}
				"NotifyUserAdminAndStart"	{$LicenseLimitNotify ="Notify user, administrator and start"; Break}
				"NotifyUserAdminAndNoStart"	{$LicenseLimitNotify ="Notify user, administrator and do not start"; Break}
				Default	{$LicenseLimitNotify ="Unable to determine If limit is exceeded: $($PubItem.LicenseLimitNotify)"; Break}
			}
			
			Switch ($PubItem.ColorDepth)
			{
				"Colors8Bit"		{$ColorDepth = "256 Colors"; Break}
				"Colors15Bit"		{$ColorDepth = "High Color (15 bit)"; Break}
				"Colors16Bit"		{$ColorDepth = "High Color (16 bit)"; Break}
				"Colors24Bit"		{$ColorDepth = "True Color (24 bit)"; Break}
				"Colors32Bit"		{$ColorDepth = "Highest Quality (32 bit)"; Break}
				"ClientSpecified"	{$ColorDepth = "Client Specified"; Break}
				Default				{$ColorDepth = "Unable to determine Color Depth: $($PubItem.ColorDepth)"; Break}
			}
			
			Switch($PubItem.EnabledMode)
			{
				"Disabled"		{$PubItemMode = "Disabled"; Break}
				"Enabled"		{$PubItemMode = "Enabled"; Break}
				"Maintenance"	{$PubItemMode = "In maintenance"; Break}
				Default			{$PubItemMode = "Unable to determine Enabled Mode: $($PubItem.EnabledMode)"; Break}
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Application"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Status"; Value = $PubItemMode; }) > $Null
				$ScriptInformation.Add(@{Data = "Target"; Value = $PubItem.Target; }) > $Null
				$ScriptInformation.Add(@{Data = "Start In"; Value = $PubItem.StartIn; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					$ScriptInformation.Add(@{Data = "Parameters"; Value = $PubItem.Parameters; }) > $Null
				}
				
				If($PubItem.EnableFileExtensions)
				{
					$ScriptInformation.Add(@{Data = "Associate the following file extensions"; Value = ""; }) > $Null
					ForEach($Item in $PubItem.FileExtensions)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				
				If($PubItem.InheritLicenseDefaultSettings)
				{
					If($DefaultOneInstancePerUser)
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "True"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "False"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "Concurrent licenses"; Value = $DefaultConCurrentLicenses; }) > $Null
					$ScriptInformation.Add(@{Data = "If limit is exceeded"; Value = $DefaultLicenseLimitNotify; }) > $Null
					$ScriptInformation.Add(@{Data = "Session Sharing"; Value = $DefaultDisableSessionSharing ; }) > $Null
				}
				Else
				{
					If($PubItem.OneInstancePerUser)
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "True"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "False"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "Concurrent licenses"; Value = $ConCurrentLicenses; }) > $Null
					$ScriptInformation.Add(@{Data = "If limit is exceeded"; Value = $LicenseLimitNotify; }) > $Null
					$ScriptInformation.Add(@{Data = "Session Sharing"; Value = $SessionSharing; }) > $Null
				}

				$ScriptInformation.Add(@{Data = "Settings for Site $xSiteName"; Value = ""; }) > $Null
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Published from"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Published from"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Published from"; Value = "All Servers in Site"; }) > $Null
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($DefaultStartPath)'"; }) > $Null
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($PubItem.StartPath)'"; }) > $Null
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Publish from"
				$ScriptInformation = New-Object System.Collections.ArrayList
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = ""; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Application"
				WriteWordLine 4 0 "Application"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Run"; Value = $WinType; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				WriteWordLine 4 0 "Server settings"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Target"; Value = $PubItem.Target; }) > $Null
				$ScriptInformation.Add(@{Data = "Start in"; Value = $PubItem.StartIn; }) > $Null
				$ScriptInformation.Add(@{Data = "Parameters"; Value = $PubItem.Parameters; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				OutputPubItemFilters $PubItem "MSWordPDF"
				
				OutputPubItemShortcuts $PubItem "MSWordPDF" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings

				WriteWordLine 3 0 "File extensions"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Associate File Extensions"; Value = $PubItem.EnableFileExtensions.ToString(); }) > $Null

				If($PubItem.EnableFileExtensions)
				{
					$cnt = -1
					ForEach($Item in $PubItem.FileExtensions)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Extension"; Value = $Item; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
						}
					}
				}
				$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $PubItem.ReplicateFileExtensionSettings.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "License"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $PubItem.InheritLicenseDefaultSettings.ToString(); }) > $Null

				If($PubItem.InheritLicenseDefaultSettings)
				{
					$ScriptInformation.Add(@{Data = "Session Sharing"; Value = $DefaultDisableSessionSharing ; }) > $Null
					If($DefaultOneInstancePerUser)
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "True"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "False"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "Concurrent licenses"; Value = $DefaultConCurrentLicenses; }) > $Null
					$ScriptInformation.Add(@{Data = "If limit is exceeded"; Value = $DefaultLicenseLimitNotify; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Session Sharing"; Value = $SessionSharing; }) > $Null
					If($PubItem.OneInstancePerUser)
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "True"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "False"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "Concurrent licenses"; Value = $ConCurrentLicenses; }) > $Null
					$ScriptInformation.Add(@{Data = "If limit is exceeded"; Value = $LicenseLimitNotify; }) > $Null
				}
				If($PubItem.InheritLicenseDefaultSettings)
				{
					$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $DefaultReplicateLicenseSettings.ToString(); }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $PubItem.ReplicateLicenseSettings.ToString(); }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Display"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $PubItem.InheritDisplayDefaultSettings.ToString(); }) > $Null

				If($PubItem.InheritDisplayDefaultSettings)
				{
					$ScriptInformation.Add(@{Data = "Wait until all RAS Universal Printers are redirected before showing the application"; Value = $DefaultWaitForPrinters; }) > $Null
					$ScriptInformation.Add(@{Data = "Maximum time to wait is"; Value = "$($DefaultWaitForPrintersTimeout) seconds"; }) > $Null
					$ScriptInformation.Add(@{Data = "Color Depth"; Value = $DefaultColorDepth; }) > $Null
					$ScriptInformation.Add(@{Data = "Start the application as maximized when using mobile clients"; Value = $DefaultStartMaximized; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Wait until all RAS Universal Printers are redirected before showing the application"; Value = $PubItem.WaitForPrinters.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Maximum time to wait is"; Value = "$($PubItem.WaitForPrintersTimeout.ToString()) seconds"; }) > $Null
					$ScriptInformation.Add(@{Data = "Color Depth"; Value = $ColorDepth; }) > $Null
					$ScriptInformation.Add(@{Data = "Start the application as maximized when using mobile clients"; Value = $PubItem.StartMaximized.ToString(); }) > $Null
				}
				If($PubItem.InheritDisplayDefaultSettings)
				{
					$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $DefaultReplicateDisplaySettings.ToString(); }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $PubItem.ReplicateDisplaySettings.ToString(); }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null

				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "Information"
				Line 3 "Application`t`t`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				Line 3 "Status`t`t`t`t`t`t`t: " $PubItemMode
				Line 3 "Target`t`t`t`t`t`t`t: " $PubItem.Target
				Line 3 "Start In`t`t`t`t`t`t: " $PubItem.StartIn
				Line 3 "Start automatically when user logs on`t`t`t: " $PubItem.StartOnLogon.ToString()
				
				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					Line 3 "Parameters`t`t`t`t`t`t: " $PubItem.Parameters
				}
				
				If($PubItem.EnableFileExtensions)
				{
					Line 3 "Associate the following file extensions"
					ForEach($Item in $PubItem.FileExtensions)
					{
						Line 10 "  " $Item
					}
				}
				
				If($PubItem.InheritLicenseDefaultSettings)
				{
					Line 3 "Allow users to start only 1 instance of this application: " $DefaultOneInstancePerUser.ToString()
					Line 3 "Concurrent licenses`t`t`t`t`t: " $DefaultConCurrentLicenses
					Line 3 "If limit is exceeded`t`t`t`t`t: " $DefaultLicenseLimitNotify
					Line 3 "Session Sharing`t`t`t`t`t`t: " $DefaultDisableSessionSharing 
				}
				Else
				{
					Line 3 "Allow users to start only 1 instance of this application: " $PubItem.OneInstancePerUser.ToString()
					Line 3 "Concurrent licenses`t`t`t`t`t: " $ConCurrentLicenses
					Line 3 "If limit is exceeded`t`t`t`t`t: " $LicenseLimitNotify
					Line 3 "Session Sharing`t`t`t`t`t`t: " $SessionSharing
				}

				Line 3 "Settings for Site $xSiteName"
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						If($cnt -eq 0)
						{
							Line 3 "Published from`t`t`t`t`t`t: " ItemName
						}
						Else
						{
							Line 10 $ItemName
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							Line 3 "Published from`t`t`t`t`t`t: " ItemName
						}
						Else
						{
							Line 10 $ItemName
						}
					}
				}
				Else
				{
					Line 3 "Published from`t`t`t`t`t`t: " "All Servers in Site"
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						Line 3 "Create shortcut on desktop"
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						Line 3 "Create shortcut in Start Menu under " "'$($DefaultStartPath)'"
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						Line 3 "Create shortcut on desktop"
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						Line 3 "Create shortcut in Start Menu under " "'$($PubItem.StartPath)'"
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s)`t`t`t`t`t: " $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}
				Line 0 ""

				Line 2 "Sites"
				Line 3 "This published item will be available from the following Sites"
				ForEach($Site in $PubItem.PublishToSite)
				{
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					Line 10 $SiteName
				}
				Line 0 ""

				Line 2 "Publish from"
				Line 3 $PublishedFrom
				If($PubItem.PublishFrom -eq "Server")
				{
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						Line 6 $ItemName
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						Line 5 $ItemName
					}
				}
				Line 0 ""

				Line 2 "Application"
				Line 3 "Application"
				Line 4 "Name`t`t`t`t`t`t":  $PubItem.Name
				Line 4 "Description`t`t`t`t`t: " $PubItem.Description
				Line 4 "Run`t`t`t`t`t`t: " $WinType
				Line 4 "Start automatically when user logs on`t`t: " $PubItem.StartOnLogon.ToString()
				Line 0 ""
				
				Line 3 "Server settings"
				Line 4 "Target`t`t`t`t`t`t: " $PubItem.Target
				Line 4 "Start in`t`t`t`t`t: " $PubItem.StartIn
				Line 4 "Parameters`t`t`t`t`t: " $PubItem.Parameters
				Line 0 ""
				
				OutputPubItemFilters $PubItem "Text"
				
				OutputPubItemShortcuts $PubItem "Text" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings

				Line 2 "File extensions"
				Line 3 "Associate File Extensions`t`t`t`t: " $PubItem.EnableFileExtensions.ToString()

				If($PubItem.EnableFileExtensions)
				{
					$cnt = -1
					ForEach($Item in $PubItem.FileExtensions)
					{
						$cnt++
						If($cnt -eq 0 )
						{
							Line 8 "Extension`t: " $Item
						}
						Else
						{
							Line 10 "  " $Item
						}
					}
				}
				Line 3 "Settings are replicated to all Sites`t`t`t: " $PubItem.ReplicateFileExtensionSettings.ToString()
				Line 0 ""

				Line 2 "License"
				Line 3 "Inherit default settings`t`t`t`t: " $PubItem.InheritLicenseDefaultSettings.ToString()

				If($PubItem.InheritLicenseDefaultSettings)
				{
					Line 3 "Session Sharing`t`t`t`t`t`t: " $DefaultDisableSessionSharing
					Line 3 "Allow users to start only 1 instance of this application: " $DefaultOneInstancePerUser.ToString()
					Line 3 "Concurrent licenses`t`t`t`t`t: " $DefaultConCurrentLicenses
					Line 3 "If limit is exceeded`t`t`t`t`t: " $DefaultLicenseLimitNotify
				}
				Else
				{
					Line 3 "Session Sharing`t`t`t`t`t`t: " $SessionSharing
					Line 3 "Allow users to start only 1 instance of this application: " $PubItem.OneInstancePerUser.ToString()
					Line 3 "Concurrent licenses`t`t`t`t`t: " $ConCurrentLicenses
					Line 3 "If limit is exceeded`t`t`t`t`t: " $LicenseLimitNotify
				}

				If($PubItem.InheritLicenseDefaultSettings)
				{
					Line 3 "Settings are replicated to all Sites`t`t`t: " $DefaultReplicateLicenseSettings.ToString()
				}
				Else
				{
					Line 3 "Settings are replicated to all Sites`t`t`t: " $PubItem.ReplicateLicenseSettings.ToString()
				}
				Line 0 ""

				Line 2 "Display"
				Line 3 "Inherit default settings`t`t`t`t: " $PubItem.InheritDisplayDefaultSettings.ToString()

				If($PubItem.InheritDisplayDefaultSettings)
				{
					Line 3 "Wait until all RAS Universal Printers are redirected "
					Line 3 "before showing the application`t`t`t`t: " $DefaultWaitForPrinters
					Line 3 "Maximum time to wait is`t`t`t`t`t: " "$($DefaultWaitForPrintersTimeout) seconds"
					Line 3 "Color Depth`t`t`t`t`t`t: " $DefaultColorDepth
					Line 3 "Start the application as maximized "
					Line 3 "when using mobile clients`t`t`t`t: " $DefaultStartMaximized
				}
				Else
				{
					Line 3 "Wait until all RAS Universal Printers are redirected "
					Line 3 "before showing the application`t`t`t`t: " $PubItem.WaitForPrinters.ToString()
					Line 3 "Maximum time to wait is`t`t`t`t`t: " "$($PubItem.WaitForPrintersTimeout.ToString()) seconds"
					Line 3 "Color Depth`t`t`t`t`t`t: " $ColorDepth
					Line 3 "Start the application as maximized "
					Line 3 "when using mobile clients`t`t`t`t: " $PubItem.StartMaximized.ToString()
				}

				Line 3 "Settings are replicated to all Sites`t`t`t: " $PubItem.ReplicateDisplaySettings.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
				$rowdata = @()

				$columnHeaders = @("Application",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Status",($Script:htmlsb),$PubItemMode,$htmlwhite))
				$rowdata += @(,("Target",($Script:htmlsb),$PubItem.Target,$htmlwhite))
				$rowdata += @(,("Start In",($Script:htmlsb),$PubItem.StartIn,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))
				
				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					$rowdata += @(,("Parameters",($Script:htmlsb),$PubItem.Parameters,$htmlwhite))
				}
				
				If($PubItem.EnableFileExtensions)
				{
					$rowdata += @(,("Associate the following file extensions",($Script:htmlsb),"",$htmlwhite))
					ForEach($Item in $PubItem.FileExtensions)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				
				If($PubItem.InheritLicenseDefaultSettings)
				{
					If($DefaultOneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$rowdata += @(,("Concurrent licenses",($Script:htmlsb),$DefaultConCurrentLicenses,$htmlwhite))
					$rowdata += @(,("If limit is exceeded",($Script:htmlsb),$DefaultLicenseLimitNotify,$htmlwhite))
					$rowdata += @(,("Session Sharing",($Script:htmlsb),$DefaultDisableSessionSharing,$htmlwhite))
				}
				Else
				{
					If($PubItem.OneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$rowdata += @(,("Concurrent licenses",($Script:htmlsb),$ConCurrentLicenses,$htmlwhite))
					$rowdata += @(,("If limit is exceeded",($Script:htmlsb),$LicenseLimitNotify,$htmlwhite))
					$rowdata += @(,("Session Sharing",($Script:htmlsb),$SessionSharing,$htmlwhite))
				}

				$rowdata += @(,("Settings for Site $xSiteName",($Script:htmlsb),"",$htmlwhite))
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						If($cnt -eq 0)
						{
							$rowdata += @(,("Published from",($Script:htmlsb),$ItemName,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							$rowdata += @(,("Published from",($Script:htmlsb),$ItemName,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				Else
				{
					$rowdata += @(,("Published from",($Script:htmlsb),"All Servers in Site",$htmlwhite))
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($DefaultStartPath)'",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($PubItem.StartPath)'",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}
			
				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Sites"
				$rowdata = @()

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("This published item will be available from the following Sites",($Script:htmlsb),$SiteName,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Publish from"
				$rowdata = @()
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$columnHeaders = @("$PublishedFrom",($Script:htmlsb),$ItemName,$htmlwhite)
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						
						If($cnt -eq 0)
						{
							$columnHeaders = @("$PublishedFrom",($Script:htmlsb),$ItemName,$htmlwhite)
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				Else
				{
					$columnHeaders = @("$PublishedFrom",($Script:htmlsb),"",$htmlwhite)
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Application"
				$rowdata = @()

				$columnHeaders = @("Name",($Script:htmlsb),$PubItem.Name,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Run",($Script:htmlsb),$WinType,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))

				$msg = "Application"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				
				$rowdata = @()
				$columnHeaders = @("Server(s)",($Script:htmlsb),"",$htmlwhite)
				$rowdata += @(,("Target",($Script:htmlsb),$PubItem.Target,$htmlwhite))
				$rowdata += @(,("Start in",($Script:htmlsb),$PubItem.StartIn,$htmlwhite))
				$rowdata += @(,("Parameters",($Script:htmlsb),$PubItem.Parameters,$htmlwhite))

				$msg = "Server settings"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				OutputPubItemFilters $PubItem "HTML"
				
				OutputPubItemShortcuts $PubItem "HTML" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings

				WriteHTMLLine 3 0 "File extensions"
				$rowdata = @()
				$columnHeaders = @("Associate File Extensions",($Script:htmlsb),$PubItem.EnableFileExtensions.ToString(),$htmlwhite)
				
				If($PubItem.EnableFileExtensions)
				{
					$cnt = -1
					ForEach($Item in $PubItem.FileExtensions)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("Extension",($Script:htmlsb),$Item,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
						}
					}
				}
				$rowdata += @(,("Settings are replicated to all Sites: ",($Script:htmlsb),$PubItem.ReplicateFileExtensionSettings.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths

				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "License"
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$PubItem.InheritLicenseDefaultSettings.ToString(),$htmlwhite)

				If($PubItem.InheritLicenseDefaultSettings)
				{
					$rowdata += @(,("Session Sharing",($Script:htmlsb),$DefaultDisableSessionSharing,$htmlwhite))
					If($DefaultOneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$rowdata += @(,("Concurrent licenses",($Script:htmlsb),$DefaultConCurrentLicenses,$htmlwhite))
					$rowdata += @(,("If limit is exceeded",($Script:htmlsb),$DefaultLicenseLimitNotify,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Session Sharing",($Script:htmlsb),$SessionSharing,$htmlwhite))
					If($PubItem.OneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$rowdata += @(,("Concurrent licenses",($Script:htmlsb),$ConCurrentLicenses,$htmlwhite))
					$rowdata += @(,("If limit is exceeded",($Script:htmlsb),$LicenseLimitNotify,$htmlwhite))
				}
				If($PubItem.InheritLicenseDefaultSettings)
				{
					$rowdata += @(,("Settings are replicated to all Sites: ",($Script:htmlsb),$DefaultReplicateLicenseSettings.ToString(),$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Settings are replicated to all Sites: ",($Script:htmlsb),$PubItem.ReplicateLicenseSettings.ToString(),$htmlwhite))
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Display"
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$PubItem.InheritDisplayDefaultSettings.ToString(),$htmlwhite)

				If($PubItem.InheritDisplayDefaultSettings)
				{
					$rowdata += @(,("Wait until all RAS Universal Printers are redirected before showing the application",($Script:htmlsb),$DefaultWaitForPrinters,$htmlwhite))
					$rowdata += @(,("Maximum time to wait is",($Script:htmlsb),"$($DefaultWaitForPrintersTimeout) seconds",$htmlwhite))
					$rowdata += @(,("Color Depth",($Script:htmlsb),$DefaultColorDepth,$htmlwhite))
					$rowdata += @(,("Start the application as maximized when using mobile clients",($Script:htmlsb),$DefaultStartMaximized,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Wait until all RAS Universal Printers are redirected before showing the application",($Script:htmlsb),$PubItem.WaitForPrinters.ToString(),$htmlwhite))
					$rowdata += @(,("Maximum time to wait is",($Script:htmlsb),"$($PubItem.WaitForPrintersTimeout.ToString()) seconds",$htmlwhite))
					$rowdata += @(,("Color Depth",($Script:htmlsb),$ColorDepth,$htmlwhite))
					$rowdata += @(,("Start the application as maximized when using mobile clients",($Script:htmlsb),$PubItem.StartMaximized.ToString(),$htmlwhite))
				}
				$rowdata += @(,("Settings are replicated to all Sites: ",($Script:htmlsb),$PubItem.ReplicateDisplaySettings.ToString(),$htmlwhite))

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths

				WriteHTMLLine 0 0 ""
			}
		}
		ElseIf($PubItem.Type -eq "RDSDesktop")
		{
			$DesktopSize = "Unable to determine"
			If($PubItem.DesktopSize -eq "FullScreen")
			{
				$DesktopSize = "Full Screen"
			}
			ElseIf($PubItem.DesktopSize -eq "UseAvailableArea")
			{
				$DesktopSize = "Use available area"
			}
			Else
			{
				$DesktopSize = "$($PubItem.Width.ToString())x$($PubItem.Height.ToString())"
			}
			
			Switch ($PubItem.PublishFrom)
			{
				"All"		{$PublishedFrom = "All Servers in Site"; Break}
				"Group"		{$PublishedFrom = "Groups:"; Break}
				"Server"	{$PublishedFrom = "Individual Servers:"; Break}
				Default		{$PublishedFrom = "Unable to determine Published From: $($PubItem.PublishFrom)"; Break}
			}
			
			If($PubItem.AllowMultiMonitor -eq "UseClientSettings")
			{
				$AllowMultiMonitor = "Use Client Settings"
			}
			Else
			{
				$AllowMultiMonitor = $PubItem.AllowMultiMonitor.ToString()
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "RD Session Host Desktop"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Connect to administrative session"; Value = $PubItem.ConnectToConsole.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Desktop Size"; Value = $DesktopSize; }) > $Null
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Published from"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Published from"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Published from"; Value = "All Servers in Site"; }) > $Null
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($DefaultStartPath)'"; }) > $Null
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($PubItem.StartPath)'"; }) > $Null
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Publish from"
				$ScriptInformation = New-Object System.Collections.ArrayList
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = ""; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Desktop"
				WriteWordLine 4 0 "Desktop"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Connect to administrative session"; Value = $PubItem.ConnectToConsole.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				WriteWordLine 4 0 "Properties"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Desktop size"; Value = $DesktopSize; }) > $Null
				$ScriptInformation.Add(@{Data = "Multi-Monitor"; Value = $AllowMultiMonitor; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				OutputPubItemFilters $PubItem "MSWordPDF"
				
				OutputPubItemShortcuts $PubItem "MSWordPDF" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($Text)
			{
				Line 2 "Information"
				Line 3 "RD Session Host Desktop`t`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				Line 3 "Connect to administrative session`t`t`t: " $PubItem.ConnectToConsole.ToString()
				Line 3 "Desktop Size`t`t`t`t`t`t: " $DesktopSize
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						If($cnt -eq 0)
						{
							Line 3 "Published from`t`t`t`t`t`t: " ItemName
						}
						Else
						{
							Line 10 $ItemName
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							Line 3 "Published from`t`t`t`t`t`t: " ItemName
						}
						Else
						{
							Line 10 $ItemName
						}
					}
				}
				Else
				{
					Line 3 "Published from`t`t`t`t`t`t: " "All Servers in Site"
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						Line 3 "Create shortcut on desktop"
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						Line 3 "Create shortcut in Start Menu under " "'$($DefaultStartPath)'"
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						Line 3 "Create shortcut on desktop"
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						Line 3 "Create shortcut in Start Menu under " "'$($PubItem.StartPath)'"
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s)`t`t`t`t`t: " $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}
				Line 0 ""

				Line 2 "Sites"
				Line 3 "This published item will be available from the following Sites"
				ForEach($Site in $PubItem.PublishToSite)
				{
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					Line 10 $SiteName
				}
				Line 0 ""

				Line 2 "Publish from"
				Line 3 $PublishedFrom
				If($PubItem.PublishFrom -eq "Server")
				{
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						Line 6 $ItemName
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						Line 5 $ItemName
					}
				}
				Line 0 ""
				
				Line 2 "Desktop"
				Line 3 "Desktop"
				Line 4 "Name`t`t`t`t`t`t: " $PubItem.Name
				Line 4 "Description`t`t`t`t`t: " $PubItem.Description
				Line 4 "Connect to administrative session`t`t: " $PubItem.ConnectToConsole.ToString()
				Line 4 "Start automatically when user logs on`t`t: " $PubItem.StartOnLogon.ToString()
				Line 0 ""
				
				Line 3 "Properties"
				Line 4 "Desktop size`t`t`t`t`t: " $DesktopSize
				Line 4 "Multi-Monitor`t`t`t`t`t: " $AllowMultiMonitor
				Line 0 ""

				OutputPubItemFilters $PubItem "Text"
				
				OutputPubItemShortcuts $PubItem "Text" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
				$rowdata = @()
				$columnHeaders = @("RD Session Host Desktop",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Connect to administrative session",($Script:htmlsb),$PubItem.ConnectToConsole.ToString(),$htmlwhite))
				$rowdata += @(,("Desktop Size",($Script:htmlsb),$DesktopSize,$htmlwhite))
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						If($cnt -eq 0)
						{
							$rowdata += @(,("Published from",($Script:htmlsb),$ItemName,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							$rowdata += @(,("Published from",($Script:htmlsb),$ItemName,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				Else
				{
					$rowdata += @(,("Published from",($Script:htmlsb),"All Servers in Site",$htmlwhite))
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($DefaultStartPath)'",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($PubItem.StartPath)'",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}
			
				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Sites"
				$rowdata = @()

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("This published item will be available from the following Sites",($Script:htmlsb),$SiteName,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Publish from"
				$rowdata = @()
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$columnHeaders = @("$PublishedFrom",($Script:htmlsb),$ItemName,$htmlwhite)
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						
						If($cnt -eq 0)
						{
							$columnHeaders = @("$PublishedFrom",($Script:htmlsb),$ItemName,$htmlwhite)
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				Else
				{
					$columnHeaders = @("$PublishedFrom",($Script:htmlsb),"",$htmlwhite)
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Desktop"
				$rowdata = @()

				$columnHeaders = @("Name",($Script:htmlsb),$PubItem.Name,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Connect to administrative session",($Script:htmlsb),$PubItem.ConnectToConsole.ToString(),$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))

				$msg = "Desktop"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				
				$rowdata = @()
				$columnHeaders = @("Desktop size",($Script:htmlsb),$DesktopSize,$htmlwhite)
				$rowdata += @(,("Multi-Monitor",($Script:htmlsb),$AllowMultiMonitor,$htmlwhite))

				$msg = "Properties"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				OutputPubItemFilters $PubItem "HTML"
				
				OutputPubItemShortcuts $PubItem "HTML" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
		}
		ElseIf($PubItem.Type -eq "VDIApp")
		{
			Switch($PubItem.ConnectTo)
			{
				"AnyGuest"				{$ConnectTo = "Any Guest VM"; Break}
				"SpecificRASTemplate"	{$ConnectTo = "Specific Template ($($PubItem.SelectedGuests[0].VDIGuestName))"; Break
										}
				Default					{$ConnectTo = "Unable to determine Connect To: $($PubItem.ConnectTo)"; Break}
			}
			
			$results = Get-RASVDIPool -Id $PubItem.VDIPoolId -EA 0 4>$Null
			
			If($? -and $Null -ne $results)
			{
				$FromPool = $results.Name
			}
			ElseIf($? -and $Null -eq $results)
			{
				$FromPool = "VDI Pool not found for Pool Id $($PubItem.VDIPoolId)"
			}
			Else
			{
				$FromPool = "Unable to retrieve VDI Pool for Pool Id $($PubItem.VDIPoolId)"
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Virtual Desktop Application"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Target"; Value = $PubItem.Target; }) > $Null
				$ScriptInformation.Add(@{Data = "Start In"; Value = $PubItem.StartIn; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					$ScriptInformation.Add(@{Data = "Parameters"; Value = $PubItem.Parameters; }) > $Null
				}
				
				$ScriptInformation.Add(@{Data = "Connect To"; Value = $ConnectTo; }) > $Null
				$ScriptInformation.Add(@{Data = "From Pool"; Value = $FromPool; }) > $Null
				$ScriptInformation.Add(@{Data = "Settings for Site $xSiteName"; Value = ""; }) > $Null
				
				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($DefaultStartPath)'"; }) > $Null
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($PubItem.StartPath)'"; }) > $Null
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Virtual Desktop Application"
				WriteWordLine 4 0 "Application"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Run"; Value = $WinType; }) > $Null
				$ScriptInformation.Add(@{Data = "Target"; Value = $PubItem.Target; }) > $Null
				$ScriptInformation.Add(@{Data = "Start In"; Value = $PubItem.StartIn; }) > $Null
				$ScriptInformation.Add(@{Data = "Parameters"; Value = $PubItem.Parameters; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				WriteWordLine 4 0 "Virtual Guest settings"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Connect to"; Value = $ConnectTo; }) > $Null
				$ScriptInformation.Add(@{Data = "from Pool"; Value = $FromPool; }) > $Null
				$ScriptInformation.Add(@{Data = "Persistent"; Value = $PubItem.Persistent.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				OutputPubItemFilters $PubItem "MSWordPDF"
				
				OutputPubItemShortcuts $PubItem "MSWordPDF" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($Text)
			{
				Line 2 "Information"
				Line 3 "Virtual Desktop Application`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				Line 3 "Target`t`t`t`t`t`t`t: " $PubItem.Target
				Line 3 "Start In`t`t`t`t`t`t: " $PubItem.StartIn
				Line 3 "Start automatically when user logs on`t`t`t: " $PubItem.StartOnLogon.ToString()
				
				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					Line 3 "Parameters`t`t`t`t`t`t: " $PubItem.Parameters
				}
				
				Line 3 "Connect To`t`t`t`t`t`t: " $ConnectTo
				Line 3 "From Pool`t`t`t`t`t`t: " $FromPool
				Line 3 "Settings for Site $xSiteName"

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						Line 3 "Create shortcut on desktop"
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						Line 3 "Create shortcut in Start Menu under " "'$($DefaultStartPath)'"
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						Line 3 "Create shortcut on desktop"
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						Line 3 "Create shortcut in Start Menu under " "'$($PubItem.StartPath)'"
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s)`t`t`t`t`t: " $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}
				Line 0 ""

				Line 2 "Sites"
				Line 3 "This published item will be available from the following Sites"
				ForEach($Site in $PubItem.PublishToSite)
				{
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					Line 10 $SiteName
				}
				Line 0 ""

				Line 2 "Virtual Guest settings"
				Line 3 "Application"
				Line 4 "Name`t`t`t`t`t`t: " $PubItem.Name
				Line 4 "Description`t`t`t`t`t: " $PubItem.Description
				Line 4 "Run`t`t`t`t`t`t: " $WinType
				Line 4 "Target`t`t`t`t`t`t: " $PubItem.Target
				Line 4 "Start In`t`t`t`t`t: " $PubItem.StartIn
				Line 4 "Parameters`t`t`t`t`t: " $PubItem.Parameters
				Line 4 "Start automatically when user logs on`t`t: " $PubItem.StartOnLogon.ToString()
				Line 0 ""
				
				Line 3 "Application"
				Line 4 "Connect to`t`t`t`t`t: " $ConnectTo
				Line 4 "from Pool`t`t`t`t`t: " $FromPool
				Line 4 "Persistent`t`t`t`t`t: " $PubItem.Persistent.ToString()
				Line 0 ""
				
				OutputPubItemFilters $PubItem "Text"
				
				OutputPubItemShortcuts $PubItem "Text" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
				$rowdata = @()

				$columnHeaders = @("Virtual Desktop Application",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Target",($Script:htmlsb),$PubItem.Target,$htmlwhite))
				$rowdata += @(,("Start In",($Script:htmlsb),$PubItem.StartIn,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))
				
				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					$rowdata += @(,("Parameters",($Script:htmlsb),$PubItem.Parameters,$htmlwhite))
				}
				
				$rowdata += @(,("Connect To",($Script:htmlsb),$ConnectTo,$htmlwhite))
				$rowdata += @(,("From Pool",($Script:htmlsb),$FromPool,$htmlwhite))
				$rowdata += @(,("Settings for Site $xSiteName",($Script:htmlsb),"",$htmlwhite))
				
				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($DefaultStartPath)'",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($PubItem.StartPath)'",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}
			
				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Sites"
				$rowdata = @()

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("This published item will be available from the following Sites",($Script:htmlsb),$SiteName,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Virtual Guest settings"
				$rowdata = @()

				$columnHeaders = @("Name",($Script:htmlsb),$PubItem.Name,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Run",($Script:htmlsb),$WinType,$htmlwhite))
				$rowdata += @(,("Target",($Script:htmlsb),$PubItem.Target,$htmlwhite))
				$rowdata += @(,("Start In",($Script:htmlsb),$PubItem.StartIn,$htmlwhite))
				$rowdata += @(,("Parameters",($Script:htmlsb),$PubItem.Parameters,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))

				$msg = "Application"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				
				$rowdata = @()

				$columnHeaders = @("Connect To",($Script:htmlsb),$ConnectTo,$htmlwhite)
				$rowdata += @(,("from Pool",($Script:htmlsb),$FromPool,$htmlwhite))
				$rowdata += @(,("Persistent",($Script:htmlsb),$PubItem.Persistent.ToString(),$htmlwhite))

				$msg = "Virtual Guest settings"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				
				OutputPubItemFilters $PubItem "HTML"
				
				OutputPubItemShortcuts $PubItem "HTML" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
		}
		ElseIf($PubItem.Type -eq "VDIDesktop")
		{
			Switch($PubItem.ConnectTo)
			{
				"AnyGuest"				{$ConnectTo = "Any Guest VM"; Break}
				"SpecificRASTemplate"	{$ConnectTo = "Specific Template ($($PubItem.SelectedGuests[0].VDIGuestName))"; Break}
				Default					{$ConnectTo = "Unable to determine Connect To: $($PubItem.ConnectTo)"; Break}
			}
			
			$DesktopSize = "Unable to determine"
			If($PubItem.DesktopSize -eq "FullScreen")
			{
				$DesktopSize = "Full Screen"
			}
			ElseIf($PubItem.DesktopSize -eq "UseAvailableArea")
			{
				$DesktopSize = "Use available area"
			}
			Else
			{
				$DesktopSize = "$($PubItem.Width.ToString())x$($PubItem.Height.ToString())"
			}

			If($PubItem.AllowMultiMonitor -eq "UseClientSettings")
			{
				$AllowMultiMonitor = "Use Client Settings"
			}
			Else
			{
				$AllowMultiMonitor = $PubItem.AllowMultiMonitor.ToString()
			}
			
			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Virtual Desktop"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Settings for Site $xSiteName"; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = "Connect to"; Value = $ConnectTo; }) > $Null
				
				If($PubItem.Persistent)
				{
					$ScriptInformation.Add(@{Data = "Published item is persistent"; Value = ""; }) > $Null
				}
				
				$ScriptInformation.Add(@{Data = "Desktop Size"; Value = $DesktopSize; }) > $Null

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($DefaultStartPath)'"; }) > $Null
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($PubItem.StartPath)'"; }) > $Null
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Virtual Desktop"
				WriteWordLine 4 0 "Virtual desktop"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 4 0 "Properties"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Connect to"; Value = $ConnectTo; }) > $Null
				$ScriptInformation.Add(@{Data = "Desktop Size"; Value = $DesktopSize; }) > $Null
				$ScriptInformation.Add(@{Data = "Multi-Monitor"; Value = $AllowMultiMonitor; }) > $Null
				$ScriptInformation.Add(@{Data = "Persistent"; Value = $PubItem.Persistent.ToString(); }) > $Null
				
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				OutputPubItemFilters $PubItem "MSWordPDF"
				
				OutputPubItemShortcuts $PubItem "MSWordPDF" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($Text)
			{
				Line 2 "Information"
				Line 3 "Virtual Desktop`t`t`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				Line 3 "Settings for Site $xSiteName"
				Line 3 "Connect to`t`t`t`t`t`t: " $ConnectTo
				
				If($PubItem.Persistent)
				{
					Line 3 "Published item is persistent"
				}
				
				Line 3 "Desktop Size`t`t`t`t`t`t: " $DesktopSize

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						Line 3 "Create shortcut on desktop"
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						Line 3 "Create shortcut in Start Menu under " "'$($DefaultStartPath)'"
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						Line 3 "Create shortcut on desktop"
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						Line 3 "Create shortcut in Start Menu under " "'$($PubItem.StartPath)'"
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s):`t`t`t`t`t" $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}
				Line 0 ""

				Line 2 "Sites"
				Line 3 "This published item will be available from the following Sites"
				ForEach($Site in $PubItem.PublishToSite)
				{
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					Line 10 $SiteName
				}
				Line 0 ""

				Line 2 "Virtual Desktop"
				Line 3 "Virtual desktop"
				Line 4 "Name`t`t`t`t`t`t: " $PubItem.Name
				Line 4 "Description`t`t`t`t`t: " $PubItem.Description
				Line 4 "Start automatically when user logs on`t`t: " $PubItem.StartOnLogon.ToString()
				Line 0 ""
				Line 3 "Properties"
				Line 4 "Connect to`t`t`t`t`t: " $ConnectTo
				Line 4 "Desktop Size`t`t`t`t`t: " $DesktopSize
				Line 4 "Multi-Monitor`t`t`t`t`t: " $AllowMultiMonitor
				Line 4 "Persistent`t`t`t`t`t: " $PubItem.Persistent.ToString()
				Line 0 ""

				OutputPubItemFilters $PubItem "Text"
				
				OutputPubItemShortcuts $PubItem "Text" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
				$rowdata = @()

				$columnHeaders = @("Virtual Desktop",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Settings for Site $xSiteName",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("Connect to",($Script:htmlsb),$ConnectTo,$htmlwhite))
				
				If($PubItem.Persistent)
				{
					$rowdata += @(,("Published item is persistent",($Script:htmlsb),"",$htmlwhite))
				}
				
				$rowdata += @(,("Desktop Size",($Script:htmlsb),$DesktopSize,$htmlwhite))

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($DefaultStartPath)'",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($PubItem.StartPath)'",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}
			
				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Sites"
				$rowdata = @()

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("This published item will be available from the following Sites",($Script:htmlsb),$SiteName,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Virtual Desktop"
				$rowdata = @()

				$columnHeaders = @("Name",($Script:htmlsb),$PubItem.Name,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))

				$msg = "Desktop"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				
				$rowdata = @()
				$columnHeaders = @("Connect to",($Script:htmlsb),$ConnectTo,$htmlwhite)
				$rowdata += @(,("Desktop size",($Script:htmlsb),$DesktopSize,$htmlwhite))
				$rowdata += @(,("Multi-Monitor",($Script:htmlsb),$AllowMultiMonitor,$htmlwhite))
				$rowdata += @(,("Persistent",($Script:htmlsb),$PubItem.Persistent.ToString(),$htmlwhite))

				$msg = "Properties"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				OutputPubItemFilters $PubItem "HTML"
				
				OutputPubItemShortcuts $PubItem "HTML" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
		}
		ElseIf($PubItem.Type -eq "WVDApp" -or ($PubItem.Type -eq "AVDApp")
		{
			Switch ($PubItem.ConCurrentLicenses)
			{
				0 		{$ConCurrentLicenses = "Unlimited"; Break}
				Default	{$ConCurrentLicenses = $PubItem.ConCurrentLicenses.ToString(); Break} 
			}
			
			Switch ($PubItem.DisableSessionSharing)
			{
				$False	{$SessionSharing = "Enabled"; Break}
				$True	{$SessionSharing = "Disabled"; Break}
				Default	{$SessionSharing = "Unable to determine Session Sharing state: $($PubItem.DisableSessionSharing)"; Break}
			}
			
			Switch ($PubItem.PublishFrom)
			{
				"All"		{$PublishedFrom = "All Servers in Site"; Break}
				"Group"		{$PublishedFrom = "Server Groups:"; Break}
				"Server"	{$PublishedFrom = "Individual Servers:"; Break}
				Default		{$PublishedFrom = "Unable to determine Published From: $($PubItem.PublishFrom)"; Break}
			}
			
			Switch ($PubItem.LicenseLimitNotify)
			{
				"WarnUserAndNoStart"		{$LicenseLimitNotify ="Warn user and do not start"; Break}
				"WarnUserAndStart"			{$LicenseLimitNotify ="Warn user and start"; Break}
				"NotifyAdminAndStart"		{$LicenseLimitNotify ="Notify administrator and start"; Break}
				"NotifyUserAdminAndStart"	{$LicenseLimitNotify ="Notify user, administrator and start"; Break}
				"NotifyUserAdminAndNoStart"	{$LicenseLimitNotify ="Notify user, administrator and do not start"; Break}
				Default						{$LicenseLimitNotify ="Unable to determine If limit is exceeded: $($PubItem.LicenseLimitNotify)"; Break}
			}
			
			Switch ($PubItem.ColorDepth)
			{
				"Colors8Bit"		{$ColorDepth = "256 Colors"; Break}
				"Colors15Bit"		{$ColorDepth = "High Color (15 bit)"; Break}
				"Colors16Bit"		{$ColorDepth = "High Color (16 bit)"; Break}
				"Colors24Bit"		{$ColorDepth = "True Color (24 bit)"; Break}
				"Colors32Bit"		{$ColorDepth = "Highest Quality (32 bit)"; Break}
				"ClientSpecified"	{$ColorDepth = "Client Specified"; Break}
				Default				{$ColorDepth = "Unable to determine Color Depth: $($PubItem.ColorDepth)"; Break}
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Windows Virtual Desktop"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Target"; Value = $PubItem.Target; }) > $Null
				$ScriptInformation.Add(@{Data = "Start In"; Value = $PubItem.StartIn; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null

				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					$ScriptInformation.Add(@{Data = "Parameters"; Value = $PubItem.Parameters; }) > $Null
				}
				
				If($PubItem.EnableFileExtensions)
				{
					$ScriptInformation.Add(@{Data = "Associate the following file extensions"; Value = ""; }) > $Null
					ForEach($Item in $PubItem.FileExtensions)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				
				If($PubItem.InheritLicenseDefaultSettings)
				{
					If($DefaultOneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$ScriptInformation.Add(@{Data = "Concurrent licenses"; Value = $DefaultConCurrentLicenses; }) > $Null
					$ScriptInformation.Add(@{Data = "If limit is exceeded"; Value = $DefaultLicenseLimitNotify; }) > $Null
					$ScriptInformation.Add(@{Data = "Session Sharing"; Value = $DefaultDisableSessionSharing ; }) > $Null
				}
				Else
				{
					If($PubItem.OneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$ScriptInformation.Add(@{Data = "Concurrent licenses"; Value = $ConCurrentLicenses; }) > $Null
					$ScriptInformation.Add(@{Data = "If limit is exceeded"; Value = $LicenseLimitNotify; }) > $Null
					$ScriptInformation.Add(@{Data = "Session Sharing"; Value = $SessionSharing; }) > $Null
				}

				$ScriptInformation.Add(@{Data = "Settings for Site $xSiteName"; Value = ""; }) > $Null
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Published from"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Published from"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Published from"; Value = "All Servers in Site"; }) > $Null
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($DefaultStartPath)'"; }) > $Null
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($PubItem.StartPath)'"; }) > $Null
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Publish from"
				$ScriptInformation = New-Object System.Collections.ArrayList
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = ""; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Application"
				WriteWordLine 4 0 "Application"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Run"; Value = $WinType; }) > $Null
				$ScriptInformation.Add(@{Data = "Target"; Value = $PubItem.Target; }) > $Null
				$ScriptInformation.Add(@{Data = "Start in"; Value = $PubItem.StartIn; }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Exclude from session prelaunch"; Value = $PubItem.ExcludePrelaunch.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				OutputPubItemFilters $PubItem "MSWordPDF"
				
				OutputPubItemShortcuts $PubItem "MSWordPDF" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings

				WriteWordLine 3 0 "File extensions"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Associate File Extensions"; Value = $PubItem.EnableFileExtensions.ToString(); }) > $Null

				If($PubItem.EnableFileExtensions)
				{
					$cnt = -1
					ForEach($Item in $PubItem.FileExtensions)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Extension"; Value = $Item; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
						}
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null

				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $PubItem.ReplicateFileExtensionSettings.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 100;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "License"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $PubItem.InheritLicenseDefaultSettings.ToString(); }) > $Null

				If($PubItem.InheritLicenseDefaultSettings)
				{
					$ScriptInformation.Add(@{Data = "Session Sharing"; Value = $DefaultDisableSessionSharing ; }) > $Null
					If($DefaultOneInstancePerUser)
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "True"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "False"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "Concurrent licenses"; Value = $DefaultConCurrentLicenses; }) > $Null
					$ScriptInformation.Add(@{Data = "If limit is exceeded"; Value = $DefaultLicenseLimitNotify; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Session Sharing"; Value = $SessionSharing; }) > $Null
					If($PubItem.OneInstancePerUser)
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "True"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "Allow users to start only 1 instance of this application"; Value = "False"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "Concurrent licenses"; Value = $ConCurrentLicenses; }) > $Null
					$ScriptInformation.Add(@{Data = "If limit is exceeded"; Value = $LicenseLimitNotify; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				$ScriptInformation = New-Object System.Collections.ArrayList
				If($PubItem.InheritLicenseDefaultSettings)
				{
					$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $DefaultReplicateLicenseSettings.ToString(); }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $PubItem.ReplicateLicenseSettings.ToString(); }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 100;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Display"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Inherit default settings"; Value = $PubItem.InheritDisplayDefaultSettings.ToString(); }) > $Null

				If($PubItem.InheritDisplayDefaultSettings)
				{
					$ScriptInformation.Add(@{Data = "Wait until all RAS Universal Printers are redirected before showing the application"; Value = $DefaultWaitForPrinters; }) > $Null
					$ScriptInformation.Add(@{Data = "Maximum time to wait is"; Value = "$($DefaultWaitForPrintersTimeout) seconds"; }) > $Null
					$ScriptInformation.Add(@{Data = "Color Depth"; Value = $DefaultColorDepth; }) > $Null
					$ScriptInformation.Add(@{Data = "Start the application as maximized when using mobile clients"; Value = $DefaultStartMaximized; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Wait until all RAS Universal Printers are redirected before showing the application"; Value = $PubItem.WaitForPrinters.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "Maximum time to wait is"; Value = "$($PubItem.WaitForPrintersTimeout.ToString()) seconds"; }) > $Null
					$ScriptInformation.Add(@{Data = "Color Depth"; Value = $ColorDepth; }) > $Null
					$ScriptInformation.Add(@{Data = "Start the application as maximized when using mobile clients"; Value = $PubItem.StartMaximized.ToString(); }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				$ScriptInformation = New-Object System.Collections.ArrayList
				If($PubItem.InheritDisplayDefaultSettings)
				{
					$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $DefaultReplicateDisplaySettings.ToString(); }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $PubItem.ReplicateDisplaySettings.ToString(); }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 100;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			If($Text)
			{
				Line 2 "Information"
				Line 3 "Windows Virtual Desktop`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				Line 3 "Target`t`t`t`t`t`t`t: " $PubItem.Target
				Line 3 "Start In`t`t`t`t`t`t: " $PubItem.StartIn
				Line 3 "Start automatically when user logs on`t`t`t: " $PubItem.StartOnLogon.ToString()
				
				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					Line 3 "Parameters`t`t`t`t`t`t: " $PubItem.Parameters
				}
				
				If($PubItem.EnableFileExtensions)
				{
					Line 3 "Associate the following file extensions"
					ForEach($Item in $PubItem.FileExtensions)
					{
						Line 10 $Item
					}
				}
				
				If($PubItem.InheritLicenseDefaultSettings)
				{
					Line 3 "Allow users to start only 1 instance of this application: " $DefaultOneInstancePerUser.ToString()
					Line 3 "Concurrent licenses`t`t`t`t`t: " $DefaultConCurrentLicenses
					Line 3 "If limit is exceeded`t`t`t`t`t: " $DefaultLicenseLimitNotify
					Line 3 "Session Sharing`t`t`t`t`t`t: " $DefaultDisableSessionSharing 
				}
				Else
				{
					Line 3 "Allow users to start only 1 instance of this application: " $PubItem.OneInstancePerUser.ToString()
					Line 3 "Concurrent licenses`t`t`t`t`t: " $ConCurrentLicenses
					Line 3 "If limit is exceeded`t`t`t`t`t: " $LicenseLimitNotify
					Line 3 "Session Sharing`t`t`t`t`t`t: " $SessionSharing
				}

				Line 3 "Settings for Site $xSiteName"
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						If($cnt -eq 0)
						{
							Line 3 "Published from`t`t`t`t`t`t: " ItemName
						}
						Else
						{
							Line 10 $ItemName
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							Line 3 "Published from`t`t`t`t`t`t: " ItemName
						}
						Else
						{
							Line 10 $ItemName
						}
					}
				}
				Else
				{
					Line 3 "Published from`t`t`t`t`t`t: " "All Servers in Site"
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						Line 3 "Create shortcut on desktop"
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						Line 3 "Create shortcut in Start Menu under " "'$($DefaultStartPath)'"
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						Line 3 "Create shortcut on desktop"
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						Line 3 "Create shortcut in Start Menu under " "'$($PubItem.StartPath)'"
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s)`t`t`t`t`t: " $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}
				Line 0 ""

				Line 2 "Sites"
				Line 3 "This published item will be available from the following Sites"
				ForEach($Site in $PubItem.PublishToSite)
				{
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					Line 10 $SiteName
				}
				Line 0 ""

				Line 2 "Publish from"
				Line 3 $PublishedFrom
				If($PubItem.PublishFrom -eq "Server")
				{
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						Line 6 $ItemName
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						Line 5 $ItemName
					}
				}
				Line 0 ""

				Line 2 "Application"
				Line 3 "Application"
				Line 4 "Name`t`t`t`t`t`t":  $PubItem.Name
				Line 4 "Description`t`t`t`t`t: " $PubItem.Description
				Line 4 "Run`t`t`t`t`t`t: " $WinType
				Line 4 "Target`t`t`t`t`t`t: " $PubItem.Target
				Line 4 "Start in`t`t`t`t`t: " $PubItem.StartIn
				Line 4 "Parameters`t`t`t`t`t: " $PubItem.Parameters
				Line 4 "Start automatically when user logs on`t`t: " $PubItem.StartOnLogon.ToString()
				Line 4 "Exclude from session prelaunch`t`t`t: "; Value = $PubItem.ExcludePrelaunch.ToString()
				Line 0 ""
				
				OutputPubItemFilters $PubItem "Text"
				
				OutputPubItemShortcuts $PubItem "Text" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings

				Line 2 "File extensions"
				Line 3 "Associate File Extensions`t`t`t`t: " $PubItem.EnableFileExtensions.ToString()

				If($PubItem.EnableFileExtensions)
				{
					$cnt = -1
					ForEach($Item in $PubItem.FileExtensions)
					{
						$cnt++
						If($cnt -eq 0 )
						{
							Line 8 "Extension:`t" $Item
						}
						Else
						{
							Line 10 $Item
						}
					}
				}
				Line 3 "Settings are replicated to all Sites`t`t`t: " $PubItem.ReplicateFileExtensionSettings.ToString()
				Line 0 ""

				Line 2 "License"
				Line 3 "Inherit default settings`t`t`t`t: " $PubItem.InheritLicenseDefaultSettings.ToString()

				If($PubItem.InheritLicenseDefaultSettings)
				{
					Line 3 "Session Sharing`t`t`t`t`t`t: " $DefaultDisableSessionSharing
					Line 3 "Allow users to start only 1 instance of this application: " $DefaultOneInstancePerUser.ToString()
					Line 3 "Concurrent licenses`t`t`t`t`t: " $DefaultConCurrentLicenses
					Line 3 "If limit is exceeded`t`t`t`t`t: " $DefaultLicenseLimitNotify
				}
				Else
				{
					Line 3 "Session Sharing`t`t`t`t`t`t: " $SessionSharing
					Line 3 "Allow users to start only 1 instance of this application: " $PubItem.OneInstancePerUser.ToString()
					Line 3 "Concurrent licenses`t`t`t`t`t: " $ConCurrentLicenses
					Line 3 "If limit is exceeded`t`t`t`t`t: " $LicenseLimitNotify
				}

				If($PubItem.InheritLicenseDefaultSettings)
				{
					Line 3 "Settings are replicated to all Sites`t`t`t: " $DefaultReplicateLicenseSettings.ToString()
				}
				Else
				{
					Line 3 "Settings are replicated to all Sites`t`t`t: " $PubItem.ReplicateLicenseSettings.ToString()
				}
				Line 0 ""

				Line 2 "Display"
				Line 3 "Inherit default settings`t`t`t`t: " $PubItem.InheritDisplayDefaultSettings.ToString()

				If($PubItem.InheritDisplayDefaultSettings)
				{
					Line 3 "Wait until all RAS Universal Printers are redirected "
					Line 3 "before showing the application`t`t`t`t: " $DefaultWaitForPrinters
					Line 3 "Maximum time to wait is`t`t`t`t`t: " "$($DefaultWaitForPrintersTimeout) seconds"
					Line 3 "Color Depth`t`t`t`t`t`t: " $DefaultColorDepth
					Line 3 "Start the application as maximized "
					Line 3 "when using mobile clients`t`t`t`t: " $DefaultStartMaximized
				}
				Else
				{
					Line 3 "Wait until all RAS Universal Printers are redirected "
					Line 3 "before showing the application`t`t`t`t: " $PubItem.WaitForPrinters.ToString()
					Line 3 "Maximum time to wait is`t`t`t`t`t: " "$($PubItem.WaitForPrintersTimeout.ToString()) seconds"
					Line 3 "Color Depth`t`t`t`t`t`t: " $ColorDepth
					Line 3 "Start the application as maximized "
					Line 3 "when using mobile clients`t`t`t`t: " $PubItem.StartMaximized.ToString()
				}

				Line 3 "Settings are replicated to all Sites: " $PubItem.ReplicateDisplaySettings.ToString()
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
				$rowdata = @()

				$columnHeaders = @("Windows Virtual Desktop",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Target",($Script:htmlsb),$PubItem.Target,$htmlwhite))
				$rowdata += @(,("Start In",($Script:htmlsb),$PubItem.StartIn,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))
				
				If(![String]::IsNullOrEmpty($PubItem.Parameters))
				{
					$rowdata += @(,("Parameters",($Script:htmlsb),$PubItem.Parameters,$htmlwhite))
				}
				
				If($PubItem.EnableFileExtensions)
				{
					$rowdata += @(,("Associate the following file extensions",($Script:htmlsb),"",$htmlwhite))
					ForEach($Item in $PubItem.FileExtensions)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				
				If($PubItem.InheritLicenseDefaultSettings)
				{
					If($DefaultOneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$rowdata += @(,("Concurrent licenses",($Script:htmlsb),$DefaultConCurrentLicenses,$htmlwhite))
					$rowdata += @(,("If limit is exceeded",($Script:htmlsb),$DefaultLicenseLimitNotify,$htmlwhite))
					$rowdata += @(,("Session Sharing",($Script:htmlsb),$DefaultDisableSessionSharing,$htmlwhite))
				}
				Else
				{
					If($PubItem.OneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$rowdata += @(,("Concurrent licenses",($Script:htmlsb),$ConCurrentLicenses,$htmlwhite))
					$rowdata += @(,("If limit is exceeded",($Script:htmlsb),$LicenseLimitNotify,$htmlwhite))
					$rowdata += @(,("Session Sharing",($Script:htmlsb),$SessionSharing,$htmlwhite))
				}

				$rowdata += @(,("Settings for Site $xSiteName",($Script:htmlsb),"",$htmlwhite))
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						If($cnt -eq 0)
						{
							$rowdata += @(,("Published from",($Script:htmlsb),$ItemName,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							$rowdata += @(,("Published from",($Script:htmlsb),$ItemName,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				Else
				{
					$rowdata += @(,("Published from",($Script:htmlsb),"All Servers in Site",$htmlwhite))
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($DefaultStartPath)'",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($PubItem.StartPath)'",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}
			
				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Sites"
				$rowdata = @()

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("This published item will be available from the following Sites",($Script:htmlsb),$SiteName,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Publish from"
				$rowdata = @()
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$columnHeaders = @("$PublishedFrom",($Script:htmlsb),$ItemName,$htmlwhite)
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						
						If($cnt -eq 0)
						{
							$columnHeaders = @("$PublishedFrom",($Script:htmlsb),$ItemName,$htmlwhite)
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				Else
				{
					$columnHeaders = @("$PublishedFrom",($Script:htmlsb),"",$htmlwhite)
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Application"
				$rowdata = @()

				$columnHeaders = @("Name",($Script:htmlsb),$PubItem.Name,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Run",($Script:htmlsb),$WinType,$htmlwhite))
				$rowdata += @(,("Target",($Script:htmlsb),$PubItem.Target,$htmlwhite))
				$rowdata += @(,("Start in",($Script:htmlsb),$PubItem.StartIn,$htmlwhite))
				$rowdata += @(,("Parameters",($Script:htmlsb),$PubItem.Parameters,$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))
				$rowdata += @(,("Exclude from session prelaunch",($Script:htmlsb),$PubItem.ExcludePrelaunch.ToString(),$htmlwhite))

				$msg = "Application"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				
				OutputPubItemFilters $PubItem "HTML"
				
				OutputPubItemShortcuts $PubItem "HTML" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings

				WriteHTMLLine 3 0 "File extensions"
				$rowdata = @()
				$columnHeaders = @("Associate File Extensions",($Script:htmlsb),$PubItem.EnableFileExtensions.ToString(),$htmlwhite)
				
				If($PubItem.EnableFileExtensions)
				{
					$cnt = -1
					ForEach($Item in $PubItem.FileExtensions)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("Extension",($Script:htmlsb),$Item,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
						}
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				$rowdata = @()
				$columnHeaders = @("Settings are replicated to all Sites",($Script:htmlsb),$PubItem.ReplicateFileExtensionSettings.ToString(),$htmlwhite)

				$msg = ""
				$columnWidths = @("183","100")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "License"
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$PubItem.InheritLicenseDefaultSettings.ToString(),$htmlwhite)

				If($PubItem.InheritLicenseDefaultSettings)
				{
					$rowdata += @(,("Session Sharing",($Script:htmlsb),$DefaultDisableSessionSharing,$htmlwhite))
					If($DefaultOneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$rowdata += @(,("Concurrent licenses",($Script:htmlsb),$DefaultConCurrentLicenses,$htmlwhite))
					$rowdata += @(,("If limit is exceeded",($Script:htmlsb),$DefaultLicenseLimitNotify,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Session Sharing",($Script:htmlsb),$SessionSharing,$htmlwhite))
					If($PubItem.OneInstancePerUser)
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"True",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("Allow users to start only 1 instance of this application",($Script:htmlsb),"False",$htmlwhite))
					}
					$rowdata += @(,("Concurrent licenses",($Script:htmlsb),$ConCurrentLicenses,$htmlwhite))
					$rowdata += @(,("If limit is exceeded",($Script:htmlsb),$LicenseLimitNotify,$htmlwhite))
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				$rowdata = @()
				If($PubItem.InheritLicenseDefaultSettings)
				{
					$columnHeaders = @("Settings are replicated to all Sites",($Script:htmlsb),$DefaultReplicateLicenseSettings.ToString(),$htmlwhite)
				}
				Else
				{
					$columnHeaders = @("Settings are replicated to all Sites",($Script:htmlsb),$PubItem.ReplicateLicenseSettings.ToString(),$htmlwhite)
				}

				$msg = ""
				$columnWidths = @("183","100")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Display"
				$rowdata = @()
				$columnHeaders = @("Inherit default settings",($Script:htmlsb),$PubItem.InheritDisplayDefaultSettings.ToString(),$htmlwhite)

				If($PubItem.InheritDisplayDefaultSettings)
				{
					$rowdata += @(,("Wait until all RAS Universal Printers are redirected before showing the application",($Script:htmlsb),$DefaultWaitForPrinters,$htmlwhite))
					$rowdata += @(,("Maximum time to wait is",($Script:htmlsb),"$($DefaultWaitForPrintersTimeout) seconds",$htmlwhite))
					$rowdata += @(,("Color Depth",($Script:htmlsb),$DefaultColorDepth,$htmlwhite))
					$rowdata += @(,("Start the application as maximized when using mobile clients",($Script:htmlsb),$DefaultStartMaximized,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Wait until all RAS Universal Printers are redirected before showing the application",($Script:htmlsb),$PubItem.WaitForPrinters.ToString(),$htmlwhite))
					$rowdata += @(,("Maximum time to wait is",($Script:htmlsb),"$($PubItem.WaitForPrintersTimeout.ToString()) seconds",$htmlwhite))
					$rowdata += @(,("Color Depth",($Script:htmlsb),$ColorDepth,$htmlwhite))
					$rowdata += @(,("Start the application as maximized when using mobile clients",($Script:htmlsb),$PubItem.StartMaximized.ToString(),$htmlwhite))
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				$rowdata = @()
				$columnHeaders = @("Settings are replicated to all Sites",($Script:htmlsb),$PubItem.ReplicateDisplaySettings.ToString(),$htmlwhite)

				$msg = ""
				$columnWidths = @("183","100")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}
		ElseIf($PubItem.Type -eq "WVDDesktop" -or $PubItem.Type -eq "AVDDesktop")
		{
			$DesktopSize = "Unable to determine"
			If($PubItem.DesktopSize -eq "FullScreen")
			{
				$DesktopSize = "Full Screen"
			}
			ElseIf($PubItem.DesktopSize -eq "UseAvailableArea")
			{
				$DesktopSize = "Use available area"
			}
			Else
			{
				$DesktopSize = "$($PubItem.Width.ToString())x$($PubItem.Height.ToString())"
			}
			
			Switch ($PubItem.PublishFrom)
			{
				"All"		{$PublishedFrom = "All Servers in Site"; Break}
				"Group"		{$PublishedFrom = "Groups:"; Break}
				"Server"	{$PublishedFrom = "Individual Servers:"; Break}
				Default		{$PublishedFrom = "Unable to determine Published From: $($PubItem.PublishFrom)"; Break}
			}
			
			If($PubItem.AllowMultiMonitor -eq "UseClientSettings")
			{
				$AllowMultiMonitor = "Use Client Settings"
			}
			Else
			{
				$AllowMultiMonitor = $PubItem.AllowMultiMonitor.ToString()
			}

			If($MSWord -or $PDF)
			{
				WriteWordLine 3 0 "Information"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Windows Virtual Desktop"; Value = "#$($PubItem.Id): $($PubItem.Name)"; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Last modification by"; Value = $PubItem.AdminLastMod; }) > $Null
				$ScriptInformation.Add(@{Data = "Modified on"; Value = $PubItem.TimeLastMod.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Created by"; Value = $PubItem.AdminCreate; }) > $Null
				$ScriptInformation.Add(@{Data = "Created on"; Value = $PubItem.TimeCreate.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Desktop Size"; Value = $DesktopSize; }) > $Null
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Published from"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "Published from"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Published from"; Value = "All Servers in Site"; }) > $Null
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($DefaultStartPath)'"; }) > $Null
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut on desktop"; Value = ""; }) > $Null
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Start Menu under "; Value = "'$($PubItem.StartPath)'"; }) > $Null
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = ""; }) > $Null
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = "Own Filters"; Value = ""; }) > $Null
				}

				If($PubItem.UserFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " User filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item.Account; }) > $Null
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " IP filtering is enabled"; Value = ""; }) > $Null

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$ScriptInformation.Add(@{Data = ""; Value = $item.From; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = "$($item.From) - $($item.To)"; }) > $Null
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " MAC filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Gateway filtering is enabled"; Value = ""; }) > $Null
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Item; }) > $Null
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$ScriptInformation.Add(@{Data = " Client device operating system filtering is enabled"; Value = ""; }) > $Null
					
					If($PubItem.AllowedOSes.Android)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Android"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Chrome OS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "iOS/iPadOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Linux"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "macOS"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "User Portal (Web Client)"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Windows"; }) > $Null
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$ScriptInformation.Add(@{Data = ""; Value = "Wyse"; }) > $Null
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Available in Site(s)"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Sites"
				$ScriptInformation = New-Object System.Collections.ArrayList

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "This published item will be available from the following Sites"; Value = $SiteName; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $SiteName; }) > $Null
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Publish from"
				$ScriptInformation = New-Object System.Collections.ArrayList
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = $ItemName; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $ItemName; }) > $Null
						}
					}
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "$PublishedFrom"; Value = ""; }) > $Null
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 3 0 "Desktop"
				WriteWordLine 4 0 "Desktop"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $PubItem.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $PubItem.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Connect to administrative session"; Value = $PubItem.ConnectToConsole.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Start automatically when user logs on"; Value = $PubItem.StartOnLogon.ToString(); }) > $Null
				$ScriptInformation.Add(@{Data = "Exclude from session prelaunch"; Value = $PubItem.ExcludePrelaunch.ToString(); }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				WriteWordLine 4 0 "Properties"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Desktop size"; Value = $DesktopSize; }) > $Null
				$ScriptInformation.Add(@{Data = "Multi-Monitor"; Value = $AllowMultiMonitor; }) > $Null

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
				
				OutputPubItemFilters $PubItem "MSWordPDF"
				
				OutputPubItemShortcuts $PubItem "MSWordPDF" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($Text)
			{
				Line 2 "Information"
				Line 3 "Windows Virtual Desktop`t`t`t`t`t: " "#$($PubItem.Id): $($PubItem.Name)"
				Line 3 "Description`t`t`t`t`t`t: " $PubItem.Description
				Line 3 "Last modification by`t`t`t`t`t: " $PubItem.AdminLastMod
				Line 3 "Modified on`t`t`t`t`t`t: " $PubItem.TimeLastMod.ToString()
				Line 3 "Created by`t`t`t`t`t`t: " $PubItem.AdminCreate
				Line 3 "Created on`t`t`t`t`t`t: " $PubItem.TimeCreate.ToString()
				Line 3 "Desktop Size`t`t`t`t`t`t: " $DesktopSize
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						If($cnt -eq 0)
						{
							Line 3 "Published from`t`t`t`t`t`t: " ItemName
						}
						Else
						{
							Line 10 $ItemName
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							Line 3 "Published from`t`t`t`t`t`t: " ItemName
						}
						Else
						{
							Line 10 $ItemName
						}
					}
				}
				Else
				{
					Line 3 "Published from`t`t`t`t`t`t: " "All Servers in Site"
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						Line 3 "Create shortcut on desktop"
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						Line 3 "Create shortcut in Start Menu under " "'$($DefaultStartPath)'"
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						Line 3 "Create shortcut on desktop"
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						Line 3 "Create shortcut in Start Menu under " "'$($PubItem.StartPath)'"
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						Line 3 "Create shortcut in Auto Start Folder"
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					Line 3 "Own Filters"
				}

				If($PubItem.UserFilterEnabled)
				{
					Line 3 " User filtering is enabled"
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						Line 10 "  " $Item.Account
					}
					Line 0 ""
				}
				If($PubItem.IPFilterEnabled)
				{
					Line 3 " IP filtering is enabled"
					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								Line 10 "  " $item.From
							}
							Else
							{
								Line 10 "  $($item.From) - $($item.To)"
							}
						}
					}
					Line 0 ""
				}
				If($PubItem.ClientFilterEnabled)
				{
					Line 3 " Client filtering is enabled"
					
					ForEach($item in $PubItem.AllowedClients)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.MACFilterEnabled)
				{
					Line 3 " MAC filtering is enabled"
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.GatewayFilterEnabled)
				{
					Line 3 " Gateway filtering is enabled"
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						Line 10 "  " $Item
					}
					Line 0 ""
				}
				If($PubItem.OSFilterEnabled)
				{
					Line 3 " Client device operating system filtering is enabled"
					
					If($PubItem.AllowedOSes.Android)
					{
						Line 10 "  Android"
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						Line 10 "  Chrome OS"
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						Line 10 "  iOS/iPadOS"
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						Line 10 "  Linux"
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						Line 10 "  macOS"
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						Line 10 "  RAS Web Portal"
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						Line 10 "  Windows"
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						Line 10 "  Wyse"
					}
					Line 0 ""
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						Line 3 "Available in Site(s)`t`t`t`t`t: " $SiteName
					}
					Else
					{
						Line 10 $SiteName
					}
				}
				Line 0 ""

				Line 2 "Sites"
				Line 3 "This published item will be available from the following Sites"
				ForEach($Site in $PubItem.PublishToSite)
				{
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					Line 10 $SiteName
				}
				Line 0 ""

				Line 2 "Publish from"
				Line 3 $PublishedFrom
				If($PubItem.PublishFrom -eq "Server")
				{
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						Line 6 $ItemName
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						Line 5 $ItemName
					}
				}
				Line 0 ""
				
				Line 2 "Desktop"
				Line 3 "Desktop"
				Line 4 "Name`t`t`t`t`t`t: " $PubItem.Name
				Line 4 "Description`t`t`t`t`t: " $PubItem.Description
				Line 4 "Connect to administrative session`t`t: " $PubItem.ConnectToConsole.ToString()
				Line 4 "Start automatically when user logs on`t`t: " $PubItem.StartOnLogon.ToString()
				Line 4 "Exclude from session prelaunch`t`t`t: " $PubItem.ExcludePrelaunch.ToString()
				Line 0 ""
				
				Line 3 "Properties"
				Line 4 "Desktop size`t`t`t`t`t: " $DesktopSize
				Line 4 "Multi-Monitor`t`t`t`t`t: " $AllowMultiMonitor
				Line 0 ""

				OutputPubItemFilters $PubItem "Text"
				
				OutputPubItemShortcuts $PubItem "Text" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
			If($HTML)
			{
				WriteHTMLLine 3 0 "Information"
				$rowdata = @()
				$columnHeaders = @("Windows Virtual Desktop",($Script:htmlsb),"#$($PubItem.Id): $($PubItem.Name)",$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Last modification by",($Script:htmlsb), $PubItem.AdminLastMod,$htmlwhite))
				$rowdata += @(,("Modified on",($Script:htmlsb), $PubItem.TimeLastMod.ToString(),$htmlwhite))
				$rowdata += @(,("Created by",($Script:htmlsb), $PubItem.AdminCreate,$htmlwhite))
				$rowdata += @(,("Created on",($Script:htmlsb), $PubItem.TimeCreate.ToString(),$htmlwhite))
				$rowdata += @(,("Desktop Size",($Script:htmlsb),$DesktopSize,$htmlwhite))
				
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						If($cnt -eq 0)
						{
							$rowdata += @(,("Published from",($Script:htmlsb),$ItemName,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						If($cnt -eq 0)
						{
							$rowdata += @(,("Published from",($Script:htmlsb),$ItemName,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				Else
				{
					$rowdata += @(,("Published from",($Script:htmlsb),"All Servers in Site",$htmlwhite))
				}

				If($PubItem.InheritShortcutDefaultSettings)
				{
					If($DefaultCreateShortcutOnDesktop -eq "True")
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($DefaultStartPath)'",$htmlwhite))
					}
					If($DefaultCreateShortcutInStartUpFolder -eq "True")
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}
				Else
				{
					If($PubItem.CreateShortcutOnDesktop)
					{
						$rowdata += @(,("Create shortcut on desktop",($Script:htmlsb),"",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartFolder)
					{
						$rowdata += @(,("Create shortcut in Start Menu under ",($Script:htmlsb),"'$($PubItem.StartPath)'",$htmlwhite))
					}
					If($PubItem.CreateShortcutInStartUpFolder)
					{
						$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),"",$htmlwhite))
					}
				}

				If($PubItem.UserFilterEnabled -or 
				   $PubItem.ClientFilterEnabled -or 
				   $PubItem.IPFilterEnabled -or 
				   $PubItem.MACFilterEnabled -or 
				   $PubItem.GatewayFilterEnabled -or 
				   $PubItem.OSFilterEnabled)
				{
					$rowdata += @(,("Own Filters",($Script:htmlsb),"",$htmlwhite))
				}

				If($PubItem.UserFilterEnabled)
				{
					$rowdata += @(,(" User filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($Item in $PubItem.AllowedUsers)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item.Account,$htmlwhite))
					}
				}
				If($PubItem.IPFilterEnabled)
				{
					$rowdata += @(,(" IP filtering is enabled",($Script:htmlsb),"",$htmlwhite))

					If($PubItem.AllowedIP4s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP4s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}

					If($PubItem.AllowedIP6s.Count -gt 0)
					{
						ForEach($item in $PubItem.AllowedIP6s)
						{
							If($item.From -eq $item.To)
							{
								$rowdata += @(,("",($Script:htmlsb),$item.From,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),"$($item.From) - $($item.To)",$htmlwhite))
							}
						}
					}
				}
				If($PubItem.ClientFilterEnabled)
				{
					$rowdata += @(,(" Client filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedClients)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.MACFilterEnabled)
				{
					$rowdata += @(,(" MAC filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedMACs)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.GatewayFilterEnabled)
				{
					$rowdata += @(,(" Gateway filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					ForEach($item in $PubItem.AllowedGateways)
					{
						$rowdata += @(,("",($Script:htmlsb),$Item,$htmlwhite))
					}
				}
				If($PubItem.OSFilterEnabled)
				{
					$rowdata += @(,(" Client device operating system filtering is enabled",($Script:htmlsb),"",$htmlwhite))
					
					If($PubItem.AllowedOSes.Android)
					{
						$rowdata += @(,("",($Script:htmlsb),"Android",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Chrome)
					{
						$rowdata += @(,("",($Script:htmlsb),"Chrome OS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.iOS)
					{
						$rowdata += @(,("",($Script:htmlsb),"iOS/iPadOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Linux)
					{
						$rowdata += @(,("",($Script:htmlsb),"Linux",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Mac)
					{
						$rowdata += @(,("",($Script:htmlsb),"macOS",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.WebClient)
					{
						$rowdata += @(,("",($Script:htmlsb),"User Portal (Web Client)",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Windows)
					{
						$rowdata += @(,("",($Script:htmlsb),"Windows",$htmlwhite))
					}
					
					If($PubItem.AllowedOSes.Wyse)
					{
						$rowdata += @(,("",($Script:htmlsb),"Wyse",$htmlwhite))
					}
				}

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Available in Site(s)",($Script:htmlsb),$SiteName,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}
			
				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Sites"
				$rowdata = @()

				$cnt =-1
				ForEach($Site in $PubItem.PublishToSite)
				{
					$cnt++
					$SiteName = @(Get-RASSite -Id $Site -EA 0 4>$Null).Name
					
					If($cnt -eq 0)
					{
						$columnHeaders = @("This published item will be available from the following Sites",($Script:htmlsb),$SiteName,$htmlwhite)
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$SiteName,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Publish from"
				$rowdata = @()
				If($PubItem.PublishFrom -eq "Server")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromServer)
					{
						$cnt++
						$ItemName = @(Get-RASRDS -Id $Item -EA 0 4>$Null).Server
						
						If($cnt -eq 0)
						{
							$columnHeaders = @("$PublishedFrom",($Script:htmlsb),$ItemName,$htmlwhite)
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				ElseIf($PubItem.PublishFrom -eq "Group")
				{
					$cnt = -1
					ForEach($Item in $PubItem.PublishFromGroup)
					{
						$cnt++
						$ItemName = @(Get-RASRDSGroup -Id $Item -EA 0 4>$Null).Name
						
						If($cnt -eq 0)
						{
							$columnHeaders = @("$PublishedFrom",($Script:htmlsb),$ItemName,$htmlwhite)
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$ItemName,$htmlwhite))
						}
					}
				}
				Else
				{
					$columnHeaders = @("$PublishedFrom",($Script:htmlsb),"",$htmlwhite)
				}

				$msg = ""
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				WriteHTMLLine 3 0 "Desktop"
				$rowdata = @()

				$columnHeaders = @("Name",($Script:htmlsb),$PubItem.Name,$htmlwhite)
				$rowdata += @(,("Description",($Script:htmlsb),$PubItem.Description,$htmlwhite))
				$rowdata += @(,("Connect to administrative session",($Script:htmlsb),$PubItem.ConnectToConsole.ToString(),$htmlwhite))
				$rowdata += @(,("Start automatically when user logs on",($Script:htmlsb),$PubItem.StartOnLogon.ToString(),$htmlwhite))
				$rowdata += @(,("Exclude from session prelaunch",($Script:htmlsb),$PubItem.ExcludePrelaunch.ToString(),$htmlwhite))

				$msg = "Desktop"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				
				$rowdata = @()
				$columnHeaders = @("Desktop size",($Script:htmlsb),$DesktopSize,$htmlwhite)
				$rowdata += @(,("Multi-Monitor",($Script:htmlsb),$AllowMultiMonitor,$htmlwhite))

				$msg = "Properties"
				$columnWidths = @("200","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				OutputPubItemFilters $PubItem "HTML"
				
				OutputPubItemShortcuts $PubItem "HTML" `
				$DefaultCreateShortcutOnDesktop `
				$DefaultCreateShortcutInStartFolder `
				$DefaultStartPath `
				$DefaultCreateShortcutInStartUpFolder `
				$DefaultReplicateShortcutSettings
			}
		}
	}
}

Function OutputPubItemFilters
{
	Param([object] $PubItem, [string] $OutputType)
	
	If($OutputType -eq "MSWordPDF")
	{
		WriteWordLine 3 0 "Filtering"
		If(!($PubItem.UserFilterEnabled))
		{
			WriteWordLine 0 0 "User filtering not enabled"
			WriteWordLine 0 0 ""
		}
		Else
		{
			WriteWordLine 0 0 "User filtering is enabled"
			WriteWordLine 0 0 ""
			WriteWordLine 0 0 "Allow the following Users:" -FontSize 9 -Italics $True

			$ScriptInformation = New-Object System.Collections.ArrayList
			$NameTable = @()
			
			ForEach($item in $PubItem.AllowedUsers)
			{
				$NameTable += @{
				User = $item.Account;
				Type = $item.Type;
				SID  = $item.Sid
				}
			}

			If($NameTable.Count -gt 0)
			{
				$Table = AddWordTable -Hashtable $NameTable `
				-Columns User,Type,SID `
				-Headers "User", "Type", "SID" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitContent;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
		}
		
		If(!($PubItem.ClientFilterEnabled))
		{
			WriteWordLine 0 0 "Client device name filtering not enabled"
			WriteWordLine 0 0 ""
		}
		Else
		{
			WriteWordLine 0 0 "Client device name filtering is enabled"
			WriteWordLine 0 0 ""
			WriteWordLine 0 0 "Allow the following Clients:" -FontSize 9 -Italics $True

			$ScriptInformation = New-Object System.Collections.ArrayList
			$NameTable = @()
			
			ForEach($item in $PubItem.AllowedClients)
			{
				$NameTable += @{
				Client = $item;
				}
			}

			If($NameTable.Count -gt 0)
			{
				$Table = AddWordTable -Hashtable $NameTable `
				-Columns Client `
				-Headers "Client" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitContent;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
		}
		If(!($PubItem.OSFilterEnabled))
		{
			WriteWordLine 0 0 "Client device operating system filtering not enabled"
			WriteWordLine 0 0 ""
		}
		Else
		{
			WriteWordLine 0 0 "Client device operating system filtering is enabled"
			WriteWordLine 0 0 ""
			WriteWordLine 0 0 "Allow access to clients running on the following operating system:" -FontSize 9 -Italics $True
			$ScriptInformation = New-Object System.Collections.ArrayList
			If($PubItem.AllowedOSes.Android)
			{
				$ScriptInformation.Add(@{Data = "Android"; Value = "Enabled"; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "Android"; Value = "Disabled"; }) > $Null
			}
			
			If($PubItem.AllowedOSes.Chrome)
			{
				$ScriptInformation.Add(@{Data = "Chrome OS"; Value = "Enabled"; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "Chrome OS"; Value = "Disabled"; }) > $Null
			}
			
			If($PubItem.AllowedOSes.iOS)
			{
				$ScriptInformation.Add(@{Data = "iOS/iPadOS"; Value = "Enabled"; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "iOS/iPadOS"; Value = "Disabled"; }) > $Null
			}
			
			If($PubItem.AllowedOSes.Linux)
			{
				$ScriptInformation.Add(@{Data = "Linux"; Value = "Enabled"; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "Linux"; Value = "Disabled"; }) > $Null
			}
			
			If($PubItem.AllowedOSes.Mac)
			{
				$ScriptInformation.Add(@{Data = "macOS"; Value = "Enabled"; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "macOS"; Value = "Disabled"; }) > $Null
			}
			
			If($PubItem.AllowedOSes.WebClient)
			{
				$ScriptInformation.Add(@{Data = "User Portal (Web Client)"; Value = "Enabled"; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "User Portal (Web Client)"; Value = "Disabled"; }) > $Null
			}
			
			If($PubItem.AllowedOSes.Windows)
			{
				$ScriptInformation.Add(@{Data = "Windows"; Value = "Enabled"; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "Windows"; Value = "Disabled"; }) > $Null
			}
			
			If($PubItem.AllowedOSes.Wyse)
			{
				$ScriptInformation.Add(@{Data = "Wyse"; Value = "Enabled"; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "Wyse"; Value = "Disabled"; }) > $Null
			}
			
			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		
		If(!($PubItem.IPFilterEnabled))
		{
			WriteWordLine 0 0 "IP Address filtering not enabled"
			WriteWordLine 0 0 ""
		}
		Else
		{
			WriteWordLine 0 0 "IP Address filtering is enabled"
			WriteWordLine 0 0 ""
			WriteWordLine 0 0 "Allow the following IPs:" -FontSize 9 -Italics $True

			If($PubItem.AllowedIP4s.Count -gt 0)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$NameTable = @()
				
				ForEach($item in $PubItem.AllowedIP4s)
				{
					If($item.From -eq $item.To)
					{
						$NameTable += @{
						IPv4From = $item.From;
						IPv4To   = ""
						}
					}
					Else
					{
						$NameTable += @{
						IPv4From = $item.From;
						IPv4To   = $item.To
						}
					}
				}

				If($NameTable.Count -gt 0)
				{
					$Table = AddWordTable -Hashtable $NameTable `
					-Columns IPv4From,IPv4To `
					-Headers "IPv4 Address From", "IPv4 Address To" `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitContent;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
			}
			
			If($PubItem.AllowedIP6s.Count -gt 0)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$NameTable = @()
				
				ForEach($item in $PubItem.AllowedIP6s)
				{
					If($item.From -eq $item.To)
					{
						$NameTable += @{
						IPv6From = $item.From;
						IPv6To   = ""
						}
					}
					Else
					{
						$NameTable += @{
						IPv6From = $item.From;
						IPv6To   = $item.To
						}
					}
				}

				If( $NameTable.Count -gt 0)
				{
					$Table = AddWordTable -Hashtable $NameTable `
					-Columns IPv6From,IPv6To `
					-Headers "IPv6 Address From", "IPv6 Address To" `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitContent;

					SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
					SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
			}
		}
		
		If(!($PubItem.MACFilterEnabled))
		{
			WriteWordLine 0 0 "MAC filtering not enabled"
			WriteWordLine 0 0 ""
		}
		Else
		{
			WriteWordLine 0 0 "MAC filtering is enabled"
			WriteWordLine 0 0 ""
			WriteWordLine 0 0 "Allow the following MACs:" -FontSize 9 -Italics $True

			$ScriptInformation = New-Object System.Collections.ArrayList
			$NameTable = @()
			
			ForEach($item in $PubItem.AllowedMACs)
			{
				$NameTable += @{
				MAC = $item;
				}
			}

			If($NameTable.Count -gt 0)
			{
				$Table = AddWordTable -Hashtable $NameTable `
				-Columns MAC `
				-Headers "MAC" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitContent;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
		}
		
		If(!($PubItem.GatewayFilterEnabled))
		{
			WriteWordLine 0 0 "Gateway filtering not enabled"
			WriteWordLine 0 0 ""
		}
		Else
		{
			WriteWordLine 0 0 "Gateway filtering is enabled"
			WriteWordLine 0 0 ""
			WriteWordLine 0 0 "Allow connections from the following Gateways:" -FontSize 9 -Italics $True

			$ScriptInformation = New-Object System.Collections.ArrayList
			$NameTable = @()
			
			ForEach($item in $PubItem.AllowedGateways)
			{
				$NameTable += @{
				GW = $item;
				}
			}

			If($NameTable.Count -gt 0)
			{
				$Table = AddWordTable -Hashtable $NameTable `
				-Columns GW `
				-Headers "Gateways" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitContent;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null

				WriteWordLine 0 0 ""
			}
		}
	}
	If($OutputType -eq "Text")
	{
		Line 2 "Filtering"
		If(!($PubItem.UserFilterEnabled))
		{
			Line 3 "User filtering not enabled"
			Line 0 ""
		}
		Else
		{
			Line 3 "User filtering is enabled"
			Line 3 "Allow the following Users:"
			If($PubItem.AllowedUsers.Count -gt 0)
			{
				Line 0 ""
				
				$maxLength = ($PubItem.AllowedUsers.Account | Measure-Object -Property length -Maximum).Maximum
				$NegativeMaxLength = $maxLength * -1
				Line 3 "User" -nonewline
				Line 0 (" " * ($maxLength - 3)) -nonewline
				LIne 0 "Type  SID"
				Line 3 ("=" * ($maxLength + 1 + 6 + 45)) # $maxLength, space, "Type" plus 2 spaces, length of SID
				ForEach($item in $PubItem.AllowedUsers)
				{
					Line 3 ("{0,$NegativeMaxLength} {1,-5} {2,-45}" -f $item.Account,$item.Type,$item.Sid)
				}
			}
			Else
			{
				Line 0 "There are no users configured"
			}
			Line 0 ""
		}
		
		If(!($PubItem.ClientFilterEnabled))
		{
			Line 3 "Client device name filtering not enabled"
			Line 0 ""
		}
		Else
		{
			Line 3 "Client device name filtering is enabled"
			Line 3 "Allow the following Clients:"
			Line 0 ""
			Line 3 "Client         "
			Line 3 "==============="
			ForEach($item in $PubItem.AllowedClients)
			{
				Line 3 ("{0,-15}" -f $item)
			}
			Line 0 ""
		}
		
		If(!($PubItem.OSFilterEnabled))
		{
			Line 3 "Client device operating system filtering not enabled"
			Line 0 ""
		}
		Else
		{
			Line 3 "Client device operating system filtering is enabled"
			Line 3 "Allow access to clients running on the following operating system:"
			Line 0 ""
			Line 3 "Operating system"
			Line 3 "================"
			If($PubItem.AllowedOSes.Android)
			{
				Line 3 "Android`t`t: " "Enabled"
			}
			Else
			{
				Line 3 "Android`t`t: " "Disabled"
			}
			
			If($PubItem.AllowedOSes.Chrome)
			{
				Line 3 "Chrome OS`t: " "Enabled"
			}
			Else
			{
				Line 3 "Chrome OS`t: " "Disabled"
			}
			
			If($PubItem.AllowedOSes.iOS)
			{
				Line 3 "iOS`t`t: " "Enabled"
			}
			Else
			{
				Line 3 "iOS`t`t: " "Disabled"
			}
			
			If($PubItem.AllowedOSes.Linux)
			{
				Line 3 "Linux`t`t: " "Enabled"
			}
			Else
			{
				Line 3 "Linux`t`t: " "Disabled"
			}
			
			If($PubItem.AllowedOSes.Mac)
			{
				Line 3 "macOS`t`t: " "Enabled"
			}
			Else
			{
				Line 3 "macOS`t`t: " "Disabled"
			}
			
			If($PubItem.AllowedOSes.WebClient)
			{
				Line 3 "RAS Web Portal`t: " "Enabled"
			}
			Else
			{
				Line 3 "RAS Web Portal`t: " "Disabled"
			}
			
			If($PubItem.AllowedOSes.Windows)
			{
				Line 3 "Windows`t`t: " "Enabled"
			}
			Else
			{
				Line 3 "Windows`t`t: " "Disabled"
			}
			
			If($PubItem.AllowedOSes.Wyse)
			{
				Line 3 "Wyse`t`t: " "Enabled"
			}
			Else
			{
				Line 3 "Wyse`t`t: " "Disabled"
			}
			Line 0 ""
		}
		
		If(!($PubItem.IPFilterEnabled))
		{
			Line 3 "IP Address filtering not enabled"
			Line 0 ""
		}
		Else
		{
			Line 3 "IP Address filtering is enabled"
			Line 3 "Allow the following IPs:"
			Line 0 ""
			
			If($PubItem.AllowedIP4s.Count -gt 0)
			{
				Line 3 "IPv4 Address From  IPv4 Address To"
				Line 3 "=================================="
				#       255.255.255.255    255.255.255.255
				#       123456789012345SSSS123456789012345
				ForEach($item in $PubItem.AllowedIP4s)
				{
					If($item.From -eq $item.To)
					{
						Line 3 ("{0,-15}" -f $item.From)
					}
					Else
					{
						Line 3 ("{0,-15}    {1,-15}" -f $item.From, $Item.To)
					}
				}
				
				Line 0 ""
			}
			
			If($PubItem.AllowedIP6s.Count -gt 0)
			{
				$MaxFrom    = ($PubItem.AllowedIP6s.From | Measure-Object -Property length -maximum).Maximum
				$MaxTo      = ($PubItem.AllowedIP6s.To | Measure-Object -Property length -maximum).Maximum
				$NegMaxFrom = $MaxFrom * -1
				$NegMaxTo   = $MaxTo * -1
				
				$SpacesFrom = $MaxFrom - 17
				$SpacesTo   = $MaxTo - 15
				If($SpacesFrom -le 0)
				{
					$SpacesFrom = 17
				}
				If($SpacesTo -le 0)
				{
					$SpacesTo = 15
				}
				Line 3 "IPv6 Address From  " -nonewline
				Line 0 (" " * $SpacesFrom) -nonewline
				Line 0 "IPv6 Address To" -nonewline
				Line 0 (" " * $SpacesTo)
				Line 3 ("=" * (($MaxFrom + $MaxTo) + 2))

				ForEach($item in $PubItem.AllowedIP6s)
				{
					If($item.From -eq $item.To)
					{
						Line 3 ("{0,$NegMaxFrom}" -f $item.From)
					}
					Else
					{
						Line 3 ("{0,$NegMaxFrom}  {1,$NegMaxTo}" -f $item.From, $Item.To)
					}
				}
				
				Line 0 ""
			}
		}
		
		If(!($PubItem.MACFilterEnabled))
		{
			Line 3 "MAC filtering not enabled"
			Line 0 ""
		}
		Else
		{
			Line 3 "MAC filtering is enabled"
			Line 3 "Allow the following MACs:"
			Line 0 ""
			Line 3 "MAC         "
			Line 3 "============"
			#       123456789012
			ForEach($item in $PubItem.AllowedMACs)
			{
				Line 3 ("{0,-12}" -f $item)
			}
			Line 0 ""
		}
		
		If(!($PubItem.GatewayFilterEnabled))
		{
			Line 3 "Gateway filtering not enabled"
			Line 0 ""
		}
		Else
		{
			Line 3 "Gateway filtering is enabled"
			Line 3 "Allow connections from the following Gateways:"
			Line 0 ""
			Line 3 "Gateways       "
			Line 3 "==============="
			#       123456789012345
			ForEach($item in $PubItem.AllowedGateways)
			{
				Line 3 ("{0,-15}" -f $item)
			}
			Line 0 ""
		}
	}
	If($OutputType -eq "HTML")
	{
		WriteHTMLLine 3 0 "Filtering"
		If(!($PubItem.UserFilterEnabled))
		{
			WriteHTMLLine 0 0 "User filtering not enabled"
			WriteHTMLLine 0 0 ""
		}
		Else
		{
			WriteHTMLLine 0 0 "User filtering is enabled"

			$rowdata = @()
			
			ForEach($item in $PubItem.AllowedUsers)
			{
				$rowdata += @(,(
				$item.Account,$htmlwhite,
				$item.Type,$htmlwhite,
				$item.Sid,$htmlwhite))
			}

			$columnHeaders = @(
			"User",($Script:htmlsb),
			"Type",($Script:htmlsb),
			"SID",($Script:htmlsb))

			$msg = "Allow the following Users:"
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
			WriteHTMLLine 0 0 ""
		}
		
		If(!($PubItem.ClientFilterEnabled))
		{
			WriteHTMLLine 0 0 "Client device name filtering not enabled"
			WriteHTMLLine 0 0 ""
		}
		Else
		{
			WriteHTMLLine 0 0 "Client device name filtering is enabled"

			$rowdata = @()
			
			ForEach($item in $PubItem.AllowedClients)
			{
				$rowdata += @(,(
				$item,$htmlwhite))
			}

			$columnHeaders = @(
			"Client",($Script:htmlsb))

			$msg = "Allow the following Clients:"
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders 
			WriteHTMLLine 0 0 ""
		}
		If(!($PubItem.OSFilterEnabled))
		{
			WriteHTMLLine 0 0 "Client device operating system filtering not enabled"
			WriteHTMLLine 0 0 ""
		}
		Else
		{
			WriteHTMLLine 0 0 "Client device operating system filtering is enabled"
			$rowdata = @()

			If($PubItem.AllowedOSes.Android)
			{
				$columnHeaders = @("Android",($Script:htmlsb),"Enabled",$htmlwhite)
			}
			Else
			{
				$columnHeaders = @("Android",($Script:htmlsb),"Disabled",$htmlwhite)
			}
			
			If($PubItem.AllowedOSes.Chrome)
			{
				$rowdata += @(,("Chrome OS",($Script:htmlsb),"Enabled",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("Chrome OS",($Script:htmlsb),"Disabled",$htmlwhite))
			}
			
			If($PubItem.AllowedOSes.iOS)
			{
				$rowdata += @(,("iOS/iPadOS",($Script:htmlsb),"Enabled",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("iOS/iPadOS",($Script:htmlsb),"Disabled",$htmlwhite))
			}
			
			If($PubItem.AllowedOSes.Linux)
			{
				$rowdata += @(,("Linux",($Script:htmlsb),"Enabled",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("Linux",($Script:htmlsb),"Disabled",$htmlwhite))
			}
			
			If($PubItem.AllowedOSes.Mac)
			{
				$rowdata += @(,("macOS",($Script:htmlsb),"Enabled",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("macOS",($Script:htmlsb),"Disabled",$htmlwhite))
			}
			
			If($PubItem.AllowedOSes.WebClient)
			{
				$rowdata += @(,("User Portal (Web Client)",($Script:htmlsb),"Enabled",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("User Portal (Web Client)",($Script:htmlsb),"Disabled",$htmlwhite))
			}
			
			If($PubItem.AllowedOSes.Windows)
			{
				$rowdata += @(,("Windows",($Script:htmlsb),"Enabled",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("Windows",($Script:htmlsb),"Disabled",$htmlwhite))
			}
			
			If($PubItem.AllowedOSes.Wyse)
			{
				$rowdata += @(,("Wyse",($Script:htmlsb),"Enabled",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("Wyse",($Script:htmlsb),"Disabled",$htmlwhite))
			}
			
			$msg = "Allow access to clients running on the following operating system:"
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders 
			WriteHTMLLine 0 0 ""
		}
		
		If(!($PubItem.IPFilterEnabled))
		{
			WriteHTMLLine 0 0 "IP Address filtering not enabled"
			WriteHTMLLine 0 0 ""
		}
		Else
		{
			WriteHTMLLine 0 0 "IP Address filtering is enabled"

			If($PubItem.AllowedIP4s.Count -gt 0)
			{
				$rowdata = @()
				
				ForEach($item in $PubItem.AllowedIP4s)
				{
					If($item.From -eq $item.To)
					{
						$rowdata += @(,(
						$item.From,$htmlwhite,
						"",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,(
						$item.From,$htmlwhite,
						$item.To,$htmlwhite))
					}
				}

				$columnHeaders = @(
				"IPv4 Address From",($Script:htmlsb),
				"IPv4 Address To",($Script:htmlsb))

				$msg = "Allow the following IPs:"
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
				If($PubItem.AllowedIP6s.Count -gt 0)
				{
					WriteHTMLLine 0 0 ""
				}
			}

			If($PubItem.AllowedIP6s.Count -gt 0)
			{
				$rowdata = @()
				
				ForEach($item in $PubItem.AllowedIP6s)
				{
					If($item.From -eq $item.To)
					{
						$rowdata += @(,(
						$item.From,$htmlwhite,
						"",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,(
						$item.From,$htmlwhite,
						$item.To,$htmlwhite))
					}
				}

				$columnHeaders = @(
				"IPv6 Address From",($Script:htmlsb),
				"IPv6 Address To",($Script:htmlsb))

				If($PubItem.AllowedIP4s.Count -gt 0)
				{
					$msg = ""
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
				}
				Else
				{
					$msg = "Allow the following IPs:"
					FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
				}
			}
			WriteHTMLLine 0 0 ""
		}
		
		If(!($PubItem.MACFilterEnabled))
		{
			WriteHTMLLine 0 0 "MAC filtering not enabled"
			WriteHTMLLine 0 0 ""
		}
		Else
		{
			WriteHTMLLine 0 0 "MAC filtering is enabled"
			WriteHTMLLine 0 0 "Allow the following MACs:"

			$rowdata = @()
			
			ForEach($item in $PubItem.AllowedMACs)
			{
				$rowdata += @(,(
				$item,$htmlwhite))
			}

			$columnHeaders = @(
			"MAC",($Script:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders 
			WriteHTMLLine 0 0 ""
		}
		
		If(!($PubItem.GatewayFilterEnabled))
		{
			WriteHTMLLine 0 0 "Gateway filtering not enabled"
			WriteHTMLLine 0 0 ""
		}
		Else
		{
			WriteHTMLLine 0 0 "Gateway filtering is enabled"
			WriteHTMLLine 0 0 "Allow connections from the following Gateways:"

			$rowdata = @()
			
			ForEach($item in $PubItem.AllowedGateways)
			{
				$rowdata += @(,(
				$item,$htmlwhite))
			}

			$columnHeaders = @(
			"Gateways",($Script:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders 
			WriteHTMLLine 0 0 ""
			
			#there is no replication setting for Gateway filters
		}
	}
}

Function OutputPubItemShortCuts
{
	Param([object] $PubItem, 
	[string] $OutputType,
	[string] $DefaultCreateShortcutOnDesktop,
	[string] $DefaultCreateShortcutInStartFolder,
	[string] $DefaultStartPath,
	[string] $DefaultCreateShortcutInStartUpFolder,
	[string] $DefaultReplicateShortcutSettings
	)
	
	If($OutputType -eq "MSWordPDF")
	{
		WriteWordLine 3 0 "Shortcuts"

		$ScriptInformation = New-Object System.Collections.ArrayList
		If($PubItem.InheritShortcutDefaultSettings)
		{
			$ScriptInformation.Add(@{Data = "Create shortcut on Desktop"; Value = $DefaultCreateShortcutOnDesktop; }) > $Null
			$ScriptInformation.Add(@{Data = "Create shortcut in Start Folder"; Value = $DefaultCreateShortcutInStartFolder; }) > $Null
			If($DefaultCreateShortcutInStartFolder)
			{
				$ScriptInformation.Add(@{Data = ""; Value = $DefaultStartPath; }) > $Null
			}
			$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = $DefaultCreateShortcutInStartUpFolder; }) > $Null
			$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $DefaultReplicateShortcutSettings.ToString(); }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
		Else
		{
			$ScriptInformation.Add(@{Data = "Create shortcut on Desktop"; Value = $PubItem.CreateShortcutOnDesktop; }) > $Null
			$ScriptInformation.Add(@{Data = "Create shortcut in Start Folder"; Value = $PubItem.CreateShortcutInStartFolder; }) > $Null
			If($PubItem.CreateShortcutInStartFolder)
			{
				$ScriptInformation.Add(@{Data = ""; Value = $PubItem.StartPath; }) > $Null
			}
			$ScriptInformation.Add(@{Data = "Create shortcut in Auto Start Folder"; Value = $PubItem.CreateShortcutInStartUpFolder; }) > $Null
			$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $PubItem.ReplicateShortcutSettings.ToString(); }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
		WriteWordLine 0 0 ""
	}
	If($OutputType -eq "Text")
	{
		Line 2 "Shortcuts"

		If($PubItem.InheritShortcutDefaultSettings)
		{
			Line 3 "Create shortcut on Desktop`t`t`t`t: " $DefaultCreateShortcutOnDesktop
			Line 3 "Create shortcut in Start Folder`t`t`t`t: " $DefaultCreateShortcutInStartFolder
			If($DefaultCreateShortcutInStartFolder)
			{
				Line 4 $DefaultStartPath
			}
			Line 3 "Create shortcut in Auto Start Folder`t`t`t: " $DefaultCreateShortcutInStartUpFolder
			Line 3 "Settings are replicated to all Sites`t`t`t: " $DefaultReplicateShortcutSettings.ToString()
		}
		Else
		{
			Line 3 "Create shortcut on Desktop`t`t`t`t: " $PubItem.CreateShortcutOnDesktop
			Line 3 "Create shortcut in Start Folder`t`t`t`t: " $PubItem.CreateShortcutInStartFolder
			If($PubItem.CreateShortcutInStartFolder)
			{
				Line 4 $PubItem.StartPath
			}
			Line 3 "Create shortcut in Auto Start Folder`t`t`t: " $PubItem.CreateShortcutInStartUpFolder
			Line 3 "Settings are replicated to all Sites`t`t`t: " $PubItem.ReplicateShortcutSettings.ToString()
		}
		Line 0 ""
	}
	If($OutputType -eq "HTML")
	{
		WriteHTMLLine 3 0 "Shortcuts"

		$rowdata = @()
		If($PubItem.InheritShortcutDefaultSettings)
		{
			$columnHeaders = @("Create shortcut on Desktop",($Script:htmlsb),$DefaultCreateShortcutOnDesktop.ToString(),$htmlwhite)
			$rowdata += @(,("Create shortcut in Start Folder",($Script:htmlsb),$DefaultCreateShortcutInStartFolder.ToString(),$htmlwhite))
			If($DefaultCreateShortcutInStartFolder)
			{
				$rowdata += @(,("",($Script:htmlsb),$DefaultStartPath,$htmlwhite))
			}
			$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),$DefaultCreateShortcutInStartUpFolder.ToString(),$htmlwhite))
			$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$DefaultReplicateShortcutSettings.ToString(),$htmlwhite))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
		}
		Else
		{
			$columnHeaders = @("Create shortcut on Desktop",($Script:htmlsb),$PubItem.CreateShortcutOnDesktop.ToString(),$htmlwhite)
			$rowdata += @(,("Create shortcut in Start Folder",($Script:htmlsb),$PubItem.CreateShortcutInStartFolder.ToString(),$htmlwhite))
			If($PubItem.CreateShortcutInStartFolder)
			{
				$rowdata += @(,("",($Script:htmlsb),$PubItem.StartPath,$htmlwhite))
			}
			$rowdata += @(,("Create shortcut in Auto Start Folder",($Script:htmlsb),$PubItem.CreateShortcutInStartUpFolder.ToString(),$htmlwhite))
			$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$PubItem.ReplicateShortcutSettings.ToString(),$htmlwhite))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
		}
		WriteHTMLLine 0 0 ""
	}
}
#endregion

#region process universal printing
Function ProcessUniversalPrinting
{
	Param([object]$Site)
	
	Write-Verbose "$(Get-Date -Format G): Processing Universal Printing"
	
	OutputUniversalPrintingSectionPage
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Universal Printing"
	
	$RASPrinterSettings = Get-RASPrintingSettings -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Universal Printing information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Universal Printing information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Universal Printing information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Universal Printing information"
		}
	}
	ElseIf($? -and $null -eq $RASPrinterSettings)
	{
		Write-Host "
		No Universal Printing information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Universal Printing information was found"
		}
		If($Text)
		{
			Line 0 "No Universal Printing information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Universal Printing information was found"
		}
	}
	Else
	{
		$RDSObjects     = New-Object System.Collections.ArrayList
		$VDIHostObjects = New-Object System.Collections.ArrayList

		$Printingobj = [PSCustomObject] @{
			PrinterNamePattern = $RASPrinterSettings.PrinterNamePattern
			ReplicateSettings  = $RASPrinterSettings.ReplicatePrinterPattern
			PrinterRetention   = $RASPrinterSettings.PrinterRetention
		}
		
		$results = Get-RASRDS -SiteId $Site.Id -EA 0 4>$Null
		
		If(!($?))
		{
			Write-Warning "
			`n
			Unable to retrieve RDS Printing information
			"
			$RDSobjects = [PSCustomObject] @{
				Server        = "None found"
				Type          = "N/A"
				PrintingState = "N/A"
			}
		}
		ElseIf($? -and $null -eq $results)
		{
		Write-Host "
		No RDS Printing information was found
		" -ForegroundColor White
			$RDSobjects = [PSCustomObject] @{
				Server        = "None found"
				Type          = "N/A"
				PrintingState = "N/A"
			}
		}
		Else
		{
			ForEach($Result in $Results)
			{
				If($Result.EnablePrinting)
				{
					$State = "Enabled"
				}
				Else
				{
					$State = "Disabled"
				}
				
				$RDSobj = [PSCustomObject] @{
					Server        = $Result.Server
					Type          = "RD Session Hosts"
					PrintingState = $State
				}
				$Null = $RDSObjects.Add($RDSobj)
		}
		}
		
		$results = Get-RASProvider -SiteId $Site.Id -EA 0 4>$Null
		
		If(!($?))
		{
			Write-Warning "
			`n
			Unable to retrieve VDI Hosts Printing information
			"
			
			$VDIHostobjects = [PSCustomObject] @{
				Server        = "Unable to retrieve"
				Type          = "N/A"
				PrintingState = "N/A"
			}
		}
		ElseIf($? -and $null -eq $results)
		{
		Write-Host "
		No VDI Hosts Printing information was found
		" -ForegroundColor White
			$VDIHostobjects = [PSCustomObject] @{
				Server        = "None found"
				Type          = "N/A"
				PrintingState = "N/A"
			}
		}
		Else
		{
			ForEach($Result in $Results)
			{
				If($Result.EnablePrinting)
				{
					$State = "Enabled"
				}
				Else
				{
					$State = "Disabled"
				}
				
				$VDIHostsobj = [PSCustomObject] @{
					Server        = $Result.Server
					Type          = "VDI Providers"
					PrintingState = $State
				}
				$Null = $VDIHostObjects.Add($VDIHostsobj)
			}
		}
		
		OutputUniversalPrintingSettings $Printingobj $RDSobjects $VDIHostobjects
		
		OutputUniversalPrinterDriversSettings $RASPrinterSettings
		
		OutputUniversalPrinterFontsSettings $RASPrinterSettings
	}
}

Function OutputUniversalPrintingSectionPage
{
	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "Universal Printing"
	}
	If($Text)
	{
		Line 0 "Universal Printing"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "Universal Printing"
	}
}

Function OutputUniversalPrintingSettings
{
	Param([object]$Printingobj, [object]$RDSobj, [object]$VDIHostsobj)
 
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Universal Printing"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Universal Printing"
	}
	If($Text)
	{
		Line 1 "Universal Printing"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Universal Printing"
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Options"
	}
	If($Text)
	{
		Line 2 "Options"
	}
	If($HTML)
	{
		#Nothing
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Printer rename pattern"; Value = $Printingobj.PrinterNamePattern; }) > $Null
		$ScriptInformation.Add(@{Data = "Printer retention"; Value = $Printingobj.PrinterRetention; }) > $Null
		$ScriptInformation.Add(@{Data = 'Settings are replicated to all Sites'; Value = $Printingobj.ReplicateSettings.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 275;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Printer rename pattern`t`t`t: " $Printingobj.PrinterNamePattern
		Line 3 "Printer retention`t`t`t: " $Printingobj.PrinterRetention
		Line 3 "Settings are replicated to all Sites`t: " $Printingobj.ReplicateSettings.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @(
			"Printer rename pattern",($Script:htmlsb),
			$Printingobj.PrinterNamePattern,$htmlwhite
		)
		$rowdata += @(,(
			"Printer retention",($Script:htmlsb),
			$Printingobj.PrinterRetention.ToString(),$htmlwhite)
		)
		$rowdata += @(,(
			"Settings are replicated to all Sites",($Script:htmlsb),
			$Printingobj.ReplicateSettings.ToString(),$htmlwhite)
		)

		$msg = "Options"
		$columnWidths = @("200","300")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Servers in site"
	}
	If($Text)
	{
		Line 2 "Servers in site"
	}
	If($HTML)
	{
		#Nothing
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ServersInSiteTable = @()
		
		ForEach($obj in $RDSobj)
		{
			$ServersInSiteTable += @{
				Server = $obj.Server
				Type   = $obj.Type
				State  = $obj.PrintingState
			}
		}
	
		ForEach($obj in $VDIHostsobj)
		{
			$ServersInSiteTable += @{
				Server = $obj.Server
				Type   = $obj.Type
				State  = $obj.PrintingState
			}
		}

		If($ServersInSiteTable.Count -gt 0)
		{
			$Table = AddWordTable -Hashtable $ServersInSiteTable `
			-Columns Server, Type, State `
			-Headers "Server", "Type", "State" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 100;
			$Table.Columns.Item(3).Width = 100;
			
			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
	}
	If($Text)
	{
		Line 3 "Server                         Type                 State   "
		Line 3 "============================================================"
		#       123456789012345678901234567890S12345678901234567890S12345678

		ForEach($obj in $RDSobj)
		{
			Line 3 ( "{0,-30} {1,-20} {2,-8}" -f 
				$obj.Server, 
				$obj.Type, 
				$obj.PrintingState
			)
		}
	
		ForEach($obj in $VDIHostsobj)
		{
			Line 3 ( "{0,-30} {1,-20} {2,-8}" -f 
				$obj.Server, 
				$obj.Type, 
				$obj.PrintingState
			)
		}

		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()

		ForEach($obj in $RDSobj)
		{
			$rowdata += @(,(
				$obj.Server,$htmlwhite,
				$obj.Type,$htmlwhite,
				$obj.PrintingState,$htmlwhite)
			)
		}

		ForEach($obj in $VDIHostsobj)
		{
			$rowdata += @(,(
				$obj.Server,$htmlwhite,
				$obj.Type,$htmlwhite,
				$obj.PrintingState,$htmlwhite)
			)
		}
		
		$columnHeaders = @(
			"Server",($Script:htmlsb),
			"Type",($Script:htmlsb),
			"State",($Script:htmlsb)
		)

		$msg = "Servers in site"
		$columnWidths = @("200","100","100")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputUniversalPrinterDriversSettings 
{
	Param([object] $RASPrinterSettings)
 
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Printer drivers"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Printer drivers"
	}
	If($Text)
	{
		Line 1 "Printer drivers"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Printer drivers"
	}

	Switch ($RASPrinterSettings.DriverAllowMode)
	{
		"AllowRedirUsingAnyDriver"
			{$RASPrinterSettingsDriverAllowMode = "Allow redirection of printers using any driver"; Break}
		"AllowRedirUsingSpecifiedDriver"
			{$RASPrinterSettingsDriverAllowMode = "Allow redirection of printers using one of the following drivers"; Break}
		"DoNotAllowRedirUsingSpecifiedDriver"
			{$RASPrinterSettingsDriverAllowMode = "Don't allow redirection of printers that use one of the following drivers"; Break}
		Default
			{$RASPrinterSettingsDriverAllowMode = "Unable to determine RAS Printer Setting Driver Allow Mode: $($RASPrinterSettings.DriverAllowMode)"; Break}
	}
	
	If($RASPrinterSettingsDriverAllowMode -eq "Allow redirection of printers using any driver")
	{
		If($MSWord -or $PDF)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Mode"; Value = $RASPrinterSettingsDriverAllowMode; }) > $Null
			$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $RASPrinterSettings.ReplicatePrinterDrivers.ToString(); }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 275;
			$Table.Columns.Item(2).Width = 100;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 2 "Mode: " $RASPrinterSettingsDriverAllowMode
			Line 2 "Settings are replicated to all Sites: " $RASPrinterSettings.ReplicatePrinterDrivers.ToString()
			Line 0 ""
		}
		If($HTML)
		{
			$rowdata = @()
			$columnHeaders = @("Mode",($Script:htmlsb),$RASPrinterSettingsDriverAllowMode,$htmlwhite)
			$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$RASPrinterSettings.ReplicatePrinterDrivers.ToString(),$htmlwhite))

			$msg = ""
			$columnWidths = @("300","100")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
	}
	Else
	{
		$tmpArray = $RASPrinterSettings.PrinterDriversArray.Split(",")
		
		If($MSWord -or $PDF)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Mode"; Value = $RASPrinterSettingsDriverAllowMode; }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 100;
			$Table.Columns.Item(2).Width = 275;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			$ScriptInformation = New-Object System.Collections.ArrayList
			$DriverNameTable = @()
			
			ForEach($item in $tmpArray)
			{
				$DriverNameTable += @{DriverName = $item}
			}

			If($DriverNameTable.Count -gt 0)
			{
				$Table = AddWordTable -Hashtable $DriverNameTable `
				-Columns DriverName `
				-Headers "Driver name" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 100;
				
				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}

			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $RASPrinterSettings.ReplicatePrinterDrivers.ToString(); }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 100;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			$maxLength = ($tmparray | Measure-Object -Property length -Maximum).Maximum
			Line 2 "Mode: " $RASPrinterSettingsDriverAllowMode
			Line 0 ""
			Line 2 "Driver name"
			Line 2 ("=" * $maxLength)
			
			ForEach($item in $tmpArray)
			{
				Line 2 $item
			}
			Line 0 ""
			Line 2 "Settings are replicated to all Sites: " $RASPrinterSettings.ReplicatePrinterDrivers.ToString()
			Line 0 ""
		}
		If($HTML)
		{
			$rowdata = @()
			$columnHeaders = @(
				"Mode",($Script:htmlsb),
				$RASPrinterSettingsDriverAllowMode,$htmlwhite
			)

			$msg = ""
			$columnWidths = @("100","300")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
			
			$rowdata = @()

			ForEach($item in $tmpArray)
			{
				$rowdata += @(,($item,$htmlwhite))
			}
			
			$columnHeaders = @(
				"Driver name",($Script:htmlsb)
			)

			$msg = ""
			$columnWidths = @("100")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""

			$rowdata = @()
			$columnHeaders = @("Settings are replicated to all Sites",($Script:htmlsb),$RASPrinterSettings.ReplicatePrinterDrivers.ToString(),$htmlwhite)

			$msg = ""
			$columnWidths = @("183","100")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
	}
}

Function OutputUniversalPrinterFontsSettings 
{
	Param([object] $RASFontsSettings)

	Write-Verbose "$(Get-Date -Format G): `t`tOutput Fonts"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Fonts"
	}
	If($Text)
	{
		Line 1 "Fonts"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Fonts"
	}

	If($RASFontsSettings.ExcludedFontsArray.Count -ne 0)
	{
		$tmpArray1 = $RASFontsSettings.ExcludedFontsArray.Split(",")
		$tmpArray1 = $tmpArray1 | Sort-Object
		#$maxLength = ($tmparray1 | Measure-Object -Property length -Maximum).Maximum
	}
	Else
	{
		$tmpArray1 = @()
	}

	If($RASFontsSettings.AutoInstallFonts.Count -eq 0)
	{
		$tmpArray2 = @()
	}
	Else
	{
		$tmpArray2 = $RASFontsSettings.AutoInstallFonts.Split(",")
		$tmpArray2 = $tmpArray2 | Sort-Object
		#$maxLength = ($tmparray2 | Measure-Object -Property length -Maximum).Maximum
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Transfer Fonts"; Value = $RASFontsSettings.EmbedFonts.ToString(); }) > $Null

		If($RASFontsSettings.EmbedFonts)
		{
			If($tmpArray1.Count -ne 0)
			{
				$ScriptInformation.Add(@{Data = "     Exclude the following Fonts from embedding"; Value = ""; }) > $Null
				$cnt = -1
				ForEach($item in $tmpArray1)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "          Font name"; Value = $item; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
					}
				}
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "     Exclude the following Fonts from embedding"; Value = "None"; }) > $Null
			}
		}

		If($tmpArray2.Count -eq 0)
		{
			$ScriptInformation.Add(@{Data = "     Auto install fonts"; Value = "None"; }) > $Null
		}
		Else
		{
			$ScriptInformation.Add(@{Data = "     Auto install fonts"; Value = ""; }) > $Null
			$cnt = -1
			ForEach($item in $tmpArray2)
			{
				$cnt++
				
				If($cnt -eq 0)
				{
					$ScriptInformation.Add(@{Data = "          Font file"; Value = $item; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
				}
			}
		}
		$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $RASFontsSettings.ReplicatePrinterFont.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 220;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 2 "Transfer Fonts: " $RASFontsSettings.EmbedFonts.ToString()
		If($RASFontsSettings.EmbedFonts)
		{
			If($tmpArray1.Count -ne 0)
			{
				Line 3 "Exclude the following Fonts from embedding"
				$cnt = -1
				ForEach($item in $tmpArray1)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						Line 4 "Font name: " $item
					}
					Else
					{
						Line 5 "   " $item
					}
				}
			}
			Else
			{
				Line 3 "Exclude the following Fonts from embedding" "None"
			}
		}

		If($tmpArray2.Count -eq 0)
		{
			Line 3 "Auto install fonts" "None"
		}
		Else
		{
			Line 3 "Auto install fonts"
			$cnt = -1
			ForEach($item in $tmpArray2)
			{
				$cnt++
				
				If($cnt -eq 0)
				{
					Line 4 "Font file: " $item
				}
				Else
				{
					Line 5 "   " $item
				}
			}
		}
		Line 2 "Settings are replicated to all Sites: " $RASFontsSettings.ReplicatePrinterFont.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Transfer Fonts",($Script:htmlsb),$RASFontsSettings.EmbedFonts.ToString(),$htmlwhite)

		If($RASFontsSettings.EmbedFonts)
		{
			If($tmpArray1.Count -ne 0)
			{
				$rowdata += @(,("     Exclude the following Fonts from embedding",($Script:htmlsb),"",$htmlwhite))
				$cnt = -1
				ForEach($item in $tmpArray1)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("          Font name",($Script:htmlsb),$item,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
					}
				}
			}
			Else
			{
				$rowdata += @(,("     Exclude the following Fonts from embedding",($Script:htmlsb),"None",$htmlwhite))
			}
		}

		If($tmpArray2.Count -eq 0)
		{
			$rowdata += @(,("     Auto install fonts",($Script:htmlsb),"None",$htmlwhite))
		}
		Else
		{
			$rowdata += @(,("     Auto install fonts",($Script:htmlsb),"",$htmlwhite))
			$cnt = -1
			ForEach($item in $tmpArray2)
			{
				$cnt++
				
				If($cnt -eq 0)
				{
					$rowdata += @(,("          Font file",($Script:htmlsb),$item,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
				}
			}
		}
		$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$RASFontsSettings.ReplicatePrinterFont.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("260","220")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}
#endregion

#region process universal scanning
Function ProcessUniversalScanning
{
	Param([object]$Site)
	
	Write-Verbose "$(Get-Date -Format G): Processing Universal scanning"
	
	OutputUniversalScanningSectionPage
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Universal Scanning"
	
	$results = Get-RASScanningSettings -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Universal Scanning information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Universal Scanning information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Universal Scanning information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Universal Scanning information"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Host "
		No Universal Scanning information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Universal Scanning information was found"
		}
		If($Text)
		{
			Line 0 "No Universal Scanning information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Universal Scanning information was found"
		}
	}
	Else
	{
		$RDSObjects     = New-Object System.Collections.ArrayList
		$VDIHostObjects = New-Object System.Collections.ArrayList
		
		$WIAobj = [PSCustomObject] @{
			WIANamePattern    = $Results.WIANamePattern
			ReplicateSettings = $Results.ReplicateWIAPattern
		}
		
		$TWAINobj = [PSCustomObject] @{
			TWAINNamePattern  = $Results.TWAINNamePattern
			ReplicateSettings = $Results.ReplicateTWAINPattern
		}
		
		$results = Get-RASRDS -SiteId $Site.Id -EA 0 4>$Null
		
		If(!($?))
		{
			Write-Warning "
			`n
			Unable to retrieve RDS Scanning information
			"
			$RDSobj = [PSCustomObject] @{
				Server = "Unable to retrieve"
				Type = "N/A"
				WIAState = "Disabled"
				TWAINState = "Disabled"
			}
			$Null = $RDSObjects.Add($RDSobj)
		}
		ElseIf($? -and $null -eq $results)
		{
		Write-Host "
		No RDS Scanning information was found
		" -ForegroundColor White
			$RDSobj = [PSCustomObject] @{
				Server = "Not found"
				Type = "Not found"
				WIAState = "Disabled"
				TWAINState = "Disabled"
			}
			$Null = $RDSObjects.Add($RDSobj)
		}
		Else
		{
			ForEach($Result in $Results)
			{
				If($Result.EnableWIA)
				{
					$WIAState = "Enabled"
				}
				Else
				{
					$WIAState = "Disabled"
				}
				
				If($Result.EnableTWAIN)
				{
					$TWAINState = "Enabled"
				}
				Else
				{
					$TWAINState = "Disabled"
				}

				$RDSobj = [PSCustomObject] @{
					Server = $Result.Server
					Type = "RD Session Hosts"
					WIAState = $WIAState
					TWAINState = $TwainState
				}
				$Null = $RDSObjects.Add($RDSobj)
			}
		}
		
		$results = Get-RASProvider -SiteId $Site.Id -EA 0 4>$Null
		
		If(!($?))
		{
			Write-Warning "
			`n
			Unable to retrieve VDI Hosts Scanning information
			"
			$VDIHostsobj = [PSCustomObject] @{
				Server = "Unable to retrieve"
				Type = "Unknown"
				WIAState = "Disabled"
				TWAINState = "Disabled"
			}
			$Null = $VDIHostObjects.Add($VDIHostsobj)
		}
		ElseIf($? -and $null -eq $results)
		{
		Write-Host "
		No VDI Hosts Scanning information was found
		" -ForegroundColor White
			$VDIHostsobj = [PSCustomObject] @{
				Server = "None found"
				Type = "Unknown"
				WIAState = "Disabled"
				TWAINState = "Disabled"
			}
			$Null = $VDIHostObjects.Add($VDIHostsobj)
		}
		Else
		{
			ForEach($Result in $Results)
			{
				If($Result.EnableWIA)
				{
					$WIAState = "Enabled"
				}
				Else
				{
					$WIAState = "Disabled"
				}
				
				If($Result.EnableTWAIN)
				{
					$TWAINState = "Enabled"
				}
				Else
				{
					$TWAINState = "Disabled"
				}

				$VDIHostsobj = [PSCustomObject] @{
					Server = $Result.Server
					Type = "VDI Providers"
					WIAState = $WIAState
					TWAINState = $TWAINState
				}
				$Null = $VDIHostObjects.Add($VDIHostsobj)
			}
		}
		
		OutputUniversalScanningSettings $WIAobj $TWAINobj $RDSobjects $VDIHostobjects
	}
}

Function OutputUniversalScanningSectionPage
{
	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "Universal Scanning"
	}
	If($Text)
	{
		Line 0 "Universal Scanning"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "Universal Scanning"
	}
}

Function OutputUniversalScanningSettings
{
 Param([object]$WIAobj, [object]$TWAINobj, [object]$RDSobj, [object]$VDIHostsobj)
 
	Write-Verbose "$(Get-Date -Format G): `t`tOutput WIA"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "WIA"
	}
	If($Text)
	{
		Line 1 "WIA"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "WIA"
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Scanner rename"
	}
	If($Text)
	{
		Line 2 "Scanner rename"
	}
	If($HTML)
	{
		#Nothing
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Pattern"; Value = $WIAObj.WIANamePattern; }) > $Null
		$ScriptInformation.Add(@{Data = 'Settings are replicated to all Sites'; Value = $WIAObj.ReplicateSettings.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 275;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Pattern`t`t`t`t`t: " $WIAObj.WIANamePattern
		Line 3 "Settings are replicated to all Sites`t: " $WIAObj.ReplicateSettings.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @(
			"Pattern",($Script:htmlsb),
			$WIAObj.WIANamePattern,$htmlwhite
		)
		$rowdata += @(,(
			"Settings are replicated to all Sites",($Script:htmlsb),
			$WIAobj.ReplicateSettings.ToString(),$htmlwhite)
		)

		$msg = "Scanner rename"
		$columnWidths = @("200","300")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Servers in Site"
	}
	If($Text)
	{
		Line 2 "Servers in Site"
	}
	If($HTML)
	{
		#Nothing
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ServersInSiteTable = @()
		
		ForEach($obj in $RDSObj)
		{
			$ServersInSiteTable += @{
				Server = $obj.Server
				Type   = $obj.Type
				State  = $obj.WIAState
			}
		}
		
		ForEach($obj in $VDIHostsobj)
		{
			$ServersInSiteTable += @{
				Server = $obj.Server
				Type   = $obj.Type
				State  = $obj.WIAState
			}
		}

		If($ServersInSiteTable.Count -gt 0)
		{
			$Table = AddWordTable -Hashtable $ServersInSiteTable `
			-Columns Server, Type, State `
			-Headers "Server", "Type", "State" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 100;
			$Table.Columns.Item(3).Width = 100;
			
			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
	}
	If($Text)
	{
		Line 3 "Server                         Type                 State   "
		Line 3 "============================================================"
		#       123456789012345678901234567890S12345678901234567890S12345678

		ForEach($obj in $RDSobj)
		{
			Line 3 ( "{0,-30} {1,-20} {2,-8}" -f 
				$obj.Server, 
				$obj.Type, 
				$obj.WIAState
			)
		}
		
		ForEach($obj in $VDIHostsobj)
		{
			Line 3 ( "{0,-30} {1,-20} {2,-8}" -f 
				$obj.Server, 
				$obj.Type, 
				$obj.WIAState
			)
		}

		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()

		ForEach($obj in $RDSobj)
		{
			$rowdata += @(,(
				$obj.Server,$htmlwhite,
				$obj.Type,$htmlwhite,
				$obj.WIAState,$htmlwhite)
			)
		}
	
		ForEach($obj in $VDIHostsobj)
		{
			$rowdata += @(,(
				$obj.Server,$htmlwhite,
				$obj.Type,$htmlwhite,
				$obj.WIAState,$htmlwhite)
			)
		}

		$columnHeaders = @(
			"Server",($Script:htmlsb),
			"Type",($Script:htmlsb),
			"State",($Script:htmlsb)
		)

		$msg = "Servers in Site"
		$columnWidths = @("200","100","100")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}

	Write-Verbose "$(Get-Date -Format G): `t`tOutput TWAIN"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "TWAIN"
	}
	If($Text)
	{
		Line 1 "TWAIN"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "TWAIN"
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Scanner rename"
	}
	If($Text)
	{
		Line 2 "Scanner rename"
	}
	If($HTML)
	{
		#Nothing
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Pattern"; Value = $TWAINobj.TWAINNamePattern; }) > $Null
		$ScriptInformation.Add(@{Data = 'Settings are replicated to all Sites'; Value = $TWAINobj.ReplicateSettings.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 275;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Pattern`t`t`t`t`t: " $TWAINobj.TWAINNamePattern
		Line 3 "Settings are replicated to all Sites`t: " $TWAINobj.ReplicateSettings.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @(
			"Pattern",($Script:htmlsb),
			$TWAINobj.TWAINNamePattern,$htmlwhite
		)
		$rowdata += @(,(
			"Settings are replicated to all Sites",($Script:htmlsb),
			$TWAINobj.ReplicateSettings.ToString(),$htmlwhite)
		)

		$msg = "Scanner rename"
		$columnWidths = @("200","300")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Servers in Site"
	}
	If($Text)
	{
		Line 2 "Servers in Site"
	}
	If($HTML)
	{
		#Nothing
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ServersInSiteTable = @()
		
		ForEach($obj in $RDSobj)
		{
			$ServersInSiteTable += @{
				Server = $obj.Server
				Type   = $obj.Type
				State  = $obj.TwainState
			}
		}
		
		ForEach($obj in $VDIHostsobj)
		{
			$ServersInSiteTable += @{
				Server = $obj.Server
				Type   = $obj.Type
				State  = $obj.TwainState
			}
		}

		If($ServersInSiteTable.Count -gt 0)
		{
			$Table = AddWordTable -Hashtable $ServersInSiteTable `
			-Columns Server, Type, State `
			-Headers "Server", "Type", "State" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 100;
			$Table.Columns.Item(3).Width = 100;
			
			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
	}
	If($Text)
	{
		Line 3 "Server                         Type                 State   "
		Line 3 "============================================================"
		#       123456789012345678901234567890S12345678901234567890S12345678

		ForEach($obj in $RDSobj)
		{
			Line 3 ( "{0,-30} {1,-20} {2,-8}" -f 
				$obj.Server, 
				$obj.Type, 
				$obj.TwainState
			)
		}
		
		ForEach($obj in $VDIHostsobj)
		{
			Line 3 ( "{0,-30} {1,-20} {2,-8}" -f 
				$obj.Server, 
				$obj.Type, 
				$obj.TwainState
			)
		}

		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()

		ForEach($obj in $RDSobj)
		{
			$rowdata += @(,(
				$obj.Server,$htmlwhite,
				$obj.Type,$htmlwhite,
				$obj.TwainState,$htmlwhite)
			)
		}
		
		ForEach($obj in $VDIHostsobj)
		{
			$rowdata += @(,(
				$obj.Server,$htmlwhite,
				$obj.Type,$htmlwhite,
				$obj.TwainState,$htmlwhite)
			)
		}
		
		$columnHeaders = @(
			"Server",($Script:htmlsb),
			"Type",($Script:htmlsb),
			"State",($Script:htmlsb)
		)

		$msg = "Servers in Site"
		$columnWidths = @("200","100","100")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}
#endregion

#region process connection
Function ProcessConnection
{
	Param([object]$Site)
	
	Write-Verbose "$(Get-Date -Format G): Processing Connection"
	
	OutputConnectionSectionPage
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Authentication"
	
	$results = Get-RASAuthSettings -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve authentication information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve authentication information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve authentication information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve authentication information"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Host "
		No authentication information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No authentication information was found"
		}
		If($Text)
		{
			Line 0 "No authentication information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No authentication information was found"
		}
	}
	Else
	{
		OutputRASAuthSettings $results
	}

	Write-Verbose "$(Get-Date -Format G): `tProcessing Settings"
	
	$results = Get-RASSessionSetting -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve RAS Session settings information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve RAS Session settings information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve RAS Session settings information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve RAS Session settings information"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Host "
		No RAS Session settings information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No RAS Session settings information was found"
		}
		If($Text)
		{
			Line 0 "No RAS Session settings information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No RAS Session settings information was found"
		}
	}
	Else
	{
		OutputRASSessionSetting $results
	}

	Write-Verbose "$(Get-Date -Format G): `tProcessing Multi-Factor authentication"
	
	$MFA = Get-RASMFA -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Multi-Factor authentication information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Multi-Factor authentication information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Multi-Factor authentication information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Multi-Factor authentication information"
		}
	}
	ElseIf($? -and $null -eq $MFA)
	{
		Write-Host "
		No Multi-Factor authentication information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Multi-Factor authentication information was found"
		}
		If($Text)
		{
			Line 0 "No Multi-Factor authentication information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Multi-Factor authentication information was found"
		}
	}
	Else
	{
		OutputMFASetting $MFA
	}
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Allowed devices"
	
	$results = Get-RASAllowedDevicesSetting -SiteId $Site.Id -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Allowed devices information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Allowed devices information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Allowed devices information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Allowed devices information"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Host "
		No Allowed devices information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Allowed devices information was found"
		}
		If($Text)
		{
			Line 0 "No Allowed devices information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Allowed devices information was found"
		}
	}
	Else
	{
		OutputRASAllowedDevicesSetting $results
	}
}

Function OutputConnectionSectionPage
{
	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "Connection"
	}
	If($Text)
	{
		Line 0 "Connection"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "Connection"
	}
}

Function OutputRASAuthSettings
{
	Param([object] $RASAuthSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Authentication"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Authentication"
	}
	If($Text)
	{
		Line 1 "Authentication"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Authentication"
	}
	
	Switch ($RASAuthSettings.AuthType)
	{
		"UsernamePassword"					{$RASAuthSettingsAuthType = "Credentials"; Break}
		"SmartCard"							{$RASAuthSettingsAuthType = "Smart Card"; Break}
		"UsernamePasswordOrSmartCard"		{$RASAuthSettingsAuthType = "Credentials, Smart Card"; Break}
		"Web"								{$RASAuthSettingsAuthType = "Web (SAML)"; Break}
		"UsernamePassword, Web"				{$RASAuthSettingsAuthType = "Credentials, Web (SAML)"; Break}
		"SmartCard, Web"					{$RASAuthSettingsAuthType = "Smart Card, Web (SAML)"; Break}
		"UsernamePasswordOrSmartCard, Web"	{$RASAuthSettingsAuthType = "Credentials, Smart Card, Web (SAML)"; Break}
		Default								{$RASAuthSettingsAuthType = "Unable to determine AuthType: $($RASAuthSettings.AuthType)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Allowed authentication types"; Value = $RASAuthSettingsAuthType; }) > $Null
		If($RASAuthSettings.AllTrustedDomains)
		{
			$ScriptInformation.Add(@{Data = "Authentication domain"; Value = "All Trusted Domains"; }) > $Null
		}
		Else
		{
			$ScriptInformation.Add(@{Data = "Authentication domain"; Value = "Specific: $($RASAuthSettings.Domain)"; }) > $Null
		}
		$ScriptInformation.Add(@{Data = "Use client domain if specified"; Value = $RASAuthSettings.UseClientDomain.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Force clients to use NetBIOS credentials'; Value = $RASAuthSettings.ForceNetBIOSCreds.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Settings are replicated to all Sites'; Value = $RASAuthSettings.ReplicateSettings.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 175;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 2 "Allowed authentication types`t`t`t: " $RASAuthSettingsAuthType
		If($RASAuthSettings.AllTrustedDomains)
		{
			Line 2 "All Trusted Domains" ""
		}
		Else
		{
			Line 2 "Domain`t`t`t`t`t`t: " $RASAuthSettings.Domain
		}
		Line 2 "Use client domain if specified`t`t`t: " $RASAuthSettings.UseClientDomain.ToString()
		Line 2 "Force clients to use NetBIOS credentials`t: " $RASAuthSettings.ForceNetBIOSCreds.ToString()
		Line 2 "Settings are replicated to all Sites`t`t: " $RASAuthSettings.ReplicateSettings.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Allowed authentication types",($Script:htmlsb),$RASAuthSettingsAuthType,$htmlwhite)
		If($RASAuthSettings.AllTrustedDomains)
		{
			$rowdata += @(,("All Trusted Domains",($Script:htmlsb),"",$htmlwhite))
		}
		Else
		{
			$rowdata += @(,("Domain",($Script:htmlsb),$RASAuthSettings.Domain,$htmlwhite))
		}
		$rowdata += @(,("Use client domain if specified",($Script:htmlsb),$RASAuthSettings.UseClientDomain.ToString(),$htmlwhite))
		$rowdata += @(,("Force clients to use NetBIOS credentials",($Script:htmlsb),$RASAuthSettings.ForceNetBIOSCreds.ToString(),$htmlwhite))
		$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$RASAuthSettings.ReplicateSettings.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("300","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputRASSessionSetting
{
	Param([object] $RASSessionSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Settings"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Settings"
	}
	If($Text)
	{
		Line 1 "Settings"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Settings"
	}
	
	Switch ($RASSessionSettings.RemoteIdleSessionTimeout)
	{
		60		{$RemoteIdleSessionTimeout = "1 minute"; Break}
		180		{$RemoteIdleSessionTimeout = "3 minutes"; Break}
		300		{$RemoteIdleSessionTimeout = "5 minutes"; Break}
		600		{$RemoteIdleSessionTimeout = "10 minutes"; Break}
		1800	{$RemoteIdleSessionTimeout = "30 minutes"; Break}
		3600	{$RemoteIdleSessionTimeout = "1 hour"; Break}
		5400	{$RemoteIdleSessionTimeout = "1 hour, 30 minutes"; Break}
		7200	{$RemoteIdleSessionTimeout = "2 hours"; Break}
		21600	{$RemoteIdleSessionTimeout = "6 hours"; Break}
		43200	{$RemoteIdleSessionTimeout = "12 hours"; Break}
		86400	{$RemoteIdleSessionTimeout = "1 day"; Break}
		Default	{$RemoteIdleSessionTimeout = "Unable to determine idle session timeout: $($RASSessionSettings.RemoteIdleSessionTimeout)"; Break}
	}
	
	Switch ($RASSessionSettings.LogoffIdleSessionTimeout)
	{
		0		{$LogoffIdleSessionTimeout = "Never"; Break}
		300		{$LogoffIdleSessionTimeout = "5 minutes"; Break}
		600		{$LogoffIdleSessionTimeout = "10 minutes"; Break}
		900		{$LogoffIdleSessionTimeout = "15 minutes"; Break}
		1200	{$LogoffIdleSessionTimeout = "20 minutes"; Break}
		1800	{$LogoffIdleSessionTimeout = "30 minutes"; Break}
		3600	{$LogoffIdleSessionTimeout = "1 hour"; Break}
		Default	{$LogoffIdleSessionTimeout = "Unable to determine idle session logoff: $($RASSessionSettings.LogoffIdleSessionTimeout)"; Break}
	}
	
	Switch ($RASSessionSettings.CachedSessionTimeout)
	{
		60		{$CachedSessionTimeout = "1 minute"; Break}
		180		{$CachedSessionTimeout = "3 minutes"; Break}
		300		{$CachedSessionTimeout = "5 minutes"; Break}
		600		{$CachedSessionTimeout = "10 minutes"; Break}
		1800	{$CachedSessionTimeout = "30 minutes"; Break}
		3600	{$CachedSessionTimeout = "1 hour"; Break}
		5400	{$CachedSessionTimeout = "1 hour, 30 minutes"; Break}
		7200	{$CachedSessionTimeout = "2 hours"; Break}
		21600	{$CachedSessionTimeout = "6 hours"; Break}
		43200	{$CachedSessionTimeout = "12 hours"; Break}
		86400	{$CachedSessionTimeout = "1 day"; Break}
		86400	{$CachedSessionTimeout = "30 days"; Break}
		Default	{$CachedSessionTimeout = "Unable to determine cached session timeout: $($RASSessionSettings.CachedSessionTimeout)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Declare remote session idle after"; Value = $RemoteIdleSessionTimeout; }) > $Null
		$ScriptInformation.Add(@{Data = "Automatic logoff RAS idle session after"; Value = $LogoffIdleSessionTimeout; }) > $Null
		$ScriptInformation.Add(@{Data = "Cached Session Timeout"; Value = $CachedSessionTimeout; }) > $Null
		$ScriptInformation.Add(@{Data = 'FIPS 140-2 encryption'; Value = $RASSessionSettings.FIPSMode; }) > $Null
		$ScriptInformation.Add(@{Data = 'Settings are replicated to all Sites'; Value = $RASSessionSettings.ReplicateSettings.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 175;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 2 "Declare remote session idle after`t: " $RemoteIdleSessionTimeout
		Line 2 "Automatic logoff RAS idle session after`t: " $LogoffIdleSessionTimeout
		Line 2 "Cached Session Timeout`t`t`t: " $CachedSessionTimeout
		Line 2 "FIPS 140-2 encryption`t`t`t: " $RASSessionSettings.FIPSMode
		Line 2 "Settings are replicated to all Sites`t: " $RASSessionSettings.ReplicateSettings.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Declare remote session idle after",($Script:htmlsb),$RemoteIdleSessionTimeout,$htmlwhite)
		$rowdata += @(,("Automatic logoff RAS idle session after",($Script:htmlsb),$LogoffIdleSessionTimeout,$htmlwhite))
		$rowdata += @(,("Cached Session Timeout",($Script:htmlsb),$CachedSessionTimeout,$htmlwhite))
		$rowdata += @(,("FIPS 140-2 encryption",($Script:htmlsb),$RASSessionSettings.FIPSMode.ToString(),$htmlwhite))
		$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$RASSessionSettings.ReplicateSettings.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("300","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputMFASetting
{
	Param([object] $RASMFASettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Multi-Factor authentication"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Multi-Factor authentication"
	}
	If($Text)
	{
		Line 1 "Multi-Factor authentication"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Multi-Factor authentication"
	}

	ForEach($RASMFASetting in $RASMFASettings)
	{
		Switch ($RASMFASetting.Type)
		{
			"None" 			{$RASMFASettingProvider = "None"; Break}
			"Deepnet" 		{$RASMFASettingProvider = "Deepnet"; Break}
			"SafeNet" 		{$RASMFASettingProvider = "SafeNet"; Break}
			"Radius" 		{$RASMFASettingProvider = "RADIUS"; Break}
			"AzureRadius"	{$RASMFASettingProvider = "Azure MFA server (RADIUS)"; Break}
			"DuoRadius" 	{$RASMFASettingProvider = "Duo (RADIUS)"; Break}
			"FortiRadius" 	{$RASMFASettingProvider = "FortiAuthenticator (RADIUS)"; Break}
			"TekRadius" 	{$RASMFASettingProvider = "TekRADIUS"; Break}
			"GAuthTOTP"		{$RASMFASettingProvider = "Google Authenticator"; Break}
			Default 		{$RASMFASettingProvider = "Unable to determine MFA Provider: $($RASMFASetting.Type)"; Break}
		}

		If($MSWord -or $PDF)
		{
			WriteWordLine 3 0 "Provider settings"
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Provider"; Value = $RASMFASettingProvider; }) > $Null
			
			If($RASMFASettingProvider -ne "None")
			{
				$ScriptInformation.Add(@{Data = "Settings"; Value = ""; }) > $Null
				
				If($RASMFASetting.Type -eq "AzureRadius")
				{
					$ScriptInformation.Add(@{Data = "     General"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          Enable MFA provider in site"; Value = $RASMFASetting.Enabled.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Name"; Value = $RASMFASetting.Name; }) > $Null
					$ScriptInformation.Add(@{Data = "          Description"; Value = $RASMFASetting.Description; }) > $Null
					$ScriptInformation.Add(@{Data = "          Type"; Value = $RASMFASetting.DisplayName; }) > $Null
					$ScriptInformation.Add(@{Data = "     Connection"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          Display Name"; Value = $RASMFASetting.DisplayName; }) > $Null
					$ScriptInformation.Add(@{Data = "          Primary server"; Value = $RASMFASetting.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "          Secondary server"; Value = $RASMFASetting.BackupServer; }) > $Null
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - active (parallel)"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - passive (failover)"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "          Port"; Value = $RASMFASetting.Port; }) > $Null
					$ScriptInformation.Add(@{Data = "          Timeout (seconds)"; Value = $RASMFASetting.Timeout; }) > $Null
					$ScriptInformation.Add(@{Data = "          Retries"; Value = $RASMFASetting.Retries; }) > $Null
					$ScriptInformation.Add(@{Data = "          Password Encoding"; Value = $RASMFASetting.PasswordEncoding; }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward username only to Radius Server"; Value = $RASMFASetting.UsernameOnly.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward the first password to Windows authentication provider"; Value = $RASMFASetting.ForwardFirstPwdToAD.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "     Attributes"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Attribute $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Name: $($Item.RadiusAttrName)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Vendor: $($Item.VendorID)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Type: $($Item.AttributeType)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Value: $($Item.Value)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
					$ScriptInformation.Add(@{Data = "     Automation"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Automation $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Enable Action: $($Item.Enabled.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Title: $($Item.Title)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Command: $($Item.Command)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Description: $($Item.Description)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Action message: $($Item.ActionMessage)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Image: $($Item.Image)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Autosend: $($Item.AutoSend.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "DuoRadius")
				{
					$ScriptInformation.Add(@{Data = "          Type"; Value = $RASMFASetting.DisplayName; }) > $Null
					$ScriptInformation.Add(@{Data = "          Primary Server"; Value = $RASMFASetting.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "          Secondary Server"; Value = $RASMFASetting.BackupServer; }) > $Null
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - active (parallel)"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - passive (failover)"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "          Port"; Value = $RASMFASetting.Port; }) > $Null
					$ScriptInformation.Add(@{Data = "          Timeout"; Value = $RASMFASetting.Timeout; }) > $Null
					$ScriptInformation.Add(@{Data = "          Retries"; Value = $RASMFASetting.Retries; }) > $Null
					$ScriptInformation.Add(@{Data = "          Password Encoding"; Value = $RASMFASetting.PasswordEncoding; }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward username only to Radius Server"; Value = $RASMFASetting.UsernameOnly.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward the first password to Windows authentication provider"; Value = $RASMFASetting.ForwardFirstPwdToAD.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "     Attributes"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Attribute $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Name: $($Item.Name)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Vendor: $($Item.Vendor)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Type: $($Item.AttributeType)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Value: $($Item.Value)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
					$ScriptInformation.Add(@{Data = "     Automation"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Automation $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Enabled: $($Item.Enabled.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Title: $($Item.Title)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Command: $($Item.Command)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Image: $($Item.Image)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Autosend: $($Item.AutoSend.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "FortiRadius")
				{
					$ScriptInformation.Add(@{Data = "          Type Name"; Value = $RASMFASetting.DisplayName; }) > $Null
					$ScriptInformation.Add(@{Data = "          Primary server"; Value = $RASMFASetting.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "          Secondary server"; Value = $RASMFASetting.BackupServer; }) > $Null
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - active (parallel)"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - passive (failover)"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "          Port"; Value = $RASMFASetting.Port; }) > $Null
					$ScriptInformation.Add(@{Data = "          Timeout"; Value = $RASMFASetting.Timeout; }) > $Null
					$ScriptInformation.Add(@{Data = "          Retries"; Value = $RASMFASetting.Retries; }) > $Null
					$ScriptInformation.Add(@{Data = "          Password Encoding"; Value = $RASMFASetting.PasswordEncoding; }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward username only to Radius Server"; Value = $RASMFASetting.UsernameOnly.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward the first password to Windows authentication provider"; Value = $RASMFASetting.ForwardFirstPwdToAD.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "     Attributes"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Attribute $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Name: $($Item.Name)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Vendor: $($Item.Vendor)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Type: $($Item.AttributeType)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Value: $($Item.Value)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
					$ScriptInformation.Add(@{Data = "     Automation"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Automation $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Enabled: $($Item.Enabled.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Title: $($Item.Title)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Command: $($Item.Command)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Image: $($Item.Image)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Autosend: $($Item.AutoSend.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "TekRadius")
				{
					$ScriptInformation.Add(@{Data = "          Type Name"; Value = $RASMFASetting.DisplayName; }) > $Null
					$ScriptInformation.Add(@{Data = "          Primary server"; Value = $RASMFASetting.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "          Secondary server"; Value = $RASMFASetting.BackupServer; }) > $Null
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - active (parallel)"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - passive (failover)"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "          Port"; Value = $RASMFASetting.Port; }) > $Null
					$ScriptInformation.Add(@{Data = "          Timeout"; Value = $RASMFASetting.Timeout; }) > $Null
					$ScriptInformation.Add(@{Data = "          Retries"; Value = $RASMFASetting.Retries; }) > $Null
					$ScriptInformation.Add(@{Data = "          Password Encoding"; Value = $RASMFASetting.PasswordEncoding; }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward username only to Radius Server"; Value = $RASMFASetting.UsernameOnly.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward the first password to Windows authentication provider"; Value = $RASMFASetting.ForwardFirstPwdToAD.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "     Attributes"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Attribute $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Name: $($Item.Name)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Vendor: $($Item.Vendor)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Type: $($Item.AttributeType)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Value: $($Item.Value)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
					$ScriptInformation.Add(@{Data = "     Automation"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Automation $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Enabled: $($Item.Enabled.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Title: $($Item.Title)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Command: $($Item.Command)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Image: $($Item.Image)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Autosend: $($Item.AutoSend.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "Radius")
				{
					$ScriptInformation.Add(@{Data = "          Type Name"; Value = $RASMFASetting.DisplayName; }) > $Null
					$ScriptInformation.Add(@{Data = "          Primary server"; Value = $RASMFASetting.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "          Secondary server"; Value = $RASMFASetting.BackupServer; }) > $Null
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - active (parallel)"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          HA mode"; Value = "Active - passive (failover)"; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "          Port"; Value = $RASMFASetting.Port; }) > $Null
					$ScriptInformation.Add(@{Data = "          Timeout"; Value = $RASMFASetting.Timeout; }) > $Null
					$ScriptInformation.Add(@{Data = "          Retries"; Value = $RASMFASetting.Retries; }) > $Null
					$ScriptInformation.Add(@{Data = "          Password Encoding"; Value = $RASMFASetting.PasswordEncoding; }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward username only to Radius Server"; Value = $RASMFASetting.UsernameOnly.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Forward the first password to Windows authentication provider"; Value = $RASMFASetting.ForwardFirstPwdToAD.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "     Attributes"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Automation"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "     Attributes"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Attribute $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Name: $($Item.Name)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Vendor: $($Item.Vendor)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Type: $($Item.AttributeType)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Value: $($Item.Value)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
					$ScriptInformation.Add(@{Data = "     Automation"; Value = ""; }) > $Null
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$ScriptInformation.Add(@{Data = ""; Value = "Automation $cnt"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Enabled: $($Item.Enabled.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Title: $($Item.Title)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Command: $($Item.Command)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Image: $($Item.Image)"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "     Autosend: $($Item.AutoSend.ToString())"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "Deepnet")
				{
					Switch($RASMFASetting.AuthMode)
					{
						"MandatoryForAllUsers"						{$DeepNetAuthMode = "Mandatory for all users"; Break}
						"CreateTokenForDomainAuthenticatedUsers"	{$DeepNetAuthMode = "Create token for Domain Authenticated users"; Break}
						"UsersWithSafeNetAcc"						{$DeepNetAuthMode = "Use only for users with a safe account"; Break}
						Default										{$DeepNetAuthMode = "Deepnet mode not found: $($RASMFASetting.AuthMode)"; Break}
					}
					
					$ScriptInformation.Add(@{Data = "     Connection"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          Type"; Value = $RASMFASetting.DeepnetType; }) > $Null
					$ScriptInformation.Add(@{Data = "          Server"; Value = $RASMFASetting.Server; }) > $Null
					$ScriptInformation.Add(@{Data = "          Port"; Value = $RASMFASetting.Port.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Enable SSL"; Value = $RASMFASetting.SSL.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Agent"; Value = $RASMFASetting.DeepnetAgent; }) > $Null
					$ScriptInformation.Add(@{Data = "     Application"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          Application"; Value = $RASMFASetting.App; }) > $Null
					$ScriptInformation.Add(@{Data = "          Domain"; Value = $RASMFASetting.DefaultDomain; }) > $Null
					$ScriptInformation.Add(@{Data = "     Authentication"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          Mode"; Value = $DeepNetAuthMode; }) > $Null
					$ScriptInformation.Add(@{Data = "          Token Type"; Value = $RASMFASetting.TokenType.ToString(); }) > $Null
					$ScriptInformation.Add(@{Data = "          Allow Channels"; Value = "Email: $($RASMFASetting.ActivateEmail.ToString())"; }) > $Null
					$ScriptInformation.Add(@{Data = "                        "; Value = "SMS: $($RASMFASetting.ActivateSMS.ToString())"; }) > $Null
				}
				ElseIf($RASMFASetting.Type -eq "SafeNet")
				{
					Switch($RASMFASetting.AuthMode)
					{
						"MandatoryForAllUsers"						{$SafeNetAuthMode = "Mandatory for all users"; Break}
						"CreateTokenForDomainAuthenticatedUsers"	{$SafeNetAuthMode = "Create token for Domain Authenticated users"; Break}
						"UsersWithSafeNetAcc"						{$SafeNetAuthMode = "Use only for users with a safe account"; Break}
						Default										{$SafeNetAuthMode = "Safenet mode not found: $($RASMFASetting.AuthMode)"; Break}
					}

					$ScriptInformation.Add(@{Data = "     Connection"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          OTP Service URL"; Value = $RASMFASetting.OTPServiceURL; }) > $Null
					$ScriptInformation.Add(@{Data = "     Authentication"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          Mode"; Value = $SafeNetAuthMode; }) > $Null
					$ScriptInformation.Add(@{Data = "          TMS Web API URL"; Value = $RASMFASetting.TMSWebApiURL; }) > $Null
					$ScriptInformation.Add(@{Data = "          User Repository"; Value = $RASMFASetting.UserRepository; }) > $Null
				}
				ElseIf($RASMFASetting.Type -eq "GAuthTOTP")
				{
					Switch($RASMFASetting.UserEnrollment)
					{
						"Allow"			{$GAuthAllow = "Allow"; Break}
						"AllowUntil"	{$GAuthAllow = "Allow until"; Break}
						"DoNotAllow"	{$GAuthAllow = "Do not allow"; Break}
						Default			{$GAuthAllow = "Google Authenticator Allow status not found: $($RASMFASetting.UserEnrollment)"; Break}
					}
					
					Switch($RASMFASetting.Tolerance)
					{
						0		{$TOTPTolerance = "None"; Break}
						30		{$TOTPTolerance = "+/- 30 seconds"; Break}
						60		{$TOTPTolerance = "+/- 60 seconds"; Break}
						90		{$TOTPTolerance = "+/- 90 seconds"; Break}
						120		{$TOTPTolerance = "+/- 120 seconds"; Break}
						Default	{$TOTPTolerance = "TOTP tolerence not found: $()"; Break}
					}
					
					$ScriptInformation.Add(@{Data = "     Type Name"; Value = $RASMFASetting.Type; }) > $Null
					$ScriptInformation.Add(@{Data = "     User Enrollment"; Value = ""; }) > $Null
					If($GAuthAllow -eq "Allow until")
					{
						$GAuthFullDate = $RASMFASetting.UntilDateTime
						$GAuthDate     = ($GAuthFullDate.ToUniversalTime()).ToShortDateString()
						$GAuthTime     = ($GAuthFullDate.ToUniversalTime()).ToLongTimeString()
						$ScriptInformation.Add(@{Data = "          $GAuthAllow"; Value = "Date: $GAuthDate"; }) > $Null
						$ScriptInformation.Add(@{Data = ""; Value = "Time: $GAuthTime"; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = "          $GAuthAllow"; Value = ""; }) > $Null
					}
					$ScriptInformation.Add(@{Data = "     Authentication"; Value = ""; }) > $Null
					$ScriptInformation.Add(@{Data = "          TOTP tolerence"; Value = $TOTPTolerance; }) > $Null
				}

				<#If($RASMFASetting.RestrictionMode -eq "Exclusion")
				{
					$ScriptInformation.Add(@{Data = "Enable MFA for all users except"; Value = ""; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Disable MFA for all users except"; Value = ""; }) > $Null
				}#>
				
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 175;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				<#WriteWordLine 3 0 "Restrictions"
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "User or group list"; Value = $RASMFASetting.ExcludeUserGroup.ToString(); }) > $Null
				If($RASMFASetting.ExcludeUserGroup)
				{
					If($RASMFASetting.ExcludeUserGroupList.Count -gt 0)
					{
						ForEach($Item in $RASMFASetting.ExcludeUserGroupList)
						{
							$ScriptInformation.Add(@{Data = ""; Value = "User: $($Item.Account)"; }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = "Type: $($Item.Type)"; }) > $Null
							$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
						}
					}
				}

				$ScriptInformation.Add(@{Data = "Client IP list"; Value = $RASMFASetting.ExcludeClientIPs.ToString(); }) > $Null
				If($RASMFASetting.ExcludeClientIPs)
				{
					If($RASMFASetting.ExcludeClientIPList.Count -gt 0)
					{
						$cnt     = -1
						$MaxFrom = (($RASMFASetting.ExcludeClientIPList.From | Measure-Object -Property length -maximum).Maximum * -1)
						$MaxTo   = (($RASMFASetting.ExcludeClientIPList.To | Measure-Object -Property length -maximum).Maximum * -1)

						ForEach($Item in $RASMFASetting.ExcludeClientIPList)
						{
							$cnt++
							$tmp = ("From: {0,$($MaxFrom)} To: {1,$($MaxTo)}" -f $Item.From, $Item.To)
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     IPv4 Addresses"; Value = $tmp; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $tmp; }) > $Null
							}
						}
					}
					
					If($RASMFASetting.ExcludeClientIPv6List.Count -gt 0)
					{
						$cnt     = -1
						$MaxFrom = (($RASMFASetting.ExcludeClientIPv6List.From | Measure-Object -Property length -maximum).Maximum * -1)
						$MaxTo   = (($RASMFASetting.ExcludeClientIPv6List.To | Measure-Object -Property length -maximum).Maximum * -1)

						ForEach($Item in $RASMFASetting.ExcludeClientIPv6List)
						{
							$cnt++
							$tmp = ("From: {0,$($MaxFrom)} To: {1,$($MaxTo)}" -f $Item.From, $Item.To)
							
							If($cnt -eq 0)
							{
								$ScriptInformation.Add(@{Data = "     IPv6 Addresses"; Value = $tmp; }) > $Null
							}
							Else
							{
								$ScriptInformation.Add(@{Data = ""; Value = $tmp; }) > $Null
							}
						}
					}
				}

				$ScriptInformation.Add(@{Data = "Client MAC list"; Value = $RASMFASetting.ExcludeClientMAC.ToString(); }) > $Null
				If($RASMFASetting.ExcludeClientMAC)
				{
					$cnt = -1
					ForEach($MAC in $RASMFASetting.ExcludeClientMACList)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "     MAC Address"; Value = $MAC; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $MAC; }) > $Null
						}
					}
				}

				$ScriptInformation.Add(@{Data = "Connection to the following Gateway IPs"; Value = $RASMFASetting.ExcludeClientGWIPs.ToString(); }) > $Null
				If($RASMFASetting.ExcludeClientGWIPs)
				{
					$cnt = -1
					ForEach($Server in $RASMFASetting.ExcludeClientGWIPList)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = "     Server Name"; Value = $Server; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ""; Value = $Server; }) > $Null
						}
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""#>
			}
		}
		If($Text)
		{
			Line 2 "Provider settings"
			Line 3 "Provider: " $RASMFASettingProvider
			If($RASMFASettingProvider -ne "None")
			{
				Line 3 "Settings"
				
				If($RASMFASetting.Type -eq "AzureRadius")
				{
					Line 4 "General"
					Line 5 "Enable MFA provider in site`t: " $RASMFASetting.Enabled.ToString()
					Line 5 "Name`t`t`t`t: " $RASMFASetting.Name
					Line 5 "Description`t`t`t: " $RASMFASetting.Description
					Line 5 "Type`t`t`t`t: " $RASMFASetting.DisplayName
					Line 4 "Connection"
					Line 5 "Display Name`t`t`t: " $RASMFASetting.DisplayName
					Line 5 "Primary server`t`t`t: " $RASMFASetting.Server
					Line 5 "Secondary server`t`t: " $RASMFASetting.BackupServer
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						Line 5 "HA mode`t`t`t`t: Active - active (parallel)"
					}
					Else
					{
						Line 5 "HA mode`t`t`t`t: Active - passive (failover)"
					}
					Line 5 "Port`t`t`t`t: " $RASMFASetting.Port
					Line 5 "Timeout (seconds)`t`t: " $RASMFASetting.Timeout
					Line 5 "Retries`t`t`t`t: " $RASMFASetting.Retries
					Line 5 "Password Encoding`t`t: " $RASMFASetting.PasswordEncoding
					Line 5 "Forward username only to "
					Line 5 "Radius Server`t`t`t: " $RASMFASetting.UsernameOnly.ToString()
					Line 5 "Forward the first password to "
					Line 5 "Windows authentication provider`t: " $RASMFASetting.ForwardFirstPwdToAD.ToString()
					Line 4 "Attributes"
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						Line 5 "Attribute $cnt"
						Line 6 "Name`t: $($Item.RadiusAttrName)"
						Line 6 "Vendor`t: $($Item.VendorID)"
						Line 6 "Type`t: $($Item.AttributeType)"
						Line 6 "Value`t: $($Item.Value)"
						Line 5 "" #blank separator line
					}
					Line 5 "Automation"
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						Line 5 "Automation $cnt"
						Line 6 "Enable Action`t: $($Item.Enabled.ToString())"
						Line 6 "Title`t`t: $($Item.Title)"
						Line 6 "Command`t`t: $($Item.Command)"
						Line 6 "Description`t: $($Item.Description)"
						Line 6 "Action message`t: $($Item.ActionMessage)"
						Line 6 "Image`t`t: $($Item.Image)"
						Line 6 "Autosend`t: $($Item.AutoSend.ToString())"
						Line 6 "" #blank separator line
					}
					Line 0 ""
				}
				ElseIf($RASMFASetting.Type -eq "DuoRadius")
				{
					Line 4 "Connection"
					Line 5 "Type Name`t`t`t`t: " $RASMFASetting.DisplayName
					Line 5 "Primary Server`t`t`t`t: " $RASMFASetting.Server
					Line 5 "Secondary server`t`t`t: " $RASMFASetting.BackupServer
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						Line 5 "HA mode`t`t`t`t`t: " "Active - active (parallel)"
					}
					Else
					{
						Line 5 "HA mode`t`t`t`t`t: " "Active - passive (failover)"
					}
					Line 5 "Port`t`t`t`t`t: " $RASMFASetting.Port
					Line 5 "Timeout`t`t`t`t`t: " $RASMFASetting.Timeout
					Line 5 "Retries`t`t`t`t`t: " $RASMFASetting.Retries
					Line 5 "Password Encoding`t`t`t: " $RASMFASetting.PasswordEncoding
					Line 5 "Forward username only to Radius Server`t: " $RASMFASetting.UsernameOnly.ToString()
					Line 5 "Forward the first password to "
					Line 5 "Windows authentication provider`t`t: " $RASMFASetting.ForwardFirstPwdToAD.ToString()
					Line 4 "Attributes"
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						Line 5 "Attribute $cnt"
						Line 6 "Name`t: $($Item.RadiusAttrName)"
						Line 6 "Vendor`t: $($Item.VendorID)"
						Line 6 "Type`t: $($Item.AttributeType)"
						Line 6 "Value`t: $($Item.Value)"
						Line 5 "" #blank separator line
					}
					Line 4 "Automation"
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						Line 5 "" "Automation $cnt"
						Line 6 "Enable Action`t: $($Item.Enabled.ToString())"
						Line 6 "Title`t`t: $($Item.Title)"
						Line 6 "Command`t`t: $($Item.Command)"
						Line 6 "Description`t: $($Item.Description)"
						Line 6 "Action message`t: $($Item.ActionMessage)"
						Line 6 "Image`t`t: $($Item.Image)"
						Line 6 "Autosend`t: $($Item.AutoSend.ToString())"
						Line 5 "" "" #blank separator line
					}
					Line 0 ""
				}
				ElseIf($RASMFASetting.Type -eq "FortiRadius")
				{
					Line 4 "Connection"
					Line 5 "Type Name`t`t`t`t: " $RASMFASetting.DisplayName
					Line 5 "Primary Server`t`t`t`t: " $RASMFASetting.Server
					Line 5 "Secondary server`t`t`t: " $RASMFASetting.BackupServer
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						Line 5 "HA mode`t`t`t`t`t: " "Active - active (parallel)"
					}
					Else
					{
						Line 5 "HA mode`t`t`t`t`t: " "Active - passive (failover)"
					}
					Line 5 "Port`t`t`t`t`t: " $RASMFASetting.Port
					Line 5 "Timeout`t`t`t`t`t: " $RASMFASetting.Timeout
					Line 5 "Retries`t`t`t`t`t: " $RASMFASetting.Retries
					Line 5 "Password Encoding`t`t`t: " $RASMFASetting.PasswordEncoding
					Line 5 "Forward username only to Radius Server`t: " $RASMFASetting.UsernameOnly.ToString()
					Line 5 "Forward the first password to "
					Line 5 "Windows authentication provider`t`t: " $RASMFASetting.ForwardFirstPwdToAD.ToString()
					Line 4 "Attributes"
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						Line 5 "Attribute $cnt"
						Line 6 "Name  : $($Item.Name)"
						Line 6 "Vendor: $($Item.Vendor)"
						Line 6 "Type  : $($Item.AttributeType)"
						Line 6 "Value : $($Item.Value)"
						Line 5 "" #blank separator line
					}
					Line 4 "Automation"
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						Line 5 "" "Automation $cnt"
						Line 6 "Enabled : $($Item.Enabled.ToString())"
						Line 6 "Title   : $($Item.Title)"
						Line 6 "Command : $($Item.Command)"
						Line 6 "Image   : $($Item.Image)"
						Line 6 "Autosend: $($Item.AutoSend.ToString())"
						Line 5 "" "" #blank separator line
					}
					Line 0 ""
				}
				ElseIf($RASMFASetting.Type -eq "TekRadius")
				{
					Line 4 "Connection"
					Line 5 "Type Name`t`t`t`t: " $RASMFASetting.DisplayName
					Line 5 "Primary Server`t`t`t`t: " $RASMFASetting.Server
					Line 5 "Secondary server`t`t`t: " $RASMFASetting.BackupServer
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						Line 5 "HA mode`t`t`t`t`t: " "Active - active (parallel)"
					}
					Else
					{
						Line 5 "HA mode`t`t`t`t`t: " "Active - passive (failover)"
					}
					Line 5 "Port`t`t`t`t`t: " $RASMFASetting.Port
					Line 5 "Timeout`t`t`t`t`t: " $RASMFASetting.Timeout
					Line 5 "Retries`t`t`t`t`t: " $RASMFASetting.Retries
					Line 5 "Password Encoding`t`t`t: " $RASMFASetting.PasswordEncoding
					Line 5 "Forward username only to Radius Server`t: " $RASMFASetting.UsernameOnly.ToString()
					Line 5 "Forward the first password to "
					Line 5 "Windows authentication provider`t`t: " $RASMFASetting.ForwardFirstPwdToAD.ToString()
					Line 4 "Attributes"
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						Line 5 "Attribute $cnt"
						Line 6 "Name  : $($Item.Name)"
						Line 6 "Vendor: $($Item.Vendor)"
						Line 6 "Type  : $($Item.AttributeType)"
						Line 6 "Value : $($Item.Value)"
						Line 5 "" #blank separator line
					}
					Line 4 "Automation"
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						Line 5 "" "Automation $cnt"
						Line 6 "Enabled : $($Item.Enabled.ToString())"
						Line 6 "Title   : $($Item.Title)"
						Line 6 "Command : $($Item.Command)"
						Line 6 "Image   : $($Item.Image)"
						Line 6 "Autosend: $($Item.AutoSend.ToString())"
						Line 5 "" "" #blank separator line
					}
					Line 0 ""
				}
				ElseIf($RASMFASetting.Type -eq "Radius")
				{
					Line 4 "Connection"
					Line 5 "Type Name`t`t`t`t: " $RASMFASetting.DisplayName
					Line 5 "Primary Server`t`t`t`t: " $RASMFASetting.Server
					Line 5 "Secondary server`t`t`t: " $RASMFASetting.BackupServer
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						Line 5 "HA mode`t`t`t`t`t: " "Active - active (parallel)"
					}
					Else
					{
						Line 5 "HA mode`t`t`t`t`t: " "Active - passive (failover)"
					}
					Line 5 "Port`t`t`t`t`t: " $RASMFASetting.Port
					Line 5 "Timeout`t`t`t`t`t: " $RASMFASetting.Timeout
					Line 5 "Retries`t`t`t`t`t: " $RASMFASetting.Retries
					Line 5 "Password Encoding`t`t`t: " $RASMFASetting.PasswordEncoding
					Line 5 "Forward username only to Radius Server`t: " $RASMFASetting.UsernameOnly.ToString()
					Line 5 "Forward the first password to "
					Line 5 "Windows authentication provider`t`t: " $RASMFASetting.ForwardFirstPwdToAD.ToString()
					Line 4 "Attributes"
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						Line 5 "Attribute $cnt"
						Line 6 "Name  : $($Item.Name)"
						Line 6 "Vendor: $($Item.Vendor)"
						Line 6 "Type  : $($Item.AttributeType)"
						Line 6 "Value : $($Item.Value)"
						Line 5 "" #blank separator line
					}
					Line 4 "Automation"
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						Line 5 "" "Automation $cnt"
						Line 6 "Enabled : $($Item.Enabled.ToString())"
						Line 6 "Title   : $($Item.Title)"
						Line 6 "Command : $($Item.Command)"
						Line 6 "Image   : $($Item.Image)"
						Line 6 "Autosend: $($Item.AutoSend.ToString())"
						Line 5 "" "" #blank separator line
					}
					Line 0 ""
				}
				ElseIf($RASMFASetting.Type -eq "Deepnet")
				{
					Line 4 "Connection"
					Line 5 "Type`t`t: " $RASMFASetting.DeepnetType
					Line 5 "Server`t`t: " $RASMFASetting.Server
					Line 5 "Port`t`t: " $RASMFASetting.Port.ToString()
					Line 5 "Enable SSL`t: " $RASMFASetting.SSL.ToString()
					Line 5 "Agent`t`t: " $RASMFASetting.DeepnetAgent
					Line 4 "Application"
					Line 5 "          Application`t: " $RASMFASetting.App
					Line 5 "          Domain`t: " $RASMFASetting.DefaultDomain
					Line 4 "Authentication"
					Line 5 "          Mode`t`t: " $DeepNetAuthMode
					Line 5 "          Token Type`t: " $RASMFASetting.TokenType.ToString()
					Line 5 "          Allow Channels: " "Email: $($RASMFASetting.ActivateEmail.ToString())"
					Line 5 "                          " "SMS: $($RASMFASetting.ActivateSMS.ToString())"
				}
				ElseIf($RASMFASetting.Type -eq "SafeNet")
				{
					Switch($RASMFASetting.AuthMode)
					{
						"MandatoryForAllUsers"						{$SafeNetAuthMode = "Mandatory for all users"; Break}
						"CreateTokenForDomainAuthenticatedUsers"	{$SafeNetAuthMode = "Create token for Domain Authenticated users"; Break}
						"UsersWithSafeNetAcc"						{$SafeNetAuthMode = "Use only for users with a safe account"; Break}
						Default										{$SafeNetAuthMode = "Safenet mode not found: $($RASMFASetting.AuthMode)"; Break}
					}

					Line 4 "Connection"
					Line 5 "OTP Service URL : " $RASMFASetting.DeepnetType
					Line 4 "Authentication"
					Line 5 "Mode`t`t`t: " $SafeNetAuthMode
					Line 5 "TMS Web API URL`t`t: " $RASMFASetting.TMSWebApiURL
					Line 5 "User Repository`t`t: " $RASMFASetting.UserRepository
				}
				ElseIf($RASMFASetting.Type -eq "GAuthTOTP")
				{
					Switch($RASMFASetting.UserEnrollment)
					{
						"Allow"			{$GAuthAllow = "Allow"; Break}
						"AllowUntil"	{$GAuthAllow = "Allow until"; Break}
						"DoNotAllow"	{$GAuthAllow = "Do not allow"; Break}
						Default			{$GAuthAllow = "Google Authenticator Allow status not found: $($RASMFASetting.UserEnrollment)"; Break}
					}
					
					Switch($RASMFASetting.Tolerance)
					{
						0		{$TOTPTolerance = "None"; Break}
						30		{$TOTPTolerance = "+/- 30 seconds"; Break}
						60		{$TOTPTolerance = "+/- 60 seconds"; Break}
						90		{$TOTPTolerance = "+/- 90 seconds"; Break}
						120		{$TOTPTolerance = "+/- 120 seconds"; Break}
						Default	{$TOTPTolerance = "TOTP tolerence not found: $()"; Break}
					}
					
					Line 4 "Type Name: " $RASMFASetting.Type
					Line 4 "User Enrollment"
					Line 5 $GAuthAllow
					If($GAuthAllow -eq "Allow until")
					{
						$GAuthFullDate = $RASMFASetting.UntilDateTime
						$GAuthDate     = ($GAuthFullDate.ToUniversalTime()).ToShortDateString()
						$GAuthTime     = ($GAuthFullDate.ToUniversalTime()).ToLongTimeString()
						Line 6 "Date: " $GAuthDate
						Line 6 "Time: " $GAuthTime
					}
					Line 4 "Authentication"
					Line 5 "TOTP tolerence: " $TOTPTolerance
				}

				<#If($RASMFASetting.RestrictionMode -eq "Exclusion")
				{
					Line 3 "Enable MFA for all users except"
				}
				Else
				{
					Line 3 "Disable MFA for all users except"
				}#>
				Line 0 ""

				<#Line 2 "Restriction"
				Line 3 "User or group list`t`t`t: " $RASMFASetting.ExcludeUserGroup.ToString()
				If($RASMFASetting.ExcludeUserGroup)
				{
					If($RASMFASetting.ExcludeUserGroupList.Count -gt 0)
					{
						ForEach($Item in $RASMFASetting.ExcludeUserGroupList)
						{
							Line 8 "  " "User: $($Item.Account)"
							Line 8 "  " "Type: $($Item.Type)"
							Line 8 "  "
						}
					}
				}
					
				Line 3 "Client IP list`t`t`t`t: " $RASMFASetting.ExcludeClientIPs.ToString()
				If($RASMFASetting.ExcludeClientIPs)
				{
					If($RASMFASetting.ExcludeClientIPList.Count -gt 0)
					{
						$cnt     = -1
						$MaxFrom = (($RASMFASetting.ExcludeClientIPList.From | Measure-Object -Property length -maximum).Maximum * -1)
						$MaxTo   = (($RASMFASetting.ExcludeClientIPList.To | Measure-Object -Property length -maximum).Maximum * -1)

						ForEach($Item in $RASMFASetting.ExcludeClientIPList)
						{
							$cnt++
							$tmp = ("From: {0,$($MaxFrom)} To: {1,$($MaxTo)}" -f $Item.From, $Item.To)
							
							If($cnt -eq 0)
							{
								Line 6 "IPv4 Addresses`t: " $tmp
							}
							Else
							{
								Line 8 "  " $tmp
							}
						}
					}
					
					If($RASMFASetting.ExcludeClientIPv6List.Count -gt 0)
					{
						$cnt     = -1
						$MaxFrom = (($RASMFASetting.ExcludeClientIPv6List.From | Measure-Object -Property length -maximum).Maximum * -1)
						$MaxTo   = (($RASMFASetting.ExcludeClientIPv6List.To | Measure-Object -Property length -maximum).Maximum * -1)

						ForEach($Item in $RASMFASetting.ExcludeClientIPv6List)
						{
							$cnt++
							$tmp = ("From: {0,$($MaxFrom)} To: {1,$($MaxTo)}" -f $Item.From, $Item.To)
							
							If($cnt -eq 0)
							{
								Line 6 "IPv6 Addresses`t: " $tmp
							}
							Else
							{
								Line 8 "  " $tmp
							}
						}
					}
				}
				Line 3 "Client MAC list`t`t`t`t: " $RASMFASetting.ExcludeClientMAC.ToString()
				If($RASMFASetting.ExcludeClientMAC)
				{
					$cnt = -1
					ForEach($MAC in $RASMFASetting.ExcludeClientMACList)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							Line 6 "MAC Address`t: " $MAC
						}
						Else
						{
							Line 8 "  " $MAC
						}
					}
				}
				Line 3 "Connection to the following Gateway IPs`t: " $RASMFASetting.ExcludeClientGWIPs.ToString()
				If($RASMFASetting.ExcludeClientGWIPs)
				{
					$cnt = -1
					ForEach($Server in $RASMFASetting.ExcludeClientGWIPList)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							Line 6 "Server Name`t: " $Server
						}
						Else
						{
							Line 8 "  " $Server
						}
					}
				}#>
			}
			Line 0 ""
		}
		If($HTML)
		{
			$rowdata = @()
			$columnHeaders = @("Provider",($Script:htmlsb),$RASMFASettingProvider,$htmlwhite)
			If($RASMFASettingProvider -ne "None")
			{
				If($RASMFASetting.Type -eq "AzureRadius")
				{
					$rowdata += @(,( "     General",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          Enable MFA provider in site",($Script:htmlsb),$RASMFASetting.Enabled.ToString(),$htmlwhite))
					$rowdata += @(,("          Name",($Script:htmlsb),$RASMFASetting.Name,$htmlwhite))
					$rowdata += @(,("          Description",($Script:htmlsb), $RASMFASetting.Description,$htmlwhite))
					$rowdata += @(,("          Type",($Script:htmlsb), $RASMFASetting.DisplayName,$htmlwhite))
					$rowdata += @(,( "     Connection",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          Display Name",($Script:htmlsb),$RASMFASetting.DisplayName,$htmlwhite))
					$rowdata += @(,("          Primary Server",($Script:htmlsb),$RASMFASetting.Server,$htmlwhite))
					$rowdata += @(,("          Secondary server",($Script:htmlsb), $RASMFASetting.BackupServer,$htmlwhite))
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$rowdata += @(,("          HA mode",($Script:htmlsb), "Active - active (parallel)",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("          HA mode",($Script:htmlsb), "Active - passive (failover)",$htmlwhite))
					}
					$rowdata += @(,("          Port",($Script:htmlsb),$RASMFASetting.Port,$htmlwhite))
					$rowdata += @(,("          Timeout",($Script:htmlsb),$RASMFASetting.Timeout,$htmlwhite))
					$rowdata += @(,("          Retries",($Script:htmlsb),$RASMFASetting.Retries,$htmlwhite))
					$rowdata += @(,("          Password Encoding",($Script:htmlsb),$RASMFASetting.PasswordEncoding.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward username only to Radius Server",($Script:htmlsb),$RASMFASetting.UsernameOnly.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward the first password to Windows authentication provider",($Script:htmlsb),$RASMFASetting.ForwardFirstPwdToAD.ToString(),$htmlwhite))
					$rowdata += @(,( "     Attributes",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Attribute $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Name: $($Item.RadiusAttrName)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Vendor: $($Item.VendorID)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Type: $($Item.AttributeType)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Value: $($Item.Value)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
					$rowdata += @(,( "     Automation",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Automation $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Enabled Action: $($Item.Enabled.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Title: $($Item.Title)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Command: $($Item.Command)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Description: $($Item.Description)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Action message: $($Item.ActionMessage)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Image: $($Item.Image)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Autosend: $($Item.AutoSend.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "DuoRadius")
				{
					$rowdata += @(,( "     Connection",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          Type Name",($Script:htmlsb),$RASMFASetting.DisplayName,$htmlwhite))
					$rowdata += @(,("          Primary Server",($Script:htmlsb),$RASMFASetting.Server,$htmlwhite))
					$rowdata += @(,( "          Secondary server",($Script:htmlsb), $RASMFASetting.BackupServer,$htmlwhite))
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$rowdata += @(,( "          HA mode",($Script:htmlsb), "Active - active (parallel)",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,( "          HA mode",($Script:htmlsb), "Active - passive (failover)",$htmlwhite))
					}
					$rowdata += @(,("          Port",($Script:htmlsb),$RASMFASetting.Port,$htmlwhite))
					$rowdata += @(,("          Timeout",($Script:htmlsb),$RASMFASetting.Timeout,$htmlwhite))
					$rowdata += @(,("          Retries",($Script:htmlsb),$RASMFASetting.Retries,$htmlwhite))
					$rowdata += @(,("          Password Encoding",($Script:htmlsb),$RASMFASetting.PasswordEncoding.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward username only to Radius Server",($Script:htmlsb),$RASMFASetting.UsernameOnly.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward the first password to Windows authentication provider",($Script:htmlsb),$RASMFASetting.ForwardFirstPwdToAD.ToString(),$htmlwhite))
					$rowdata += @(,( "     Attributes",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Attribute $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Name: $($Item.Name)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Vendor: $($Item.Vendor)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Type: $($Item.AttributeType)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Value: $($Item.Value)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
					$rowdata += @(,( "     Automation",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Automation $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Enabled: $($Item.Enabled.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Title: $($Item.Title)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Command: $($Item.Command)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Image: $($Item.Image)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Autosend: $($Item.AutoSend.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "FortiRadius")
				{
					$rowdata += @(,( "     Connection",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          Type Name",($Script:htmlsb),$RASMFASetting.DisplayName,$htmlwhite))
					$rowdata += @(,("          Primary Server",($Script:htmlsb),$RASMFASetting.Server,$htmlwhite))
					$rowdata += @(,( "          Secondary server",($Script:htmlsb), $RASMFASetting.BackupServer,$htmlwhite))
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$rowdata += @(,( "          HA mode",($Script:htmlsb), "Active - active (parallel)",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,( "          HA mode",($Script:htmlsb), "Active - passive (failover)",$htmlwhite))
					}
					$rowdata += @(,("          Port",($Script:htmlsb),$RASMFASetting.Port,$htmlwhite))
					$rowdata += @(,("          Timeout",($Script:htmlsb),$RASMFASetting.Timeout,$htmlwhite))
					$rowdata += @(,("          Retries",($Script:htmlsb),$RASMFASetting.Retries,$htmlwhite))
					$rowdata += @(,("          Password Encoding",($Script:htmlsb),$RASMFASetting.PasswordEncoding.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward username only to Radius Server",($Script:htmlsb),$RASMFASetting.UsernameOnly.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward the first password to Windows authentication provider",($Script:htmlsb),$RASMFASetting.ForwardFirstPwdToAD.ToString(),$htmlwhite))
					$rowdata += @(,( "     Attributes",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Attribute $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Name: $($Item.Name)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Vendor: $($Item.Vendor)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Type: $($Item.AttributeType)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Value: $($Item.Value)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
					$rowdata += @(,( "     Automation",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Automation $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Enabled: $($Item.Enabled.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Title: $($Item.Title)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Command: $($Item.Command)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Image: $($Item.Image)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Autosend: $($Item.AutoSend.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "TekRadius")
				{
					$rowdata += @(,( "     Connection",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          Type Name",($Script:htmlsb),$RASMFASetting.DisplayName,$htmlwhite))
					$rowdata += @(,("          Primary Server",($Script:htmlsb),$RASMFASetting.Server,$htmlwhite))
					$rowdata += @(,( "          Secondary server",($Script:htmlsb), $RASMFASetting.BackupServer,$htmlwhite))
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$rowdata += @(,( "          HA mode",($Script:htmlsb), "Active - active (parallel)",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,( "          HA mode",($Script:htmlsb), "Active - passive (failover)",$htmlwhite))
					}
					$rowdata += @(,("          Port",($Script:htmlsb),$RASMFASetting.Port,$htmlwhite))
					$rowdata += @(,("          Timeout",($Script:htmlsb),$RASMFASetting.Timeout,$htmlwhite))
					$rowdata += @(,("          Retries",($Script:htmlsb),$RASMFASetting.Retries,$htmlwhite))
					$rowdata += @(,("          Password Encoding",($Script:htmlsb),$RASMFASetting.PasswordEncoding.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward username only to Radius Server",($Script:htmlsb),$RASMFASetting.UsernameOnly.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward the first password to Windows authentication provider",($Script:htmlsb),$RASMFASetting.ForwardFirstPwdToAD.ToString(),$htmlwhite))
					$rowdata += @(,( "     Attributes",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Attribute $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Name: $($Item.Name)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Vendor: $($Item.Vendor)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Type: $($Item.AttributeType)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Value: $($Item.Value)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
					$rowdata += @(,( "     Automation",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Automation $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Enabled: $($Item.Enabled.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Title: $($Item.Title)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Command: $($Item.Command)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Image: $($Item.Image)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Autosend: $($Item.AutoSend.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "Radius")
				{
					$rowdata += @(,( "     Connection",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,("          Type Name",($Script:htmlsb),$RASMFASetting.DisplayName,$htmlwhite))
					$rowdata += @(,("          Primary Server",($Script:htmlsb),$RASMFASetting.Server,$htmlwhite))
					$rowdata += @(,( "          Secondary server",($Script:htmlsb), $RASMFASetting.BackupServer,$htmlwhite))
					If($RASMFASetting.HAMode -eq "Parallel")
					{
						$rowdata += @(,( "          HA mode",($Script:htmlsb), "Active - active (parallel)",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,( "          HA mode",($Script:htmlsb), "Active - passive (failover)",$htmlwhite))
					}
					$rowdata += @(,("          Port",($Script:htmlsb),$RASMFASetting.Port,$htmlwhite))
					$rowdata += @(,("          Timeout",($Script:htmlsb),$RASMFASetting.Timeout,$htmlwhite))
					$rowdata += @(,("          Retries",($Script:htmlsb),$RASMFASetting.Retries,$htmlwhite))
					$rowdata += @(,("          Password Encoding",($Script:htmlsb),$RASMFASetting.PasswordEncoding.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward username only to Radius Server",($Script:htmlsb),$RASMFASetting.UsernameOnly.ToString(),$htmlwhite))
					$rowdata += @(,("          Forward the first password to Windows authentication provider",($Script:htmlsb),$RASMFASetting.ForwardFirstPwdToAD.ToString(),$htmlwhite))
					$rowdata += @(,( "     Attributes",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AttributeInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Attribute $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Name: $($Item.Name)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Vendor: $($Item.Vendor)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Type: $($Item.AttributeType)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Value: $($Item.Value)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
					$rowdata += @(,( "     Automation",($Script:htmlsb),"",$htmlwhite))
					$cnt=0
					ForEach($Item in $RASMFASetting.AutomationInfoList)
					{
						$cnt++
						$rowdata += @(,( "",($Script:htmlsb), "Automation $cnt",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Enabled: $($Item.Enabled.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Title: $($Item.Title)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Command: $($Item.Command)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Image: $($Item.Image)",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "     Autosend: $($Item.AutoSend.ToString())",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb), "",$htmlwhite)) #blank separator line
					}
				}
				ElseIf($RASMFASetting.Type -eq "Deepnet")
				{
					$rowdata += @(,( "     Connection",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,( "          Type",($Script:htmlsb), $RASMFASetting.DeepnetType,$htmlwhite))
					$rowdata += @(,( "          Server",($Script:htmlsb), $RASMFASetting.Server,$htmlwhite))
					$rowdata += @(,( "          Port",($Script:htmlsb), $RASMFASetting.Port.ToString(),$htmlwhite))
					$rowdata += @(,( "          Enable SSL",($Script:htmlsb), $RASMFASetting.SSL.ToString(),$htmlwhite))
					$rowdata += @(,( "          Agent",($Script:htmlsb), $RASMFASetting.DeepnetAgent,$htmlwhite))
					$rowdata += @(,( "     Application",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,( "          Application",($Script:htmlsb), $RASMFASetting.App,$htmlwhite))
					$rowdata += @(,( "          Domain",($Script:htmlsb), $RASMFASetting.DefaultDomain,$htmlwhite))
					$rowdata += @(,( "     Authentication",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,( "          Mode",($Script:htmlsb), $DeepNetAuthMode,$htmlwhite))
					$rowdata += @(,( "          Token Type",($Script:htmlsb), $RASMFASetting.TokenType.ToString(),$htmlwhite))
					$rowdata += @(,( "          Allow Channels",($Script:htmlsb), "Email: $($RASMFASetting.ActivateEmail.ToString())",$htmlwhite))
					$rowdata += @(,( "                        ",($Script:htmlsb), "SMS: $($RASMFASetting.ActivateSMS.ToString())",$htmlwhite))
				}
				ElseIf($RASMFASetting.Type -eq "SafeNet")
				{
					Switch($RASMFASetting.AuthMode)
					{
						"MandatoryForAllUsers"						{$SafeNetAuthMode = "Mandatory for all users"; Break}
						"CreateTokenForDomainAuthenticatedUsers"	{$SafeNetAuthMode = "Create token for Domain Authenticated users"; Break}
						"UsersWithSafeNetAcc"						{$SafeNetAuthMode = "Use only for users with a safe account"; Break}
						Default										{$SafeNetAuthMode = "Safenet mode not found: $($RASMFASetting.AuthMode)"; Break}
					}

					$rowdata += @(,( "     Connection",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,( "          OTP Service URL",($Script:htmlsb),$RASMFASetting.OTPServiceURL,$htmlwhite))
					$rowdata += @(,( "     Authentication",($Script:htmlsb),"",$htmlwhite))
					$rowdata += @(,( "          Mode",($Script:htmlsb), $SafeNetAuthMode,$htmlwhite))
					$rowdata += @(,( "          TMS Web API URL",($Script:htmlsb), $RASMFASetting.TMSWebApiURL,$htmlwhite))
					$rowdata += @(,( "          User Repository",($Script:htmlsb), $RASMFASetting.UserRepository,$htmlwhite))
				}
				ElseIf($RASMFASetting.Type -eq "GAuthTOTP")
				{
					Switch($RASMFASetting.UserEnrollment)
					{
						"Allow"			{$GAuthAllow = "Allow"; Break}
						"AllowUntil"	{$GAuthAllow = "Allow until"; Break}
						"DoNotAllow"	{$GAuthAllow = "Do not allow"; Break}
						Default			{$GAuthAllow = "Google Authenticator Allow status not found: $($RASMFASetting.UserEnrollment)"; Break}
					}
					
					Switch($RASMFASetting.Tolerance)
					{
						0		{$TOTPTolerance = "None"; Break}
						30		{$TOTPTolerance = "+/- 30 seconds"; Break}
						60		{$TOTPTolerance = "+/- 60 seconds"; Break}
						90		{$TOTPTolerance = "+/- 90 seconds"; Break}
						120		{$TOTPTolerance = "+/- 120 seconds"; Break}
						Default	{$TOTPTolerance = "TOTP tolerence not found: $()"; Break}
					}
					
					$rowdata += @(,( "     Type Name",($Script:htmlsb),$RASMFASetting.Type,$htmlwhite))
					$rowdata += @(,( "     User Enrollment",($Script:htmlsb),"",$htmlwhite))
					If($GAuthAllow -eq "Allow until")
					{
						$GAuthFullDate = $RASMFASetting.UntilDateTime
						$GAuthDate     = ($GAuthFullDate.ToUniversalTime()).ToShortDateString()
						$GAuthTime     = ($GAuthFullDate.ToUniversalTime()).ToLongTimeString()
						$rowdata += @(,( "          $GAuthAllow",($Script:htmlsb),"Date: $GAuthDate",$htmlwhite))
						$rowdata += @(,( "",($Script:htmlsb),"Time: $GAuthTime",$htmlwhite))
					}
					Else
					{
						$rowdata += @(,( "          $GAuthAllow",($Script:htmlsb),"",$htmlwhite))
					}
					$rowdata += @(,( "     Authentication",($Script:htmlsb), "",$htmlwhite))
					$rowdata += @(,( "          TOTP tolerence",($Script:htmlsb), $TOTPTolerance,$htmlwhite))
				}

				<#If($RASMFASetting.RestrictionMode -eq "Exclusion")
				{
					$rowdata += @(,("Enable MFA for all users except",($Script:htmlsb),"",$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Disable MFA for all users except",($Script:htmlsb),"",$htmlwhite))
				}#>

				$msg = "Provider settings"
				$columnWidths = @("300","175")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""

				<#
				$rowdata = @()
				$columnHeaders = @("User or group list",($Script:htmlsb),$RASMFASetting.ExcludeUserGroup.ToString(),$htmlwhite)
				If($RASMFASetting.ExcludeUserGroup)
				{
					If($RASMFASetting.ExcludeUserGroupList.Count -gt 0)
					{
						ForEach($Item in $RASMFASetting.ExcludeUserGroupList)
						{
							$rowdata += @(,("",($Script:htmlsb),"User: $($Item.Account)",$htmlwhite))
							$rowdata += @(,("",($Script:htmlsb),"Type: $($Item.Type)",$htmlwhite))
							$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
						}
					}
				}
				
				$rowdata += @(,("Client IP list",($Script:htmlsb),$RASMFASetting.ExcludeClientIPs.ToString(),$htmlwhite))
				If($RASMFASetting.ExcludeClientIPs)
				{
					If($RASMFASetting.ExcludeClientIPList.Count -gt 0)
					{
						$cnt     = -1
						$MaxFrom = (($RASMFASetting.ExcludeClientIPList.From | Measure-Object -Property length -maximum).Maximum * -1)
						$MaxTo   = (($RASMFASetting.ExcludeClientIPList.To | Measure-Object -Property length -maximum).Maximum * -1)

						ForEach($Item in $RASMFASetting.ExcludeClientIPList)
						{
							$cnt++
							$tmp = ("From: {0,$($MaxFrom)} To: {1,$($MaxTo)}" -f $Item.From, $Item.To)
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("     IPv4 Addresses",($Script:htmlsb),$tmp,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),$tmp,$htmlwhite))
							}
						}
					}
					
					If($RASMFASetting.ExcludeClientIPv6List.Count -gt 0)
					{
						$cnt     = -1
						$MaxFrom = (($RASMFASetting.ExcludeClientIPv6List.From | Measure-Object -Property length -maximum).Maximum * -1)
						$MaxTo   = (($RASMFASetting.ExcludeClientIPv6List.To | Measure-Object -Property length -maximum).Maximum * -1)

						ForEach($Item in $RASMFASetting.ExcludeClientIPv6List)
						{
							$cnt++
							$tmp = ("From: {0,$($MaxFrom)} To: {1,$($MaxTo)}" -f $Item.From, $Item.To)
							
							If($cnt -eq 0)
							{
								$rowdata += @(,("     IPv6 Addresses",($Script:htmlsb),$tmp,$htmlwhite))
							}
							Else
							{
								$rowdata += @(,("",($Script:htmlsb),$tmp,$htmlwhite))
							}
						}
					}
				}
				$rowdata += @(,("Client MAC list",($Script:htmlsb),$RASMFASetting.ExcludeClientMAC.ToString(),$htmlwhite))
				If($RASMFASetting.ExcludeClientMAC)
				{
					$cnt = -1
					ForEach($MAC in $RASMFASetting.ExcludeClientMACList)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("     MAC Address",($Script:htmlsb),$MAC,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$MAC,$htmlwhite))
						}
					}
				}
				$rowdata += @(,("Connection to the following Gateway IPs",($Script:htmlsb),$RASMFASetting.ExcludeClientGWIPs.ToString(),$htmlwhite))
				If($RASMFASetting.ExcludeClientGWIPs)
				{
					$cnt = -1
					ForEach($Server in $RASMFASetting.ExcludeClientGWIPList)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("     Server Name",($Script:htmlsb),$Server,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$Server,$htmlwhite))
						}
					}
				}
				
				$msg = "Restriction"
				$columnWidths = @("300","175")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
				#>
			}
		}
	}
}

Function OutputRASAllowedDevicesSetting
{
	Param([object] $RASAllowedDevices)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Allowed devices"
	
	Switch ($RASAllowedDevices.AllowClientMode)
	{
		"AllowAllClientsConnectToSystem"			
			{$RASAllowedDevicesAllowClientMode = "Allow all clients to connect to the system"; Break}
		"AllowSelectedClientsConnectToSystem"		
			{$RASAllowedDevicesAllowClientMode = "Allow only the selected clients to connect to the system"; Break}
		"AllowSelectedClientsListPublishedItems"	
			{$RASAllowedDevicesAllowClientMode = "Allow only the selected clients to list the published items"; Break}
		Default										
			{$RASAllowedDevicesAllowClientMode = "Unable to determine Allow Client Mode: $($RASAllowedDevices.AllowClientMode)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Allowed devices"
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Secure Access"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     Allow only clients with the latest security patches"; Value = $RASAllowedDevices.AllowClientWithSecurityPatchesOnly.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = "Device Access"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     Mode"; Value = $RASAllowedDevicesAllowClientMode; }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 175;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""

		$AllowedDevicesWordTable = @()
		
		$AllowedDevicesWordTable += @{
			ClientStatus       = $RASAllowedDevices.AllowClientAndroid
			ClientName         = "Android client"
			ClientMinimumBuild = $RASAllowedDevices.MinBuildAndroid
		}
		
		$AllowedDevicesWordTable += @{
			ClientStatus       = $RASAllowedDevices.AllowClientChromeApp
			ClientName         = "Chrome OS client"
			ClientMinimumBuild = $RASAllowedDevices.MinBuildChromeApp
		}
		
		$AllowedDevicesWordTable += @{
			ClientStatus       = $RASAllowedDevices.AllowClientIOS
			ClientName         = "iOS/iPadOS client"
			ClientMinimumBuild = $RASAllowedDevices.MinBuildIOS
		}
		
		$AllowedDevicesWordTable += @{
			ClientStatus       = $RASAllowedDevices.AllowClientLinux
			ClientName         = "Linux client"
			ClientMinimumBuild = $RASAllowedDevices.MinBuildLinux
		}
		
		$AllowedDevicesWordTable += @{
			ClientStatus       = $RASAllowedDevices.AllowClientMAC
			ClientName         = "macOS client"
			ClientMinimumBuild = $RASAllowedDevices.MinBuildMAC
		}
		
		$AllowedDevicesWordTable += @{
			ClientStatus       = $RASAllowedDevices.AllowClientWeb
			ClientName         = "User Portal (Web client)"
			ClientMinimumBuild = $RASAllowedDevices.MinBuildWeb
		}
		
		$AllowedDevicesWordTable += @{
			ClientStatus       = $RASAllowedDevices.AllowClientWindows
			ClientName         = "Windows client"
			ClientMinimumBuild = $RASAllowedDevices.MinBuildWindows
		}
		
		$AllowedDevicesWordTable += @{
			ClientStatus       = $RASAllowedDevices.AllowClientWyse
			ClientName         = "Wyse client"
			ClientMinimumBuild = $RASAllowedDevices.MinBuildWyse
		}
		
		If($AllowedDevicesWordTable.Count -gt 0)
		{
			$Table = AddWordTable -Hashtable $AllowedDevicesWordTable `
			-Columns ClientStatus, ClientName, ClientMinimumBuild `
			-Headers "Enabled", "Clients", "Minimum build" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 50;
			$Table.Columns.Item(2).Width = 125;
			$Table.Columns.Item(3).Width = 100;
			
			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}

		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $RASAllowedDevices.ReplicateSettings.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 100;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 0 "Allowed devices"
		Line 1 "Secure Access"
		Line 2 "Allow only clients with the latest security patches: " $RASAllowedDevices.AllowClientWithSecurityPatchesOnly.ToString()
		Line 1 "Device Access"
		Line 2 "Mode: " $RASAllowedDevicesAllowClientMode
		Line 0 ""
		Line 2 "Enabled Clients                  Minimum build"
		Line 2 "=============================================="
		#		1234567S123456789012345678901234S12345
		#       False   User Portal (Web client) 99999
		Line 2 ( "{0,-7} {1,-24} {2,-5}" -f $RASAllowedDevices.AllowClientWindows, "Windows client", $RASAllowedDevices.MinBuildWindows)
		Line 2 ( "{0,-7} {1,-24} {2,-5}" -f $RASAllowedDevices.AllowClientWeb, "User Portal (Web client)", $RASAllowedDevices.MinBuildWeb)
		Line 2 ( "{0,-7} {1,-24} {2,-5}" -f $RASAllowedDevices.AllowClientMAC, "macOS client", $RASAllowedDevices.MinBuildMAC)
		Line 2 ( "{0,-7} {1,-24} {2,-5}" -f $RASAllowedDevices.AllowClientLinux, "Linux client", $RASAllowedDevices.MinBuildLinux)
		Line 2 ( "{0,-7} {1,-24} {2,-5}" -f $RASAllowedDevices.AllowClientIOS, "iOS/iPadOS client", $RASAllowedDevices.MinBuildIOS)
		Line 2 ( "{0,-7} {1,-24} {2,-5}" -f $RASAllowedDevices.AllowClientAndroid, "Android client", $RASAllowedDevices.MinBuildAndroid)
		Line 2 ( "{0,-7} {1,-24} {2,-5}" -f $RASAllowedDevices.AllowClientChromeApp, "Chrome OS client", $RASAllowedDevices.MinBuildChromeApp)
		Line 2 ( "{0,-7} {1,-24} {2,-5}" -f $RASAllowedDevices.AllowClientWyse, "Wyse client", $RASAllowedDevices.MinBuildWyse)
		Line 0 ""
		Line 2 "Settings are replicated to all Sites: " $RASAllowedDevices.ReplicateSettings.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Allowed devices"

		$rowdata = @()
		$columnHeaders = @("Allow only clients with the latest security patches",($Script:htmlsb),$RASAllowedDevices.AllowClientWithSecurityPatchesOnly.ToString(),$htmlwhite)

		$msg = "Secure Access"
		$columnWidths = @("300","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""

		$rowdata = @()
		$columnHeaders = @("Mode",($Script:htmlsb),$RASAllowedDevicesAllowClientMode,$htmlwhite)

		$msg = "Device Access"
		$columnWidths = @("300","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""

		$rowdata = @()

		$rowdata += @(,($RASAllowedDevices.AllowClientWindows,$htmlwhite,"Windows client",$htmlwhite,$RASAllowedDevices.MinBuildWindows,$htmlwhite))
		$rowdata += @(,($RASAllowedDevices.AllowClientWeb,$htmlwhite,"User Portal (Web client)",$htmlwhite,$RASAllowedDevices.MinBuildWeb,$htmlwhite))
		$rowdata += @(,($RASAllowedDevices.AllowClientMAC,$htmlwhite,"macOS client",$htmlwhite,$RASAllowedDevices.MinBuildMAC,$htmlwhite))
		$rowdata += @(,($RASAllowedDevices.AllowClientLinux,$htmlwhite,"Linux client",$htmlwhite,$RASAllowedDevices.MinBuildLinux,$htmlwhite))
		$rowdata += @(,($RASAllowedDevices.AllowClientIOS,$htmlwhite,"iOS/iPadOS client",$htmlwhite,$RASAllowedDevices.MinBuildIOS,$htmlwhite))
		$rowdata += @(,($RASAllowedDevices.AllowClientAndroid,$htmlwhite,"Android client",$htmlwhite,$RASAllowedDevices.MinBuildAndroid,$htmlwhite))
		$rowdata += @(,($RASAllowedDevices.AllowClientChromeApp,$htmlwhite,"Chrome OS client",$htmlwhite,$RASAllowedDevices.MinBuildChromeApp,$htmlwhite))
		$rowdata += @(,($RASAllowedDevices.AllowClientWyse,$htmlwhite,"Wyse client",$htmlwhite,$RASAllowedDevices.MinBuildWyse,$htmlwhite))
		
		$columnHeaders = @(
		"Enabled",($Script:htmlsb),
		"Clients",($Script:htmlsb),
		"Minimum build",($Script:htmlsb))

		$msg = ""
		$columnWidths = @("55","175","100")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""

		$rowdata = @()
		$columnHeaders = @("Settings are replicated to all Sites",($Script:htmlsb),$RASAllowedDevices.ReplicateSettings.ToString(),$htmlwhite)

		$msg = ""
		$columnWidths = @("183","100")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}
#endregion

#region process policies
Function ProcessPolicies
{
	Write-Verbose "$(Get-Date -Format G): Processing Policies"
	
	OutputPoliciesSectionPage
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Policies Summary"
	
	$Policies = Get-RASClientPolicy -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Policies information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Policies information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Policies information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Policies information"
		}
	}
	ElseIf($? -and $null -eq $Policies)
	{
		Write-Host "
		No Policies information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Policies information was found"
		}
		If($Text)
		{
			Line 0 "No Policies information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Policies information was found"
		}
	}
	Else
	{
		OutputPoliciesSummary $Policies
		OutputPoliciesDetails $Policies
	}

}

Function OutputPoliciesSectionPage
{
	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "Policies"
	}
	If($Text)
	{
		Line 0 "Policies"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "Policies"
	}
}

Function OutputPoliciesSummary
{
	Param([object] $Policies)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Policies Summary"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Policies"
	}
	If($Text)
	{
		Line 1 "Policies"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Policies"
	}
	
	ForEach($Policy in $Policies)
	{
		$ClientOptions   = $Policy.ClientPolicy.ClientOptions
		$ControlSettings = $Policy.ClientPolicy.ControlSettings
		$Redirection     = $Policy.ClientPolicy.Redirection
		$Session         = $Policy.ClientPolicy.Session
		$Categories      = @()
		
		If($Redirection.Enabled)
		{
			$Categories += "Redirection"
		}
		
		If(	
			$ControlSettings.ControlSettingsConnections.Enabled -or 
			$ControlSettings.Password.Enabled -or 
			$ControlSettings.ImportExport.Enabled)
		{
			$Categories += "Control settings"
		}
		
		If( 
			$ClientOptions.Connection.Enabled -or 
			$ClientOptions.Logging.Enabled -or 
			$ClientOptions.PCKeyboard.Enabled -or 
			$ClientOptions.Update.Enabled -or 
			$ClientOptions.SingleSignOn.Enabled -or 
			$ClientOptions.Global.Enabled -or 
			$ClientOptions.Language.Enabled -or 
			$ClientOptions.Printing.Enabled -or 
			$ClientOptions.WindowsClient.Enabled -or 
			$ClientOptions.RemoteFxUsbRedirection.Enabled)
		{
			$Categories += "Client options"
		}
		
		If( 
			$Session.PrimaryConnection.Enabled -or 		
			$Session.SecondaryConnections.Enabled -or 
			$Session.Reconnection.Enabled -or 
			$Session.ComputerName.Enabled -or 
			$Session.ConnectionAdvancedSettings.Enabled -or 
			$Session.WebAuthentication.Enabled -or 
			$Session.MultiFactorAuthentication.Enabled -or 
			$Session.SessionPreLaunch.Enabled -or 
			$Session.LocalProxyAddress.Enabled -or 
			$Session.Settings.Enabled -or 
			$Session.MultiMonitor.Enabled -or 
			$Session.PublishedApplications.Enabled -or 	
			$Session.DesktopOptions.Enabled -or 
			$Session.Browser.Enabled -or 
			$Session.Printing.Enabled -or 
			$Session.Scanning.Enabled -or 
			$Session.Audio.Enabled -or 
			$Session.Keyboard.Enabled -or 
			$Session.Clipboard.Enabled -or 
			$Session.DiskDrives.Enabled -or 
			$Session.Devices.Enabled -or 
			$Session.Ports.Enabled -or 
			$Session.SmartCards.Enabled -or 
			$Session.WindowsTouchInput.Enabled -or 
			$Session.FileTransfer.Enabled -or 
			$Session.Performance.Enabled -or 
			$Session.Compression.Enabled -or 
			$Session.Network.Enabled -or 
			$Session.AdvancedSettings.Enabled -or 	
			$Session.ServerAuthentication.Enabled 		
		)
		{
			$Categories += "Session"
		}

		If($MSWord -or $PDF)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Name"; Value = $Policy.Name; }) > $Null
			$ScriptInformation.Add(@{Data = "Enabled"; Value = $Policy.Enabled; }) > $Null
			$ScriptInformation.Add(@{Data = "Version"; Value = $Policy.Version; }) > $Null
			
			If($Categories.Count -eq 0)
			{
				$ScriptInformation.Add(@{Data = "Category"; Value = ""; }) > $Null
			}
			ElseIf($Categories.Count -eq 4)
			{
				$ScriptInformation.Add(@{Data = "Category"; Value = "All Categories"; }) > $Null
			}
			Else
			{
				$cnt=-1
				
				ForEach($Category in $Categories)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$ScriptInformation.Add(@{Data = "Category"; Value = $Category; }) > $Null
					}
					Else
					{
						$ScriptInformation.Add(@{Data = ""; Value = $Category; }) > $Null
					}
				}
			}
			
			$ScriptInformation.Add(@{Data = "Description"; Value = $Policy.Description; }) > $Null
			$ScriptInformation.Add(@{Data = "Last modification by"; Value = $Policy.AdminLastMod; }) > $Null
			$ScriptInformation.Add(@{Data = "Modified on"; Value = $Policy.TimeLastMod.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "Created by"; Value = $Policy.AdminCreate; }) > $Null
			$ScriptInformation.Add(@{Data = "Created on"; Value = $Policy.TimeCreate.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "ID"; Value = $Policy.Id; }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 125;
			$Table.Columns.Item(2).Width = 175;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 2 "Name`t`t`t: " $Policy.Name
			Line 2 "Enabled`t`t`t: " $Policy.Enabled
			Line 2 "Version`t`t`t: " $Policy.Version
			
			If($Categories.Count -eq 0)
			{
				Line 2 "Category`t`t: " ""
			}
			ElseIf($Categories.Count -eq 4)
			{
				Line 2 "Category`t`t: " "All Categories"
			}
			Else
			{
				$cnt=-1
				
				ForEach($Category in $Categories)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						Line 2 "Category`t`t: " $Category
					}
					Else
					{
						Line 5 "  " $Category
					}
				}
			}
			
			Line 2 "Description`t`t: " $Policy.Description
			Line 2 "Last modification by`t: " $Policy.AdminLastMod
			Line 2 "Modified on`t`t: " $Policy.TimeLastMod.ToString()
			Line 2 "Created by`t`t: " $Policy.AdminCreate
			Line 2 "Created on`t`t: " $Policy.TimeCreate.ToString()
			Line 2 "ID`t`t`t: " $Policy.Id
			Line 0 ""
		}
		If($HTML)
		{
			$rowdata = @()
			$columnHeaders = @("Name",($Script:htmlsb),$Policy.Name,$htmlwhite)
			$rowdata += @(,("Enabled",($Script:htmlsb),$Policy.Enabled,$htmlwhite))
			$rowdata += @(,("Version",($Script:htmlsb),$Policy.Version,$htmlwhite))
			
			If($Categories.Count -eq 0)
			{
				$rowdata += @(,("Category",($Script:htmlsb),"",$htmlwhite))
			}
			ElseIf($Categories.Count -eq 4)
			{
				$rowdata += @(,("Category",($Script:htmlsb),"All Categories",$htmlwhite))
			}
			Else
			{
				$cnt=-1
				
				ForEach($Category in $Categories)
				{
					$cnt++
					
					If($cnt -eq 0)
					{
						$rowdata += @(,("Category",($Script:htmlsb),$Category,$htmlwhite))
					}
					Else
					{
						$rowdata += @(,("",($Script:htmlsb),$Category,$htmlwhite))
					}
				}
			}
			
			$rowdata += @(,("Description",($Script:htmlsb),$Policy.Description,$htmlwhite))
			$rowdata += @(,("Last modification by",($Script:htmlsb), $Policy.AdminLastMod,$htmlwhite))
			$rowdata += @(,("Modified on",($Script:htmlsb), $Policy.TimeLastMod.ToString(),$htmlwhite))
			$rowdata += @(,("Created by",($Script:htmlsb), $Policy.AdminCreate,$htmlwhite))
			$rowdata += @(,("Created on",($Script:htmlsb), $Policy.TimeCreate.ToString(),$htmlwhite))
			$rowdata += @(,("ID",($Script:htmlsb),$Policy.Id,$htmlwhite))

			$msg = ""
			$columnWidths = @("150","200")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
	}
}

Function OutputPoliciesDetails
{
	Param([object] $Policies)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Policy Properties"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Policy Properties"
	}
	If($Text)
	{
		Line 1 "Policy Properties"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Policy Properties"
	}
	
	ForEach($Policy in $Policies)
	{
		Write-Verbose "$(Get-Date -Format G): `t`t`tProcessing Policy $($Policy.Name)"
		
		<#
			$ClientOptions   = $Policy.ClientPolicy.ClientOptions
			$ControlSettings = $Policy.ClientPolicy.ControlSettings
			$Redirection     = $Policy.ClientPolicy.Redirection
			$Session         = $Policy.ClientPolicy.Session
		#>

		Write-Verbose "$(Get-Date -Format G): `t`t`t`tPolicy"
		If($MSWord -or $PDF)
		{
			WriteWordLine 3 0 "Policy $($Policy.Name)"
			WriteWordLine 4 0 "Policy"
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Name"; Value = $Policy.Name; }) > $Null
			$ScriptInformation.Add(@{Data = "Description"; Value = $Policy.Description; }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 125;
			$Table.Columns.Item(2).Width = 175;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			WriteWordLine 4 0 "Apply policy to"
			[System.Collections.Hashtable[]] $NameWordTable = @();
			
			ForEach($Item in $Policy.UsersGroups)
			{
				$NameTableRowHash = @{
				Name = $Item.Account;
				Type = $Item.Type;
				SID  = $Item.Sid;
				}
				$NameWordTable += $NameTableRowHash;
			}

			If($NameWordTable.Count -gt 0)
			{
				$Table = AddWordTable -Hashtable $NameWordTable `
				-Columns  Name,Type,SID `
				-Headers  "Name","Type","SID"`
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 50;
				$Table.Columns.Item(3).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
		}
		If($Text)
		{
			Line 2 "Policy $($Policy.Name)"
			Line 0 ""
			Line 2 "Policy"
			Line 3 "Name`t   : " $Policy.Name
			Line 3 "Description: " $Policy.Description
			Line 0 ""

			Line 2 "Apply policy to"
			Line 3 "Name                                      Type   SID                                               "
			Line 3 "==================================================================================================="
			#       1234567890123456789012345678901234567890SS12345SS12345678901234567890123456789012345678901234567890
			
			ForEach($Item in $Policy.UsersGroups)
			{
				Line 3 ( "{0,-40}  {1,-5}  {2,-40}" -f `
				$Item.Account, $Item.Type, $Item.Sid)
			}
			Line 0 ""
		}
		If($HTML)
		{
			WriteHTMLLine 3 0 "Policy $($Policy.Name)"
			$rowdata = @()
			$columnHeaders = @("Name",($Script:htmlsb),$Policy.Name,$htmlwhite)
			$rowdata += @(,("Description",($Script:htmlsb),$Policy.Description,$htmlwhite))

			$msg = ""
			$columnWidths = @("150","200")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""

			$rowdata = @()

			ForEach($Item in $Policy.UsersGroups)
			{
				$rowdata += @(,(
				$Item.Account,$htmlwhite,
				$Item.Type,$htmlwhite,
				$Item.Sid,$htmlwhite))
			}

			$columnHeaders = @(
			"Name",($Script:htmlsb),
			"Type",($Script:htmlsb),
			"SID",($Script:htmlsb))

			$msg = "Apply policy to"
			$columnWidths = @("200","50","300")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}

		Write-Verbose "$(Get-Date -Format G): `t`t`t`tPolicy/Criteria"
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tPolicy/Criteria/Gateway criteria"

		$GatewayType = ""
		Switch($Policy.GatewayRule)
		{
			"Any"				{$GatewayType = "if Client is connected to any gateway"; Break}
			"AnyGW"				{$GatewayType = "if Client is connected to any gateway"; Break}
			"Connected"			{$GatewayType = "if Client is connected to one of the following gateways"; Break}
			"ConnectedToGWs"	{$GatewayType = "if Client is connected to one of the following gateways"; Break}
			"NotConnected"		{$GatewayType = "if Client is not connecteed to one of the following gateways"; Break}
			"NotConnectedToGWs"	{$GatewayType = "if Client is not connecteed to one of the following gateways"; Break}
			Default				{$GatewayType = "Policy/Criteria/Gateway criteria type not found: $($Policy.GatewayRule)"; Break}
		}

		$MACType = ""
		Switch($Policy.MACRule)
		{
			"AnyMAC"			{$MACType = "to any MAC address"; Break}
			"AllowedMACs"		{$MACType = "if the Client's MAC address is one of the following"; Break}
			"NotAllowedMACs"	{$MACType = "if the Client's MAC address is not one of the following"; Break}
			Default				{$MACType = "Policy/Criteria/Mac address criteria type not found: $($Policy.MACRule)"; Break}
		}

		If($MSWord -or $PDF)
		{
			WriteWordLine 4 0 "Criteria"
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Policy/Criteria/Gateway criteria/Apply policy"; Value = $GatewayType; }) > $Null
			If($Policy.GatewayRule -ne "AnyGW")
			{
				ForEach($Gateway in $Policy.GatewayList)
				{
					$ScriptInformation.Add(@{Data = ""; Value = $Gateway; }) > $Null
				}
			}
			
			$ScriptInformation.Add(@{Data = "Policy/Criteria/MAC address criteria/Apply policy"; Value = $MACType; }) > $Null
			If($Policy.MACRule -ne "AnyMAC")
			{
				ForEach($MAC in $Policy.MACList)
				{
					$ScriptInformation.Add(@{Data = ""; Value = $MAC; }) > $Null
				}
			}

			$ScriptInformation.Add(@{Data = "Policy/Criteria/Parallels client criteria/Windows"; Value = $Policy.AllowedOSes.Windows.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "Policy/Criteria/Parallels client criteria/iOS"; Value = $Policy.AllowedOSes.iOS.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "Policy/Criteria/Parallels client criteria/macOS"; Value = $Policy.AllowedOSes.Mac.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "Policy/Criteria/Parallels client criteria/Android"; Value = $Policy.AllowedOSes.Android.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "Policy/Criteria/Parallels client criteria/Chrome"; Value = $Policy.AllowedOSes.Chrome.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "Policy/Criteria/Parallels client criteria/Linux"; Value = $Policy.AllowedOSes.Linux.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "Policy/Criteria/Parallels client criteria/WebClient"; Value = $Policy.AllowedOSes.WebClient.ToString(); }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 300;
			$Table.Columns.Item(2).Width = 200;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 2 "Criteria"
			Line 0 ""
			Line 3 "Policy/Criteria/Gateway criteria/Apply policy: " $GatewayType
			If($Policy.GatewayRule -ne "AnyGW")
			{
				ForEach($Gateway in $Policy.GatewayList)
				{
					Line 7 "  " $Gateway
				}
			}
			
			Line 3 "Policy/Criteria/MAC address criteria/Apply policy: " $MACType
			If($Policy.MACRule -ne "AnyMAC")
			{
				ForEach($MAC in $Policy.MACList)
				{
					Line 7 "  " $MAC
				}
			}

			Line 3 "Policy/Criteria/Parallels client criteria/Windows: " $Policy.AllowedOSes.Windows.ToString()
			Line 3 "Policy/Criteria/Parallels client criteria/iOS: " $Policy.AllowedOSes.iOS.ToString()
			Line 3 "Policy/Criteria/Parallels client criteria/WebClient: " $Policy.AllowedOSes.WebClient.ToString()
			Line 3 "Policy/Criteria/Parallels client criteria/macOS: " $Policy.AllowedOSes.Mac.ToString()
			Line 3 "Policy/Criteria/Parallels client criteria/Android: " $Policy.AllowedOSes.Android.ToString()
			Line 3 "Policy/Criteria/Parallels client criteria/Chrome: " $Policy.AllowedOSes.Chrome.ToString()
			Line 3 "Policy/Criteria/Parallels client criteria/Linux: " $Policy.AllowedOSes.Linux.ToString()
			Line 0 ""
		}
		If($HTML)
		{
			$rowdata = @()

			$columnHeaders = @("Policy/Criteria/Gateway criteria/Apply policy",($Script:htmlsb),$GatewayType,$htmlwhite)
			If($Policy.GatewayRule -ne "AnyGW")
			{
				ForEach($Gateway in $Policy.GatewayList)
				{
					$rowdata += @(,("",($Script:htmlsb),$Gateway,$htmlwhite))
				}
			}
			
			$rowdata += @(,("Policy/Criteria/MAC address criteria/Apply policy",($Script:htmlsb),$MACType,$htmlwhite))
			If($Policy.MACRule -ne "AnyMAC")
			{
				ForEach($MAC in $Policy.MACList)
				{
					$rowdata += @(,("",($Script:htmlsb),$MAC,$htmlwhite))
				}
			}

			$rowdata += @(,("Policy/Criteria/Parallels client criteria/Windows",($Script:htmlsb),$Policy.AllowedOSes.Windows.ToString(),$htmlwhite))
			$rowdata += @(,("Policy/Criteria/Parallels client criteria/iOS",($Script:htmlsb),$Policy.AllowedOSes.iOS.ToString(),$htmlwhite))
			$rowdata += @(,("Policy/Criteria/Parallels client criteria/WebClient",($Script:htmlsb),$Policy.AllowedOSes.WebClient.ToString(),$htmlwhite))
			$rowdata += @(,("Policy/Criteria/Parallels client criteria/macOS",($Script:htmlsb),$Policy.AllowedOSes.Mac.ToString(),$htmlwhite))
			$rowdata += @(,("Policy/Criteria/Parallels client criteria/Android",($Script:htmlsb),$Policy.AllowedOSes.Android.ToString(),$htmlwhite))
			$rowdata += @(,("Policy/Criteria/Parallels client criteria/Chrome",($Script:htmlsb),$Policy.AllowedOSes.Chrome.ToString(),$htmlwhite))
			$rowdata += @(,("Policy/Criteria/Parallels client criteria/Linux",($Script:htmlsb),$Policy.AllowedOSes.Linux.ToString(),$htmlwhite))
			
			$msg = "Criteria"
			$columnWidths = @("400","300")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}

		If($MSWord -or $PDF)
		{
			[System.Collections.Hashtable[]] $SettingsWordTable = @();
		}
		If($HTML)
		{
			$rowdata = @()
		}

		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession"
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection"
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Primary connection"
		If($Policy.ClientPolicy.Session.PrimaryConnection.Enabled)
		{
			$txt = "Session/Connection/Primary connection/Name"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.PrimaryConnection.Name;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.PrimaryConnection.Name,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.PrimaryConnection.Name
			}
			
			$txt = "Session/Connection/Primary connection/Login/Auto Login"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.PrimaryConnection.AutoLogin.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.PrimaryConnection.AutoLogin.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.PrimaryConnection.AutoLogin.ToString()
			}
			
			$AuthType = ""
			Switch($Policy.ClientPolicy.Session.PrimaryConnection.AuthenticationType)
			{
				"Credentials"	{$AuthType = "Credentials"; Break}
				"SingleSignOn"	{$AuthType = "Single Sign-On"; Break}
				"SmartCard"		{$AuthType = "Smart card"; Break}
				"Web"			{$AuthType = "Web"; Break}
				Default			{$AuthType = "Primary connection/Login/Authentication type not found: $($Policy.ClientPolicy.Session.PrimaryConnection.AuthenticationType)"; Break}
			}
			
			$txt = "Session/Connection/Primary connection/Login/Authentication type"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $AuthType;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$AuthType,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $AuthType
			}

			If($Policy.ClientPolicy.Session.PrimaryConnection.AuthenticationType -eq "Credentials")
			{
				$txt = "Session/Connection/Primary connection/Login/Save password"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.PrimaryConnection.SavePassword.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.PrimaryConnection.SavePassword.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.PrimaryConnection.SavePassword.ToString()
				}

				$txt = "Session/Connection/Primary connection/Login/Domain"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.PrimaryConnection.Domain;
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.PrimaryConnection.Domain,$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.PrimaryConnection.Domain
				}
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Secondary connections"
		If($Policy.ClientPolicy.Session.SecondaryConnections.Enabled)
		{
			$txt = "Session/Connection/Secondary connections/Secondary connections"
			$cnt = 0
			
			ForEach($Item in $Policy.ClientPolicy.Session.SecondaryConnections.ConnectionList)
			{
				$cnt++
				$GatewayMode = ""
				Switch($Item.Mode)
				{
					"DirectMode"		{$GatewayMode = "Direct Mode"; Break}
					"DirectSSLMode"		{$GatewayMode = "Direct SSL Mode"; Break}
					"GatewayMode"		{$GatewayMode = "Gateway Mode"; Break}
					"GatewaySSLMode"	{$GatewayMode = "Gateway SSL Mode"; Break}
					Default				{$GatewayMode = "Secondary connections/Secondary connections/Mode not found: $($Item.Mode)"; Break}
				}
		
				If($cnt -eq 1)
				{
					If($MSWord -or $PDF)
					{
						$SettingsWordTable += @{
						Text = $txt;
						Value = "Connection: $($Item.Server)   Mode: $GatewayMode   Port: $($Item.ServerPort.ToString())";
						}
					}
					If($HTML)
					{
						$rowdata += @(,(
						$txt,$htmlbold,
						"Connection: $($Item.Server)   Mode: $GatewayMode   Port: $($Item.ServerPort.ToString())",$htmlwhite))
					}
					If($Text)
					{
						OutputPolicySetting $txt "Connection: $($Item.Server)   Mode: $GatewayMode   Port: $($Item.ServerPort.ToString())"
					}
				}
				Else
				{
					If($MSWord -or $PDF)
					{
						$SettingsWordTable += @{
						Text = "";
						Value = "Connection: $($Item.Server)   Mode: $GatewayMode   Port: $($Item.ServerPort.ToString())";
						}
					}
					If($HTML)
					{
						$rowdata += @(,(
						"",$htmlbold,
						"Connection: $($Item.Server)   Mode: $GatewayMode   Port: $($Item.ServerPort.ToString())",$htmlwhite))
					}
					If($Text)
					{
						OutputPolicySetting "`t`t`t`t`t`t`t      " "Connection: $($Item.Server)   Mode: $GatewayMode   Port: $($Item.ServerPort.ToString())"
					}
				}
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Reconnection"
		If($Policy.ClientPolicy.Session.Reconnection.Enabled)
		{
			$txt = "Session/Connection/Reconnection/Reconnection/Reconnect if connection is dropped"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Reconnection.EnableReconnection.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Reconnection.EnableReconnection.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Reconnection.EnableReconnection.ToString()
			}
			
			$txt = "Session/Connection/Reconnection/Reconnection/Connection retries"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Reconnection.ConnectionRetries.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Reconnection.ConnectionRetries.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Reconnection.ConnectionRetries.ToString()
			}
			
			$txt = "Session/Connection/Reconnection/Connection banner/Show if reconnection is not established within (seconds)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Reconnection.ConnectionBannerDelay.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Reconnection.ConnectionBannerDelay.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Reconnection.ConnectionBannerDelay.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Computer name"
		If($Policy.ClientPolicy.Session.ComputerName.Enabled)
		{
			$txt = "Session/Connection/Computer name/Computer name/Override computer name"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.ComputerName.OverrideComputerName;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.ComputerName.OverrideComputerName,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.ComputerName.OverrideComputerName
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Advanced settings"
		If($Policy.ClientPolicy.Session.ConnectionAdvancedSettings.Enabled)
		{
			$txt = "Session/Connection/Advanced settings/Connection/Connection timeout (seconds)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ConnectionTimeout.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ConnectionTimeout.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ConnectionTimeout.ToString()
			}
			
			$txt = "Session/Connection/Advanced settings/Connection banner/Show if connection is not established within (seconds)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ConnectionBannerDelay.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ConnectionBannerDelay.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ConnectionBannerDelay.ToString()
			}
			
			$txt = "Session/Connection/Advanced settings/Desktop/Show if published application does not start within (seconds)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ShowDesktopTimeout.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ShowDesktopTimeout.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.ConnectionAdvancedSettings.ShowDesktopTimeout.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Web authentication"
		If($Policy.ClientPolicy.Session.WebAuthentication.Enabled)
		{
			$txt = "Session/Connection/Web authentication/Web authentication/Use default OS browser"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.WebAuthentication.DefaultOsBrowser.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.WebAuthentication.DefaultOsBrowser.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.WebAuthentication.DefaultOsBrowser.ToString()
			}
			
			If($Policy.ClientPolicy.Session.WebAuthentication.DefaultOsBrowser -eq $False)
			{
				$txt = "Session/Connection/Web authentication/Web authentication/Open browser window to complete log out"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.WebAuthentication.OpenBrowserOnLogout.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.WebAuthentication.OpenBrowserOnLogout.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.WebAuthentication.OpenBrowserOnLogout.ToString()
				}
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Multifactor authentication"
		If($Policy.ClientPolicy.Session.MultiFactorAuthentication.Enabled)
		{
			$txt = "Session/Connection/Multifactor authentication/Multifactor authentication/Remember last used method"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.MultiFactorAuthentication.RememberLastUsedMethod.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.MultiFactorAuthentication.RememberLastUsedMethod.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.MultiFactorAuthentication.RememberLastUsedMethod.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Session prelaunch"
		If($Policy.ClientPolicy.Session.SessionPreLaunch.Enabled)
		{
			$SPMode = ""
			Switch($Policy.ClientPolicy.Session.SessionPreLaunch.PreLaunchMode)
			{
				"Off"				{$SPMode = "Off"; Break}
				"Basic"				{$SPMode = "Basic"; Break}
				"MachineLearning"	{$SPMode = "Machine Learning"; Break}
				Default				{$SPMode = "Connection/Session prelaunch mode not found: $($Policy.ClientPolicy.Session.SessionPreLaunch.PreLaunchMode)"; Break}
			}

			$txt = "Session/Connection/Session prelaunch/Session prelaunch/Mode"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $SPMode;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$SPMode,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $SPMode
			}
			
			$txt = "Session/Connection/Session prelaunch/Session prelaunch/Exclude sessions prelaunch"
			$cnt = 0
			
			ForEach($Item in $Policy.ClientPolicy.Session.SessionPreLaunch.PreLaunchExclude)
			{
				$cnt++
				$TmpArray = $Item.Split(":")
				$Day      = $TmpArray[0].ToString()
				$MonthNum = $TmpArray[1]
				
				Switch($MonthNum)
				{
					1		{$Month = "January"; Break}
					2		{$Month = "February"; Break}
					3		{$Month = "March"; Break}
					4		{$Month = "April"; Break}
					5		{$Month = "May"; Break}
					6		{$Month = "June"; Break}
					7		{$Month = "July"; Break}
					8		{$Month = "August"; Break}
					9		{$Month = "September"; Break}
					10		{$Month = "October"; Break}
					11		{$Month = "November"; Break}
					12		{$Month = "December"; Break}
					Default	{$Month = "Exclude sessions prelaunch Month not founf: $($MonthNum)"; Break}
				}
				
				If($cnt -eq 1)
				{
					If($MSWord -or $PDF)
					{
						$SettingsWordTable += @{
						Text = $txt;
						Value = "Day: $Day   Month: $Month";
						}
					}
					If($HTML)
					{
						$rowdata += @(,(
						$txt,$htmlbold,
						"Day: $Day   Month: $Month",$htmlwhite))
					}
					If($Text)
					{
						OutputPolicySetting $txt "Day: $Day   Month: $Month"
					}
				}
				Else
				{
					If($MSWord -or $PDF)
					{
						$SettingsWordTable += @{
						Text = "";
						Value = "Day: $Day   Month: $Month";
						}
					}
					If($HTML)
					{
						$rowdata += @(,(
						"",$htmlbold,
						"Day: $Day   Month: $Month",$htmlwhite))
					}
					If($Text)
					{
						OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t " "Day: $Day   Month: $Month"
					}
				}
				
			}
			
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Connection/Local proxy address"
		If($Policy.ClientPolicy.Session.LocalProxyAddress.Enabled)
		{
			$txt = "Session/Connection/Local proxy address/Local proxy address/Use 127.0.0.1 IP address when using Gateway mode in VPN scenarios"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.LocalProxyAddress.UseLocalHostProxyIP.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.LocalProxyAddress.UseLocalHostProxyIP.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.LocalProxyAddress.UseLocalHostProxyIP.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Display"
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Display/Settings"
		If($Policy.ClientPolicy.Session.Settings.Enabled)
		{
			$GAMode = ""
			Switch($Policy.ClientPolicy.Session.Settings.GraphicsAcceleration)
			{
				"AVCAdaptive"		{$GAMode = "AVC Adaptive"; Break}
				"Basic"				{$GAMode = "Basic"; Break}
				"None"				{$GAMode = "None"; Break}
				"RemoteFx"			{$GAMode = "RemoteFX (default, forces 32-bit color depth)"; Break}
				"RemoteFxAdaptive"	{$GAMode = "RemoteFx Adaptive"; Break}
				Default				{$GAMode = "Display settings/Acceleration mode not found: $($Policy.ClientPolicy.Session.Settings.GraphicsAcceleration)"; Break}
			}

			$txt = "Session/Display/Settings/Display settings/Acceleration mode"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $GAMode;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$GAMode,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $GAMode
			}
			
			$ColorDepth = ""
			Switch($Policy.ClientPolicy.Session.Settings.ColorDepths)
			{
				"Colors256"				{$ColorDepth = "256 Colors"; Break}
				"HighColor15Bit"		{$ColorDepth = "High Color (15 bit)"; Break}
				"HighColor16Bit"		{$ColorDepth = "High Color (16 bit)"; Break}
				"TrueColor24Bit"		{$ColorDepth = "True Color (24 bit)"; Break}
				"HighestQuality32Bit"	{$ColorDepth = "Highest Quality (32 bit)"; Break}
				Default					{$ColorDepth = "Display settings/Color depth not found: $($Policy.ClientPolicy.Session.Settings.ColorDepths)"; Break}
			}

			$txt = "Session/Display/Settings/Display settings/Color depth"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $ColorDepth;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$ColorDepth,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $ColorDepth
			}
		}

		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Display/Multi-monitor"
		If($Policy.ClientPolicy.Session.MultiMonitor.Enabled)
		{
			$txt = "Session/Display/Multi-monitor/Multi-monitor/Use all monitors for desktop session (if applicable)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.MultiMonitor.UseAllMonitors.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.MultiMonitor.UseAllMonitors.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.MultiMonitor.UseAllMonitors.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Display/Published applications"
		If($Policy.ClientPolicy.Session.PublishedApplications.Enabled)
		{
			$txt = "Session/Display/Published applications/Published applications/Use primary monitor only"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.PublishedApplications.UsePrimaryMonitor.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.PublishedApplications.UsePrimaryMonitor.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.PublishedApplications.UsePrimaryMonitor.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Display/Desktop options"
		If($Policy.ClientPolicy.Session.DesktopOptions.Enabled)
		{
			$SmartSize = ""
			Switch($Policy.ClientPolicy.Session.DesktopOptions.SmartSizing)
			{
				"Disabled"	{$SmartSize = "Disabled"; Break}
				"Scale"		{$SmartSize = "Scale (fit to window)"; Break}
				"Resize"	{$SmartSize = "Resize (update resolution)"; Break}
				Default		{$SmartSize = "Desktop options/Smart-sizing not found: $($Policy.ClientPolicy.Session.DesktopOptions.SmartSizing)"; Break}
			}

			$txt = "Session/Display/Desktop options/Desktop options/Smart-sizing"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $SmartSize;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$SmartSize,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $SmartSize
			}
			
			$txt = "Session/Display/Desktop options/Desktop options/Embed desktop in launcher"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.DesktopOptions.EmbedDesktop.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.DesktopOptions.EmbedDesktop.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.DesktopOptions.EmbedDesktop.ToString()
			}

			$txt = "Session/Display/Desktop options/Desktop options/Span desktop across all monitors"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.DesktopOptions.SpanDesktops.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.DesktopOptions.SpanDesktops.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.DesktopOptions.SpanDesktops.ToString()
			}

			$ConnBar = ""
			Switch($Policy.ClientPolicy.Session.DesktopOptions.FullScreenBar)
			{
				"DoNotShow"		{$ConnBar = "Do not show"; Break}
				"ShowPinned"	{$ConnBar = "Show pinned"; Break}
				"ShowUnPinned"	{$ConnBar = "Show unpinned"; Break}
				Default			{$ConnBar = "Desktop options/Connection bar in full screen not found: $($Policy.ClientPolicy.Session.DesktopOptions.FullScreenBar)"; Break}
			}

			$txt = "Session/Display/Desktop options/Desktop options/Connection bar in full screen"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $ConnBar;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$ConnBar,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $ConnBar
			}
		}

		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Display/Browser"
		If($Policy.ClientPolicy.Session.Browser.Enabled)
		{
			$BrowserOpen = ""
			Switch($Policy.ClientPolicy.Session.Browser.BrowserOpenIn)
			{
				"SameTab"	{$BrowserOpen = "Same tab"; Break}
				"NewTab"	{$BrowserOpen = "New tab"; Break}
				Default		{$BrowserOpen = "Browser/Open applications in not found: $($Policy.ClientPolicy.Session.Browser.BrowserOpenIn)"; Break}
			}

			$txt = "Session/Display/Browser/Browser/Open applications in"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $BrowserOpen;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$BrowserOpen,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $BrowserOpen
			}
		}

		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Printing"
		If($Policy.ClientPolicy.Session.Printing.Enabled)
		{
			$PrintTechUse = ""
			Switch($Policy.ClientPolicy.Session.Printing.DefaultPrinterTech)
			{
				"None"											{$PrintTechUse = "None"; Break}
				"RasUniversalPrintingTechnology"				{$PrintTechUse = "RAS Universal Printing technology"; Break}
				"MicrosoftBasicPrintingTechnology"				{$PrintTechUse = "Microsoft basic Printing Redirection technology"; Break}
				"RasUniversalPrintingAndMsBasicTechnologies"	{$PrintTechUse = "RAS Universal Printing and MS Basic Redirection technologies"; Break}
				Default											{$PrintTechUse = "Technology/Use not found: $($Policy.ClientPolicy.Session.Printing.DefaultPrinterTech)"; Break}
			}

			$txt = "Session/Printing/Technology/Use"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $PrintTechUse;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$PrintTechUse,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $PrintTechUse
			}

			If( $Policy.ClientPolicy.Session.Printing.DefaultPrinterTech -eq "RasUniversalPrintingTechnology" -or 
				$Policy.ClientPolicy.Session.Printing.DefaultPrinterTech -eq "RasUniversalPrintingAndMsBasicTechnologies" )
			{
				$RedirectPrinters = ""
				Switch($Policy.ClientPolicy.Session.Printing.RedirectPrinters)
				{
					"All"			{$RedirectPrinters = "All"; Break}
					"DefaultOnly"	{$RedirectPrinters = "Default only"; Break}
					"SpecificOnly"	{$RedirectPrinters = "Specific only"; Break}
					Default			{$RedirectPrinters = "RAS Universal Printing/Redirect printers not found: $($Policy.ClientPolicy.Session.Printing.RedirectPrinters)"; Break}
				}

				$txt = "Session/Printing/RAS Universal Printing/Redirect printers"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $RedirectPrinters;
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$RedirectPrinters,$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $RedirectPrinters
				}
				
				If($Policy.ClientPolicy.Session.Printing.RedirectPrinters -eq "SpecificOnly")
				{
					ForEach($Item in $Policy.ClientPolicy.Session.Printing.RedirectPrintersList)
					{
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = "";
							Value = "Name: $($Item)";
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							"",$htmlbold,
							"Name: $($Item)",$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting "`t`t`t`t`t`t`t " "Name: $($Item)"
						}
					}
				}
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Scanning"
		If($Policy.ClientPolicy.Session.Scanning.Enabled)
		{
			$ScanTechUse = ""
			Switch($Policy.ClientPolicy.Session.Scanning.ScanTech)
			{
				"None"			{$ScanTechUse = "None"; Break}
				"WIA"			{$ScanTechUse = "WIA"; Break}
				"TWAIN"			{$ScanTechUse = "TWAIN"; Break}
				"WIAandTWAIN"	{$ScanTechUse = "WIA and TWAIN"; Break}
				Default			{$ScanTechUse = "Technology/Use not found: $($Policy.ClientPolicy.Session.Scanning.ScanTech)"; Break}
			}

			$txt = "Session/Scanning/Technology/Use"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $ScanTechUse;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$ScanTechUse,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $ScanTechUse
			}

			If( $Policy.ClientPolicy.Session.Scanning.ScanTech -ne "None" )
			{
				$RedirectScanners = ""
				Switch($Policy.ClientPolicy.Session.Scanning.ScanRedirect)
				{
					"All"			{$RedirectScanners = "All"; Break}
					"SpecificOnly"	{$RedirectScanners = "Specific only"; Break}
					Default			{$RedirectScanners = "RAS Universal Scanning/Redirect scanners not found: $($Policy.ClientPolicy.Session.Scanning.ScanRedirect)"; Break}
				}

				$txt = "Session/Printing/RAS Universal Scanning/Redirect scanners"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $RedirectScanners;
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$RedirectScanners,$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $RedirectScanners
				}
				
				If($Policy.ClientPolicy.Session.Scanning.ScanRedirect -eq "SpecificOnly")
				{
					$ScannerArray = @()
					If($Policy.ClientPolicy.Session.Scanning.ScanTech -eq "WIA")
					{
						$ScannerArray = $Policy.ClientPolicy.Session.Scanning.ScanListWia
					}
					Else
					{
						$ScannerArray = $Policy.ClientPolicy.Session.Scanning.ScanListTwain
					}
					
					ForEach($Item in $ScannerArray)
					{
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = "";
							Value = "Name: $($Item)";
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							"",$htmlbold,
							"Name: $($Item)",$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting "`t`t`t`t`t`t`t " "Name: $($Item)"
						}
					}
				}
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Audio"
		If($Policy.ClientPolicy.Session.Audio.Enabled)
		{
			$AudioMode = ""
			Switch($Policy.ClientPolicy.Session.Audio.AudioModes)
			{
				"BringToThisComputer"	{$AudioMode = "Bring to this computer"; Break}
				"DoNotPlay"				{$AudioMode = "Do not play"; Break}
				"LeaveAtRemoteComputer"	{$AudioMode = "Leave at remote computer"; Break}
				Default					{$AudioMode = "Remote audio playback/Where not found: $($Policy.ClientPolicy.Session.Audio.AudioModes)"; Break}
			}

			$txt = "Session/Audio/Remote audio playback/Where"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $AudioMode;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$AudioMode,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $AudioMode
			}

			$AudioQuality = ""
			Switch($Policy.ClientPolicy.Session.Audio.AudioQuality)
			{
				"AdjustDynamically"			{$AudioQuality = "Dynamically adjust based on available bandwidth"; Break}
				"UseMediumQuality"			{$AudioQuality = "Always use medium audio quality"; Break}
				"UseUncompressedQuality"	{$AudioQuality = "Always use uncompressed audio quality"; Break}
				Default						{$AudioQuality = "Remote audio playback/Quality not found: $($Policy.ClientPolicy.Session.Audio.AudioQuality)"; Break}
			}

			$txt = "Session/Audio/Remote audio playback/Quality"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $AudioQuality;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$AudioQuality,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $AudioQuality
			}

			$txt = "Session/Audio/Remote audio recording/Enable recording (if applicable)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Audio.AudioRec.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Audio.AudioRec.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Audio.AudioRec.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Keyboard"
		If($Policy.ClientPolicy.Session.Keyboard.Enabled)
		{
			$KeyboardWindow = ""
			Switch($Policy.ClientPolicy.Session.Keyboard.KeyboardWindow)
			{
				"LocalComputer"		{$KeyboardWindow = "On the local computer"; Break}
				"RemoteComputer"	{$KeyboardWindow = "On the remote computer"; Break}
				"FullScreenMode"	{$KeyboardWindow = "In full screen mode only"; Break}
				Default				{$KeyboardWindow = "Keyboard/Apply Windows key combinations for desktops only not found: $($Policy.ClientPolicy.Session.Keyboard.KeyboardWindow)"; Break}
			}

			$txt = "Session/Keyboard/Keyboard/Apply Windows key combinations for desktops only"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $KeyboardWindow;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$KeyboardWindow,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $KeyboardWindow
			}

			$txt = "Session/Keyboard/Keyboard/Send Unicode characters"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Keyboard.SendUnicodeChars.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Keyboard.SendUnicodeChars.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Keyboard.SendUnicodeChars.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources"
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources/Clipboard"
		If($Policy.ClientPolicy.Session.Clipboard.Enabled)
		{
			$ClipboardRedir = ""
			Switch($Policy.ClientPolicy.Session.Clipboard.ClipboardDirection)
			{
				"ClientToServer"	{$ClipboardRedir = "Client to server only"; Break}
				"ServerToClient"	{$ClipboardRedir = "Server to client only"; Break}
				"Bidirectional"		{$ClipboardRedir = "Bidirectional"; Break}
				"None"				{$ClipboardRedir = "Disabled"; Break}
				Default				{$ClipboardRedir = "Clipboard/Clipboard redirection not found: $($Policy.ClientPolicy.Session.Clipboard.ClipboardDirection)"; Break}
			}

			$txt = "Session/Local devices and resources/Clipboard/Clipboard/Clipboard redirection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $ClipboardRedir;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$ClipboardRedir,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $ClipboardRedir
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources/Disk drives and folders"
		If($Policy.ClientPolicy.Session.DiskDrives.Enabled)
		{
			$txt = "Session/Local devices and resources/Disk drives and folders/Disk drives and folders/Allow disk drives redirection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.DiskDrives.RedirectDrives.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.DiskDrives.RedirectDrives.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.DiskDrives.RedirectDrives.ToString()
			}

			$txt = "Session/Local devices and resources/Disk drives and folders/Disk drives and folders/Use all disk drives available"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.DiskDrives.UseAllDrives.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.DiskDrives.UseAllDrives.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.DiskDrives.UseAllDrives.ToString()
			}

			If($Policy.ClientPolicy.Session.DiskDrives.UseAllDrives)
			{
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = "";
					Value = "Drives A through Z";
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					"",$htmlbold,
					"Drives A through Z",$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t`t   " "Drives A through Z"
				}
			}
			Else
			{
				ForEach($Item in $Policy.ClientPolicy.Session.DiskDrives.RedirectToDrives)
				{
					If($MSWord -or $PDF)
					{
						$SettingsWordTable += @{
						Text = "";
						Value = $Item;
						}
					}
					If($HTML)
					{
						$rowdata += @(,(
						"",$htmlbold,
						$Item,$htmlwhite))
					}
					If($Text)
					{
						OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t`t  " $Item
					}
				}
			}

			$txt = "Session/Local devices and resources/Disk drives and folders/Disk drives and folders/Use also disk drives that I plug in later"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.DiskDrives.DynamicDrives.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.DiskDrives.DynamicDrives.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.DiskDrives.DynamicDrives.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources/Devices"
		If($Policy.ClientPolicy.Session.Devices.Enabled)
		{
			$txt = "Session/Local devices and resources/Devices/Devices/Allow devices redirection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Devices.RedirectDevices.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Devices.RedirectDevices.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Devices.RedirectDevices.ToString()
			}

			$txt = "Session/Local devices and resources/Devices/Devices/Use all devices available"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Devices.UseAllDevices.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Devices.UseAllDevices.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Devices.UseAllDevices.ToString()
			}

			$txt = "Session/Local devices and resources/Devices/Devices/Use also devices that I plug in later"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Devices.DynamicDevices.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Devices.DynamicDevices.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Devices.DynamicDevices.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources/Video capture devices"
		<#
			$policy.ClientPolicy.Session.VideoCaptureDevices
			Enabled                   : True
			EnableCameras             : True
			DynamicCameras            : True
			VideoCaptureUseAllDevices : True
			CamerasIDs                : {*}
			
			Type	        Name	                        Description
			List<String>	CamerasIDs		                Redirect to all available devices
			Boolean	        DynamicCameras		            If box is checked allow the use of other devices that are plugged in later
			Boolean	        EnableCameras		            If box is checked allow devices redirection
			Boolean	        Enabled		                    Whether Devices policy is enabled or not
			Boolean	        VideoCaptureUseAllDevices		Use all devices that are available
		#>
		If($Policy.ClientPolicy.Session.VideoCaptureDevices.Enabled)
		{
			$txt = "Session/Local devices and resources/Video capture devices/Allow devices redirection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.VideoCaptureDevices.EnableCameras.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.VideoCaptureDevices.EnableCameras.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.VideoCaptureDevices.EnableCameras.ToString()
			}

			$txt = "Session/Local devices and resources/Video capture devices/Use all devices available"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.VideoCaptureDevices.VideoCaptureUseAllDevices.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.VideoCaptureDevices.VideoCaptureUseAllDevices.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.VideoCaptureDevices.VideoCaptureUseAllDevices.ToString()
			}

			$txt = "Session/Local devices and resources/Video capture devices/Use also devices I plug in later"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.VideoCaptureDevices.DynamicCameras.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.VideoCaptureDevices.DynamicCameras.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.VideoCaptureDevices.DynamicCameras.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources/Ports"
		If($Policy.ClientPolicy.Session.Ports.Enabled)
		{
			$txt = "Session/Local devices and resources/Ports/Allow LPT and COM ports redirection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Ports.RedirectCOMPorts.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Ports.RedirectCOMPorts.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Ports.RedirectCOMPorts.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources/Smart cards"
		If($Policy.ClientPolicy.Session.SmartCards.Enabled)
		{
			$txt = "Session/Local devices and resources/Smart cards/Allow smart cards redirection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.SmartCards.RedirectSmartCards.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.SmartCards.RedirectSmartCards.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.SmartCards.RedirectSmartCards.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources/Windows touch input"
		If($Policy.ClientPolicy.Session.WindowsTouchInput.Enabled)
		{
			$txt = "Session/Local devices and resources/Windows touch input/Allow Windows touch input redirection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.WindowsTouchInput.TouchInput.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.WindowsTouchInput.TouchInput.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.WindowsTouchInput.TouchInput.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Local devices and resources/File transfer"
		If($Policy.ClientPolicy.Session.FileTransfer.Enabled)
		{
			$FileTransfer = ""
			Switch($Policy.ClientPolicy.Session.FileTransfer.FileTransferMode)
			{
				"ClientToServer"	{$FileTransfer = "Client to server only"; Break}
				"ServerToClient"	{$FileTransfer = "Server to client only"; Break}
				"Bidirectional"		{$FileTransfer = "Bidirectional"; Break}
				"None"				{$FileTransfer = "Disabled"; Break}
				Default				{$FileTransfer = "File transfer/Allow file transfer mode not found: $($Policy.ClientPolicy.Session.FileTransfer.FileTransferMode)"; Break}
			}

			$txt = "Session/Local devices and resources/File transfer/Allow file transfer"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $FileTransfer;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$FileTransfer,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $FileTransfer
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Experience"
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Experience/Performance"
		If($Policy.ClientPolicy.Session.Performance.Enabled)
		{
			$ConnSpeed = ""
			Switch($Policy.ClientPolicy.Session.Performance.NetType)
			{
				"Modem"							{$ConnSpeed = "Modem (56Kbps)"; Break}
				"LowSpeedBroadband"				{$ConnSpeed = "Low speed broadband (256 Kbps - 2 Mbps)"; Break}
				"Satellite"						{$ConnSpeed = "Satellite (2 Mbps - 16 Mbps with high latency)"; Break}
				"HighSpeedBroadband"			{$ConnSpeed = "High speed broadband (2 Mbps - 16 Mbps)"; Break}
				"WAN"							{$ConnSpeed = "WAN (10 Mbps or higher with high latency)"; Break}
				"LAN"							{$ConnSpeed = "LAN (10 Mbps or higher)"; Break}
				"DetectConnectionQualityAuto"	{$ConnSpeed = "Detect connection quality automatically"; Break}
				Default							{$ConnSpeed = "Performance/Choose your connection speed to optimize performance mode not found: $($Policy.ClientPolicy.Session.Performance.NetType)"; Break}
			}

			$txt = "Session/Experience/Performance/Performance/Choose your connection speed to optimize performance"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $ConnSpeed;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$ConnSpeed,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $ConnSpeed
			}

			If($Policy.ClientPolicy.Session.Performance.NetType -ne "DetectConnectionQualityAuto")
			{
				$txt = "Session/Experience/Performance/Performance/Desktop backgroup"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Performance.DesktopBackground.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Performance.DesktopBackground.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Performance.DesktopBackground.ToString()
				}

				$txt = "Session/Experience/Performance/Performance/Font smoothing"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Performance.FontSmoothing.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Performance.FontSmoothing.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Performance.FontSmoothing.ToString()
				}

				$txt = "Session/Experience/Performance/Performance/Menu and window animation"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Performance.WindowMenuAnimation.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Performance.WindowMenuAnimation.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Performance.WindowMenuAnimation.ToString()
				}

				$txt = "Session/Experience/Performance/Performance/Desktop composition"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Performance.DesktopComposition.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Performance.DesktopComposition.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Performance.DesktopComposition.ToString()
				}

				<#$txt = "Session/Experience/Performance/Performance/Show contents of window while dragging"
				#This property is missing from $Policy.ClientPolicy.Session.Performance
				PS C:\Webster> $Policy.ClientPolicy.Session.Performance | fl *

				Enabled             : True
				NetType             : Satellite
				DesktopBackground   : True
				FontSmoothing       : True
				WindowMenuAnimation : True
				DesktopComposition  : True
				Themes              : True
				BitmapCaching       : True
				MoveSizeFullDrag    : True				
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Performance.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Performance.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Performance.ToString()
				}#>

				$txt = "Session/Experience/Performance/Performance/Themes"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Performance.Themes.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Performance.Themes.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Performance.Themes.ToString()
				}

				$txt = "Session/Experience/Performance/Performance/Bitmap caching"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Performance.BitmapCaching.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Performance.BitmapCaching.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Performance.BitmapCaching.ToString()
				}
			}

			$txt = "Session/Experience/Performance/Performance/Optimize resizing/moving windows"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Performance.MoveSizeFullDrag.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Performance.MoveSizeFullDrag.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Performance.MoveSizeFullDrag.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Experience/Compression"
		If($Policy.ClientPolicy.Session.Compression.Enabled)
		{
			$txt = "Session/Experience/Compression/Choose your compress preferences to optimize performance"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Compression.Compress.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Compression.Compress.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Compression.Compress.ToString()
			}

			$txt = "Session/Experience/Compression/Enable RDP compression"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.Compression.Compress.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.Compression.Compress.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.Compression.Compress.ToString()
			}

			$PrintCompression = ""
			Switch($Policy.ClientPolicy.Session.Compression.PrintingCompression)
			{
				"CompressionDisabled"		{$PrintCompression = "Compression disabled"; Break}
				"BestSpeed"					{$PrintCompression = "Best speed (uses less CPU)"; Break}
				"BestSize"					{$PrintCompression = "Best size (uses less network traffic)"; Break}
				"BasedOnConnectionSpeed"	{$PrintCompression = "Based on connection speed"; Break}
				Default						{$PrintCompression = "Universal printing compression policy not found: $($Policy.ClientPolicy.Session.Compression.PrintingCompression)"; Break}
			}

			$txt = "Session/Experience/Compression/Universal printing compression policy"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $PrintCompression;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$PrintCompression,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $PrintCompression
			}

			$ScanCompression = ""
			Switch($Policy.ClientPolicy.Session.Compression.ScanningCompression)
			{
				"CompressionDisabled"		{$ScanCompression = "Compression disabled"; Break}
				"BestSpeed"					{$ScanCompression = "Best speed (uses less CPU)"; Break}
				"BestSize"					{$ScanCompression = "Best size (uses less network traffic)"; Break}
				"BasedOnConnectionSpeed"	{$ScanCompression = "Based on connection speed"; Break}
				Default						{$ScanCompression = "Universal scanning compression policy not found: $($Policy.ClientPolicy.Session.Compression.ScanningCompression)"; Break}
			}

			$txt = "Session/Experience/Compression/Universal scanning compression policy"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $ScanCompression;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$ScanCompression,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $ScanCompression
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Network"
		If($Policy.ClientPolicy.Session.Network.Enabled)
		{
			If($Policy.ClientPolicy.Session.Network.UseProxyServer)
			{
				$txt = "Session/Network/Proxy settings/Use proxy server"

				$ProxyServer = ""
				Switch($Policy.ClientPolicy.Session.Network.ProxyType)
				{
					0	{$ProxyServer = "SOCKS4"; Break}
					1	{$ProxyServer = "SOCKS4A"; Break}
					2	{$ProxyServer = "SOCKS5"; Break}
					3	{$ProxyServer = "HTTP 1.1"; Break}
					Default	{$ProxyServer = "Use proxy server type not found: $($Policy.ClientPolicy.Session.Network.ProxyType)"; Break}
				}
				
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $ProxyServer;
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$ProxyServer,$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $ProxyServer
				}

				$txt = "Session/Network/Proxy settings/Proxy Host"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Network.ProxyHost;
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Network.ProxyHost,$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Network.ProxyHost
				}

				$txt = "Session/Network/Proxy settings/Port"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.Session.Network.ProxyPort.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.Session.Network.ProxyPort.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.Session.Network.ProxyPort.ToString()
				}
				
				If($Policy.ClientPolicy.Session.Network.ProxyType -ge 2)
				{
					$txt = "Session/Network/Proxy authentication/Proxy requires authentication"
					If($MSWord -or $PDF)
					{
						$SettingsWordTable += @{
						Text = $txt;
						Value = $Policy.ClientPolicy.Session.Network.ProxyAuthentication.ToString();
						}
					}
					If($HTML)
					{
						$rowdata += @(,(
						$txt,$htmlbold,
						$Policy.ClientPolicy.Session.Network.ProxyAuthentication.ToString(),$htmlwhite))
					}
					If($Text)
					{
						OutputPolicySetting $txt $Policy.ClientPolicy.Session.Network.ProxyAuthentication.ToString()
					}
					
					If($Policy.ClientPolicy.Session.Network.ProxyAuthentication)
					{
						$txt = "Session/Network/Proxy authentication/Use user logon credentials"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Policy.ClientPolicy.Session.Network.ProxyUseLogonCredentials.ToString();
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Policy.ClientPolicy.Session.Network.ProxyUseLogonCredentials.ToString(),$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Policy.ClientPolicy.Session.Network.ProxyUseLogonCredentials.ToString()
						}
						
						If($Policy.ClientPolicy.Session.Network.ProxyUseLogonCredentials -eq $False)
						{
							$txt = "Session/Network/Proxy authentication/Username"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Policy.ClientPolicy.Session.Network.ProxyUsername;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Policy.ClientPolicy.Session.Network.ProxyUsername,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $Policy.ClientPolicy.Session.Network.ProxyUsername
							}
						}
					}
				}
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Server authentication"
		If($Policy.ClientPolicy.Session.ServerAuthentication.Enabled)
		{
			$AuthFail = ""
			Switch($Policy.ClientPolicy.Session.ServerAuthentication.SessionAuthFailureAction)
			{
				"Connect"		{$AuthFail = "Connect"; Break}
				"Warn"			{$AuthFail = "Warn"; Break}
				"DoNotConnect"	{$AuthFail = "Do not connect"; Break}
				Default			{$AuthFail = "RD session host authentication/If authentication fails not found: $($Policy.ClientPolicy.Session.ServerAuthentication.SessionAuthFailureAction)"; Break}
			}

			$txt = "Session/Server authentication/RD session host authentication/If authentication fails"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $AuthFail;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$AuthFail,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $AuthFail
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tSession/Advanced settings"
		If($Policy.ClientPolicy.Session.AdvancedSettings.Enabled)
		{
			$txt = "Session/Advanced settings/Use client system colors"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.UseClientColors.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.UseClientColors.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.UseClientColors.ToString()
			}

			$txt = "Session/Advanced settings/Use client system settings (border size, fonts, etc)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.UseClientSettings.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.UseClientSettings.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.UseClientSettings.ToString()
			}

			$txt = "Session/Advanced settings/Create shortcuts configured on server"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.CreateShrtCut.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.CreateShrtCut.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.CreateShrtCut.ToString()
			}

			$txt = "Session/Advanced settings/Register file extensions associated from the server"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.RegisterExt.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.RegisterExt.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.RegisterExt.ToString()
			}

			$txt = "Session/Advanced settings/Redirect URLs to the client device"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.UrlRedirection.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.UrlRedirection.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.UrlRedirection.ToString()
			}

			$txt = "Session/Advanced settings/Redirect MAILTO to the client device"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.MailRedirection.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.MailRedirection.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.MailRedirection.ToString()
			}

			$txt = "Session/Advanced settings/Always ask for credentials when starting applications"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.CredAlwaysAsk.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.CredAlwaysAsk.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.CredAlwaysAsk.ToString()
			}

			$txt = "Session/Advanced settings/Allow server to send commands to be executed by client"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.AllowSrvCmd.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.AllowSrvCmd.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.AllowSrvCmd.ToString()
			}

			$txt = "Session/Advanced settings/Confirm Server commands before executing them"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.PromptSrvCmd.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.PromptSrvCmd.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.PromptSrvCmd.ToString()
			}

			$txt = "Session/Advanced settings/Network Level Authentication"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.CredSSP.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.CredSSP.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.CredSSP.ToString()
			}

			$txt = "Session/Advanced settings/Redirect POS devices"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.RedirPOS.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.RedirPOS.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.RedirPOS.ToString()
			}

			$txt = "Session/Advanced settings/Use Pre Windows 2000 login format"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.Pre2000Cred.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.Pre2000Cred.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.Pre2000Cred.ToString()
			}

			$txt = "Session/Advanced settings/Disable RDP-UDP for gateway connections"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.DisableRUDP.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.DisableRUDP.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.DisableRUDP.ToString()
			}

			$txt = "Session/Advanced settings/Do not show drive redirection dialog"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Session.AdvancedSettings.DoNotShowDriveRedirectionDlg.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Session.AdvancedSettings.DoNotShowDriveRedirectionDlg.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Session.AdvancedSettings.DoNotShowDriveRedirectionDlg.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options"
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Connection"
		If($Policy.ClientPolicy.ClientOptions.Connection.Enabled)
		{
			$ConnBanner = ""
			Switch($Policy.ClientPolicy.ClientOptions.Connection.ConnectionBannerType)
			{
				"SplashWindow"			{$ConnBanner = "Splash Window"; Break}
				"TaskBarToastWindow"	{$ConnBanner = "Taskbar Toast Window"; Break}
				"None"					{$ConnBanner = "None"; Break}
				Default					{$ConnBanner = "Connection/Connection banner not found: $($Policy.ClientPolicy.ClientOptions.Connection.ConnectionBannerType)"; Break}
			}

			$txt = "Client options/Connection/Connection/Connection banner"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $ConnBanner;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$ConnBanner,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $ConnBanner
			}
			
			If($Policy.ClientPolicy.ClientOptions.Connection.AutoRefreshFarms -eq $False)
			{
				$txt = "Client options/Connection/Connection/Automatically refresh connected RAS connections every (minutes)"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.ClientOptions.Connection.AutoRefreshFarms.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.ClientOptions.Connection.AutoRefreshFarms.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Connection.AutoRefreshFarms.ToString()
				}
			}
			Else
			{
				$txt = "Client options/Connection/Connection/Automatically refresh connected RAS connections every (minutes)"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $Policy.ClientPolicy.ClientOptions.Connection.AutoRefreshTime_Mins.ToString();
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$Policy.ClientPolicy.ClientOptions.Connection.AutoRefreshTime_Mins.ToString(),$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Connection.AutoRefreshTime_Mins.ToString()
				}
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Logging"
		If($Policy.ClientPolicy.ClientOptions.Logging.Enabled)
		{
			$txt = "Client options/Logging/Logging/Log level"

			$LogLevel = ""
			Switch($Policy.ClientPolicy.ClientOptions.Logging.LogLevel)
			{
				"Verbose"	{$LogLevel = "Verbose"; Break}
				"4"			{$LogLevel = "Extended"; Break}
				"5"			{$LogLevel = "Verbose"; Break}
				"Standard"	{$LogLevel = "Standard"; Break}
				"Extended"	{$LogLevel = "Extended"; Break}
				Default		{$LogLevel = "Logging/Log level not found: $($Policy.ClientPolicy.ClientOptions.Logging.LogLevel)"; Break}
			}
			
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $LogLevel;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$LogLevel,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $LogLevel
			}
			
			If($Policy.ClientPolicy.ClientOptions.Logging.LogLevel -ne "Standard")
			{
				$LoggingDate = $Policy.ClientPolicy.ClientOptions.Logging.LoggingStartDateTime
				$LogDate     = ($LoggingDate.ToUniversalTime()).ToShortDateString()
				$LogTime     = ($LoggingDate.ToUniversalTime()).ToLongTimeString()
				$LogDuration = ""
				
				Switch($Policy.ClientPolicy.ClientOptions.Logging.LoggingDuration)
				{
					0		{$LogDuration = ""; Break}
					3600	{$LogDuration = "1 hour"; Break}
					10800	{$LogDuration = "3 hours"; Break}
					21600	{$LogDuration = "6 hours"; Break}
					43200	{$LogDuration = "12 hours"; Break}
					86400	{$LogDuration = "1 day"; Break}
					259200	{$LogDuration = "3 days"; Break}
					Default	{$LogDuration = " not found: $($Policy.ClientPolicy.ClientOptions.Logging.LoggingDuration)"; Break}
				}
			
				$txt = "Client options/Logging/Logging/Date"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $LogDate;
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$LogDate,$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $LogDate
				}
				
				
				$txt = "Client options/Logging/Logging/Start"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $LogTime;
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$LogTime,$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $LogTime
				}
				
				
				$txt = "Client options/Logging/Logging/Duration"
				If($MSWord -or $PDF)
				{
					$SettingsWordTable += @{
					Text = $txt;
					Value = $LogDuration;
					}
				}
				If($HTML)
				{
					$rowdata += @(,(
					$txt,$htmlbold,
					$LogDuration,$htmlwhite))
				}
				If($Text)
				{
					OutputPolicySetting $txt $LogDuration
				}
			}

			$txt = "Client options/Logging/Logging/Allow view log"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Logging.AllowViewLog.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Logging.AllowViewLog.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Logging.AllowViewLog.ToString()
			}

			$txt = "Client options/Logging/Logging/Allow clear log"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Logging.AllowClearLog.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Logging.AllowClearLog.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Logging.AllowClearLog.ToString()
			}
			
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Update"
		If($Policy.ClientPolicy.ClientOptions.Update.Enabled)
		{
			$txt = "Client options/Update/Update/Check for updates on startup"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Update.CheckForUpdateOnLaunch.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Update.CheckForUpdateOnLaunch.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Update.CheckForUpdateOnLaunch.ToString()
			}

			$txt = "Client options/Update/Client version management/Parallels Client"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Update.UpdateClientXmlUrl;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Update.UpdateClientXmlUrl,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Update.UpdateClientXmlUrl
			}
		}

		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/PC keyboard"
		If($Policy.ClientPolicy.ClientOptions.PCKeyboard.Enabled)
		{
			$txt = "Client options/PC keyboard/PC keyboard/Force use PC keyboard (if applicable)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.PCKeyboard.ForcePCKeybd.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.PCKeyboard.ForcePCKeybd.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.PCKeyboard.ForcePCKeybd.ToString()
			}

			$KBLayout = ""
			Switch($Policy.ClientPolicy.ClientOptions.PCKeyboard.PCKeybd)
			{
				"ChineseSimplified"		{$KBLayout = "Chinese (Simplified)"	; Break}
				"ChineseTraditional"	{$KBLayout = "Chinese (Traditional)"; Break}
				"Dutch"					{$KBLayout = "Dutch"				; Break}
				"EnglishUK"				{$KBLayout = "English (UK)"			; Break}
				"EnglishUS"				{$KBLayout = "English (US)"			; Break}
				"French"				{$KBLayout = "French"			    ; Break}
				"FrenchCanada"			{$KBLayout = "French (Canada)"		; Break}
				"German"				{$KBLayout = "German"			    ; Break}
				"Italian"				{$KBLayout = "Italian"			    ; Break}
				"Japanese"				{$KBLayout = "Japanese"			    ; Break}
				"Korean"				{$KBLayout = "Korean"			    ; Break}
				"Maltese"				{$KBLayout = "Maltese"			    ; Break}
				"NorwegianNynorsk"		{$KBLayout = "Norwegian (Nynorsk)"	; Break}
				"PortugueseBrazil"		{$KBLayout = "Portuguese (Brazil)"	; Break}
				"Portuguese"			{$KBLayout = "Portuguese"		    ; Break}
				"Russian"				{$KBLayout = "Russian"			    ; Break}
				"Spanish"				{$KBLayout = "Spanish"			    ; Break}
				"Swedish"				{$KBLayout = "Swedish"			    ; Break}
				Default					{$KBLayout = "PC keyboard/Keyboard layout not found: $($Policy.ClientPolicy.ClientOptions.PCKeyboard.PCKeybd)"; Break}
			}

			$txt = "Client options/PC keyboard/PC keyboard/Keyboard layout"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $KBLayout;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$KBLayout,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $KBLayout
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Single Sign-On"
		If($Policy.ClientPolicy.ClientOptions.SingleSignOn.Enabled)
		{
			$txt = "Client options/Single Sign-On/Single sign-on/Force to wrap third party SSO component"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.SingleSignOn.ForceThirdPartySSO.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.SingleSignOn.ForceThirdPartySSO.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.SingleSignOn.ForceThirdPartySSO.ToString()
			}

			$txt = "Client options/Single Sign-On/Single sign-on/Third-party credentials provider GUID"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.SingleSignOn.SSOProvGUID;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.SingleSignOn.SSOProvGUID,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.SingleSignOn.SSOProvGUID
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Advanced"
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Advanced/Global"
		If($Policy.ClientPolicy.ClientOptions.Global.Enabled)
		{
			$txt = "Client options/Advanced/Global/Always on top"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.AlwaysOnTop.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.AlwaysOnTop.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.AlwaysOnTop.ToString()
			}

			$txt = "Client options/Advanced/Global/Show connections tree"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.ShowFolders.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.ShowFolders.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.ShowFolders.ToString()
			}

			$txt = "Client options/Advanced/Global/Minimize to tray on close or escape"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.MinimizeToTrayOnClose.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.MinimizeToTrayOnClose.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.MinimizeToTrayOnClose.ToString()
			}

			$txt = "Client options/Advanced/Global/Enable graphic accelerator (Chrome client)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.GraphicsAccel.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.GraphicsAccel.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.GraphicsAccel.ToString()
			}

			$txt = "Client options/Advanced/Global/Enable work area background (Chrome client)"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.ClientWorkAreaBackground.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.ClientWorkAreaBackground.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.ClientWorkAreaBackground.ToString()
			}

			$txt = "Client options/Advanced/Global/Do not warn if server certificate is not verified"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.SSLNoWarning.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.SSLNoWarning.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.SSLNoWarning.ToString()
			}

			$txt = "Client options/Advanced/Global/Swap mouse buttons"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.SwapMouse.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.SwapMouse.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.SwapMouse.ToString()
			}

			$txt = "Client options/Advanced/Global/DPI aware"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.DPIAware.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.DPIAware.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.DPIAware.ToString()
			}

			$txt = "Client options/Advanced/Global/Add RAS connection automatically when starting web or shortcut items"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.AutoAddFarm.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.AutoAddFarm.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.AutoAddFarm.ToString()
			}

			$txt = "Client options/Advanced/Global/Do not show prompt message for auto add RAS connection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.DontPromptAutoAddFarm.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.DontPromptAutoAddFarm.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.DontPromptAutoAddFarm.ToString()
			}

			$txt = "Client options/Advanced/Global/Close error messages automatically"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.SuppErrMsgs.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.SuppErrMsgs.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.SuppErrMsgs.ToString()
			}

			$txt = "Client options/Advanced/Global/Clear session cookies on exit"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Global.ClearCookies.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Global.ClearCookies.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Global.ClearCookies.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Advanced/Language"
		If($Policy.ClientPolicy.ClientOptions.Language.Enabled)
		{
			$Lang = ""
			Switch($Policy.ClientPolicy.ClientOptions.Language.Lang)
			{
				"Default"				{$Lang = "Default"  			; Break}
				"English"				{$Lang = "English"	    		; Break}
				"German"				{$Lang = "German"			    ; Break}
				"Japanese"				{$Lang = "Japanese"			    ; Break}
				"Russian"				{$Lang = "Russian"			    ; Break}
				"French"				{$Lang = "French"			    ; Break}
				"Spanish"				{$Lang = "Spanish"			    ; Break}
				"Italian"				{$Lang = "Italian"			    ; Break}
				"Portuguese"			{$Lang = "Portuguese"		    ; Break}
				"ChineseSimplified"		{$Lang = "Chinese (Simplified)"	; Break}
				"ChineseTraditional"	{$Lang = "Chinese (Traditional)"; Break}
				"Korean"				{$Lang = "Korean"			    ; Break}
				"Dutch"					{$Lang = "Dutch"				; Break}
				Default					{$Lang = "Language/Advanced client options/Language not found: $($Policy.ClientPolicy.ClientOptions.PCKeyboard.PCKeybd)"; Break}
			}

			$txt = "Client options/Advanced/Language/Advanced client options/Language"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Lang;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Lang,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Lang
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Advanced/Printing"
		If($Policy.ClientPolicy.ClientOptions.Printing.Enabled)
		{
			$txt = "Client options/Advanced/Printing/Install missing fonts automatically"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Printing.PrintInstallFonts.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Printing.PrintInstallFonts.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Printing.PrintInstallFonts.ToString()
			}

			<#$txt = "Client options/Advanced/Printing/Redirect custom paper sizes when server preferences are selected"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Printing.PrintAddCustomPapers.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Printing.PrintAddCustomPapers.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Printing.PrintAddCustomPapers.ToString()
			}#>

			$txt = "Client options/Advanced/Printing/Raw printing support"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Printing.PrintRawSupport.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Printing.PrintRawSupport.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Printing.PrintRawSupport.ToString()
			}

			$txt = "Client options/Advanced/Printing/Convert non distributable fonts data to images"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Printing.AllowEMFRasterization.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Printing.AllowEMFRasterization.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Printing.AllowEMFRasterization.ToString()
			}

			$txt = "Client options/Advanced/Printing/Cache printers hardware information"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Printing.PrintUseCache.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Printing.PrintUseCache.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Printing.PrintUseCache.ToString()
			}

			$txt = "Client options/Advanced/Printing/Refressh printer hardware information every 30 days"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Printing.PrintRefreshCache.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Printing.PrintRefreshCache.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Printing.PrintRefreshCache.ToString()
			}

			$txt = "Client options/Advanced/Printing/Cache RAS Universal Printing embedded fonts"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.Printing.PrintUseFontsCache.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.Printing.PrintUseFontsCache.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.Printing.PrintUseFontsCache.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Advanced/Windows client"
		If($Policy.ClientPolicy.ClientOptions.WindowsClient.Enabled)
		{
			$txt = "Client options/Advanced/Windows client/Advanced client options - Windows client/Hide Launcher when application is launched"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.WindowsClient.Autohide.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.WindowsClient.Autohide.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.WindowsClient.Autohide.ToString()
			}

			$txt = "Client options/Advanced/Windows client/Advanced client options - Windows client/Launch automatically at Windows startup"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.WindowsClient.AutoLaunch.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.WindowsClient.AutoLaunch.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.WindowsClient.AutoLaunch.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tClient options/Advanced/RemoteFX USB redirection"
		If($Policy.ClientPolicy.ClientOptions.RemoteFxUsbRedirection.Enabled)
		{
			$txt = "Client options/Advanced/RemoteFX USB redirection/RemoteFX USB redirection"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ClientOptions.RemoteFxUsbRedirection.RemoteFXUSBRedir.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ClientOptions.RemoteFxUsbRedirection.RemoteFXUSBRedir.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ClientOptions.RemoteFxUsbRedirection.RemoteFXUSBRedir.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tControl settings"
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tControl settings/Connections"
		If($Policy.ClientPolicy.ControlSettings.ControlSettingsConnections.Enabled)
		{
			$txt = "Control settings/Connections/Connections/Prohibit adding of RAS connections"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ControlSettings.ControlSettingsConnections.DontAddNewASXGConns.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ControlSettings.ControlSettingsConnections.DontAddNewASXGConns.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ControlSettings.ControlSettingsConnections.DontAddNewASXGConns.ToString()
			}

			$txt = "Control settings/Connections/Connections/Prohibit adding standard RDP connections"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ControlSettings.ControlSettingsConnections.DontAddNewStdConns.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ControlSettings.ControlSettingsConnections.DontAddNewStdConns.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ControlSettings.ControlSettingsConnections.DontAddNewStdConns.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tControl settings/Password"
		If($Policy.ClientPolicy.ControlSettings.Password.Enabled)
		{
			$txt = "Control settings/Password/Password/Prohibit saving password"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ControlSettings.Password.DontSavePwds.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ControlSettings.Password.DontSavePwds.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ControlSettings.Password.DontSavePwds.ToString()
			}

			$txt = "Control settings/Password/Password/Prohibit changing password"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ControlSettings.Password.DontChangePwds.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ControlSettings.Password.DontChangePwds.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ControlSettings.Password.DontChangePwds.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tControl settings/Import and export"
		If($Policy.ClientPolicy.ControlSettings.ImportExport.Enabled)
		{
			$txt = "Control settings/Import and export/Import and export/Prohibit import/export connection settings"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.ControlSettings.ImportExport.DontImportExport.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.ControlSettings.ImportExport.DontImportExport.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.ControlSettings.ImportExport.DontImportExport.ToString()
			}
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`t`t`tRedirection"
		If($Policy.ClientPolicy.Redirection.Enabled)
		{
			$txt = "Redirection/New gateway/Gateway address"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Redirection.Gateway;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Redirection.Gateway,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Redirection.Gateway
			}

			$ConnMode = ""
			Switch($Policy.ClientPolicy.Redirection.Mode)
			{
				"DirectMode"		{$ConnMode = "Direct Mode"; Break}
				"DirectSSLMode"		{$ConnMode = "Direct SSL Mode"; Break}
				"GatewayMode"		{$ConnMode = "Gateway Mode"; Break}
				"GatewaySSLMode"	{$ConnMode = "Gateway SSL Mode"; Break}
				Default				{$ConnMode = "New gateway/Connection mode not found: $($Policy.ClientPolicy.Redirection.Mode)"; Break}
			}

			$txt = "Redirection/New gateway/Connection mode"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $ConnMode;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$ConnMode,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $ConnMode
			}

			$txt = "Redirection/New gateway/Port"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Redirection.ServerPort.ToString();
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Redirection.ServerPort.ToString(),$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Redirection.ServerPort.ToString()
			}

			$txt = "Redirection/New gateway/Alternative address"
			If($MSWord -or $PDF)
			{
				$SettingsWordTable += @{
				Text = $txt;
				Value = $Policy.ClientPolicy.Redirection.AltGateway;
				}
			}
			If($HTML)
			{
				$rowdata += @(,(
				$txt,$htmlbold,
				$Policy.ClientPolicy.Redirection.AltGateway,$htmlwhite))
			}
			If($Text)
			{
				OutputPolicySetting $txt $Policy.ClientPolicy.Redirection.AltGateway
			}
		}

		If($MSWord -or $PDF)
		{
			If($SettingsWordTable.Count -gt 0) #don't process if array is empty
			{
				WriteWordLine 4 0 "Properties"
				$Table = AddWordTable -Hashtable $SettingsWordTable `
				-Columns  Text,Value `
				-Headers  "Setting Key","Value"`
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 300;
				$Table.Columns.Item(2).Width = 200;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)
			}
			Else
			{
				WriteWordLine 0 1 "There are no policy properties"
			}
			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 0 ""
		}
		If($HTML)
		{
			If($rowdata.count -gt 0)
			{
				$columnHeaders = @(
				'Setting Key',($script:htmlsb),
				'Value',($script:htmlsb))

				$msg = "Properties"
				$columnWidths = @("600","300")
				FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
				WriteHTMLLine 0 0 ""
			}
		}

		Write-Verbose "$(Get-Date -Format G): "
	}
}

Function OutputPolicySetting
{
	Param([string] $outputText, [string] $outputData)

	If($outputText -ne "")
	{
		$xLength = $outputText.Length
		If($outputText.Substring($xLength-2,2) -ne ": ")
		{
			$outputText += ": "
		}
	}
	Line 2 $outputText $outputData
}
#endregion

#region process administration
Function ProcessAdministration
{
	Write-Verbose "$(Get-Date -Format G): Processing Administration"
	
	OutputAdministrationSectionPage
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Accounts"
	
	$results = Get-RASAdminAccount -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve administration information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve administration information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve administration information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve administration information"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Host "
		No administration information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No administration information was found"
		}
		If($Text)
		{
			Line 0 "No administration information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No administration information was found"
		}
	}
	Else
	{
		#make sure the results are sorted
		$results = $results | Sort-Object Name
		OutputRASAccounts $results
	}

	Write-Verbose "$(Get-Date -Format G): `tProcessing Features"
	
	$RASFeatures = Get-RASHelpdeskEmailSettings -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve features information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve features information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve features information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve features information"
		}
	}
	ElseIf($? -and $null -eq $RASFeatures)
	{
		Write-Host "
		No features information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No features information was found"
		}
		If($Text)
		{
			Line 0 "No features information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No features information was found"
		}
	}
	Else
	{
		OutputRASFeatures $RASFeatures
	}

	Write-Verbose "$(Get-Date -Format G): `tProcessing Settings"
	
	$GotRASSettings = $False
	$RASSettings = Get-RASSystemSettings -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve settings information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve settings information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve settings information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve settings information"
		}
	}
	ElseIf($? -and $null -eq $RASsettings)
	{
		Write-Host "
		No settings information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No settings information was found"
		}
		If($Text)
		{
			Line 0 "No settings information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No settings information was found"
		}
	}
	Else
	{
		$GotRASSettings = $True
		OutputRASSettings $RASSettings
	}

	$RASProxySettings = Get-RASProxySettings -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Proxy settings information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Proxy settings information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Proxy settings information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Proxy settings information"
		}
	}
	ElseIf($? -and $null -eq $RASProxySettings)
	{
		Write-Host "
		No Proxy settings information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Proxy settings information was found"
		}
		If($Text)
		{
			Line 0 "No Proxy settings information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Proxy settings information was found"
		}
	}
	Else
	{
		OutputRASProxySettings $RASProxySettings
	}

	If($GotRASSettings)
	{
		OutputRASMiscSettings $RASSettings
	}
	
	$RASMailboxSettings = Get-RASMailboxSettings -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve mailbox settings information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve mailbox settings information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve mailbox settings information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve mailbox settings information"
		}
	}
	ElseIf($? -and $null -eq $RASMailboxSettings)
	{
		Write-Host "
		No mailbox settings information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No mailbox settings information was found"
		}
		If($Text)
		{
			Line 0 "No mailbox settings information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No mailbox settings information was found"
		}
	}
	Else
	{
		OutputRASMailboxSettings $RASMailboxSettings
	}
	
	$RASReportingSettings = Get-RASReportingSettings -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Reporting settings information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Reporting settings information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Reporting settings information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Reporting settings information"
		}
	}
	ElseIf($? -and $null -eq $RASReportingSettings)
	{
		Write-Host "
		No Reporting settings information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Reporting settings information was found"
		}
		If($Text)
		{
			Line 0 "No Reporting settings information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Reporting settings information was found"
		}
	}
	Else
	{
		OutputRASReportingSettings $RASReportingSettings
	}
	
	$RASPerformanceMonitorSettings = Get-RASPerformanceMonitorSettings -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve Performance Monitor settings information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve Performance Monitor settings information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve Performance Monitor settings information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve Performance Monitor settings information"
		}
	}
	ElseIf($? -and $null -eq $RASPerformanceMonitorSettings)
	{
		Write-Host "
		No Performance Monitor settings information was found
		" -ForegroundColor White
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No Performance Monitor settings information was found"
		}
		If($Text)
		{
			Line 0 "No Performance Monitor settings information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No Performance Monitor settings information was found"
		}
	}
	Else
	{
		OutputRASPerformanceMonitorSettings $RASPerformanceMonitorSettings
	}
}

Function OutputAdministrationSectionPage
{
	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "Administration"
	}
	If($Text)
	{
		Line 0 "Administration"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "Administration"
	}
}

Function OutputRASAccounts
{
	Param([object] $RASAccounts)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Accounts"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Accounts"
	}
	If($Text)
	{
		Line 1 "Accounts"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Accounts"
	}
	
	ForEach($RASAccount in $RASAccounts)
	{
		Switch ($RASAccount.Permissions)
		{
			"CustomAdmin"	{$RASAccountPermissions = "Custom administration"; Break}
			"PowerAdmin"	{$RASAccountPermissions = "Power administration"; Break}
			"RootAdmin"		{$RASAccountPermissions = "Root administration"; Break}
			Default			{$RASAccountPermissions = "Unable to determine Permissions: $($RASAccount.Permissions)"; Break}
		}

		Switch ($RASAccount.Type)
		{
			"Group"		{$RASAccountType = "Group"; Break}
			"User"		{$RASAccountType = "User"; Break}
			"UserGroup"	{$RASAccountType = "Group User"; Break}
			Default		{$RASAccountType = "Unknown: $($RASAccount.Type)"; Break}
		}

		Switch ($RASAccount.Notify)
		{
			"Email"		{$RASAccountNotify = "Via email"; Break}
			"None"		{$RASAccountNotify = "Don't receive"; Break}
			Default		{$RASAccountNotify = "Unknown: $($RASAccount.Notify)"; Break}
		}

		If($MSWord -or $PDF)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Group or user names"; Value = $RASAccount.Name; }) > $Null
			$ScriptInformation.Add(@{Data = "Type"; Value = $RASAccountType; }) > $Null
			$ScriptInformation.Add(@{Data = 'Permissions'; Value = $RASAccountPermissions; }) > $Null
			$ScriptInformation.Add(@{Data = 'Receive system notifications'; Value = $RASAccountNotify; }) > $Null
			$ScriptInformation.Add(@{Data = 'Email'; Value = $RASAccount.Email; }) > $Null
			$ScriptInformation.Add(@{Data = 'Mobile'; Value = $RASAccount.Mobile; }) > $Null
			$ScriptInformation.Add(@{Data = 'Group'; Value = $RASAccount.GroupName; }) > $Null
			$ScriptInformation.Add(@{Data = "Last modification by"; Value = $RASAccount.AdminLastMod; }) > $Null
			$ScriptInformation.Add(@{Data = "Modified on"; Value = $RASAccount.TimeLastMod.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "Created by"; Value = $RASAccount.AdminCreate; }) > $Null
			$ScriptInformation.Add(@{Data = "Created on"; Value = $RASAccount.TimeCreate.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "ID"; Value = $RASAccount.Id.ToString(); }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 250;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 2 "Group or user names`t`t: " $RASAccount.Name
			Line 2 "Type`t`t`t`t: " $RASAccountType
			Line 2 "Permissions`t`t`t: " $RASAccountPermissions
			Line 2 "Receive system notifications`t: " $RASAccountNotify
			Line 2 "Email`t`t`t`t: " $RASAccount.Email
			Line 2 "Mobile`t`t`t`t: " $RASAccount.Mobile
			Line 2 "Group`t`t`t`t: " $RASAccount.GroupName
			Line 2 "Last modification by`t`t: " $RASAccount.AdminLastMod
			Line 2 "Modified on`t`t`t: " $RASAccount.TimeLastMod.ToString()
			Line 2 "Created by`t`t`t: " $RASAccount.AdminCreate
			Line 2 "Created on`t`t`t: " $RASAccount.TimeCreate.ToString()
			Line 2 "ID`t`t`t`t: " $RASAccount.Id.ToString()
			Line 0 ""
		}
		If($HTML)
		{
			$rowdata = @()
			$columnHeaders = @("Group or user names",($Script:htmlsb),$RASAccount.Name,$htmlwhite)
			$rowdata += @(,("Type",($Script:htmlsb),$RASAccountType,$htmlwhite))
			$rowdata += @(,("Permissions",($Script:htmlsb),$RASAccountPermissions,$htmlwhite))
			$rowdata += @(,("Receive system notifications",($Script:htmlsb),$RASAccountNotify,$htmlwhite))
			$rowdata += @(,("Email",($Script:htmlsb),$RASAccount.Email,$htmlwhite))
			$rowdata += @(,("Mobile",($Script:htmlsb),$RASAccount.Mobile,$htmlwhite))
			$rowdata += @(,("Group",($Script:htmlsb),$RASAccount.GroupName,$htmlwhite))
			$rowdata += @(,("Last modification by",($Script:htmlsb), $RASAccount.AdminLastMod,$htmlwhite))
			$rowdata += @(,("Modified on",($Script:htmlsb), $RASAccount.TimeLastMod.ToString(),$htmlwhite))
			$rowdata += @(,("Created by",($Script:htmlsb), $RASAccount.AdminCreate,$htmlwhite))
			$rowdata += @(,("Created on",($Script:htmlsb), $RASAccount.TimeCreate.ToString(),$htmlwhite))
			$rowdata += @(,("ID",($Script:htmlsb),$RASAccount.Id.ToString(),$htmlwhite))

			$msg = ""
			$columnWidths = @("200","175")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
	}
}

Function OutputRASFeatures
{
	Param([object] $RASFeatures)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Features"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Features"
		WriteWordLine 3 0 "Helpdesk"
	}
	If($Text)
	{
		Line 1 "Features"
		Line 2 "Helpdesk"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Features"
		WriteHTMLLine 3 0 "Helpdesk"
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Enable Helpdesk functionality in Parallels Client"; Value = $RASFeatures.HelpDeskEnabled; }) > $Null
		$ScriptInformation.Add(@{Data = "Helpdesk email"; Value = $RASFeatures.HelpDeskEmail; }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Enable Helpdesk functionality in Parallels Client`t: " $RASFeatures.HelpDeskEnabled
		Line 3 "Helpdesk email`t`t`t`t`t`t: " $RASFeatures.HelpDeskEmail
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Enable Helpdesk functionality in Parallels Client",($Script:htmlsb),$RASFeatures.HelpDeskEnabled.ToString(),$htmlwhite)
		$rowdata += @(,("Helpdesk email",($Script:htmlsb),$RASFeatures.HelpDeskEmail,$htmlwhite))

		$msg = ""
		$columnWidths = @("250","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputRASSettings
{
	Param([object] $RASSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Settings"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Settings"
		WriteWordLine 3 0 "Customer experience program"
	}
	If($Text)
	{
		Line 1 "Settings"
		Line 2 "Customer experience program"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Settings"
		WriteHTMLLine 3 0 "Customer experience program"
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Participate in the Customer Experience Program"; Value = $RASSettings.CEPEnabled.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Participate in the Customer Experience Program`t`t: " $RASSettings.CEPEnabled.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Participate in the Customer Experience Program",($Script:htmlsb),$RASSettings.CEPEnabled.ToString(),$htmlwhite)

		$msg = ""
		$columnWidths = @("200","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputRASProxySettings
{
	Param([object] $RASProxySettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput HTTP Proxy Settings"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "HTTP proxy settings"
	}
	If($Text)
	{
		Line 2 "HTTP proxy settings"
	}
	If($HTML)
	{
		WriteHTMLLine 3 0 "HTTP proxy settings"
	}
	
	If($MSWord -or $PDF)
	{
		If($RASProxySettings.HttpProxyMode -eq "NoProxy")
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "No proxy server"; Value = ""; }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 250;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		Else
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Manual HTTP proxy configuration"; Value = ""; }) > $Null
			$ScriptInformation.Add(@{Data = "Address"; Value = $RASProxySettings.HttpProxyAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Port"; Value = $RASProxySettings.HttpProxyPort; }) > $Null
			$ScriptInformation.Add(@{Data = "User name"; Value = $RASProxySettings.HttpProxyUser; }) > $Null
			$ScriptInformation.Add(@{Data = "Password"; Value = $RASProxySettings.HttpProxyPwd; }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 250;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
	}
	If($Text)
	{
		If($RASProxySettings.HttpProxyMode -eq "NoProxy")
		{
			Line 3 "No proxy server" 
			Line 0 ""
		}
		Else
		{
			Line 3 "Manual HTTP proxy configuration" 
			Line 3 "Address`t`t: " $RASProxySettings.HttpProxyAddress
			Line 3 "Port`t`t: " $RASProxySettings.HttpProxyPort
			Line 3 "User name`t: " $RASProxySettings.HttpProxyUser
			Line 3 "Password`t: " $RASProxySettings.HttpProxyPwd
			Line 0 ""
		}
	}
	If($HTML)
	{
		If($RASProxySettings.HttpProxyMode -eq "NoProxy")
		{
			$rowdata = @()
			$columnHeaders = @("No proxy server",($Script:htmlsb),"",$htmlwhite)

			$msg = ""
			$columnWidths = @("200","175")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
		Else
		{
			$rowdata = @()
			$columnHeaders = @("Manual HTTP proxy configuration",($Script:htmlsb),"",$htmlwhite)
			$rowdata += @(,("Address",($Script:htmlsb),$RASProxySettings.HttpProxyAddress,$htmlwhite))
			$rowdata += @(,("Port",($Script:htmlsb),$RASProxySettings.HttpProxyPort.ToString(),$htmlwhite))
			$rowdata += @(,("User name",($Script:htmlsb),$RASProxySettings.HttpProxyUser,$htmlwhite))
			$rowdata += @(,("Password",($Script:htmlsb),$RASProxySettings.HttpProxyPwd,$htmlwhite))

			$msg = ""
			$columnWidths = @("200","175")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
	}
}

Function OutputRASMiscSettings
{
	Param([object] $RASSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Miscellaneous Settings"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Miscellaneous"
	}
	If($Text)
	{
		Line 2 "Miscellaneous"
	}
	If($HTML)
	{
		WriteHTMLLine 3 0 "Miscellaneous"
	}
	
	Switch ($RASSettings.ResetIdleSessionAfterMins)
	{
		0		{$RASSettingsResetIdleSessionAfterMins = "Never"; Break}
		15		{$RASSettingsResetIdleSessionAfterMins = "15 minutes"; Break}
		30		{$RASSettingsResetIdleSessionAfterMins = "30 minutes"; Break}
		60		{$RASSettingsResetIdleSessionAfterMins = "1 hour"; Break}
		180		{$RASSettingsResetIdleSessionAfterMins = "3 hours"; Break}
		360		{$RASSettingsResetIdleSessionAfterMins = "6 hours"; Break}
		720		{$RASSettingsResetIdleSessionAfterMins = "12 hours"; Break}
		1440	{$RASSettingsResetIdleSessionAfterMins = "1 day"; Break}
		Default	{$RASSettingsResetIdleSessionAfterMins = "Unable to determine Console idle time: $($RASSettings.ResetIdleSessionAfterMins)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Reset idle RAS Console session after"; Value = $RASSettingsResetIdleSessionAfterMins; }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Reset idle RAS Console session after`t`t`t: " $RASSettingsResetIdleSessionAfterMins
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Reset idle RAS Console session after",($Script:htmlsb),$RASSettingsResetIdleSessionAfterMins,$htmlwhite)

		$msg = ""
		$columnWidths = @("200","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputRASMailboxSettings
{
	Param([object] $RASMailboxSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Mailbox"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Mailbox"
		WriteWordLine 3 0 "Mailbox configuration"
	}
	If($Text)
	{
		Line 1 "Mailbox"
		Line 2 "Mailbox configuration"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Mailbox"
		WriteHTMLLine 3 0 "Mailbox configuration"
	}
	
	Switch ($RASMailboxSettings.UseTLS)
	{
		"YesIfAvailable"		{$RASMailboxSettingsUseTLS = "Use TLS/SSL if available"; Break}
		"Yes"					{$RASMailboxSettingsUseTLS = "Use TLS/SSL"; Break}
		"No"					{$RASMailboxSettingsUseTLS = "Do not use"; Break}
		"3"						{$RASMailboxSettingsUseTLS = "Use TLS 1.2 if available"; Break}
		"YesTLS12IfAvailable"	{$RASMailboxSettingsUseTLS = "Use TLS 1.2 if available"; Break} #fixed in 19.2, added in 3.01
		Default					{$RASMailboxSettingsUseTLS = "Unable to determine TLS/SSL setting: $($RASMailboxSettings.UseTLS)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Mail server"; Value = $RASMailboxSettings.SMTPServer; }) > $Null
		$ScriptInformation.Add(@{Data = "TLS/SSL"; Value = $RASMailboxSettingsUseTLS; }) > $Null
		$ScriptInformation.Add(@{Data = "SMTP server requires authentication"; Value = $RASMailboxSettings.RequireAuth; }) > $Null
		If($RASMailboxSettings.RequireAuth)
		{
			$ScriptInformation.Add(@{Data = "Username"; Value = $RASMailboxSettings.Username; }) > $Null
		}

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Mail server`t`t`t`t`t`t: " $RASMailboxSettings.SMTPServer
		Line 3 "TLS/SSL`t`t`t`t`t`t`t: " $RASMailboxSettingsUseTLS
		Line 3 "SMTP server requires authentication`t`t`t: " $RASMailboxSettings.RequireAuth
		If($RASMailboxSettings.RequireAuth)
		{
			Line 3 "Username`t`t`t`t`t`t: " $RASMailboxSettings.Username
		}
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Mail server",($Script:htmlsb),$RASMailboxSettings.SMTPServer,$htmlwhite)
		$rowdata += @(,("TLS/SSL",($Script:htmlsb),$RASMailboxSettingsUseTLS,$htmlwhite))
		$rowdata += @(,("SMTP server requires authentication",($Script:htmlsb),$RASMailboxSettings.RequireAuth.ToString(),$htmlwhite))
		If($RASMailboxSettings.RequireAuth)
		{
			$rowdata += @(,("Username",($Script:htmlsb),$RASMailboxSettings.Username,$htmlwhite))
		}

		$msg = ""
		$columnWidths = @("200","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}

	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Sender information"
	}
	If($Text)
	{
		Line 2 "Sender information"
	}
	If($HTML)
	{
		WriteHTMLLine 3 0 "Sender information"
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Email address"; Value = $RASMailboxSettings.SenderAddress; }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Email address`t`t`t`t`t`t: " $RASMailboxSettings.SenderAddress
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Email address",($Script:htmlsb),$RASMailboxSettings.SenderAddress,$htmlwhite)

		$msg = ""
		$columnWidths = @("200","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputRASReportingSettings
{
	Param([object] $RASReportingSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput RAS Reporting configuration"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Reporting"
	}
	If($Text)
	{
		Line 1 "Reporting"
	}
	If($HTML)
	{
		WriteHTMLLine 2 0 "Reporting"
	}
	
	$SessionInfoRetain = ""
	Switch($RASReportingSettings.TrackSessionTime)
	{
		0			{$SessionInfoRetain = "Do not delete"; Break}
		7257600		{$SessionInfoRetain = "12 weeks"; Break}
		15724800	{$SessionInfoRetain = "26 weeks"; Break}
		31449600	{$SessionInfoRetain = "52 weeks"; Break}
		Default		{$SessionInfoRetain = "Unable to determine Session retain info for: $($RASReportingSettings.TrackSessionTime)"; Break}
	}
	
	$ServerInfoRetain = ""
	Switch($RASReportingSettings.TrackServerTime)
	{
		0			{$ServerInfoRetain = "Do not delete"; Break}
		2419200		{$ServerInfoRetain = "4 weeks"; Break}
		4838400		{$ServerInfoRetain = "8 weeks"; Break}
		7257600		{$ServerInfoRetain = "12 weeks"; Break}
		15724800	{$ServerInfoRetain = "26 weeks"; Break}
		31449600	{$ServerInfoRetain = "52 weeks"; Break}
		Default		{$ServerInfoRetain = "Unable to determine Server retain info for: $($RASReportingSettings.TrackServerTime)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "RAS Reporting configuration"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     Enable RAS Reporting"; Value = $RASReportingSettings.Enabled.ToString(); }) > $Null
		If($RASReportingSettings.Enabled)
		{
			$ScriptInformation.Add(@{Data = '     Server'; Value = $RASReportingSettings.Server; }) > $Null
			$ScriptInformation.Add(@{Data = '     Port'; Value = $RASReportingSettings.Port.ToString(); }) > $Null
			If($RASReportingSettings.UseCredentials -eq $False)
			{
				$ScriptInformation.Add(@{Data = '     Prompt user for login details'; Value = ""; }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = '     Use the following credentials:'; Value = ""; }) > $Null
				$ScriptInformation.Add(@{Data = '     Username'; Value = $RASReportingSettings.Username; }) > $Null
			}

			$ScriptInformation.Add(@{Data = 'Session information'; Value = ""; }) > $Null
			$ScriptInformation.Add(@{Data = "     Enable Tracking"; Value = $RASReportingSettings.TrackSessions.ToString(); }) > $Null
			If($RASReportingSettings.TrackSessions)
			{
				$ScriptInformation.Add(@{Data = "     Retain information for"; Value = $SessionInfoRetain; }) > $Null
			}

			$ScriptInformation.Add(@{Data = "Server counters information"; Value = ""; }) > $Null
			$ScriptInformation.Add(@{Data = "     Enable Tracking"; Value = $RASReportingSettings.TrackServers.ToString() ; }) > $Null
			If($RASReportingSettings.TrackServers)
			{
				$ScriptInformation.Add(@{Data = "     Retain information for"; Value = $ServerInfoRetain; }) > $Null
				$ScriptInformation.Add(@{Data = "     Track CPU counter when change is more than"; Value = "$($RASReportingSettings.DeltaCpu) %"; }) > $Null
				$ScriptInformation.Add(@{Data = "     Track Memory counter when change is more than"; Value = "$($RASReportingSettings.DeltaMemory) %"; }) > $Null
			}

			$ScriptInformation.Add(@{Data = "Custom reports"; Value = ""; }) > $Null
			$ScriptInformation.Add(@{Data = "     Enable custom reports"; Value = $RASReportingSettings.EnableCustomReports.ToString() ; }) > $Null
			If($RASReportingSettings.EnableCustomReports)
			{
				$ScriptInformation.Add(@{Data = "     Folder name"; Value = $RASReportingSettings.FolderName; }) > $Null
			}
		}

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 2 "RAS Reporting configuration" 
		Line 3 "Enable RAS Reporting`t`t`t`t: " $RASReportingSettings.Enabled.ToString()
		If($RASReportingSettings.Enabled)
		{
			Line 3 "Server`t`t`t`t`t`t: " $RASReportingSettings.Server
			Line 3 "Port`t`t`t`t`t`t: " $RASReportingSettings.Port.ToString()
			If($RASReportingSettings.UseCredentials -eq $False)
			{
				Line 3 "Prompt user for login details"
			}
			Else
			{
				Line 3 "Use the following credentials:"
				Line 3 "Username`t`t`t`t`t: " $RASReportingSettings.Username
			}

			Line 2 "Session information" 
			Line 3 "Enable Tracking`t`t`t`t`t: " $RASReportingSettings.TrackSessions.ToString()
			If($RASReportingSettings.TrackSessions)
			{
				Line 3 "Retain information for`t`t`t`t: " $SessionInfoRetain
			}

			Line 2 "Server counters information" 
			Line 3 "Enable Tracking`t`t`t`t`t: " $RASReportingSettings.TrackServers.ToString()
			If($RASReportingSettings.TrackServers)
			{
				Line 3 "Retain information for`t`t`t`t: " $ServerInfoRetain
				Line 3 "Track CPU counter when change is more than`t: " "$($RASReportingSettings.DeltaCpu) %"
				Line 3 "Track Memory counter when change is more than`t: " "$($RASReportingSettings.DeltaMemory) %"
			}

			Line 2 "Custom reports"
			Line 3 "Enable custom reports`t`t`t`t: " $RASReportingSettings.EnableCustomReports.ToString()
			If($RASReportingSettings.EnableCustomReports)
			{
				Line 3 "Folder name`t`t`t`t`t: " $RASReportingSettings.FolderName
			}
		}
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("RAS Reporting configuration",($Script:htmlsb),"",$htmlwhite)
		$rowdata += @(,("     Enable RAS Reporting",($Script:htmlsb),$RASReportingSettings.Enabled.ToString(),$htmlwhite))
		If($RASReportingSettings.Enabled)
		{
			$rowdata += @(,("     Server",($Script:htmlsb),$RASReportingSettings.Server,$htmlwhite))
			$rowdata += @(,("     Port",($Script:htmlsb),$RASReportingSettings.Port.ToString(),$htmlwhite))
			If($RASReportingSettings.UseCredentials -eq $False)
			{
				$rowdata += @(,("     Prompt user for login details",($Script:htmlsb),"",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("     Use the following credentials:",($Script:htmlsb),"",$htmlwhite))
				$rowdata += @(,("     Username",($Script:htmlsb),$RASReportingSettings.Username,$htmlwhite))
			}

			$rowdata += @(,("Session information",($Script:htmlsb),"",$htmlwhite))
			$rowdata += @(,("     Enable Tracking",($Script:htmlsb), $RASReportingSettings.TrackSessions.ToString(),$htmlwhite))
			If($RASReportingSettings.TrackSessions)
			{
				$rowdata += @(,("     Retain information for",($Script:htmlsb), $SessionInfoRetain,$htmlwhite))
			}

			$rowdata += @(,("Server counters information",($Script:htmlsb),"",$htmlwhite))
			$rowdata += @(,("     Enable Tracking",($Script:htmlsb),$RASReportingSettings.TrackServers.ToString(),$htmlwhite))
			If($RASReportingSettings.TrackServers)
			{
				$rowdata += @(,("     Retain information for",($Script:htmlsb),$ServerInfoRetain,$htmlwhite))
				$rowdata += @(,("     Track CPU counter when change is more than",($Script:htmlsb),"$($RASReportingSettings.DeltaCpu) %",$htmlwhite))
				$rowdata += @(,("     Track Memory counter when change is more than",($Script:htmlsb),"$($RASReportingSettings.DeltaMemory) %",$htmlwhite))
			}

			$rowdata += @(,("Custom reports",($Script:htmlsb),"",$htmlwhite))
			$rowdata += @(,("     Enable custom reports",($Script:htmlsb),$RASReportingSettings.EnableCustomReports.ToString(),$htmlwhite))
			If($RASReportingSettings.EnableCustomReports)
			{
				$rowdata += @(,("     Folder name",($Script:htmlsb),$RASReportingSettings.FolderName,$htmlwhite))
			}
		}

		$msg = ""
		$columnWidths = @("300","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputRASPerformanceMonitorSettings
{
	Param([object] $RASPerformanceMonitorSettings)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput RAS Performance Monitor configuration"
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "RAS Performance Monitor configuration"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     Enable RAS Performance Monitor"; Value = $RASPerformanceMonitorSettings.Enabled.ToString(); }) > $Null
		If($RASPerformanceMonitorSettings.Enabled)
		{
			$ScriptInformation.Add(@{Data = '     Server'; Value = $RASPerformanceMonitorSettings.Server; }) > $Null
			$ScriptInformation.Add(@{Data = '     Port'; Value = $RASPerformanceMonitorSettings.Port.ToString(); }) > $Null
		}

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 2 "RAS Performance Monitor configuration"
		Line 3 "Enable RAS Performance Monitor`t`t`t: " $RASPerformanceMonitorSettings.Enabled.ToString()
		If($RASPerformanceMonitorSettings.Enabled)
		{
			Line 3 "Server`t`t`t`t`t``t: " $RASPerformanceMonitorSettings.Server
			Line 3 "Port`t`t`t`t`t``t: " $RASPerformanceMonitorSettings.Port.ToString()
		}
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("RAS Performance Monitor configuration",($Script:htmlsb),"",$htmlwhite)
		$rowdata += @(,("     Enable RAS Performance Monitor",($Script:htmlsb),$RASPerformanceMonitorSettings.Enabled.ToString(),$htmlwhite))
		If($RASPerformanceMonitorSettings.Enabled)
		{
			$rowdata += @(,("     Server",($Script:htmlsb),$RASPerformanceMonitorSettings.Server,$htmlwhite))
			$rowdata += @(,("     Port",($Script:htmlsb),$RASPerformanceMonitorSettings.Port.ToString(),$htmlwhite))
		}

		$msg = ""
		$columnWidths = @("300","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}

Function OutputRASNotifications
{
	Param([object] $RASNotificationHandlers)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Notifications"
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Notifications"
		WriteWordLine 4 0 "Notification handlers"
	}
	If($Text)
	{
		Line 1 "Notifications"
		Line 2 "Notification handlers"
	}
	If($HTML)
	{
		WriteHTMLLine 3 0 "Notifications"
		WriteHTMLLine 4 0 "Notification handlers"
	}
	
	ForEach($RASNotificationHandler in $RASNotificationHandlers)
	{
		If($RASNotificationHandler.HasThreshold)
		{
			Switch ($RASNotificationHandler.Direction)
			{
				"LowersBelow"	{$RASNotificationHandlerDirection = "Decreases below"; Break}
				"RisesAbove"	{$RASNotificationHandlerDirection = "Rises above"; Break}
				Default			{$RASNotificationHandlerDirection = "Unable to determine notification direction: $($RASNotificationHandler.Direction)"; Break}
			}
		}
		Else
		{
			$RASNotificationHandlerDirection = ""
		}
		
		Switch ($RASNotificationHandler.Type)
		{
			#listed in the order they appear in the console
			"CPUEvent"						{$RASNotificationText = "CPU utilization $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold) %"; Break}
			"MemoryEvent"					{$RASNotificationText = "Memory utilization $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold) %"; Break}
			"ConnectedSessionEvent"			{$RASNotificationText = "Number of RDSH sessions $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold)"; Break}
			"DisconnectSessionEvent"		{$RASNotificationText = "Number of disconnected RDSH sessions $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold)"; Break}
			"RDSHConnectSessionEvent"		{$RASNotificationText = "RDSH active sessions utilization $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold) %"; Break}
			"RDSHDisconnectSessionEvent"	{$RASNotificationText = "RDSH disconnected sessions utilization $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold)"; Break}
			"34660353"						{$RASNotificationText = "AVD active sessions utilization $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold) %"; Break}
			"34660354"						{$RASNotificationText = "AVD disconnected sessions utilization $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold)"; Break}
			"TunneledSess"					{$RASNotificationText = "Number of Secure Gateway tunnelled sessions $RASNotificationHandlerDirection $($RASNotificationHandler.Threshold)"; Break}
			"GW"							{$RASNotificationText = "Failed Secure Gateway tunnelled sessions"; Break}
			"1097729"						{$RASNotificationText = "Failed Secure Gateway tunnelled sessions"; Break}
			"Agent"							{$RASNotificationText = "RAS Agents events"; Break}
			"License"						{$RASNotificationText = "Licensing events"; Break}
			"Authentication"				{$RASNotificationText = "Authentication server events"; Break}
			"PubItem"						{$RASNotificationText = "Published items events"; Break}
			"VDI"							{$RASNotificationText = "Template events"; Break}
			"45056"							{$RASNotificationText = "Tenants events"; Break}
			"Unknown"						{$RASNotificationText = "Unknown"; Break}
			Default							{$RASNotificationText = "Unable to determine event type: $($RASNotificationHandler.Type)"; Break}
		}
		
		$GracePeriod           = ($RASNotificationHandler.GracePeriod.ToString())
		$NotificationsInterval = ($RASNotificationHandler.Interval.ToString())
		
		If($MSWord -or $PDF)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Events"; Value = $RASNotificationText; }) > $Null
			$ScriptInformation.Add(@{Data = 'Enabled'; Value = $RASNotificationHandler.Enabled.ToString(); }) > $Null
			If($RASNotificationHandler.Enabled)
			{
				$ScriptInformation.Add(@{Data = 'Send email to RAS administrators'; Value = $RASNotificationHandler.SendEmail; }) > $Null
				
				If($RASNotificationHandler.Recipients -eq "")
				{
					$ScriptInformation.Add(@{Data = 'Handler'; Value = ""; }) > $Null
				}
				Else
				{
					$tmpArray = $RASNotificationHandler.Recipients.Split(",").Split(";")
					
					$cnt = -1
					ForEach($item in $tmpArray)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$ScriptInformation.Add(@{Data = 'Handler'; Value = $item; }) > $Null
						}
						Else
						{
							$ScriptInformation.Add(@{Data = ''; Value = $item; }) > $Null
						}
					}
					$tmpArray = $Null
				}
				$ScriptInformation.Add(@{Data = 'Execute a notification script'; Value = $RASNotificationHandler.ExecuteScript; }) > $Null
				
				If($RASNotificationHandler.ExecuteScript)
				{
					$results = Get-RASNotificationScript -id $RASNotificationHandler.ScriptId -EA 0 4>$Null
					
					If(!($?))
					{
						$ScriptName = "Unable to retrieve script name"
					}
					Else
					{
						$ScriptName = $results.Name
					}
					
					$ScriptInformation.Add(@{Data = ''; Value = $ScriptName; }) > $Null
					$ScriptName = $Null
				}

				$ScriptInformation.Add(@{Data = 'Notification handler grace period'; Value = "$GracePeriod minutes"; }) > $Null
				If($RASNotificationHandler.EnableInterval)
				{
					$ScriptInformation.Add(@{Data = 'Notifications interval'; Value = "$NotificationsInterval minutes"; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = 'Send one notification and suspend further notifications until recovered'; Value = ""; }) > $Null
				}
			}

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 3 "Events`t`t`t`t`t: " $RASNotificationText
			Line 3 "Enabled`t`t`t`t`t: " $RASNotificationHandler.Enabled.ToString()
			If($RASNotificationHandler.Enabled)
			{
				Line 3 "Send email to RAS administrators`t: " $RASNotificationHandler.SendEmail
				
				If($RASNotificationHandler.Recipients -eq "")
				{
					Line 3 "Handler`t`t`t`t`t: " ""
				}
				Else
				{
					$tmpArray = $RASNotificationHandler.Recipients.Split(",").Split(";")
					
					$cnt = -1
					ForEach($item in $tmpArray)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							Line 3 "Handler`t`t`t`t`t: " $item
						}
						Else
						{
							Line 8 '  ' $item
						}
					}
					$tmpArray = $Null
				}
				Line 3 "Execute a notification script`t`t: " $RASNotificationHandler.ExecuteScript
				
				If($RASNotificationHandler.ExecuteScript)
				{
					$results = Get-RASNotificationScript -id $RASNotificationHandler.ScriptId -EA 0 4>$Null
					
					If(!($?))
					{
						$ScriptName = "Unable to retrieve script name"
					}
					Else
					{
						$ScriptName = $results.Name
					}
					
					Line 8 '  ' $ScriptName
					$ScriptName = $Null
				}

				Line 3 "Notification handler grace period`t: " "$GracePeriod minutes"
				If($RASNotificationHandler.EnableInterval)
				{
					Line 3 "Notifications interval`t`t`t: " "$NotificationsInterval minutes"
				}
				Else
				{
					Line 3 'Send one notification and suspend further notifications until recovered'
				}
			}
			Line 0 ""
		}
		If($HTML)
		{
			$rowdata = @()
			$columnHeaders = @("Events",($Script:htmlsb),$RASNotificationText,$htmlwhite)
			$rowdata += @(,("Enabled",($Script:htmlsb),$RASNotificationHandler.Enabled.ToString(),$htmlwhite))
			If($RASNotificationHandler.Enabled)
			{
				$rowdata += @(,("Send email to RAS administrators",($Script:htmlsb),$RASNotificationHandler.SendEmail.ToString(),$htmlwhite))
				
				If($RASNotificationHandler.Recipients -eq "")
				{
					$rowdata += @(,("Handler",($Script:htmlsb),"",$htmlwhite))
				}
				Else
				{
					$tmpArray = $RASNotificationHandler.Recipients.Split(",").Split(";")
					
					$cnt = -1
					ForEach($item in $tmpArray)
					{
						$cnt++
						
						If($cnt -eq 0)
						{
							$rowdata += @(,("Handler",($Script:htmlsb),$item,$htmlwhite))
						}
						Else
						{
							$rowdata += @(,("",($Script:htmlsb),$item,$htmlwhite))
						}
					}
					$tmpArray = $Null
				}
				$rowdata += @(,("Execute a notification script",($Script:htmlsb),$RASNotificationHandler.ExecuteScript.ToString(),$htmlwhite))
				
				If($RASNotificationHandler.ExecuteScript)
				{
					$results = Get-RASNotificationScript -id $RASNotificationHandler.ScriptId -EA 0 4>$Null
					
					If(!($?))
					{
						$ScriptName = "Unable to retrieve script name"
					}
					Else
					{
						$ScriptName = $results.Name
					}
					
					$rowdata += @(,("",($Script:htmlsb),$ScriptName,$htmlwhite))
					$ScriptName = $Null
				}

				$rowdata += @(,( "Notification handler grace period",($Script:htmlsb),"$GracePeriod minutes",$htmlwhite))
				If($RASNotificationHandler.EnableInterval)
				{
					$rowdata += @(,("Notifications interval",($Script:htmlsb),"$NotificationsInterval minutes",$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("Send one notification and suspend further notifications until recovered",($Script:htmlsb),"",$htmlwhite))
				}
			}

			$msg = ""
			$columnWidths = @("250","225")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
	}
}

Function OutputRASNotificationScripts
{
	Param([object] $RASNotificationScripts)
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Notification scripts"
	}
	If($Text)
	{
		Line 2 "Notification scripts"
	}
	If($HTML)
	{
		WriteHTMLLine 4 0 "Notification scripts"
	}
	
	ForEach($RASNotificationScript in $RASNotificationScripts)
	{
		If($MSWord -or $PDF)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Script name"; Value = $RASNotificationScript.Name; }) > $Null
			$ScriptInformation.Add(@{Data = 'Command'; Value = $RASNotificationScript.Command; }) > $Null
			$ScriptInformation.Add(@{Data = 'Arguments'; Value = $RASNotificationScript.Arguments; }) > $Null
			$ScriptInformation.Add(@{Data = 'Initial directory'; Value = $RASNotificationScript.InitialDirectory; }) > $Null
			$ScriptInformation.Add(@{Data = 'User name'; Value = $RASNotificationScript.Username; }) > $Null

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 3 "Script name`t`t`t: " $RASNotificationScript.Name
			Line 3 "Command`t`t`t`t: " $RASNotificationScript.Command
			Line 3 "Arguments`t`t`t: " $RASNotificationScript.Arguments
			Line 3 "Initial directory`t`t: " $RASNotificationScript.InitialDirectory
			Line 3 "User name`t`t`t: " $RASNotificationScript.Username
			Line 0 ""
		}
		If($HTML)
		{
			$rowdata = @()
			$columnHeaders = @("Script name",($Script:htmlsb),$RASNotificationScript.Name,$htmlwhite)
			$rowdata += @(,("Command",($Script:htmlsb),$RASNotificationScript.Command,$htmlwhite))
			$rowdata += @(,("Arguments",($Script:htmlsb),$RASNotificationScript.Arguments,$htmlwhite))
			$rowdata += @(,("Initial directory",($Script:htmlsb),$RASNotificationScript.InitialDirectory,$htmlwhite))
			$rowdata += @(,("User name",($Script:htmlsb),$RASNotificationScript.Username,$htmlwhite))

			$msg = ""
			$columnWidths = @("250","225")
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
			WriteHTMLLine 0 0 ""
		}
	}
}

Function OutputRASClientSettings
{
	Param([object] $RASClientSettings)

	<#
	ExcludeDirectRDP         :
	ExcludeDirectRDPForVDI   :
	SendHDIcons              : True
	ReplicateSendHDIcons     : True
	EnableOverlayIcons       : True
	ShowPasswordExpiry       : False
	TokenValidationExpireMin : 60
	#>

	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Client settings"
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Published application icons"; Value = ""; }) > $Null
		If($RASClientSettings.SendHDIcons)
		{
			$ScriptInformation.Add(@{Data = "     Resolution"; Value = "High resolution icons (uses more network bandwidth)"; }) > $Null
		}
		Else
		{
			$ScriptInformation.Add(@{Data = "     Resolution"; Value = "Standard resolution icons"; }) > $Null
		}
		$ScriptInformation.Add(@{Data = "     Overlay:"; Value = $RASClientSettings.EnableOverlayIcons.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = "Password notifications"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "     Show password expiration reminder"; Value = $RASClientSettings.ShowPasswordExpiry.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = "Settings are replicated to all Sites"; Value = $RASClientSettings.ReplicateSendHDIcons.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null

		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 2 "Client settings"
		Line 3 "Published application icons"
		If($RASClientSettings.SendHDIcons)
		{
			Line 4 "Resolution`t: " "High resolution (uses more network bandwidth)"
		}
		Else
		{
			Line 4 "Resolution`t: " "Standard resolution"
		}
		Line 4 "Overlay`t`t: " $RASClientSettings.EnableOverlayIcons.ToString()
		LIne 3 "Password notifications"
		Line 4 "Show password expiration reminder: " $RASClientSettings.ShowPasswordExpiry.ToString()
		Line 3 "Settings are replicated to all Sites`t : " $RASClientSettings.ReplicateSendHDIcons.ToString()
		Line 0 ""
	}
	If($HTML)
	{
		WriteHTMLLine 3 0 "Client settings"
		$rowdata = @()
		$columnHeaders = @("Published application icons",($Script:htmlsb),"S",$htmlwhite)
		If($RASClientSettings.SendHDIcons)
		{
			$rowdata += @(,("     Resolution:",($Script:htmlsb),"High resolution (uses more network bandwidth)",$htmlwhite))
		}
		Else
		{
			$rowdata += @(,("     Resolution:",($Script:htmlsb),"Standard resolution",$htmlwhite))
		}
		$rowdata += @(,("     Overlay:",($Script:htmlsb),$RASClientSettings.EnableOverlayIcons.ToString(),$htmlwhite))
		$rowdata += @(,("Password notifications",($Script:htmlsb),"",$htmlwhite))
		$rowdata += @(,("     Show password expiration reminder",($Script:htmlsb),$RASClientSettings.ShowPasswordExpiry.ToString(),$htmlwhite))
		$rowdata += @(,("Settings are replicated to all Sites",($Script:htmlsb),$RASClientSettings.ReplicateSendHDIcons.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("250","225")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths

		WriteHTMLLine 0 0 ""
	}

}
#endregion

#region process licensing
Function ProcessLicensing
{
	Write-Verbose "$(Get-Date -Format G): Processing Licensing"

	$results = Get-RASLicenseDetails -EA 0 4>$Null
	
	If(!($?))
	{
		Write-Warning "
		`n
		Unable to retrieve licensing information
		"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "Unable to retrieve licensing information"
		}
		If($Text)
		{
			Line 0 "Unable to retrieve licensing information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "Unable to retrieve licensing information"
		}
	}
	ElseIf($? -and $null -eq $results)
	{
		Write-Warning "No licensing information was found"
		If($MSWord -or $PDF)
		{
			WriteWordLine 0 0 "No licensing information was found"
		}
		If($Text)
		{
			Line 0 "No licensing information was found"
		}
		If($HTML)
		{
			WriteHTMLLine 0 0 "No licensing information was found"
		}
	}
	Else
	{
		OutputRASLicense $results
	}
}

Function OutputRASLicense
{
	Param([object] $RASLicense)
	
	Write-Verbose "$(Get-Date -Format G): `tOutput RAS License"

	If($MSWord -or $PDF)
	{
		$Script:Selection.InsertNewPage()
		WriteWordLine 1 0 "License details"
		$ScriptInformation = New-Object System.Collections.ArrayList
	}
	If($Text)
	{
		Line 0 "License details"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "License details"
		$rowdata = @()
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation.Add(@{Data = "License Type"; Value = $RASLicense.LicenseType; }) > $Null
		If(ValidObject $RASLicense LicenseKey)
		{
			$ScriptInformation.Add(@{Data = "License Key"; Value = $RASLicense.LicenseKey; }) > $Null
		}
		$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
		If(ValidObject $RASLicense SupportExpireDate)
		{
			$ScriptInformation.Add(@{Data = "Support Expiration Date"; Value = $RASLicense.SupportExpireDate; }) > $Null
		}
		If(ValidObject $RASLicense ExpiryDate)
		{
			$ScriptInformation.Add(@{Data = "Expiration Date"; Value = $RASLicense.ExpiryDate; }) > $Null
		}
		If(ValidObject $RASLicense LicenseFirstActive)
		{
			$ScriptInformation.Add(@{Data = "First Activation"; Value = $RASLicense.LicenseFirstActive; }) > $Null
		}
		$ScriptInformation.Add(@{Data = 'Maximum allowed concurrent users'; Value = $RASLicense.InstalledUsers; }) > $Null
		$ScriptInformation.Add(@{Data = 'Peak Users'; Value = $RASLicense.UsersPeak; }) > $Null
		$ScriptInformation.Add(@{Data = 'Concurrent Users'; Value = $RASLicense.UsersLicenseInfo; }) > $Null
		$ScriptInformation.Add(@{Data = ""; Value = ""; }) > $Null
		If(ValidObject $RASLicense PAUserEmail)
		{
			$ScriptInformation.Add(@{Data = 'Parallels Account user email'; Value = $RASLicense.PAUserEmail; }) > $Null
		}
		If(ValidObject $RASLicense PAUserName)
		{
			$ScriptInformation.Add(@{Data = 'Parallels Account user name'; Value = $RASLicense.PAUserName; }) > $Null
		}
		If(ValidObject $RASLicense PACompanyName)
		{
			$ScriptInformation.Add(@{Data = 'Parallels Account company'; Value = $RASLicense.PACompanyName; }) > $Null
		}

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 10 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 1 "License Type`t`t`t: " $RASLicense.LicenseType
		If(ValidObject $RASLicense LicenseKey)
		{
			Line 1 "License Key`t`t`t: " $RASLicense.LicenseKey
		}
		Line 0 ""
		If(ValidObject $RASLicense SupportExpireDate)
		{
			Line 1 "Support Expiration Date`t`t: " $RASLicense.SupportExpireDate
		}
		If(ValidObject $RASLicense ExpiryDate)
		{
			Line 1 "Expiration Date`t`t`t: " $RASLicense.ExpiryDate
		}
		If(ValidObject $RASLicense LicenseFirstActive)
		{
			Line 1 "First Activation`t`t: " $RASLicense.LicenseFirstActive
		}
		Line 1 "Maximum allowed concurrent users: " $RASLicense.InstalledUsers
		Line 1 "Peak Users`t`t`t: " $RASLicense.UsersPeak
		Line 1 "Concurrent Users`t`t: " $RASLicense.UsersLicenseInfo
		Line 0 ""
		If(ValidObject $RASLicense PAUserEmail)
		{
			Line 1 "Parallels Account user email`t: " $RASLicense.PAUserEmail
		}
		If(ValidObject $RASLicense PAUserName)
		{
			Line 1 "Parallels Account user name`t: " $RASLicense.PAUserName
		}
		If(ValidObject $RASLicense PACompanyName)
		{
			Line 1 "Parallels Account company`t: " $RASLicense.PACompanyName
		}
		Line 0 ""
	}
	If($HTML)
	{
		$columnHeaders = @("License Type",($Script:htmlsb),$RASLicense.LicenseType,$htmlwhite)
		If(ValidObject $RASLicense LicenseKey)
		{
			$rowdata += @(,("License Key",($Script:htmlsb),$RASLicense.LicenseKey,$htmlwhite))
		}
		$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
		If(ValidObject $RASLicense SupportExpireDate)
		{
			$rowdata += @(,("Support Expiration Date",($Script:htmlsb),$RASLicense.SupportExpireDate,$htmlwhite))
		}
		$rowdata += @(,("Expiration Date",($Script:htmlsb),$RASLicense.ExpiryDate,$htmlwhite))
		If(ValidObject $RASLicense ExpiryDate)
		{
			$rowdata += @(,("Expiration Date",($Script:htmlsb),$RASLicense.ExpiryDate,$htmlwhite))
		}
		If(ValidObject $RASLicense LicenseFirstActive)
		{
			$rowdata += @(,("First Activation",($Script:htmlsb),$RASLicense.LicenseFirstActive,$htmlwhite))
		}
		$rowdata += @(,("Maximum allowed concurrent users",($Script:htmlsb),$RASLicense.InstalledUsers,$htmlwhite))
		$rowdata += @(,("Peak Users",($Script:htmlsb),$RASLicense.UsersPeak,$htmlwhite))
		$rowdata += @(,("Concurrent Users",($Script:htmlsb),$RASLicense.UsersLicenseInfo,$htmlwhite))
		$rowdata += @(,("",($Script:htmlsb),"",$htmlwhite))
		If(ValidObject $RASLicense PAUserEmail)
		{
			$rowdata += @(,("Parallels Account user email",($Script:htmlsb),$RASLicense.PAUserEmail,$htmlwhite))
		}
		If(ValidObject $RASLicense PAUserName)
		{
			$rowdata += @(,("Parallels Account user name",($Script:htmlsb),$RASLicense.PAUserName,$htmlwhite))
		}
		If(ValidObject $RASLicense PACompanyName)
		{
			$rowdata += @(,("Parallels Account company",($Script:htmlsb),$RASLicense.PACompanyName,$htmlwhite))
		}

		$msg = ""
		$columnWidths = @("200","175")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
		WriteHTMLLine 0 0 ""
	}
}
#endregion

#region script core
#Script begins

ProcessScriptSetup

ProcessFarm

SetFilenames "Parallels_RAS_$Script:RASFarmName"

OutputFarm

GetFarmSites

$OnlyOneTIme = $True
ForEach($Site in $Script:Sites)
{
	If($OnlyOneTIme)
	{
		OutputFarmSite $Site
		
		$OnlyOneTime = $False
	}

	OutputSite $Site

	ProcessLoadBalancing $Site

	ProcessPublishing $Site

	ProcessUniversalPrinting $Site

	ProcessUniversalScanning $Site

	ProcessConnection $Site
}

ProcessPolicies

ProcessAdministration

ProcessLicensing

#endregion

#region finish script
Write-Verbose "$(Get-Date -Format G): Finishing up document"
#end of document processing

If(($MSWORD -or $PDF) -and ($Script:CoverPagesExist))
{
	$AbstractTitle = "Parallels RAS Inventory Report"
	$SubjectTitle = "Parallels RAS Inventory Report"
	UpdateDocumentProperties $AbstractTitle $SubjectTitle
}

If($ReportFooter)
{
	OutputReportFooter
}

ProcessDocumentOutput "Regular"

ProcessScriptEnd
#endregion
